{"root":"0:0:2009","crate_version":"1.4.0","includes_private":false,"index":{"1:13283:30049":{"id":"1:13283:30049","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12334:471","self::pattern":"1:12873:3532"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12899:3547","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13313:28423":{"id":"1:13313:28423","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:992:36580"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13213:21536":{"id":"1:13213:21536","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43862:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13183":{"id":"1:13183","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13184:996","1:13185:2505","1:13186:30032","1:13187:30033","1:13189:30034","1:13192:27165","1:13193:30035","1:13194:336","1:13195:27231","1:13196:2014","1:13198:25499","1:13200:25500","1:13202:25501","1:13204:30036","1:13205:30037","1:13206:27250","1:13207:27251","1:13208:27254","1:13209:27255","1:13211:23255","1:13212:23767","1:13213:21536","1:13214:23266","1:13215:23280","1:13216:29116","1:13217:30038","1:13218:23257","1:13219:24213","1:13222:27267","1:13225:27268","1:13228:2546","1:13232:2504","1:13236:27256","1:13239:23242","1:13242:27259","1:13245:30039","1:13248:30040","1:13251:27261","1:13254:27263","1:13257:27265","1:13260:27266","1:13263:2220","1:13266:30041","1:13269:30042","1:13272:30043","1:13275:30044","1:13277:30045","1:13279:30046","1:13281:30047","1:13282:30048","1:13283:30049","1:13286:30050","1:13289:26391","1:13292:27269","1:13295:30051","1:13298:30052","1:13301:30053","1:13304:30054","1:13306:26469","1:13307:28418","1:13308:26473","1:13309:26474","1:13310:26475","1:13311:28421","1:13312:28422","1:13313:28423","1:13314:30055","1:13316:3292","1:13317:30056"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13215:23280":{"id":"1:13215:23280","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13214:23266"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44159:3570","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2009":{"id":"0:0:2009","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:2015","0:31:2016","0:28:2009"],"is_stripped":false}}},"1:13193:30035":{"id":"1:13193:30035","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13257:27265":{"id":"1:13257:27265","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13281:30047":{"id":"1:13281:30047","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13189:30034":{"id":"1:13189:30034","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13187:30033"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13219:24213":{"id":"1:13219:24213","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12334:471","self::pattern":"1:12873:3532"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13239:23242":{"id":"1:13239:23242","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12334:471","self::pattern":"1:12873:3532"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12688:3499","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13217:30038":{"id":"1:13217:30038","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44140:3562","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13242:27259":{"id":"1:13242:27259","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12873:3532","`DoubleEndedIterator`":"1:8256:129","prim@char":"4:12334:471","str::split":"1:13236:27256"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43894:3490","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:3548","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13260:27266":{"id":"1:13260:27266","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:3548","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13206:27250":{"id":"1:13206:27250","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13208:27254","str::split_at_mut":"1:13207:27251"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13225:27268":{"id":"1:13225:27268","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12334:471","self::pattern":"1:12873:3532"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:3548","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13266:30041":{"id":"1:13266:30041","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12873:3532","`DoubleEndedIterator`":"1:8256:129","prim@char":"4:12334:471","str::matches":"1:13263:2220"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44098:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:3548","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13308:26473":{"id":"1:13308:26473","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13187:30033":{"id":"1:13187:30033","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13209:27255":{"id":"1:13209:27255","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13208:27254"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13312:28422":{"id":"1:13312:28422","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:992:36580"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13307:28418":{"id":"1:13307:28418","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39885:3262","Self::is_ascii":"1:13306:26469"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39885:3262","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13295:30051":{"id":"1:13295:30051","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12334:471","self::pattern":"1:12873:3532"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:3548","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13195:27231":{"id":"1:13195:27231","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12353:1850"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13218:23257":{"id":"1:13218:23257","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44168:3569","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13277:30045":{"id":"1:13277:30045","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13186:30032":{"id":"1:13186:30032","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13196:2014":{"id":"1:13196:2014","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41986:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5629:30756":{"id":"5:5629:30756","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:304:2320","`String`":"5:7641:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2320","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13310:26475":{"id":"1:13310:26475","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13200:25500":{"id":"1:13200:25500","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13222:27267":{"id":"1:13222:27267","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"4:12334:471","self::pattern":"1:12873:3532"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13185:2505":{"id":"1:13185:2505","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13298:30052":{"id":"1:13298:30052","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12334:471","self::pattern":"1:12873:3532"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13228:2546":{"id":"1:13228:2546","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41986:191","prim@char":"4:12334:471","self::pattern":"1:12873:3532"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13236:27256":{"id":"1:13236:27256","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12873:3532","`DoubleEndedIterator`":"1:8256:129","prim@char":"4:12334:471","str::split_whitespace":"1:13214:23266","str::rsplit":"1:13242:27259"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43876:3486","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13184:996":{"id":"1:13184:996","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12334:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13207:27251":{"id":"1:13207:27251","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13206:27250","str::split_at_mut_checked":"1:13209:27255"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13279:30046":{"id":"1:13279:30046","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13314:30055":{"id":"1:13314:30055","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4944:30055"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44175:3314","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13198:25499":{"id":"1:13198:25499","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41986:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13214:23266":{"id":"1:13214:23266","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13215:23280"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44150:3561","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13216:29116":{"id":"1:13216:29116","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44130:3560","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13208:27254":{"id":"1:13208:27254","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13209:27255"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13204:30036":{"id":"1:13204:30036","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12340:1720","str::slice_mut_unchecked":"1:13205:30037","crate::ops::Index":"1:39530:2413"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5632:26472":{"id":"5:5632:26472","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13310:26475"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13286:30050":{"id":"1:13286:30050","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12334:471","self::pattern":"1:12873:3532"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13317:30056":{"id":"1:13317:30056","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4942:30056"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44193:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5612":{"id":"5:5612","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5613:30752","5:5614:3213","5:5617:30753","5:5620:30754","5:5628:30755","5:5629:30756","5:5630:3369","5:5631:26471","5:5632:26472"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:28:2009":{"id":"0:28:2009","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"1:13306:26469":{"id":"1:13306:26469","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5631:26471":{"id":"5:5631:26471","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13309:26474"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5613:30752":{"id":"5:5613:30752","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2320","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:304:2320","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13211:23255":{"id":"1:13211:23255","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12334:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43846:3559","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13263:2220":{"id":"1:13263:2220","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12873:3532","`DoubleEndedIterator`":"1:8256:129","prim@char":"4:12334:471","str::rmatches":"1:13266:30041"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44080:3565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13245:30039":{"id":"1:13245:30039","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12873:3532","str::split":"1:13236:27256","prim@char":"4:12334:471","`DoubleEndedIterator`":"1:8256:129","str::rsplit_terminator":"1:13248:30040"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43926:3564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:2016":{"id":"0:31:2016","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:2015","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13309:26474":{"id":"1:13309:26474","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13316:3292":{"id":"1:13316:3292","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4945:3292"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44184:3293","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13205:30037":{"id":"1:13205:30037","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12340:1720","crate::ops::IndexMut":"1:3415:2414","str::slice_unchecked":"1:13204:30036"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13194:336":{"id":"1:13194:336","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13195:27231","`u8`":"4:12353:1850"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5617:30753":{"id":"5:5617:30753","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13301:30053":{"id":"1:13301:30053","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12334:471","self::pattern":"1:12873:3532"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:3548","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13311:28421":{"id":"1:13311:28421","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:992:36580"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13289:26391":{"id":"1:13289:26391","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12334:471","self::pattern":"1:12873:3532"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13254:27263":{"id":"1:13254:27263","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12334:471","str::splitn":"1:13251:27261","self::pattern":"1:12873:3532"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43998:3484","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:3548","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5614:3213":{"id":"5:5614:3213","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13292:27269":{"id":"1:13292:27269","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12334:471","self::pattern":"1:12873:3532"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:3548","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5620:30754":{"id":"5:5620:30754","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5628:30755":{"id":"5:5628:30755","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13269:30042":{"id":"1:13269:30042","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12873:3532","`DoubleEndedIterator`":"1:8256:129","prim@char":"4:12334:471","str::rmatch_indices":"1:13272:30043"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44026:3567","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13272:30043":{"id":"1:13272:30043","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12873:3532","`DoubleEndedIterator`":"1:8256:129","prim@char":"4:12334:471","str::match_indices":"1:13269:30042"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44044:3568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:3548","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13202:25501":{"id":"1:13202:25501","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13282:30048":{"id":"1:13282:30048","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13212:23767":{"id":"1:13212:23767","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12334:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43852:3558","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:2015":{"id":"0:29:2015","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"1:13275:30044":{"id":"1:13275:30044","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13248:30040":{"id":"1:13248:30040","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12873:3532","str::split":"1:13236:27256","prim@char":"4:12334:471","str::split_terminator":"1:13245:30039"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43944:3563","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:3548","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5630:3369":{"id":"5:5630:3369","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13232:2504":{"id":"1:13232:2504","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41986:191","prim@char":"4:12334:471","self::pattern":"1:12873:3532"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:3548","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13192:27165":{"id":"1:13192:27165","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12420:3552"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13251:27261":{"id":"1:13251:27261","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12334:471","self::pattern":"1:12873:3532","str::rsplitn":"1:13254:27263"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43980:3488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13304:30054":{"id":"1:13304:30054","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12834:136","`FromStr`":"1:12833:3043"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42117:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12833:3043","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12833:3043","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"4:12333:1173":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"18:643:33657":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:43682:3482":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:8300:14023":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"4:6451:2945":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:8720:24719":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:11391:3488":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:538:9811":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:11715:17062":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:5376:13825":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"18:521:21436":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:9858:16917":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:11764:17066":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:15010:21168":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:10251:16924":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"4:1607:2509":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"18:598:33662":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:22548:3231":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"18:113:21415":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"4:5159:9268":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"6:6706:14563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"11:364:2888":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:6427:16768":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"4:8211:139":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:44614:3544":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:15734:21221":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:41890:23386":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:6758:15755":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:14372:20435":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:6460:14543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:4811:13766":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:47098:8663":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:5927:16750":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:4882:16475":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:2338:15811":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:2418:15815":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:5046:13791":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:46534:8702":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:6636:14555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"11:2536:32346":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"8:0:2244":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:2175:17042":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"4:1914:2940":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"1:39562:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:40654:3390":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:14463:20441":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:44800:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"4:3640:3325":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"6:6880:13679":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"4:4214:9206":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"4:8807:9289":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"17:11799:17114":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:13089:17215":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:2298:29893":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"4:9332:16801":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:8155:16834":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:3994:2509":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"4:1631:9048":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:15521:21208":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"4:888:2509":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:21710:9133":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"4:10220:23383":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:43050:3457":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"5:1505:2509":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"11:2369:15729":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:4377:24005":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"4:9410:235":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"4:10978:26744":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:11661:17030":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:13859:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:23087:23902":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:9964:24175":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:32207:3271":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"4:4478:9236":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"4:865:2916":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:4498:2348":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:6597:14551":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"11:687:2917":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:7754:3362":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:39662:2416":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"6:5477:13836":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:44130:3560":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"17:13674:20395":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:15342:21193":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:14912:21163":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"18:623:33673":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"4:373:9007":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:47061:8764":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:47274:8673":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:3036:31063":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:47144:8667":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"4:5644:113":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"4:2070:197":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:12353:17163":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"4:4916:9215":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"11:0:2247":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:45875:8693":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:13399:19899":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:2592:15823":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:8256:129":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:835:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"4:10987:26742":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:40303:3297":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:32218:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:46135:8689":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:11647:17059":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:5817:16745":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"11:1582:2904":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:40737:3395":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:6026:16753":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:33577:2395":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:7461:29793":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"4:11675:26097":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"15:394:15772":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:6621:14553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"4:2004:784":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"1:39692:2418":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:40:9066":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:2768:15831":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"4:3658:9131":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"1:43748:3382":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:9454:3546":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:40401:3293":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:32305:3165":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"17:12530:17177":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"16:5307:16716":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"4:938:9036":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"4:8182:9125":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"4:6396:26815":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"4:8523:3403":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"4:6708:2377":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"4:7983:9133":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"4:10910:26026":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"16:2374:15813":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:44622:3539":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:13235:19889":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:16069:21387":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:46393:8730":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:9916:16919":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"11:1883:2916":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:13535:3395":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"5:1351:2898":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:23164:23899":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"4:5579:9297":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"4:968:2892":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:41183:23269":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:47182:8669":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:40667:2963":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:44606:3545":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:4821:17181":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:13946:20407":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"4:4552:9228":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"4:3288:29468":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:42479:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:11313:16995":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:44893:180":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:0:2251":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:2888:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"11:1903:9046":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:8364:178":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:44308:3587":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:40645:3383":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:21581:21506":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:4651:2328":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:44590:3537":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"4:4397:9235":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"4:3056:226":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"4:3058:137":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"16:4468:16360":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:3259:29963":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"11:1917:9048":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:10818:16934":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:5686:16737":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:4083:2922":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"4:7397:27005":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:747:3046":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"4:4663:9239":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:43257:23995":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:11227:16963":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"5:5418:30008":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:597:16915":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:7537:14986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:39534:2415":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"5:3254:9047":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"4:8474:9181":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"17:11674:17060":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"4:10327:9081":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"16:5367:16734":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:6930:9389":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"4:11194:9305":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:44193:3313":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:7428:16803":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:4531:16377":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:10877:16935":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:11730:17063":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"4:12306:9019":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:12929:16944":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"4:10414:9309":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"17:16259:19898":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"6:6562:14550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:33510:2397":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"4:2535:2180":{"crate_id":4,"path":["std","io"],"kind":"module"},"14:160:15736":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:5415:32490":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:5995:16752":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:6698:14562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"11:1160:9045":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:7111:32741":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:2535:2909":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"4:12349:890":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"5:7445:2509":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:479:9804":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:15197:21180":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:11510:17000":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:3380:140":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:10920:9125":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:15376:21196":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:7497:16805":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"18:651:33657":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"4:9420:2375":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:10828:33639":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"18:689:21432":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:1365:9045":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:1628:10715":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"4:9324:26790":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:2882:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"10:44:15715":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"18:608:33674":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:14529:20446":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"11:2140:2898":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:14986:21167":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:1485:10700":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"4:10891:9263":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"0:29:2015":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"17:14177:20422":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:523:9809":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:3473:17081":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:40359:3319":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"4:9273:26765":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:44851:3634":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:7314:10659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"4:10931:26024":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:40824:3401":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:13485:19905":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:22467:9133":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"16:5769:16742":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:43029:137":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"17:13187:19887":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:14752:21157":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:12824:16939":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"4:4345:9234":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"4:5698:9301":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"17:11256:16992":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:9755:16886":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:32193:23963":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:6342:32862":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:40333:3320":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:39712:3288":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:43210:3468":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:5617:13849":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:22949:23420":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"4:5834:2945":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:3750:30008":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:5536:13842":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:1320:9043":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:5677:13857":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:39547:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"4:4972:9217":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:10905:16936":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:10439:16928":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:44451:3592":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:3132:117":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:41239:3376":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:2862:3002":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:2898:257":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:8170:3381":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:5914:32739":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"4:1069:9043":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"11:673:2916":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:10068:16901":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"4:4332:9233":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:8265:14018":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:42068:2483":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:8174:3380":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:15748:21222":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"4:12337:1313":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:41212:3370":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:1117:2158":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"17:261:32859":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:750:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:43822:3557":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:43450:3529":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"16:4771:16456":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"4:9546:2940":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"16:6335:16763":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:839:9050":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:1510:10704":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:44598:3542":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:12464:17168":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:10963:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:1536:9034":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"4:8172:9127":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"5:7591:3355":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:14325:20432":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"11:2443:2922":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"4:9446:9136":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"4:5506:128":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:4365:23996":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:5742:16740":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"4:3583:9130":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"18:531:21440":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:10323:3452":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"4:2713:25402":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:6466:16772":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"4:674:9014":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:15313:21190":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"4:8626:9230":{"crate_id":4,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"4:8483:2944":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"14:220:15746":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:5266:13811":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"4:11603:26696":{"crate_id":4,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"17:15126:21174":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:5846:16747":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:872:32859":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"17:14341:20433":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:12508:17171":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:7372:9055":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"4:8007:8999":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"1:39699:3272":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"17:11075:16973":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"4:8671:9214":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:8247:14015":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:403:16913":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"9:447:15605":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"4:2774:9169":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:11242:16991":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:39530:2413":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"17:1207:16978":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:8259:14017":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:16079:21388":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"4:9319:26799":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:43247:9287":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"6:4924:13776":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:43835:3556":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:7654:9368":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:22361:8808":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:11419:3489":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:44373:3589":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:578:9817":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:12543:17176":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"16:5960:16751":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:5756:16741":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"4:8236:9031":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"16:4856:16472":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"4:6672:2369":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"4:957:9040":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:16032:19890":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:10044:16922":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"4:5249:26796":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:6173:2945":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"4:617:9009":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:40767:3397":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"4:896:9033":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"4:11226:3604":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:46010:8706":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:4412:3295":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"18:635:33675":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:15944:19888":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"4:6789:2372":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:8012:15361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:10671:33640":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"4:10998:9089":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"5:4318:2916":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:8093:16831":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:39486:2423":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"16:7397:32850":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:13914:3638":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:4647:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"6:4965:13781":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:4897:13773":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"4:9107:9304":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"6:7984:9762":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:22811:23421":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:3268:2401":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"6:5445:13832":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:11189:16969":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:44872:24012":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:44594:3540":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:22:816":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"4:3333:9177":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:42003:173":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"5:7562:9001":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:0:563":{"crate_id":1,"path":["core"],"kind":"module"},"1:40297:3293":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:10170:16736":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:12792:16897":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:545:9812":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:7604:16814":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:14212:20424":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:46217:8756":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:12899:3547":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:12494:17134":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:12388:17155":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"3:0:2242":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"18:573:33657":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:5250:13809":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:5006:16507":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:22621:8805":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:15214:21182":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:13109:119":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:6889:3387":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"4:9345:26016":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:40618:3359":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:12342:17129":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:5546:13843":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:12300:17162":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:13512:3631":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"17:12621:17180":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:21593:21506":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:4529:2349":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:6433:16769":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:3314:9049":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:6079:16756":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:10524:16929":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"4:7984:9008":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:41724:170":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"4:9180:9316":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:5225:13806":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:4835:2341":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:6300:16761":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"4:10717:9174":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"4:11244:9136":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"4:4918:9216":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:14968:21165":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:2274:2970":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:46295:23907":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:12278:17161":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:7561:14988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:5863:16748":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:12993:16946":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:40455:3316":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:21625:21503":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:15814:21227":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:7638:3327":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:43722:3496":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:41746:3413":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:46316:23895":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:1164:31463":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:10348:26810":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"11:430:32354":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:1916:2941":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"4:8053:9017":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:14386:20436":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:10284:16925":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:41806:24149":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:3406:9035":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"4:3520:3370":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"5:7489:2509":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:8006:15360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:14414:20438":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:22267:9133":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:879:9051":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:12150:17080":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:14933:21164":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"4:11416:9105":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"14:165:15737":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:42440:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:7703:23250":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:7575:14989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:6802:15754":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:43774:3493":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:41221:3372":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:39450:2424":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:44080:3565":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"17:11773:17112":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:8216:16838":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:4804:2340":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:3644:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:40676:3384":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:13999:20411":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:46593:23901":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"1:40746:3396":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:6788:32057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"4:9124:9305":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"1:21712:8676":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"4:4202:9203":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"4:8792:9288":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:40522:3352":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"11:299:2884":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"4:12352:883":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"11:1066:15725":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"4:9365:26363":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:14051:20415":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:42117:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"16:7509:16806":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:8029:15362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:2838:15834":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:7857:16827":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"18:680:21431":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"14:7:15736":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:5212:13804":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:23142:23905":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:46266:23859":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"4:2309:9108":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"4:4995:9211":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:43803:2978":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"18:706:3549":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:6410:9323":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"4:5766:9302":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"17:9807:16902":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:11992:3247":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:44679:3606":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:43998:3484":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:13606:19914":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:7411:9054":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:6456:16771":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:8282:14020":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:3599:2421":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:47019:8709":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:3029:15841":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"4:3384:9178":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:10350:16927":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"4:586:2939":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"11:710:9037":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:14284:20429":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:14516:20445":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:6872:16790":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:21826:9133":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:33443:2393":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:5466:13834":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"4:6027:2376":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"4:8704:9272":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:3861:2922":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"17:10954:16953":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:30620:3246":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:6491:14501":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"11:1891:2922":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:6442:16770":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"11:1025:2898":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:14131:20420":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"4:1092:9044":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:23007:3060":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"4:11218:26749":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:1555:9037":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:44159:3570":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:4891:13604":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:43783:2977":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:7431:29886":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:42165:2917":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:22114:8683":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"16:2394:15814":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:5385:16735":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:22914:23400":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"4:12350:896":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"1:44859:3635":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:5247:3358":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"4:4810:26251":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:11918:3497":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"6:4985:13784":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:15769:21224":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:40973:3403":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:7085:32705":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:5725:9389":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:8288:14021":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:4971:13782":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:1707:10723":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:15624:21214":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:3587:146":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:7006:16796":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:10304:119":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"5:6608:30008":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:2638:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"4:367:9006":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"4:3331:9176":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:1686:10721":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"4:4914:9212":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"4:5955:2365":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"4:8231:9032":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"16:2478:15818":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:6047:2362":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:43218:23967":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:11026:16957":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:12388:3476":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:42028:2509":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"4:3429:9175":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"5:1577:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:11128:16965":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"11:1566:15727":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:2902:15837":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:12707:16937":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:13959:20408":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:3172:3274":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"5:5226:2362":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:21838:8677":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:13797:20399":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:30978:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"16:6948:16793":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"4:5089:9259":{"crate_id":4,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"4:8530:3356":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"4:12347:732":{"crate_id":4,"path":["std","f128"],"kind":"primitive"},"10:36:32343":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:13497:19906":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"4:8543:3560":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"4:5841:9311":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:47087:8662":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:14436:20439":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:7014:16797":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"11:2151:9044":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:13495:23964":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"16:2528:15820":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:15176:21178":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:22826:24161":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"18:698:21433":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:4:1255":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"17:12371:16944":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:40705:3392":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:21836:8678":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:14012:20412":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"4:1625:9047":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:7168:16801":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:6471:14544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:43004:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:4730:2337":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"16:6278:16760":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:5472:13835":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:22148:21497":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"4:11897:9337":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"1:32959:2388":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"6:6417:14539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:5015:3306":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:7926:3365":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"4:8252:9168":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"14:214:15745":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:11853:17116":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:0:505":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"5:3816:2921":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:3358:2346":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"4:7354:26390":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:5528:13841":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"4:11614:26675":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:10982:16954":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:5244:13808":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:5423:13830":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:6915:14603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:5588:13847":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"4:10950:139":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:13594:19913":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"11:1603:15728":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:47133:8666":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:40344:23407":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:12478:17169":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:1663:10718":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:11269:16993":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:6532:14548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:9772:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"4:5982:2366":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"4:8344:9170":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:6478:14545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"4:8606:9238":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"4:10488:113":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"16:2708:15828":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:6231:16759":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:43673:3483":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"4:8555:9189":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:11841:17115":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:44818:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:43852:3558":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:860:32853":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"16:2612:15824":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:12647:17175":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"5:1437:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:6435:14540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:22405:8809":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:46024:8755":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:3046:29926":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:46120:8741":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:22996:3045":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"4:8199:9126":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:23175:23858":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"4:6857:2379":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"4:11006:9301":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"4:2461:3220":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"4:11101:27160":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"18:0:2253":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:13292:19892":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"4:11692:26706":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:2691:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:437:15784":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"18:581:3256":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:13972:20409":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"4:9405:234":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:32186:16840":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"17:12851:16940":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"4:494:27161":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:22493:24520":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"6:7485:14984":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:15678:21218":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:13538:19909":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:10185:16892":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:513:16914":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:1699:10722":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:6927:16792":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:9671:16890":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:12894:3548":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:304:2320":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:46234:8762":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:5014:13787":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:13526:19908":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:46202:8707":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"4:7920:27139":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:34202:2400":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"4:9239:9318":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:10321:3451":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"4:11021:26704":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:5897:16749":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:1723:10724":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:15434:21203":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:11016:16956":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"4:10346:2954":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"4:11083:27148":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:3329:15843":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:5904:3285":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:40723:23259":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:12724:16938":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:7559:16810":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:1653:10717":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:10317:3450":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:40533:3355":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:46053:8675":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"4:2699:9167":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:14079:20417":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:3288:9046":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"4:8260:2918":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:7686:16818":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:7330:9684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:6849:16789":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:43711:2976":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"4:7870:16915":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"4:669:9013":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:2245:29890":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:6353:16764":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:6954:9390":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:39885:3262":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:11567:17057":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"11:2469:9035":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:41964:3419":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:9984:16921":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"5:2766:29889":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:11132:2917":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:42975:24501":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"5:6689:2509":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:15390:21198":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:43944:3563":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:3810:15863":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:3597:17099":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:16105:21390":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"16:6494:16774":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:42182:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"19:0:1290":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:11312:3490":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:10661:16931":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:9415:2374":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"17:13855:20403":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:40382:3322":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:10612:16930":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"4:6189:220":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:44883:3633":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:10018:16894":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"11:1051:9044":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"4:3427:9174":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:5827:220":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:13046:16900":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"0:31:2016":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"1:43926:3564":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:12768:16895":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:5134:13798":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:12873:3532":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:44610:3543":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"11:700:2509":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:11557:17056":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"4:650:9010":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:7664:9369":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:42173:2509":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"5:6015:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:41762:3414":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:10419:16889":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"4:5280:26796":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:22876:23388":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"4:3999:9193":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"4:9716:9128":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:14489:20443":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:47212:8671":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:3213:2411":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:15116:21173":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:6098:16757":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:4502:16371":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:15426:21202":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:3754:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:43226:3467":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:5598:13848":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:6447:14542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"4:752:154":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"4:3897:9191":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"18:96:21414":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"4:12358:965":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:45943:8740":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"4:2316:9109":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"1:10563:3465":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"15:306:15761":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"11:875:9041":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:2936:15838":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"11:351:32362":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:9343:2484":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:7549:16809":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:13753:20398":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"4:4874:9261":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"4:2463:9112":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:16212:21398":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:10319:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"4:4144:9199":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:47118:8665":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:32747:2389":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:10520:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"4:4808:26249":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:12107:16933":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"4:11207:9306":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"4:12346:753":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"1:12611:3576":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"4:11581:26806":{"crate_id":4,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"17:16121:21391":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"5:3280:9048":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"4:3894:9192":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"4:11353:9106":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:42157:2916":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"4:4294:29722":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:7910:16829":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:5930:2922":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:7536:9029":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"4:3386:9179":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:11354:17005":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:12043:17077":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:14235:20425":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"4:11506:27154":{"crate_id":4,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"4:11686:26672":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:6066:16755":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:15616:21213":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:6379:14473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:12289:17126":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:1517:10705":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"4:5103:9260":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:7389:10845":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:10677:3513":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"5:4158:2917":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:23028:9133":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:3383:141":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:6689:14561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"6:5344:13821":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"16:6813:16788":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:12238:17132":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:15655:21217":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:7412:10830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:6263:32814":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:8271:14019":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:12900:16943":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:1585:10712":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:21608:21500":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:44796:164":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:12695:17178":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"4:2067:198":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:11277:3500":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:46348:8724":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"15:327:15765":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:7453:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:40776:3386":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:44618:3538":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:43265:24011":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:42963:24473":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"5:2216:29861":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:5781:16743":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:5290:13814":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"15:0:2250":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:4992:13785":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:3386:142":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:44920:3639":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:32140:3261":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"17:9886:16918":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:38237:2406":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"11:1923:9049":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:6714:14564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"4:8025:2956":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"1:30567:3217":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:7528:16807":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"4:2477:9116":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"17:15456:21205":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:6721:14565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"6:8317:14025":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:14994:21155":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:44810:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:21657:9133":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:5636:13852":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:10528:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"17:16151:21393":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"16:7132:32780":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"4:12317:26710":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:2635:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"16:7052:16798":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:42936:24472":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"4:2489:9122":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:3327:2422":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"5:3247:2916":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:12175:17146":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:44175:3314":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:5031:13789":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"11:2542:24575":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:12443:17157":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:5320:13818":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:12056:17078":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:44437:3591":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:7741:16821":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:46555:8708":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:22593:8804":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:10769:33624":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:45928:8734":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:553:9813":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:47197:8670":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:40755:3406":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"4:4316:9231":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:2112:2921":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:12634:3573":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"4:3477:9161":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:47040:8743":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:11537:17021":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:1593:10713":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"18:538:21441":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:12947:3578":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:12362:17164":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"4:6668:2159":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"4:6348:2979":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:7641:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:6678:14560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:13473:19904":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:11405:17003":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"5:5860:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"4:6364:27157":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:15206:21181":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"5:7630:9359":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"4:9174:2509":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"4:11757:2958":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"4:3668:9153":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"6:4952:13779":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:40548:3353":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:5489:13838":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:41984:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"4:11909:26770":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"4:11841:9193":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:4614:16391":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:6317:16762":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:5722:16739":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"4:12301:29475":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:219:2906":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:43691:2974":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:6588:16780":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:2078:24505":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:11825:17094":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:40848:3389":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:12683:17179":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"6:0:1001":{"crate_id":6,"path":["libc"],"kind":"module"},"4:10940:9129":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"5:1566:9038":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"11:1142:15726":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:40983:3404":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:42362:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:44602:3541":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:11392:17004":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:11367:16973":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:16176:21395":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"16:2438:15816":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"4:8620:9190":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:3035:2570":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"18:589:24013":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:8073:16830":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:14575:16903":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:2508:15819":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"5:7381:2509":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"4:10915:26680":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:7061:16799":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:4976:16500":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:7639:3328":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:4986:17187":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:13774:17119":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:7823:16826":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:15400:21199":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:6620:16782":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"11:434:32357":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:16235:21400":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"4:11261:26108":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"16:4913:16483":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"4:8465:3365":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"17:13015:16903":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:12572:16933":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"4:10711:9176":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:2891:144":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"18:80:21413":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:2153:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:4477:3285":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:11497:17001":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:44644:130":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"17:15569:21209":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:8259:16840":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:43012:3246":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"17:16223:21399":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:10534:33635":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:11812:17072":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"4:12285:26736":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"4:9464:9321":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:42020:2917":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"17:11115:16966":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:10092:16923":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:4656:2329":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:15608:21212":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:4248:3285":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:1489:2917":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:3363:2409":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"17:16093:21389":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"4:9158:2916":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:2660:15826":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:5064:13793":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:2808:15833":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:7467:14983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:44325:3588":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:12888:3549":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:40393:3313":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:12318:16945":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:40504:3312":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"4:9428:162":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"4:8847:9290":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"1:23638:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"4:10505:2955":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:46842:8697":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:13387:19898":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:8309:2318":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:491:9806":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:7986:2327":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"4:9137:9306":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:13785:17120":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:45858:8687":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:40560:3356":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"6:4800:13765":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:4278:3285":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:11350:3491":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:5002:13786":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:16198:21397":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:15092:21171":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:10953:9133":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:4784:2339":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:4431:3296":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:21627:21508":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"4:12354:1832":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"16:6047:16754":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:6729:14566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"16:2748:15830":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:5831:16746":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:23120:23857":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"4:11820:9191":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"4:12355:1838":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"4:3649:26238":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:46082:8729":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:5052:13792":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:15281:21187":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"14:0:2249":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:1962:671":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"17:13146:17217":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:8197:15523":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"4:5593:9298":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"4:9284:8993":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:3210:2410":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:13064:16899":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:14868:21161":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:12201:17159":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:497:9807":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:3042:29925":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:8328:14026":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"4:4763:9257":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:40517:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"4:12360:1418":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:40714:3393":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:30599:3218":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:15190:21179":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:10997:16955":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:6664:14558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:2548:15821":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"11:2569:9029":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:7547:9030":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:7452:14981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:3509:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:30350:3003":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:10887:33634":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:42078:2486":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"4:8857:2916":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"1:4775:2338":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:2303:15782":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"11:844:9040":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:39584:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:42710:3449":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:5122:13797":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:15333:21192":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:1680:10720":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:10710:16932":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:44258:3584":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:2323:15810":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"5:3293:29958":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:2535:3231":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"16:8202:16837":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:11574:15721":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:3778:15854":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:3881:9035":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:8118:16832":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"4:9388:187":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:46638:23856":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"6:5671:13856":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:2636:15825":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:7602:14991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:11595:17058":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:7546:14987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"4:5080:9258":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:4389:109":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"6:7461:14982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:7306:9855":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:46990:8758":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:4876:13771":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"4:8560:9187":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"6:5219:13805":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:3842:15872":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:13581:19912":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:45811:8686":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:38182:2405":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"4:9721:2953":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"4:8601:9237":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:5502:13839":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"6:5283:13813":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:6120:16758":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"4:9709:138":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"12:0:2248":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:10218:16893":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"9:392:15606":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:7339:14977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:44294:3586":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"4:12332:417":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"17:12328:17127":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"5:7723:9035":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:4909:13774":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:5665:13855":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"4:8536:3486":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"1:47235:8672":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"18:726:21434":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:11865:17117":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:12213:17160":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:1735:30008":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:32217:2315":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"6:5039:13790":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:10720:33641":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:12597:17182":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:14788:21158":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:13437:19902":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:15222:21183":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:38871:2408":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"4:8645:9262":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:6991:32498":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:45995:8700":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:42206:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:5020:13788":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:40799:3399":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:44626:3604":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"4:0:1712":{"crate_id":4,"path":["std"],"kind":"module"},"1:6077:3394":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:10278:143":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:46443:8742":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:44168:3569":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"4:9312:26792":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"11:1087:32353":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"4:11924:15769":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:4885:13772":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:7799:16824":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:15356:21194":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:40838:3402":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:5260:13810":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:40372:3321":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"4:8874:9292":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:41231:3374":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:2977:137":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"6:6519:14546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"4:9401:3285":{"crate_id":4,"path":["std","sync","poison","Guard"],"kind":"struct"},"5:7103:29990":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:7769:16823":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:5329:13819":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:10759:16933":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:13024:16947":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"4:5629:9300":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"16:6532:16776":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:5146:13799":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:13211:19888":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"14:202:9367":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:2458:15817":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:7401:2922":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:21610:21512":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:11166:16971":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:46887:8731":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"4:922:2922":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:15957:21385":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:44485:3550":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:15266:21185":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:12127:17082":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:41912:3416":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"13:110:32415":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:32182:23994":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:22495:3231":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"5:935:9052":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:1527:9033":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:43793:3494":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"4:3550:3285":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"7:32:15576":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:2788:15832":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:4720:2336":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:32307:114":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"18:754:21435":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:5436:13831":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:3188:2392":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"4:3291:26664":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"4:12353:1850":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:44098:3566":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"13:229:32366":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"10:0:2246":{"crate_id":10,"path":["adler"],"kind":"module"},"17:12808:16898":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:15168:21177":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:3614:15845":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:7580:16812":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"11:123:2881":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:0:2252":{"crate_id":17,"path":["object"],"kind":"module"},"1:22626:8803":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:23153:23903":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"4:12341:1810":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"17:13455:19903":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:13252:19890":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:44668:3605":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:11419:16933":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:11239:3487":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:1547:10708":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:12949:16945":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:4432:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:10775:24713":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"11:1887:2509":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:867:32856":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:15473:21207":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:46333:23904":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:13553:19910":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"4:4094:9197":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"4:1610:2922":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:15463:21206":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:12433:16903":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"4:9224:9315":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:256:32856":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:12251:17131":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:44026:3567":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:4802:16464":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:465:9802":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:5160:13800":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:4940:16487":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:7656:16817":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:44932:23952":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:2696:134":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:45843:8727":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:13814:20400":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:6480:16773":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:6746:14568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"11:2562:32351":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:40598:3351":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"4:521:8988":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:6000:3285":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:12189:17158":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:23109:23894":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"7:79:15583":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"11:774:9033":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:46460:8690":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:16138:21392":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:23098:23900":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"4:10714:9178":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:5209:25665":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:4424:16339":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:11153:16934":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:6429:9324":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"4:1614:9035":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:10622:33636":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:4587:16387":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:1535:10707":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:5382:13826":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"4:11916:15769":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:15102:21172":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"4:666:9012":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:14475:20442":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:1580:10711":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:11547:17055":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"18:481:21437":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"4:1853:9070":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"16:3669:15846":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:1496:10702":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:6562:2922":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:10315:3449":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"4:10640:27150":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:11951:3498":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:11051:16983":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:12225:17133":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:40496:3318":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"16:7570:16811":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:6821:14574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:13832:20401":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:13424:19901":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:3014:15840":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"5:7739:9386":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:23131:23854":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"16:7727:16820":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:14066:20416":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:7379:32874":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"11:742:9038":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:4824:13767":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"4:4130:9198":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:14271:20428":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:6976:16795":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:13899:20405":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"4:4152:9200":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:10743:25404":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:44503:3551":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"4:12357:1826":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"17:15289:21188":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:485:9805":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:6895:24509":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:12584:16934":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:39642:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:6874:14601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:12879:3546":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:7355:16802":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:6629:14554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:5191:13802":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:3664:2347":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:39622:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:6609:14552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:14260:20427":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:4113:30008":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:732:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"11:787:9034":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:15445:21204":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:3183:2387":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:41206:3368":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"4:951:9039":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:12408:17156":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:8227:2319":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:6650:14556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:6670:14559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:4870:13770":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:10104:3463":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:15778:21225":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:5361:13823":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"13:0:2243":{"crate_id":13,"path":["std_detect"],"kind":"module"},"15:288:15760":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"4:5769:9303":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"16:6606:16781":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:33856:2398":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:5296:13815":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"4:6843:2378":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"4:8863:9291":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"1:46164:8695":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"5:2318:29843":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:8136:16833":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:11702:17061":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"5:2098:2918":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:15058:21154":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:9938:16920":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"4:6562:186":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:22109:9133":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"6:8351:15560":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:6191:3385":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:44909:3641":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:6665:16785":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"4:8493:9132":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"17:13375:19897":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:10155:16735":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:12650:3575":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:11200:3499":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"18:613:33656":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"4:6912:233":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:6409:14538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:11621:17031":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:1839:9035":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:13308:19893":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:9781:16916":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:7888:16828":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"4:1891:9081":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:41924:3417":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:13116:17216":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:44472:3594":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"11:1910:9047":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"4:11095:27146":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"14:40:19889":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"4:4206:9204":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:42598:2363":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:8207:145":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:42991:24474":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"17:11605:17053":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"4:2479:9117":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:3345:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"4:10597:9304":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:6768:14571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"17:11214:16964":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:6657:14557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:11524:17054":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"4:7939:27163":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:3582:254":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:13844:20402":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"4:4192:9202":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:16165:21394":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:22481:8811":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"16:6398:16766":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"11:2326:2898":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:13597:25803":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"18:718:21426":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:42109:3422":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"17:15324:21191":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:46039:8761":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:5581:13846":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:12863:16941":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:6634:16783":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:14111:20419":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:7359:14979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"4:1083:2898":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"4:4798:9201":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:12574:3574":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:33644:2394":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:5700:16738":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:7144:16800":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:2066:3250":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:2885:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"5:741:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:12454:17167":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:12516:17186":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"5:7389:9053":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:1336:9044":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:33711:2396":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:1526:10706":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:7429:10828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:6412:16767":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"11:811:9035":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"4:10969:2944":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:3137:247":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"11:1676:32344":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:11877:17073":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:6738:14567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:13624:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:21718:8680":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:1586:9057":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:517:9808":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:6504:16775":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"4:12351:902":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"1:46688:8691":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:4288:3285":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:45826:8722":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:3572:2417":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:564:9815":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"4:9260:2367":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"18:659:21429":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"4:9166:9319":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:11915:17118":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:7606:9103":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"14:31:15736":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:1969:3195":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"16:3475:15844":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:16249:21401":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"6:6811:14573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:7755:16822":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:38292:2407":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"14:187:15744":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:43862:3356":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:11279:162":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:2203:17002":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:7421:9059":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"6:5352:13822":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"4:9738:127":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"5:4934:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:12420:3552":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:40489:3317":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"4:8088:9089":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"4:2629:9166":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:13986:20410":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:1997:9100":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"11:2383:2916":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"4:2735:9158":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:14587:20449":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"4:12120:27147":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:2087:2967":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:2537:3232":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"11:2403:2917":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:5630:13851":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:3593:2419":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:5075:16530":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:14977:21166":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:11089:16968":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"4:6499:220":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:5400:16736":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:10317:16926":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:1545:9036":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:11108:2916":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:14298:20430":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:14038:20414":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:6524:14547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:43235:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:11405:3484":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:43622:23276":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:23065:23853":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:11443:17009":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"4:7140:9322":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:6441:14541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:6560:16778":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"5:680:29838":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:22269:8679":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:15151:21176":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:11063:16977":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"18:515:21439":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:2894:258":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"16:8175:16835":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:11493:17014":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:46505:8696":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:6160:15781":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"4:6681:2160":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"17:11341:17006":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:15992:21386":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"6:5515:13840":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:14847:21159":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:6542:14549":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"4:6786:2371":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:43701:3492":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:41946:3418":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:1559:10709":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:2234:17027":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:1565:10710":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:8253:14016":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:6172:3285":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:3130:2344":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"0:0:2009":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"9:53:15624":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:13344:19895":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:15368:21195":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:1999:1357":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"4:878:2917":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:43465:21481":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:42703:3447":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:15249:21184":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:7813:16825":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"4:947:9038":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"4:8067:9018":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"4:12356:1844":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"1:34029:2399":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:570:9816":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"4:8612:9227":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"4:9278:115":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"4:7718:29483":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"17:12887:16942":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:12404:3478":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:12671:17210":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:39602:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:7446:14980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:13738:20397":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:11433:3485":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"4:5613:9299":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"5:7055:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:3670:2917":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:4062:16023":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:473:9803":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:9737:16888":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"16:7648:16816":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:1886:3285":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"4:943:9037":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:7618:16815":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:46185:8701":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:5565:13845":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:15:2221":{"crate_id":1,"path":["core","write"],"kind":"macro"},"17:11634:17029":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:5624:13850":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"4:8244:26648":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"11:2304:9043":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"4:9393:2368":{"crate_id":4,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"4:426:185":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:46667:23906":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"16:6543:16777":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"4:8769:9287":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"17:12422:17166":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:13509:19907":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:23076:23860":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"9:330:15661":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:13363:19896":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:15596:21211":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:10309:128":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"4:1101:9045":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:6964:9391":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"11:1107:2900":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:8682:3379":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:7578:9102":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:22890:23988":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:32200:2337":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"17:15138:21175":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"4:909:9034":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:12485:17170":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"4:8339:26793":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"5:7618:9104":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:5370:13824":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:6782:16787":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:44279:3585":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:5390:13827":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:13723:20396":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:1692:9224":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"18:765:21428":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"11:2352:9044":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:40625:3382":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:40808:3400":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:42100:2580":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:7590:16813":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"9:0:2245":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:44793:150":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"17:11755:17065":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:11688:17026":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"4:8177:9128":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"5:4511:29994":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:6962:16794":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:7516:14985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"4:974:9041":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:22758:23364":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:11324:17020":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"11:328:32355":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:12264:17130":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:2733:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"4:3601:2943":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:5236:13807":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:6900:24507":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:36251:2403":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:40789:3398":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"11:800:2922":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"4:4685:9240":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:22579:9133":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:44462:3593":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:532:9810":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"4:4324:9232":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"11:2554:32350":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:46422:8736":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:11102:16967":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:40409:3314":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:40997:3405":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"4:1636:9049":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"4:12361:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"18:507:33657":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:41778:3415":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"4:9150:9307":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"0:28:2009":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"1:42012:2916":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"4:9113:199":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"4:3294:26661":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:11467:17007":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:11898:17093":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:40685:3391":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:7128:29988":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"4:7325:27152":{"crate_id":4,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:3218:2412":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:46103:8735":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:1073:30008":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:15023:21169":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:26038:267":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:45890:8723":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:5289:976":{"crate_id":1,"path":["core","iter"],"kind":"module"},"17:12030:17079":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:14091:20418":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:10573:33628":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:8188:16836":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:5037:16515":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"4:11620:9310":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"4:8334:26783":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:14246:20426":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:11788:17113":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:15582:21210":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:44184:3293":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:45796:8721":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"4:9209:9317":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:15410:21200":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"4:5948:2364":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:34375:2402":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:4641:16395":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:47159:8668":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:7321:2482":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"18:670:21430":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:5462:9361":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"4:980:9042":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"4:8649:9264":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:3899:15906":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:14025:20413":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:5174:9223":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:586:9818":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:5181:13801":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:15635:21215":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:14545:20447":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:15799:21226":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"7:0:1901":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:21571:3256":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"9:178:15710":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"4:5326:204":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"1:6700:3407":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:1180:2908":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:42323:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:22534:8812":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:45978:8694":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"4:8513:3390":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"1:11157:3486":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"5:3218:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"4:4812:26253":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:15301:21189":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:5347:16733":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:38127:2404":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:2521:672":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:6940:32695":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:22443:8810":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"16:542:32714":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:42559:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:14356:20434":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"4:12338:335":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"4:12359:1911":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"1:3142:2343":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"17:15646:21216":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"4:11647:26009":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:40588:3350":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:9959:24720":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:15039:21170":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"4:1855:9071":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"6:6756:14569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"4:7473:29719":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:45911:8728":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:12688:3499":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"11:2124:9043":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:14402:20437":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:40695:133":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:14855:21160":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:289:30008":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"4:5438:203":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"16:7539:16808":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:6900:14602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"4:1838:695":{"crate_id":4,"path":["std","env"],"kind":"module"},"5:6771:30008":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"4:1603:2916":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:2572:15822":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"9:357:15621":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:16269:19900":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:22842:23356":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"11:2231:15721":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:13272:19891":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:43846:3559":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"4:11780:9192":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:3018:3267":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"6:5277:13812":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:42696:3448":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"4:7880:26378":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:13922:20406":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:42520:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:13412:19900":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:32275:2316":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:41197:2159":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:8218:165":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:7348:14978":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:2854:15835":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:44140:3562":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:7633:32526":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"4:11309:26685":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"4:8594:3417":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:1639:10716":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:40570:3337":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"4:1968:9099":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"1:22976:24510":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:6763:14570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:45957:8688":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:44044:3568":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:8341:15559":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:6775:14572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:16187:21396":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:22705:23524":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:5112:13796":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:15760:21223":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"4:932:9035":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:42284:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"4:10957:26673":{"crate_id":4,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:3627:2345":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:4979:13783":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:8294:14022":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:4942:13778":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:3415:2414":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:47107:8664":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:7366:9264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:1098:16970":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:15273:21186":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:2728:15829":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"4:562:2936":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:43469:3505":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4837:13768":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:13568:19911":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"4:1475:156":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:22983:3059":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"11:832:9036":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:42079:2485":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:8676:3326":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"4:11038:9307":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:23186:23898":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:5107:16539":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:8301:16841":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:15931:19887":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:2966:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"17:14503:20444":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:4718:16449":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:5314:13817":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"4:2312:3237":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"17:3264:17076":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:7584:14990":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:5336:13820":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"6:5200:13803":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:1474:2916":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:10568:3466":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:5643:13853":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:13877:20404":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"18:491:33663":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:5306:13816":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:11293:16994":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:30631:23493":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"16:8226:16839":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:8306:14024":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:12557:16973":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:46932:8703":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:21659:8681":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:32216:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"5:2123:9058":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:15720:21220":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:21730:8677":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:6385:16765":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:7473:16804":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"4:11661:26007":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"11:1007:9043":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:15383:21197":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:11042:16958":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:5483:13837":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:1490:10701":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:10399:3356":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:5102:13795":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:5415:13829":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:5802:16744":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:4916:13775":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:952:2916":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:5083:13794":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:6068:2929":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"11:883:9042":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:2657:112":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"17:14723:21156":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:2727:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:3612:23812":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:4577:2156":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"6:4932:13777":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"4:128:2154":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"4:2307:138":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"16:3925:15909":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:14147:20421":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:15822:21228":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:15078:16972":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"9:238:9287":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:5653:13854":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:8673:149":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:15418:21201":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:1503:10703":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"4:12335:1872":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"4:6272:27144":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:6895:16791":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:33171:2391":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:43876:3486":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:44400:3590":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:13822:2981":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:13779:115":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:47078:8661":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:6749:16786":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:44150:3561":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:3179:3245":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:10311:3447":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"17:16050:19891":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"4:3023:2942":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:11142:16933":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:1200:31461":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:22136:3479":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:43894:3490":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"11:2548:32347":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"9:424:15607":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:12076:17074":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:4743:16451":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"4:10757:2956":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"6:5407:1242":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:42401:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:2861:9133":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"18:563:21442":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:22865:3044":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:13766:17121":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:32276:3276":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:22934:23417":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"4:8073:9088":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"11:102:32364":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:11583:17028":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:10313:3448":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:42245:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"4:2226:128":{"crate_id":4,"path":["std","ffi","os_str","Display"],"kind":"struct"},"5:3801:2918":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:12399:17165":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:2684:15827":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:5466:9362":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"4:8225:127":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:2064:3249":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:43761:3495":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:5188:435":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"11:2423:2509":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:3374:2317":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:4959:13780":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:10260:3325":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"6:5557:13844":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:46961:8737":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"4:9197:9314":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"9:502:15608":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:4787:13764":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:40416:3315":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:10760:25402":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"4:12334:471":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"5:2206:8988":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:42037:2482":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"17:12969:16891":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:150:15787":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:14560:20448":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:7695:16819":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:1762:3163":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"16:2878:15836":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"4:8002:8997":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"11:856:2892":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:2037:17008":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:12833:3043":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"4:4100:9196":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"4:4158:9201":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"4:12339:1686":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"16:7306:32855":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:41190:3366":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"18:735:21427":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:30605:3186":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:10137:16887":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:13173:17218":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:13802:2979":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:46249:8763":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:15701:21219":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:21639:21510":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:15836:21229":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:4864:13769":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:3198:2390":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:2355:15812":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:4560:16383":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:1671:10719":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"4:8189:9129":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"5:7481:2509":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:12089:17075":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"9:482:15604":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:22898:23495":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"4:12348:908":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"17:14599:20450":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:11743:17064":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"4:12345:737":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"17:10915:33625":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"4:8549:9190":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"11:396:2890":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:14311:20431":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:31005:3256":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"17:13325:19894":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:14189:20423":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:4830:16469":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:3196:15842":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:9777:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"11:837:9039":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"4:12340:1720":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"1:46765:8725":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:6574:16779":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"5:3657:2916":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:559:9814":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"4:1619:9046":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:44788:24494":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"4:12344:734":{"crate_id":4,"path":["std","f16"],"kind":"primitive"},"11:1896:9035":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"16:7098:32811":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:4447:29994":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:7533:2517":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"4:4877:9239":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:6648:16784":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:5073:3285":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:3038:29844":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:43980:3488":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:42946:3246":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"4:9291:26370":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:46572:8757":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:5457:13833":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:14876:21162":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:6505:14502":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:4352:16290":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"4:3832:9188":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:5400:13828":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:42717:3450":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:2998:15839":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:12659:17174":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"6:1621:10714":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"4:8721:9286":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"1:13649:3629":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:14449:20440":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}