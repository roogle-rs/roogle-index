{"root":"0:0:1542","crate_version":"1.4.0","includes_private":false,"index":{"1:8192:1831":{"id":"1:8192:1831","crate_id":1,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8194:2014","1:8196:2015","1:8197:2016"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13249:1726":{"id":"1:13249:1726","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"`DoubleEndedIterator`":"1:8227:115","prim@char":"4:15720:1699","self::pattern":"1:12809:2277","str::matches":"4:15726:1704"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:49326:2697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5697:2998":{"id":"4:5697:2998","crate_id":4,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5698:56037"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10427:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13272:56543":{"id":"1:13272:56543","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:15720:1699","self::pattern":"1:12809:2277"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13296:56547":{"id":"1:13296:56547","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"4:15720:1699"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:49421:2704","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6049":{"id":"5:6049","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5869:1310","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6050:57183","5:6051:2834","5:6054:57184","5:6057:57185","5:6069:57186","5:6070:57187","5:6071:2973","5:6072:54463","5:6073:54464"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3679:1856":{"id":"1:3679:1856","crate_id":1,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:0:1542":{"id":"0:0:1542","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:39:1548","0:41:1549","0:38:1542"]}},"1:10316:141":{"id":"1:10316:141","crate_id":1,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10317:631","1:10318:1727","1:10319:50509","1:10320:50510","1:10321:50511","1:10322:50512","1:10323:50513","1:10324:50514","1:10325:50515","1:10326:50516","1:10327:50517","1:10328:50518","1:10329:50519","1:10330:50520","1:10331:50521","1:10332:1497"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:2565:122":{"id":"4:2565:122","crate_id":4,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:2566:50191","4:2568:1763","4:2569:56128","4:2570:56129"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"1:10092:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"1:10099:114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10101:2323":{"id":"1:10101:2323","crate_id":1,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10102:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3080:144":{"id":"1:3080:144","crate_id":1,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3082:2006"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13284:56545":{"id":"1:13284:56545","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:12809:2277","prim@char":"4:15720:1699"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13214:2053":{"id":"1:13214:2053","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"1:12809:2277","prim@char":"4:15720:1699","`None`":"1:47164:161"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3077:73":{"id":"1:3077:73","crate_id":1,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3079:2005"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13176:56525":{"id":"1:13176:56525","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2875:169":{"id":"1:2875:169","crate_id":1,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2877:975","1:2878:803","1:2879:769","1:2880:692","1:2881:675"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2829:168","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13211:53500":{"id":"1:13211:53500","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"1:12809:2277","prim@char":"4:15720:1699"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12834:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5555:3013":{"id":"4:5555:3013","crate_id":4,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5556:55400","4:5557:3406"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10427:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:4621:2930":{"id":"4:4621:2930","crate_id":4,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4622:55005","4:4623:55006","4:4624:55007","4:4626:2951","4:4627:55008","4:4629:53490","4:4630:3660"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"4:4539:2945","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13195:53482":{"id":"1:13195:53482","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"4:15726:1704"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6057:57185":{"id":"5:6057:57185","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8302:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3304:1909":{"id":"1:3304:1909","crate_id":1,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3306:166","1:3307:334"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5635:2992":{"id":"4:5635:2992","crate_id":4,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5636:54956","4:5637:55726","4:5638:55727"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13187:52744":{"id":"1:13187:52744","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:47164:161"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5561:3011":{"id":"4:5561:3011","crate_id":4,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5562:4114","4:5563:55375"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10427:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3276:1904":{"id":"1:3276:1904","crate_id":1,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3278:250"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3292:1907":{"id":"1:3292:1907","crate_id":1,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3294:1081"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6070:57187":{"id":"5:6070:57187","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:421:1832","`String`":"5:8302:200"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1832","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8061:3325","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8653:2391":{"id":"1:8653:2391","crate_id":1,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8378:152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:5643:2994":{"id":"4:5643:2994","crate_id":4,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5644:54956","4:5645:55149"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12834:2280":{"id":"1:12834:2280","crate_id":1,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:12836:2007","1:12837:53092","1:12838:53093"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"1:12828:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6069:57186":{"id":"5:6069:57186","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8302:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:22771:28137":{"id":"1:22771:28137","crate_id":1,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:22772:52470","1:22773:52471","1:22774:52472"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22764:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13218:2012":{"id":"1:13218:2012","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"1:12809:2277","prim@char":"4:15720:1699","`None`":"1:47164:161"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12834:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13234:56531":{"id":"1:13234:56531","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12809:2277","prim@char":"4:15720:1699","str::split":"4:15726:1704","str::split_terminator":"4:15726:1704"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:49190:2691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12834:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13243:56532":{"id":"1:13243:56532","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13275:33419":{"id":"1:13275:33419","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"1:12809:2277","prim@char":"4:15720:1699"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3284:1906":{"id":"1:3284:1906","crate_id":1,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3286:870"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3074:74":{"id":"1:3074:74","crate_id":1,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3076:288"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3426:126":{"id":"1:3426:126","crate_id":1,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3428:360"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"1:3429:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3423:125":{"id":"1:3423:125","crate_id":1,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3425:359"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"1:3426:126","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13201:14108":{"id":"1:13201:14108","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"4:15726:1704"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:49405:2702","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3218:1828":{"id":"1:3218:1828","crate_id":1,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5801:3319":{"id":"5:5801:3319","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5803:166","5:5804:414"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3266:1902":{"id":"1:3266:1902","crate_id":1,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3268:166","1:3269:1080"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13198:2306":{"id":"1:13198:2306","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:15720:1699"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:49098:2685","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:7707:2394":{"id":"1:7707:2394","crate_id":1,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7708:52897","1:7709:52898","1:7710:52902","1:7711:52900","1:7712:52899","1:7713:52903","1:7714:52901"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2875:169","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3250:1903":{"id":"1:3250:1903","crate_id":1,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3252:166","1:3253:1325"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6072:54463":{"id":"5:6072:54463","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"4:15726:1704"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3255:1900":{"id":"1:3255:1900","crate_id":1,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3257:166","1:3258:869"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10109:174":{"id":"1:10109:174","crate_id":1,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10110:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3309:1910":{"id":"1:3309:1910","crate_id":1,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3311:166","1:3312:336"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13290:2591":{"id":"1:13290:2591","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"1:12748:2454","FromStr::Err":"1:12748:2454"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"1:12748:2454","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"1:12748:2454","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2777:2365":{"id":"1:2777:2365","crate_id":1,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2779:50048"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"1:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13196:53483":{"id":"1:13196:53483","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"4:15726:1704"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13182:56527":{"id":"1:13182:56527","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:9112:1995":{"id":"1:9112:1995","crate_id":1,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10099:114":{"id":"1:10099:114","crate_id":1,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10100:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13267:56540":{"id":"1:13267:56540","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13294:53387":{"id":"1:13294:53387","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:4899:3028":{"id":"4:4899:3028","crate_id":4,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4900:2538","4:4901:56046"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3086:212":{"id":"1:3086:212","crate_id":1,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3088:122","1:3089:1384"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10105:2316":{"id":"1:10105:2316","crate_id":1,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10106:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6698:2924":{"id":"4:6698:2924","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6699:55156"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10427:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8252:1830":{"id":"1:8252:1830","crate_id":1,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8253:770","1:8254:2013"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8378:152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:12819:2276":{"id":"1:12819:2276","crate_id":1,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12821:2279","1:12822:50116","1:12823:50117","1:12824:50118","1:12825:50120","1:12826:50119","1:12827:50121"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13237:53495":{"id":"1:13237:53495","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"1:12809:2277","prim@char":"4:15720:1699","str::rsplitn":"4:15726:1704"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:49226:2662","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6593:2995":{"id":"4:6593:2995","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6594:55988","4:6595:55161","4:6596:55162","4:6597:55164","4:6598:55163","4:6599:55165","4:6600:55166","4:6601:55168","4:6602:55169","4:6603:55172","4:6604:55173","4:6605:55174","4:6606:55175","4:6607:55176","4:6608:55177","4:6609:55170","4:6610:55171"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3182:1827":{"id":"1:3182:1827","crate_id":1,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8227:115":{"id":"1:8227:115","crate_id":1,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8228:2007","1:8229:2008","1:8230:2009","1:8231:2010","1:8235:2011","1:8238:2012"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8378:152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:9113:1994":{"id":"1:9113:1994","crate_id":1,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:22816:2486":{"id":"1:22816:2486","crate_id":1,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"1:23465:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22807:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13231:56530":{"id":"1:13231:56530","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"`DoubleEndedIterator`":"1:8227:115","str::split":"4:15726:1704","self::pattern":"1:12809:2277","str::rsplit_terminator":"4:15726:1704","prim@char":"4:15720:1699"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:49172:2690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13921:136":{"id":"1:13921:136","crate_id":1,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13922:261","1:13923:500","1:13924:264","1:13925:1057"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13228:53493":{"id":"1:13228:53493","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"1:8227:115","prim@char":"4:15720:1699","self::pattern":"1:12809:2277","str::split":"4:15726:1704"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:49140:2659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12834:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5683:2996":{"id":"4:5683:2996","crate_id":4,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5684:55403","4:5685:55404","4:5686:55405","4:5687:55406"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6050:57183":{"id":"5:6050:57183","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1832","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8061:3325","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1832","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8061:3325","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8142:2415":{"id":"1:8142:2415","crate_id":1,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8144:2068"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13173:770":{"id":"1:13173:770","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:15720:1699"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4682:2381":{"id":"1:4682:2381","crate_id":1,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4683:2017","1:4684:50410","1:4685:2019"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13299:56548":{"id":"1:13299:56548","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"4:15720:1699"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:49439:2706","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3552:1923":{"id":"1:3552:1923","crate_id":1,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3554:52088","1:3555:52089","1:3556:52090"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13537:145":{"id":"1:13537:145","crate_id":1,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13538:166","1:13539:145","1:13540:744"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13278:53501":{"id":"1:13278:53501","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:15720:1699","self::pattern":"1:12809:2277"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12834:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13255:56535":{"id":"1:13255:56535","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12809:2277","prim@char":"4:15720:1699","str::rmatch_indices":"4:15726:1704","`DoubleEndedIterator`":"1:8227:115"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:49272:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3331:1915":{"id":"1:3331:1915","crate_id":1,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3333:335"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13222:53490":{"id":"1:13222:53490","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12809:2277","str::rsplit":"4:15726:1704","`DoubleEndedIterator`":"1:8227:115","str::split_whitespace":"4:15726:1704","prim@char":"4:15720:1699"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:49122:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13993:2479":{"id":"1:13993:2479","crate_id":1,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13994:51935","1:13995:51936","1:13996:51937","1:13997:51938","1:13998:51939","1:13999:51940","1:14000:2042"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6345:2924":{"id":"4:6345:2924","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6346:3284","4:6347:3285","4:6348:55155","4:6349:56231","4:6351:56235","4:6353:56232","4:6354:56233","4:6356:56234"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10427:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:12828:2279":{"id":"1:12828:2279","crate_id":1,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:12830:2299","1:12831:899","1:12832:51814","1:12833:51815"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23465:2361":{"id":"1:23465:2361","crate_id":1,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:23466:2485"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:23461:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3187:102","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13193:3111":{"id":"1:13193:3111","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:15726:1704","crate::ops::Index":"1:3481:1920","str::slice_mut_unchecked":"4:15726:1704"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:39:1548":{"id":"0:39:1548","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12256:2906":{"id":"1:12256:2906","crate_id":1,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12257:2017","1:12258:52107"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3420:1829":{"id":"1:3420:1829","crate_id":1,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3421:558"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8378:152":{"id":"1:8378:152","crate_id":1,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8379:2017","1:8380:899","1:8381:2019","1:8382:477","1:8384:2020","1:8387:2021","1:8388:2022","1:8389:2023","1:8390:2024","1:8392:2025","1:8394:2026","1:8395:2027","1:8397:818","1:8400:2028","1:8407:2029","1:8409:2030","1:8412:2031","1:8413:2032","1:8414:2033","1:8416:2034","1:8418:2035","1:8421:1278","1:8422:2036","1:8423:2037","1:8427:2038","1:8430:2039","1:8431:2040","1:8432:2041","1:8434:2042","1:8435:1837","1:8437:2043","1:8440:2044","1:8442:2045","1:8452:2046","1:8467:2047","1:8469:2048","1:8473:2049","1:8482:2050","1:8485:2051","1:8487:2052","1:8490:260","1:8497:277","1:8504:2053","1:8511:2054","1:8520:2055","1:8530:992","1:8537:2056","1:8544:2057","1:8545:2058","1:8546:2059","1:8558:2060","1:8565:2061","1:8577:2062","1:8584:2063","1:8585:2064","1:8590:2065","1:8593:2066","1:8596:2067","1:8597:2068","1:8599:2069","1:8601:397","1:8604:2070","1:8607:975","1:8610:2071","1:8613:584","1:8616:2072","1:8619:884","1:8621:803","1:8623:769","1:8625:692","1:8627:675","1:8629:2073","1:8630:2074","1:8638:2075"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13225:13706":{"id":"1:13225:13706","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"1:12809:2277","prim@char":"4:15720:1699"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:12601:2656","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3319:1913":{"id":"1:3319:1913","crate_id":1,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3321:166","1:3322:1203"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4596:2318":{"id":"4:4596:2318","crate_id":4,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4597:1727","4:4598:53256","4:4600:53257","4:4601:3582","4:4602:53258","4:4603:53259","4:4604:53034","4:4613:2042"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13295:53388":{"id":"1:13295:53388","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10107:2325":{"id":"1:10107:2325","crate_id":1,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10108:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3297:1912":{"id":"1:3297:1912","crate_id":1,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3298:166","1:3299:930"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13203:56529":{"id":"1:13203:56529","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:49386:2700","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3904:68":{"id":"1:3904:68","crate_id":1,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3905:1397"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"4:6367:2927":{"id":"4:6367:2927","crate_id":4,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6368:55786","4:6369:36396","4:6370:55787","4:6371:55788","4:6372:55789","4:6373:55790"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10427:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10351:2471":{"id":"1:10351:2471","crate_id":1,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10352:141","1:10353:13496","1:10354:52861"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13184:53463":{"id":"1:13184:53463","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:15737:1713"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3638:132":{"id":"1:3638:132","crate_id":1,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3640:666"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3633:208","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13181:55375":{"id":"1:13181:55375","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12280:2864"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:4539:2945":{"id":"4:4539:2945","crate_id":4,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4540:2835","4:4541:55848","4:4543:55849","4:4544:55851","4:4545:2946","4:4546:55850","4:4547:55725","4:4549:55852","4:4550:2042","4:4551:3114","4:4552:2024","4:4554:2036"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8146:2417":{"id":"1:8146:2417","crate_id":1,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8148:2069"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13265:56539":{"id":"1:13265:56539","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13292:2899":{"id":"1:13292:2899","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13281:56544":{"id":"1:13281:56544","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:15720:1699","self::pattern":"1:12809:2277"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12834:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2799:100":{"id":"1:2799:100","crate_id":1,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2800:391","1:2801:393"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13269:56542":{"id":"1:13269:56542","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"1:12809:2277","prim@char":"4:15720:1699"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"1:12839:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13261:56537":{"id":"1:13261:56537","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3083:130":{"id":"1:3083:130","crate_id":1,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3085:660"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6465:3007":{"id":"4:6465:3007","crate_id":4,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6466:55841","4:6467:55842"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3348:1919":{"id":"1:3348:1919","crate_id":1,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3350:1207"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13204:14099":{"id":"1:13204:14099","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:49414:2703","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3343:1918":{"id":"1:3343:1918","crate_id":1,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3345:1204"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13205:52090":{"id":"1:13205:52090","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:15720:1699","self::pattern":"1:12809:2277"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3481:1920":{"id":"1:3481:1920","crate_id":1,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3483:166","1:3484:730"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13208:53499":{"id":"1:13208:53499","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:15720:1699","self::pattern":"1:12809:2277"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3621:1924":{"id":"1:3621:1924","crate_id":1,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"1:3552:1923","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3644:1926":{"id":"1:3644:1926","crate_id":1,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3646:51235"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10306:137":{"id":"1:10306:137","crate_id":1,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10307:694","1:10309:52484"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4614:2949":{"id":"4:4614:2949","crate_id":4,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4615:56314","4:4616:36248","4:4617:56316","4:4618:56315"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3090:211":{"id":"1:3090:211","crate_id":1,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3092:122","1:3093:1383"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3185:202":{"id":"1:3185:202","crate_id":1,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2865:162":{"id":"1:2865:162","crate_id":1,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2866:397","1:2867:2057","1:2868:2058","1:2869:2077"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"1:2834:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2875:169","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:12839:2281":{"id":"1:12839:2281","crate_id":1,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12834:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3409:1857":{"id":"1:3409:1857","crate_id":1,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3410:525"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"1:3396:111","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10103:2324":{"id":"1:10103:2324","crate_id":1,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10104:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13522:133":{"id":"1:13522:133","crate_id":1,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13523:166","1:13524:991"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5805:3321":{"id":"5:5805:3321","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5807:166","5:5808:14194"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3245:1898":{"id":"1:3245:1898","crate_id":1,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3247:166","1:3248:249"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13298:3017":{"id":"1:13298:3017","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"4:15720:1699"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:49430:2705","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13199:3114":{"id":"1:13199:3114","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:49108:2686","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3716:1931":{"id":"1:3716:1931","crate_id":1,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10042:2318":{"id":"1:10042:2318","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10043:1497","1:10044:53033","1:10046:53034"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6767:2915":{"id":"4:6767:2915","crate_id":4,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6768:55255"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3288:1905":{"id":"1:3288:1905","crate_id":1,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3290:539"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3186:201":{"id":"1:3186:201","crate_id":1,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3189:204":{"id":"1:3189:204","crate_id":1,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10113:2327":{"id":"1:10113:2327","crate_id":1,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10114:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13268:56541":{"id":"1:13268:56541","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3485:1921":{"id":"1:3485:1921","crate_id":1,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3487:731"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"1:3481:1920","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6051:2834":{"id":"5:6051:2834","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8302:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8179:131":{"id":"1:8179:131","crate_id":1,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8181:663"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:9207:3044":{"id":"4:9207:3044","crate_id":4,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:9208:55745","4:9209:55746","4:9210:55747","4:9211:55748","4:9212:2736","4:9213:28525","4:9214:55744"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10427:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2829:168":{"id":"1:2829:168","crate_id":1,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2831:584","1:2832:884"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:2774:93":{"id":"1:2774:93","crate_id":1,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2776:1689"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"4:5627:2993":{"id":"4:5627:2993","crate_id":4,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5628:55179","4:5629:55181","4:5630:55180","4:5631:55182"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3396:111":{"id":"1:3396:111","crate_id":1,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3397:205","1:3398:523"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:1075:3015":{"id":"4:1075:3015","crate_id":4,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:1076:2078","4:1077:2899","4:1078:54463","4:1079:54464","4:1080:53386","4:1081:53387","4:1082:53388"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3463:1929":{"id":"1:3463:1929","crate_id":1,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3465:221","1:3466:191","1:3467:52822"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:7685:3161":{"id":"4:7685:3161","crate_id":4,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:7686:56157"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8660:2393":{"id":"1:8660:2393","crate_id":1,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"1:7707:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8183:146":{"id":"1:8183:146","crate_id":1,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8184:2017","1:8185:2018","1:8186:745"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5693:2997":{"id":"4:5693:2997","crate_id":4,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5694:53245"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10710:198":{"id":"1:10710:198","crate_id":1,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:10712:166","1:10713:1547","1:10714:52744","1:10715:52745","1:10716:52746","1:10717:730","1:10718:731"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10701:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3272:1901":{"id":"1:3272:1901","crate_id":1,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3273:166","1:3274:890"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13293:53386":{"id":"1:13293:53386","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13252:56534":{"id":"1:13252:56534","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"4:15726:1704","self::pattern":"1:12809:2277","prim@char":"4:15720:1699","`DoubleEndedIterator`":"1:8227:115"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:49344:2698","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12834:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13200:14070":{"id":"1:13200:14070","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"4:15726:1704"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:49396:2701","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3280:1908":{"id":"1:3280:1908","crate_id":1,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3282:1326"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10111:2326":{"id":"1:10111:2326","crate_id":1,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10112:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13197:2724":{"id":"1:13197:2724","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:15720:1699"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:49092:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6771:2917":{"id":"4:6771:2917","crate_id":4,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6772:56185"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3339:1917":{"id":"1:3339:1917","crate_id":1,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3341:340"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12748:2454":{"id":"1:12748:2454","crate_id":1,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12749:121","1:12750:52975"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13202:3660":{"id":"1:13202:3660","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:49376:2699","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6695:3020":{"id":"4:6695:3020","crate_id":4,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6696:55144","4:6697:55421"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10427:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13258:56536":{"id":"1:13258:56536","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"1:8227:115","prim@char":"4:15720:1699","self::pattern":"1:12809:2277","str::match_indices":"4:15726:1704"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:49290:2695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12834:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13175:56524":{"id":"1:13175:56524","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6377:207":{"id":"5:6377:207","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6378:2081"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:41:1549":{"id":"0:41:1549","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["lazy",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"LazyStatic","id":"0:39:1548","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:3260:1899":{"id":"1:3260:1899","crate_id":1,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3262:166","1:3263:538"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3314:1911":{"id":"1:3314:1911","crate_id":1,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3316:166","1:3317:339"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:22622:2362":{"id":"1:22622:2362","crate_id":1,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22612:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:772:206":{"id":"5:772:206","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:773:2078","5:774:2079","5:775:2080"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13287:56546":{"id":"1:13287:56546","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:12809:2277","prim@char":"4:15720:1699"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12834:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3177:195":{"id":"1:3177:195","crate_id":1,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3429:127":{"id":"1:3429:127","crate_id":1,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3431:166","1:3432:361"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3325:1914":{"id":"1:3325:1914","crate_id":1,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3327:166","1:3328:1206"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6054:57184":{"id":"5:6054:57184","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8302:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2834:119":{"id":"1:2834:119","crate_id":1,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2829:168","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13178:56526":{"id":"1:13178:56526","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"4:15726:1704"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13246:56533":{"id":"1:13246:56533","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12834:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3012:2414":{"id":"1:3012:2414","crate_id":1,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:3011:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3633:208":{"id":"1:3633:208","crate_id":1,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3634:166","1:3635:1926","1:3636:665","1:3637:352"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"1:3638:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3633:208","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6071:2973":{"id":"5:6071:2973","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8302:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6861:2910":{"id":"4:6861:2910","crate_id":4,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6862:55822"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5705:3000":{"id":"4:5705:3000","crate_id":4,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5706:54956"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:38:1542":{"id":"0:38:1542","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"},"1:13172":{"id":"1:13172","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:12269:1310","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:13173:770","1:13174:2013","1:13175:56524","1:13176:56525","1:13178:56526","1:13181:55375","1:13182:56527","1:13183:287","1:13184:53463","1:13185:1547","1:13187:52744","1:13189:52745","1:13191:52746","1:13193:3111","1:13194:56528","1:13195:53482","1:13196:53483","1:13197:2724","1:13198:2306","1:13199:3114","1:13200:14070","1:13201:14108","1:13202:3660","1:13203:56529","1:13204:14099","1:13205:52090","1:13208:53499","1:13211:53500","1:13214:2053","1:13218:2012","1:13222:53490","1:13225:13706","1:13228:53493","1:13231:56530","1:13234:56531","1:13237:53495","1:13240:53497","1:13243:56532","1:13246:56533","1:13249:1726","1:13252:56534","1:13255:56535","1:13258:56536","1:13261:56537","1:13263:56538","1:13265:56539","1:13267:56540","1:13268:56541","1:13269:56542","1:13272:56543","1:13275:33419","1:13278:53501","1:13281:56544","1:13284:56545","1:13287:56546","1:13290:2591","1:13292:2899","1:13293:53386","1:13294:53387","1:13295:53388","1:13296:56547","1:13298:3017","1:13299:56548"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:8656:2392":{"id":"1:8656:2392","crate_id":1,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8378:152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:5649:2995":{"id":"4:5649:2995","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5650:56059","4:5651:53245","4:5652:54956","4:5653:56060","4:5654:3284","4:5655:3285","4:5656:56061","4:5657:1274","4:5658:56062","4:5659:56063","4:5660:56064","4:5661:56065","4:5662:56066","4:5663:56067","4:5664:56068","4:5665:56069"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13263:56538":{"id":"1:13263:56538","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13194:56528":{"id":"1:13194:56528","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:15726:1704","crate::ops::IndexMut":"1:3485:1921","str::slice_unchecked":"4:15726:1704"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:3155:110":{"id":"1:3155:110","crate_id":1,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3156:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13191:52746":{"id":"1:13191:52746","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"4:6769:2916":{"id":"4:6769:2916","crate_id":4,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6770:55763"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6073:54464":{"id":"5:6073:54464","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"4:15726:1704"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3335:1916":{"id":"1:3335:1916","crate_id":1,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3337:337"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10092:105":{"id":"1:10092:105","crate_id":1,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10093:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13240:53497":{"id":"1:13240:53497","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:15720:1699","self::pattern":"1:12809:2277","str::splitn":"4:15726:1704"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:49244:2663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12819:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12834:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13189:52745":{"id":"1:13189:52745","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:13174:2013":{"id":"1:13174:2013","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13185:1547":{"id":"1:13185:1547","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:47164:161"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3187:102":{"id":"1:3187:102","crate_id":1,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13183:287":{"id":"1:13183:287","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"4:15726:1704","`u8`":"4:15737:1713"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"4:11950:3094":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"4:14373:113":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"5:7221:4264":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:9933:43388":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"4:10670:3006":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"4:15702:55233":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:11604:44085":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:5185:40156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:11015:43687":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:10458:43502":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"11:46:58613":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"17:11640:44122":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:10140:4105":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:5522:40205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:8179:131":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"5:4485:3417":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"6:5159:40154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:8131:2018":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"18:754:59509":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:5632:3765":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"12:429:3614":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"4:10228:43370":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:5927:3775":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"4:15745:1721":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"6:3945:39507":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:10701:2432":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"4:11271:2913":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:781:104":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:7779:4278":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"0:38:1542":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"1:49290:2695":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:8929:43372":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"4:4605:56045":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"4:14016:2968":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:2318:1858":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:48863:2661":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:50058:2727":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:4203:39535":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:2314:4096":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:12917:48817":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:49098:2685":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:3409:1857":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"4:4305:2968":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:8061:3325":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:12040:48181":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:49122:2655":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:3280:1908":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:46022:2890":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"4:11249:33141":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:6021:3967":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:1080:4264":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:8325:3314":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:4890:42393":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:2733:3684":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"10:0:1755":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:8146:2417":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:7420:3733":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"4:11245:3019":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:13497:49411":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:7549:3721":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:7449:2025":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:10001:43442":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:8252:1830":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"4:10658:3218":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"17:11001:43660":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"12:968:3063":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:11794:44305":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:6413:3628":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:32086:50364":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"5:912:3371":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:3086:212":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"17:11616:44086":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:3604:41758":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"4:7182:55708":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11750:44293":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"4:10710:3239":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:6577:3792":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"14:244:41675":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"4:9496:4303":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"4:1152:30008":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:6718:4005":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"9:234:3503":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"4:2458:4390":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"4:15734:1710":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"17:11822:44307":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"4:2852:165":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:6091:40576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"9:996:3544":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:3187:102":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"4:7813:4392":{"crate_id":4,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"17:13506:49412":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"4:6345:2924":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:5228:40161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"4:8801:1876":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:38477:2413":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"6:5528:39417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:4598:219":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:47164:161":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"6:3862:39501":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"4:12039:1874":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:3485:1921":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:6881:39696":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:51792:2524":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"18:744:59506":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:6124:40579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:22612:2432":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:13386:49373":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:3951:39508":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"4:11146:3263":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:10926:43684":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:51381:2488":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:48932:2668":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:48987:2672":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:2512:4092":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:47637:79":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:2723:3022":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"4:11109:55244":{"crate_id":4,"path":["std","net","parser","AddrKind"],"kind":"enum"},"1:22622:2362":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:1455:1670":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"17:12552:48278":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"18:169:49881":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:13306:49038":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:4052:39520":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:6269:3785":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:7637:2232":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:3266:1902":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"4:11466:3133":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"14:189:41673":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"4:11916:3090":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"4:5705:3000":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"4:7908:3209":{"crate_id":4,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"4:11857:55238":{"crate_id":4,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"17:8954:4050":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:10801:43574":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:9245:4041":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:11358:4044":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:13532:49417":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"4:4307:2969":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:48961:2671":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:32022:2580":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:10200:43457":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"9:469:41350":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:7333:3731":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:7959:1865":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"17:13760:49438":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:11588:44084":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:48161:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"5:4569:4267":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"5:983:3372":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"4:10449:3191":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"13:232:58624":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"4:15735:1711":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"4:5561:3011":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"4:2362:580":{"crate_id":4,"path":["std","env"],"kind":"module"},"4:10801:3171":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"12:1100:3065":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"4:3539:4286":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:45614:182":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:3260:1899":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"4:2188:3177":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:9649:43383":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:23903:4993":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:375:3369":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:13898:49508":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:4164:39532":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:4916:1848":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"16:7146:3800":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:5504:1868":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:4449:39562":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"4:14761:3157":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"4:11157:3265":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:49888:2798":{"crate_id":1,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"4:5697:2998":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:4535:42288":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"9:692:3478":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"17:12442:48270":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"5:1920:3056":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"4:1041:3010":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:47222:2018":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"4:10806:2962":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"12:160:3613":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:10611:43605":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:4127:39529":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"12:892:3601":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"4:11212:3274":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"4:10538:30976":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"4:15738:1714":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"4:8571:1871":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"4:2177:3175":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"4:3563:2953":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"4:14774:3048":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"4:11963:3095":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:13824:2383":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:50894:2522":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:6391:3787":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:23809:4973":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:13746:49437":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:7843:3813":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:1676:37419":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:10105:2316":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:46430:2248":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:7195:3804":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:6910:39700":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"4:10930:2948":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"17:13394:49374":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:4364:39551":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"12:1762:4262":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"15:269:3636":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:3997:39513":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"4:1075:3015":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"4:4273:3248":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"11:0:1756":{"crate_id":11,"path":["adler"],"kind":"module"},"17:12275:48259":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:4823:42376":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:55805:220":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:53193:19586":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"4:1488:3057":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:46371:2243":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"12:2315:58621":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:11499:44014":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:9162:4081":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:5436:58558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"4:11875:53385":{"crate_id":4,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"18:694:4174":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:3020:57843":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:10289:4307":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:3644:1926":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:7514:3732":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"4:12535:4311":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:13154:48880":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:3331:1915":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:2311:3432":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:6238:3715":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"18:644:4171":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:12610:48295":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:12741:48357":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"12:2309:52470":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"4:10653:3018":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"6:6899:39699":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:1760:37427":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:55857:220":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:8629:157":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:46310:2238":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:5383:2937":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:23630:2747":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"12:1144:3067":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:2865:162":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"16:7119:3704":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:13986:49525":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:9005:43373":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:46399:2245":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:49031:2676":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:4046:39519":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"12:112:58618":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:48923:2667":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"4:14550:3158":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:12408:48268":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"7:85:41232":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:5432:756":{"crate_id":1,"path":["core","iter"],"kind":"module"},"17:10128:4143":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:6618:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"4:894:3186":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"12:469:58614":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"18:610:4169":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:8076:3373":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:5221:40160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:48246:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"17:13788:49475":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:2799:100":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:3245:1898":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"6:5563:40207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:569:36524":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:10912:43675":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:3940:4264":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:50067:2728":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:6964:1991":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"4:11089:55363":{"crate_id":4,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"14:0:1758":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:2968:3971":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:23857:4983":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:12280:2864":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:46137:96":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"4:8734:1671":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"6:6155:40580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:51302:2499":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:11030:122":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:10962:43663":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:2181:4266":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:10623:43606":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:670:36561":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:1824:4264":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:46155:2786":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:49619:2290":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:46122:2558":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:2243:3433":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:537:36521":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"4:1018:3209":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"6:4358:39550":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:46035:2706":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"4:3908:3173":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:1563:37409":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:3742:2539":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"4:10428:3183":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:11738:44292":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:6614:36476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:11970:43608":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:4008:43577":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"18:650:4168":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:47595:85":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"12:2032:3175":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:11847:44321":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:6101:3708":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:10106:4141":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:3320:4032":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:4417:42270":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:9600:59494":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"9:41:3528":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"16:4704:42357":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:7236:3808":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:1723:37424":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:13933:49516":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:6152:3712":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"4:14851:3165":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:3633:208":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:9112:1995":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:4439:39561":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:50807:2497":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:46250:2252":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:4033:39517":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:12601:2656":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:3549:41757":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:4639:2435":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"4:10942:2950":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:13572:50508":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:45968:2553":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"4:15724:1702":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"1:7886:2975":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"18:849:4163":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:45545:179":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"4:14950:3112":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:11131:2660":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:13963:49518":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"4:11060:3116":{"crate_id":4,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"1:9779:2642":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"4:10987:2655":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"17:3743:4036":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"4:8527:1870":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"4:9580:3255":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"4:8355:187":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:52915:2490":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"4:1619:3065":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:13648:14198":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"4:15737:1713":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:13522:133":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:51404:2491":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:52599:2501":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:10788:43575":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:10814:4039":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:5766:3771":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:3241:3977":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"4:8877:1879":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:50759:2517":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:7894:3748":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:10529:43504":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"4:11815:3156":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"17:13446:49404":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:12566:2696":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:49646:2291":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:46089:2886":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:52789:2505":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:2211:2402":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:8232:3403":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:24357:2606":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:3392:3985":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"4:15470:4316":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"4:14097:2212":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"5:8247:2786":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:6303:2255":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:9296:43361":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:46360:2257":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:32186:50348":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"16:4448:42276":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:3304:1909":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"4:9083:3147":{"crate_id":4,"path":["std","lazy","SyncOnceCell"],"kind":"struct"},"17:10377:4095":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:12839:2281":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:11058:2658":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:50014:4401":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:24561:2760":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"18:766:59510":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:9769:59493":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:13282:48974":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:5269:40162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:3339:1917":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"9:900:41378":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"4:14022:2966":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"4:14537:3014":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:10516:4133":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"4:11201:3303":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:46658:11259":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"4:8369:3092":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:591:36526":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:13865:49484":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"4:13344:30981":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:7264:3728":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"4:5649:2995":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"7:0:1448":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:4193:39534":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:2875:169":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:4413:2538":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:10266:4069":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"12:181:3617":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"12:1235:3612":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:511:36517":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"5:3718:155":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:3864:3451":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:12431:48269":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:7856:3814":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:13296:48976":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:12028:48125":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:1729:3275":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:3292:1907":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:13356:49043":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"18:811:4160":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:3077:73":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:46142:2785":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:3481:1920":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:11716:2679":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"15:248:3632":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:531:36520":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"4:11132:32551":{"crate_id":4,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"1:3250:1903":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:1599:2018":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:22616:2359":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:8192:1831":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:9133:43377":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:22771:28137":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"5:7575:3351":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"12:463:58617":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"5:909:92":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"4:5281:3261":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"4:10521:3069":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:3343:1918":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:46220:4318":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:4501:39567":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:12467:48272":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:49041:2677":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"14:231:3316":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:45997:2556":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"18:620:59518":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"12:2025:3174":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:4:957":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"12:2323:58622":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"9:686:3476":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"4:820:4306":{"crate_id":4,"path":["std","thread","local","os","Key"],"kind":"struct"},"17:13799:49476":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"4:15744:1720":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"5:7735:218":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:50736:2529":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"4:9633:4305":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"17:13192:48926":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:48179:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:47351:2018":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"17:11767:44301":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:6731:4006":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:7205:3805":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"4:14380:2948":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:10710:198":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:1000:2538":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:51183:2523":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:8718:2608":{"crate_id":1,"path":["core","lazy","OnceCell"],"kind":"struct"},"1:53255:19588":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:4013:39515":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:48298:72":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:3552:1923":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:1658:37417":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:4844:1842":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:3172:3974":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:2138:1028":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:48914:2666":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:49376:2699":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:55818:220":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:1459:3054":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:12507:48275":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:12010:48081":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:8278:3405":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:4230:42183":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:22392:53220":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:5472:3759":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:7786:3723":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"14:250:41681":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:8849:4078":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:13163:48881":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"5:8302:200":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:3990:39512":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:23910:2819":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"4:7545:3151":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"17:13627:49433":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:5414:40174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:11172:2662":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:4371:39552":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:11932:48072":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:12051:48182":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:49065:2789":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:1602:37413":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"4:12044:1880":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"4:10994:2699":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"1:4651:98":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"6:1522:37403":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:11378:4043":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:10599:43604":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"4:15718:1697":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"4:15730:1706":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"1:10223:53125":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:48194:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"4:15719:1698":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"1:24527:2759":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"16:4852:42380":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"4:3440:2957":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"4:8804:1877":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:7804:3722":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:51823:2527":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:6136:3751":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:6366:3629":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"4:8362:3091":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"12:2039:3176":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:3420:1829":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:4293:39542":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:6730:2937":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:48474:2474":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:13370:49044":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:49439:2706":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"4:3261:3232":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:45721:2430":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"16:4762:42365":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:45728:2431":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:13377:49056":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:12287:48260":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:9849:59487":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:11458:43798":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:51745:2520":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:6636:40946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:13609:49426":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"18:152:49880":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:8653:2391":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:53114:19581":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:4215:39536":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:46060:2705":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:1184:57771":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:10975:43662":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:13537:145":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"4:15736:1712":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"4:11226:3283":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:10099:114":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"4:8751:2210":{"crate_id":4,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"5:7075:4278":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"5:3314:3175":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:46471:2251":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:5548:40206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:10468:4131":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:543:36522":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:5522:3762":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:11199:43396":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:1616:3053":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:11277:43360":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:2773:3994":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:52063:2507":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"9:722:3479":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"4:11460:2538":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"6:157:36208":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"4:7511:3149":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"4:15190:34863":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"1:53216:19587":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:24289:2753":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"5:3307:2538":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"9:603:41455":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:9971:59491":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"4:14305:3021":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:5213:2881":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:11434:43797":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:5167:40155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:1224:3431":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"4:6607:55176":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"4:9628:4304":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"17:12262:48258":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:51105:2531":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:4300:39543":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:46259:2235":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:3621:1924":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:8296:57705":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"16:5960:3957":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:7571:3709":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:48458:2475":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:3083:130":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"5:6638:1868":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:1458:3066":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:4835:1840":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:13318:49040":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"9:27:3527":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"1:10938:2655":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"4:14343:55160":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"18:636:59503":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:12582:48280":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:1630:37416":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"18:667:4173":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:3314:1911":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"4:9595:3256":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:7738:3811":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:11726:44183":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"4:15726:1704":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"1:12527:2692":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"4:11194:3030":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:5841:4273":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"4:1633:3066":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:3041:3973":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:3429:3701":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:10571:43603":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:3264:3978":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:9114:1993":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"9:963:3543":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:10827:4040":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:3218:3976":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"4:10454:3207":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"1:53079:19578":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:10211:43456":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:4145:39531":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:4614:42342":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:7360:179":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:4255:3282":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:3309:1910":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:5433:3757":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:6110:3750":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"4:5627:2993":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:3195:3975":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"4:11220:3263":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:4395:39555":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"4:10684:124":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:47360:163":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"4:1132:3024":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:4387:39554":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:13733:49436":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:4478:39565":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"4:11030:3036":{"crate_id":4,"path":["std","net","ip","IpAddr"],"kind":"enum"},"5:3029:57732":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:2754:3961":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"4:4267:3246":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:49414:2703":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:10052:43445":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"12:1855:140":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:12685:48348":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"4:4614:2949":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"4:6603:55172":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"4:2456:4389":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"6:0:775":{"crate_id":6,"path":["libc"],"kind":"module"},"16:4477:42280":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:5295:41755":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:11231:4082":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:542:3688":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:10306:137":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"17:12659:48346":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:10477:4130":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:5459:40177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:6691:3795":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:6176:40581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:7185:3803":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:12537:48277":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:6464:3725":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"4:8520:1869":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:10353:4097":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:9961:43389":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:12828:2279":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"4:7337:170":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"1:3429:127":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:47935:2316":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:6569:4002":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:3177:195":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"17:10095:4140":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:13564:49421":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:5130:40112":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:48185:128":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"6:6852:39692":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:13402:49401":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"4:11390:3129":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:47921:2324":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:47291:190":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"17:1236:43459":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:11147:43393":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"4:13198:3276":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:12834:2280":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:48941:2669":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:5312:40166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"4:9489:4394":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"4:9458:4302":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:49554:2288":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:4459:39563":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:3287:3979":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:6807:3797":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:12748:2454":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:10448:4073":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:6620:4000":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"12:1200:3611":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"12:877:3056":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"12:1688:3624":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:13554:49420":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:6032:3703":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:6999:3798":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:3522:41756":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:51429:2492":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:4227:39537":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:12095:48189":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"4:6593:2995":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"4:11979:3096":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:681:43370":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"4:9142:3148":{"crate_id":4,"path":["std","lazy","SyncLazy"],"kind":"struct"},"4:3251:3227":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"16:5273:3962":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:53163:19584":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:8115:2018":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:11407:3130":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"1:45693:1925":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:47274:2082":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:12795:48424":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:12494:48274":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"4:12019:1872":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:4922:42400":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"4:2582:55716":{"crate_id":4,"path":["std","error","from","StringError"],"kind":"struct"},"6:6239:40586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:3729:2538":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:13180:48924":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:8902:43371":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"4:11908:2538":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"12:1253:3068":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:53099:19580":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:14:1727":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:3182:1827":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"16:5488:3760":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:12307:48261":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:3881:39503":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:46272:2253":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:49344:2698":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"19:0:972":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"4:10914:2975":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"1:22360:53137":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"5:0:261":{"crate_id":5,"path":["alloc"],"kind":"module"},"4:6367:2927":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"4:5838:3302":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:161:36209":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:4185:3055":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:2202:2401":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"4:70:1458":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"16:6554:3791":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:7804:4284":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:4431:39560":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:51906:2512":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"4:14320:55158":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"4:10427:2432":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"17:9065:43375":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"14:47:41673":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"14:11:41673":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"4:11450:3131":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"4:7525:3150":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"6:6051:37343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:9113:1994":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:32028:2804":{"crate_id":1,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"1:49326:2697":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:10101:2323":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"6:1617:37414":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:52852:2525":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:7158:3801":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:7928:2430":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:7279:4018":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:3288:1905":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:4506:42284":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:12550:2693":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:55699:2355":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"4:14906:3105":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:51255:2511":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:9551:4079":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"4:15720:1699":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"17:13477:49409":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"4:3235:3222":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:8197:3076":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:10107:2325":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"4:3529:2958":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:6200:40583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"4:15733:1709":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"1:49842:2716":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"4:5990:3271":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:6870:39695":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:4133:39530":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:47385:80":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:13810:49477":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:4331:39547":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:563:36523":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:12521:48276":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"18:704:59503":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:10117:4142":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:3809:4264":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:3423:125":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:12671:48347":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:4101:39526":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:7971:122":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"4:5555:3013":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:3255:1900":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:49718:2295":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:5231:42609":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:4120:39528":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:11628:44121":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:7176:3055":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"12:784:3058":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"4:11206:3306":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:22347:2386":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:1634:3057":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:45591:183":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"4:0:1301":{"crate_id":4,"path":["std"],"kind":"module"},"17:10988:43661":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:12327:48262":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"4:7573:3153":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"18:136:49879":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:4347:39549":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:46172:2787":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"4:4480:2976":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"17:9689:59496":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"4:2162:3055":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:4040:39518":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"4:1190:4387":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"5:7597:3352":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"4:13435:3146":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:49190:2691":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:48212:103":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"14:194:41674":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:5285:185":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:5969:36398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:22415:53223":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:5945:36439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"4:11024:3031":{"crate_id":4,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"6:525:36519":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:23559:2744":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:5595:3764":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:49080:2456":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:47283:173":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"17:12456:48271":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:12234:48256":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:5643:2994":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"4:4512:2937":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"6:5371:40169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"12:2331:3075":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:11045:43391":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:11962:43610":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"4:6465:3007":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"4:11477:3134":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:24323:2754":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:3189:204":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"6:3868:39502":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"4:11027:3032":{"crate_id":4,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"17:13924:49515":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:2991:3982":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:3978:39511":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:45637:184":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:11981:43609":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:24391:2755":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:10502:43503":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:46230:10971":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:51666:2532":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"12:377:3616":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"4:15723:1701":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:46676:11260":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"12:1180:3610":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:49022:2675":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"4:9723:4306":{"crate_id":4,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"8:0:1753":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:46300:2237":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:51356:2506":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"4:7151:55708":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:3249:3226":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"1:3012:2414":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:10316:141":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"6:4272:39540":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"4:10439:55356":{"crate_id":4,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"4:8261:3209":{"crate_id":4,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"12:937:3061":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:13884:49490":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:24425:2756":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"4:5766:3299":{"crate_id":4,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"17:13590:49424":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:9404:43380":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:8085:3055":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:5359:40168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"4:11924:2018":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"12:747:2538":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:5707:3767":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"12:2009:2018":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:7303:3810":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:13780:49474":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:5241:40140":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:6221:40585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:6424:3788":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:9729:59486":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:4281:39541":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:11683:2678":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:10844:4105":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:12118:48190":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"4:2171:3174":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"12:2045:3177":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"6:5953:37342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"4:15731:1707":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"16:6219:3783":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:4341:39548":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"4:15136:3269":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"4:14843:55357":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:46389:2244":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:10981:2656":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:11100:4085":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"4:7403:114":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"16:2889:3988":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:4425:39559":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"4:5406:3269":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:13429:49403":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:4906:1847":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:3426:126":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:49683:2292":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:49830:2712":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"5:3019:2078":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:3186:201":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"4:1482:3056":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"6:4083:39524":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"4:11000:3030":{"crate_id":4,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"12:354:4381":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:9280:41752":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:49731:13937":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"1:8142:2415":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"4:4899:3028":{"crate_id":4,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"1:49172:2690":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"4:2855:164":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:4325:39546":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:4770:1668":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"6:1533:37405":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"4:1651:3068":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:10635:43573":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:5029:42432":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"4:14937:3107":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:2113:7487":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:2108:558":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"6:1622:37415":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"4:10555:30983":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:10109:174":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"17:9896:59483":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:1472:3068":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:3272:1901":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:13453:49407":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:4317:39545":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:11482:43799":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"18:801:4159":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"0:39:1548":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"16:5717:3768":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"4:6771:2917":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:11328:43398":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"9:157:3495":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"6:6185:40582":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"4:11930:3093":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:3185:202":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:1584:37411":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:13348:49042":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"4:6227:3281":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:3155:110":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:46380:2259":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:2429:2382":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"12:976:3064":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"12:2005:2538":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"18:782:59503":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"4:11152:3264":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:12699:48349":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"9:776:3525":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:10224:43462":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:50999:2502":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"18:677:137":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:13582:49423":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:23938:2773":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:46290:2236":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"18:866:4165":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:0:1760":{"crate_id":16,"path":["gimli"],"kind":"module"},"18:729:59513":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:8183:146":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:51018:50357":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"5:421:1832":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:4517:39569":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:47721:81":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"4:12053:3047":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"16:6768:4009":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:4955:42408":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:1644:3058":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:3218:1828":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"5:8380:3056":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"6:4112:39527":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"18:820:4161":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:2816:3987":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:10111:2326":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:13718:50463":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"6:6214:40584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"4:5635:2992":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:31847:2814":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:49108:2686":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:47265:1992":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:5580:3950":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"9:0:1754":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:11947:48073":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:12982:48819":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"4:4346:2971":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:10041:43444":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:7761:3812":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"4:13363:4396":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:46440:2254":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:5407:3755":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:51481:50274":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:3205:2423":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"17:11186:43395":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:3353:3380":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:2794:3700":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:51585:50369":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:6072:3682":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:3145:3983":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:12946:48818":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:11678:44125":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:13921:136":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"4:12196:4389":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:2843:3968":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:46342:2241":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:11519:44015":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"4:14956:3113":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:49502:2278":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:10061:43461":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:4060:39521":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:12142:48249":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:10351:2471":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:49396:2701":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"4:1428:2539":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:50004:186":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"6:1717:37423":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"12:556:138":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"4:11830:3157":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:45660:1922":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"18:790:4158":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:12221:48255":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"4:10314:4309":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"4:1501:3060":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:7226:3807":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:10236:4071":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:50945:2510":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:49901:2799":{"crate_id":1,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"1:49697:2293":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:49708:2294":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"5:4276:2539":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:300:190":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:46408:2246":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"18:712:2386":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:7378:3717":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"4:5860:3304":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:13842:49481":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:57114:50283":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"17:10407:4091":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:8756:1673":{"crate_id":1,"path":["core","lazy","Lazy"],"kind":"struct"},"1:47763:88":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:3852:2961":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:46319:2239":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"4:4539:2945":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"6:5420:40175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:11714:44182":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:4494:39566":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"4:6767:2915":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:3340:3176":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:51561:50405":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:10179:43458":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"4:14681:4314":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:7073:3799":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:23817:4991":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:53068:19577":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:53040:2493":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"18:829:4162":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:49834:2715":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:10317:4093":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:48505:50396":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:5407:40173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:3319:3379":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:11835:44320":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"4:1493:3058":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:4523:39570":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:5210:40159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:88:36142":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:9659:59481":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"12:930:3060":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"12:0:1757":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"4:3116:2946":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"4:10726:2961":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:37320:2386":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:3319:1913":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:3904:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"4:2565:122":{"crate_id":4,"path":["std","error","Error"],"kind":"trait"},"1:8227:115":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:10160:43460":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"4:9501:4395":{"crate_id":4,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"1:47214:2539":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"16:5736:3769":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:45570:180":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:5456:3758":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:46082:2704":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:12073:48183":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:46012:2889":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:605:36528":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:3892:39504":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"0:0:1542":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"1:3396:111":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:519:36518":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:9034:43374":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:5360:3753":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:1708:37422":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"4:1518:3062":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:3714:41767":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"4:3113:2835":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"6:1908:37562":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"4:6695:3020":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:8137:2018":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:5975:3776":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"4:13883:4312":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:49866:116":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"4:14356:124":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"4:2183:3176":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:1625:3054":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"12:2013:3055":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:49571:2289":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"4:14330:3005":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"4:3108:123":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"17:10028:43443":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"4:6839:2914":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:11696:44126":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:10420:4090":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:52098:2489":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"4:8170:3209":{"crate_id":4,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"4:696:3182":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:5197:40158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:12598:48281":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:13240:48930":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"4:13715:4397":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:51206:2526":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:13912:49514":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:616:36530":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:3338:3959":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"4:783:4306":{"crate_id":4,"path":["std","thread","local","fast","Key"],"kind":"struct"},"1:48483:141":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:1204:3430":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"4:1302:138":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:6744:4007":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:22764:2432":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"4:11853:55364":{"crate_id":4,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"17:13819:49480":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:8093:3374":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"4:7685:3161":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"17:10081:4103":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:11809:44306":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:46687:11262":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:5330:41752":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:49862:2714":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:52710:2521":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:6085:40575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:13772:49473":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:6949:4013":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:5801:3319":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:10489:4132":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:6491:3789":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:13465:49408":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:49386:2700":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:1572:37410":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:3080:144":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"17:9088:43376":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:32034:50370":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"1:51152:2519":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:9186:4048":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"4:2397:30970":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"1:23723:2598":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:52456:2533":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:4574:2937":{"crate_id":1,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"17:12208:48254":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:10331:4105":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:24221:2751":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:4183:39533":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:578:32182":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:8378:152":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:3374:3177":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:3348:1919":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:10914:2539":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:13062:48874":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:49013:2674":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:5406:2410":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:51985:2500":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:5386:40171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"4:12093:3049":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:12632:48344":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:46043:2884":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"15:230:3631":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"4:10964:2235":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"1:52962:2508":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"12:774:2018":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:4212:4264":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"4:9331:55820":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"4:2159:2018":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:7943:51793":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:11816:4324":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"17:13942:49517":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:8656:2392":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:7453:3713":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:53088:19579":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:1700:37421":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:1666:179":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"4:15115:3262":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:10279:4103":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:10052:129":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"4:15214:3640":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:12256:2906":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:12182:48252":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:45453:1932":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:2004:2937":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"4:13737:3155":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:49854:2719":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:7870:3719":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:5855:3774":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:55792:220":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:3110:3219":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"6:6106:40578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:5978:40572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:10304:4094":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:9332:4127":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:5385:10970":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"4:15741:1717":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"4:1438:2018":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:11082:4049":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:50913:50374":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"9:1020:3545":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:294:59495":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:3064:4030":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:12343:48263":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:51057:50395":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:23461:2432":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:50099:2483":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:22675:2485":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"4:3955:122":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"16:6682:3726":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:6893:39698":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:55779:220":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:2758:3435":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"4:6107:3280":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:12819:2276":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:24931:2560":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"3:0:1749":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"17:9440:43381":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:13221:48928":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:7024:4016":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:2945:3993":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:1547:37407":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:23873:4994":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"5:6654:3399":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:6812:41106":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:13041:48820":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:13978:49523":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:45700:2457":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"4:14325:55372":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"4:12533:3218":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:3090:211":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"16:4641:42344":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:4262:39539":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:53178:19585":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:11993:48078":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"4:5683:2996":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:6230:2240":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:13488:49410":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:5469:40178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:49540:2285":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:4419:39558":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:3679:1856":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"4:11845:3158":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"4:11316:3118":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"17:10543:43601":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:11159:43394":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:46103:2888":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:4095:39525":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:49244:2663":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"4:11057:3038":{"crate_id":4,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"1:47197:2017":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:49421:2704":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:12809:2277":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"5:3025:57733":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:4671:42349":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:49000:2673":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:1546:90":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:23781:2593":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:6887:39697":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"9:749:3480":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"5:3278:91":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"5:3348:3174":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"4:5284:3262":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:57093:50409":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"4:15055:3039":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:1427:3065":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"18:774:59503":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:9839:4105":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:51038:2487":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:1655:3059":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:49405:2702":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"5:4613:4269":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:6858:39693":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:1744:37426":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:1675:3428":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"19:117:59522":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"1:10042:2318":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:24187:2750":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"4:4621:2930":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"4:15743:1719":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"5:8313:3313":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:3195:1854":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"6:6864:39694":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:7295:3730":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:50840:2530":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:3966:39510":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"18:720:50185":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:4386:42264":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:4401:39556":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:46461:2250":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"7:38:41225":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"4:7013:33143":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"12:1651:3622":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"4:2395:30969":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"5:6441:3055":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:11186:2663":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:8264:3404":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:9774:2641":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:49430:2705":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:9592:123":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"16:3506:3980":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"18:896:4167":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:6918:3311":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"4:14793:54957":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"4:7228:171":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"6:4066:39522":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"4:14813:3047":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"16:5753:3770":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:5384:3754":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:5274:40163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:5672:3766":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:6005:33141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:7392:3718":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:46642:11257":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"4:5889:3308":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"4:11054:3037":{"crate_id":4,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"16:6780:3796":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:46667:2976":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"12:866:3055":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:3335:1916":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:10673:43607":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"4:14533:30983":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:47469:77":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:5941:174":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:11020:2657":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"4:9207:3044":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"4:3233:2396":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"17:9759:43385":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:15686:56170":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:13540:49418":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:11118:43392":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"12:812:3059":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:2484:43490":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:48709:2897":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"4:2027:140":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"4:14748:3156":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:12645:48345":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:3918:39506":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:13054:48872":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:48224:122":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"6:6923:41132":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"4:7808:3208":{"crate_id":4,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"1:48466:50355":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:53001:2528":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:23794:2594":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:4839:1841":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"18:0:1762":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:49140:2659":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:48705:2896":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:4023:39516":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:13613:172":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"6:3905:39505":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:10071:4146":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"4:7628:3155":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"1:51333:2503":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"4:15739:1715":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"1:13834:2729":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"5:8101:57709":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:1736:37425":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"5:6377:207":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:46451:2249":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"4:8269:3128":{"crate_id":4,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"17:10149:43387":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"4:8741:1672":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"6:4241:39538":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"4:10796:3170":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:6126:3779":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"4:4344:2970":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:11653:44123":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"14:216:41682":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"4:1157:30009":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:31987:2781":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"4:10531:3070":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"9:1075:3546":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:11539:44075":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"4:12073:3048":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"1:22375:53137":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"4:14922:3106":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"11:54:3599":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"16:5421:3756":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"4:10500:30004":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:4627:2434":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:5505:3761":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"9:809:3128":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:24255:2752":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:13119:48876":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:22807:2432":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:0:1761":{"crate_id":17,"path":["object"],"kind":"module"},"17:13258:48971":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:11406:43789":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"4:1446:3053":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:8070:2018":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:6644:40947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:9799:43386":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:23366:2360":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"4:1472:3055":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:3011:2432":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:5756:4264":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"4:7559:3152":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"4:8074:4288":{"crate_id":4,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"1:2690:559":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:12712:48350":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:47231:1991":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:4282:2018":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:10558:43602":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:3800:41803":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:772:206":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"4:10559:3439":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"17:9574:4084":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"4:12048:1881":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:1596:37412":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"9:927:41344":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:11200:2664":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:3650:1928":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"4:2155:2538":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:6672:2258":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:53140:19583":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:13993:2479":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:47942:2325":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"15:0:1759":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:3091:4031":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"4:11868:55724":{"crate_id":4,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"17:12783:48421":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:9616:75":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:5561:3763":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:7042:4017":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:4734:42362":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:10356:2473":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:55831:220":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:12725:48356":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:12885:2284":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:3488:3981":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"4:4596:2318":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"17:10950:43686":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:7707:2394":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"6:5282:40164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:47553:78":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:7408:4264":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:4410:39557":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"4:14390:55434":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:46066:2885":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"16:5314:41753":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:49525:2282":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:11665:44124":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:49846:2720":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"4:10981:2686":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"12:1159:3609":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"4:15732:1708":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"17:12373:48266":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:12771:43398":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:45780:2574":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:4790:42368":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:1311:4147":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"4:10921:2977":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"4:1530:3064":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:13620:49432":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:3118:3984":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:6223:3351":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:2774:93":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"5:8397:3347":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"4:10472:2212":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"16:6591:3793":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:7535:2261":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:13331:49041":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:11214:2665":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:50711:50351":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"4:13562:3163":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:547:3952":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:7406:3716":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:50022:175":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"18:739:59521":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:610:36529":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:0:470":{"crate_id":1,"path":["core"],"kind":"module"},"4:10564:2235":{"crate_id":4,"path":["std","error","Chain"],"kind":"struct"},"6:5379:40170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:9886:43387":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:10435:43501":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:50976:2498":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"5:3921:3056":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:49838:2717":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"12:949:3062":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:11093:2659":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"4:900:3187":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:6176:3781":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:4669:4269":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"4:10702:113":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:10584:4052":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:45529:181":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"4:11802:166":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:52032:2504":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"4:15721:1700":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"17:12247:48257":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"4:5868:3305":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:1588:2539":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"4:1507:3061":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"4:7682:3159":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"6:1554:37408":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:9719:43384":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:12490:2689":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:46281:2256":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:3957:39509":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"18:837:2279":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:5996:3777":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:1690:37420":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:5428:40176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:23701:4960":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:47679:86":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:3325:1914":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"4:15225:3640":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:3970:2463":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"4:1524:3063":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"4:6769:2916":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:5805:3321":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:2834:119":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:3284:1906":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:46351:2242":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:2829:168":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:3074:74":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"18:660:4172":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:11026:43390":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"4:13699:3153":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"4:8291:3450":{"crate_id":4,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"5:3021:57680":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:50784:2509":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:3018:3972":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:2543:4129":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:12168:48251":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:7342:3745":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:13885:186":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"1:49272:2694":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:24459:2757":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"4:1415:2538":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"12:396:3615":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"13:120:41628":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:7250:3809":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:4350:42253":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:6605:3727":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:23925:2774":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:11337:4128":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:11555:44076":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:7216:3806":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:12155:48250":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:50081:153":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:632:36532":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:5400:40172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:3716:1931":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:4304:42232":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:49850:2718":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"4:1149:30006":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:11304:43397":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:510:43368":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:1527:37404":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:5790:3772":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:13172:48882":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:10864:43578":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:22394:53218":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:584:36525":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:11779:44302":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:4073:39523":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:2534:3436":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:12195:48253":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:7823:3724":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:47206:2538":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"5:8214:97":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:13520:49414":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"4:8013:3209":{"crate_id":4,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"16:6166:3780":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:2912:3970":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:37296:163":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"9:1056:3538":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"4:10239:55712":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"4:7856:4288":{"crate_id":4,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"1:3463:1929":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:47343:2539":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"16:7884:3720":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:0:412":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"17:10403:4101":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:13637:49434":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"4:15742:1718":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"17:12480:48273":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:6014:3778":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"4:6698:2924":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:7467:3714":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:49092:2684":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:50690:50275":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:53059:19576":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:10656:43588":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"12:925:3057":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"4:15727:1705":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"16:7477:3734":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:47427:87":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:3638:132":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:27742:2420":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:22816:2486":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"4:4383:2966":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:11298:33144":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:2777:2365":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:45953:2705":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"4:10663:3005":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:7337:2018":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"4:13810:3154":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:4961:1849":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:48513:50269":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:45959:10605":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"4:10515:30007":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:69:3346":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:3662:2421":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:4005:39514":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:1443:3067":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"4:11796:3154":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"1:10103:2324":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:13034:13935":{"crate_id":1,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"13:0:1752":{"crate_id":13,"path":["std_detect"],"kind":"module"},"4:1497:3059":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"4:5693:2997":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:299:59497":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:12385:48267":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:6252:3784":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:5346:3711":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:10890:2538":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:23740:50207":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:9621:82":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:5347:40167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:5876:3307":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"0:41:1549":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"1:9234:2276":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:10095:105":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:4682:2381":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:45735:1848":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"18:885:4166":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:48495:3128":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"12:1667:3623":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:50111:2481":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"17:13574:49422":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"4:4173:2978":{"crate_id":4,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"16:6644:3794":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"18:857:4164":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"4:4270:3247":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:8184:3075":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:6208:3782":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"4:4557:2947":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:5292:40165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"12:2303:58619":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:53125:19582":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:13547:49419":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:599:36527":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:48951:2670":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:48282:2322":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:4970:1850":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:47511:84":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:9476:43382":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:10092:105":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:45981:2554":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:45481:1930":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"6:624:36531":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:13598:49425":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:47928:2323":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:2291:3457":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"4:15199:55365":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"5:3466:3056":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:23465:2361":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"12:840:3053":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:50871:2518":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"4:14019:2970":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:5815:3773":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"12:761:2539":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"14:56:43799":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:5013:1852":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"4:2166:3056":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:9210:43378":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:38540:2424":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:51529:50408":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:2199:3382":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:13272:48973":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:6087:3710":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:9528:2686":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:49858:2713":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"4:8665:55722":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:8660:2393":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:10938:43685":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:6518:3790":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:55844:220":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11254:4080":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"4:11995:3097":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:6424:50166":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"16:6636:3729":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:11915:48071":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:9368:43379":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:3972:39357":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:46328:50380":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"4:2765:3023":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"16:3365:3960":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:9264:41753":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:7174:3802":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:12568:48279":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"4:15740:1716":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"17:14000:49559":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:22413:53221":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"4:3617:2960":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"4:12526:123":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:8123:179":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:6100:40577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"4:12034:1873":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:46096:2887":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"6:4470:39564":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:13205:48927":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"4:15077:3261":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"4:10974:2249":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"1:3183:1855":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"6:1665:37418":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:22818:2485":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:9943:59484":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:6357:3786":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:4511:39568":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:3276:1904":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:6028:37369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"4:4385:2967":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:2866:3969":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:607:43369":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:10113:2327":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:21:651":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"17:13098:48875":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:10887:43576":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:5855:4276":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"12:1118:3066":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"4:11367:3128":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"1:24493:2758":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"4:6605:55174":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:4377:39553":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:9809:59485":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:6068:37346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:6935:41133":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"4:2433:30981":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"17:13685:49435":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:3297:1912":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"6:4306:39544":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:1578:2538":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"4:15691:30010":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"4:15725:1703":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"4:6861:2910":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"12:2018:3056":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:5191:40157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"4:3953:190":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"1:46420:2247":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:4995:42423":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"12:853:3054":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:4157:4053":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:3772:41800":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:52249:2513":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:46649:1671":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:23756:4948":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:10253:4066":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:5255:40141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"4:10718:2959":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:13039:13936":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"1:2188:2397":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"4:1642:3067":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:5998:40574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:1540:37406":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"4:8912:55722":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:12756:48358":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:23835:4992":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"4:14687:4315":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:4990:1851":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:47335:2538":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"17:11572:44083":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:5987:40573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:49226:2662":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"4:14665:4313":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:3939:41917":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"}},"external_crates":{"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":15}