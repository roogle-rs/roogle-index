{"root":"0:0:1801","crate_version":"1.4.0","includes_private":false,"index":{"1:12943:29289":{"id":"1:12943:29289","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12975:29296":{"id":"1:12975:29296","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4739:29296"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44624:3308","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12880:23911":{"id":"1:12880:23911","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12106:458","self::pattern":"1:12541:3531"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12886:26180":{"id":"1:12886:26180","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12106:458","self::pattern":"1:12541:3531"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12561:3547","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12950:25201":{"id":"1:12950:25201","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12106:458","self::pattern":"1:12541:3531"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12969:25977":{"id":"1:12969:25977","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12878:29279":{"id":"1:12878:29279","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44589:3562","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12915:26175":{"id":"1:12915:26175","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12106:458","str::splitn":"1:12912:26173","self::pattern":"1:12541:3531"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44447:3485","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12561:3547","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12924:2007":{"id":"1:12924:2007","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12541:3531","`DoubleEndedIterator`":"1:7934:128","prim@char":"4:12106:458","str::rmatches":"1:12927:29282"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44529:3565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12930:29283":{"id":"1:12930:29283","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12541:3531","`DoubleEndedIterator`":"1:7934:128","prim@char":"4:12106:458","str::rmatch_indices":"1:12933:29284"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44475:3567","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12978:29297":{"id":"1:12978:29297","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4737:29297"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44642:3307","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:1807":{"id":"0:29:1807","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"1:12938:29286":{"id":"1:12938:29286","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12909:29281":{"id":"1:12909:29281","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12541:3531","str::split":"1:12897:26168","prim@char":"4:12106:458","str::split_terminator":"1:12906:29280"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44393:3563","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12561:3547","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12893:2285":{"id":"1:12893:2285","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42427:198","prim@char":"4:12106:458","self::pattern":"1:12541:3531"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42425:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12561:3547","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12962:29294":{"id":"1:12962:29294","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12106:458","self::pattern":"1:12541:3531"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12561:3547","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12968:27302":{"id":"1:12968:27302","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40377:21504","Self::is_ascii":"1:12967:25973"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40377:21504","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5541:29986":{"id":"5:5541:29986","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12859:24009":{"id":"1:12859:24009","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42427:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12855:340":{"id":"1:12855:340","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12856:26143","`u8`":"4:12123:1653"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12933:29284":{"id":"1:12933:29284","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12541:3531","`DoubleEndedIterator`":"1:7934:128","prim@char":"4:12106:458","str::match_indices":"1:12930:29283"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44493:3568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12561:3547","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5556:25976":{"id":"5:5556:25976","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12971:25979"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12869:26166":{"id":"1:12869:26166","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:12870:26167"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42425:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12863:24011":{"id":"1:12863:24011","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12883:26179":{"id":"1:12883:26179","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12106:458","self::pattern":"1:12541:3531"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12874:21943":{"id":"1:12874:21943","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44311:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12857:1806":{"id":"1:12857:1806","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42427:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5552:29988":{"id":"5:5552:29988","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12912:26173":{"id":"1:12912:26173","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12106:458","self::pattern":"1:12541:3531","str::rsplitn":"1:12915:26175"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44429:3489","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12953:26181":{"id":"1:12953:26181","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12106:458","self::pattern":"1:12541:3531"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12561:3547","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12900:21574":{"id":"1:12900:21574","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12106:458","self::pattern":"1:12541:3531"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12357:3500","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12972:27305":{"id":"1:12972:27305","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:910:33554"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12866:29278":{"id":"1:12866:29278","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12112:1548","crate::ops::IndexMut":"1:3222:2197","str::slice_unchecked":"1:12865:29277"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12903:26171":{"id":"1:12903:26171","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12541:3531","`DoubleEndedIterator`":"1:7934:128","prim@char":"4:12106:458","str::split":"1:12897:26168"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44343:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12561:3547","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:3212":{"id":"5:5538:3212","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12974:27307":{"id":"1:12974:27307","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:910:33554"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12877:28108":{"id":"1:12877:28108","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44579:3560","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12854:29276":{"id":"1:12854:29276","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5553:29989":{"id":"5:5553:29989","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2106","`String`":"5:7544:250"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2106","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12936:29285":{"id":"1:12936:29285","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12868:26163":{"id":"1:12868:26163","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12867:26162","str::split_at_mut_checked":"1:12870:26167"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12875:21352":{"id":"1:12875:21352","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12876:21666"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44599:3561","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12848:29274":{"id":"1:12848:29274","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12959:29293":{"id":"1:12959:29293","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12106:458","self::pattern":"1:12541:3531"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12918:26177":{"id":"1:12918:26177","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42425:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12944:29290":{"id":"1:12944:29290","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12106:458","self::pattern":"1:12541:3531"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12566:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12947:29291":{"id":"1:12947:29291","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12106:458","self::pattern":"1:12541:3531"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12844":{"id":"1:12844","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12845:883","1:12846:2286","1:12847:29273","1:12848:29274","1:12850:29275","1:12853:26125","1:12854:29276","1:12855:340","1:12856:26143","1:12857:1806","1:12859:24009","1:12861:24010","1:12863:24011","1:12865:29277","1:12866:29278","1:12867:26162","1:12868:26163","1:12869:26166","1:12870:26167","1:12872:21710","1:12873:21533","1:12874:21943","1:12875:21352","1:12876:21666","1:12877:28108","1:12878:29279","1:12879:21712","1:12880:23911","1:12883:26179","1:12886:26180","1:12889:2327","1:12893:2285","1:12897:26168","1:12900:21574","1:12903:26171","1:12906:29280","1:12909:29281","1:12912:26173","1:12915:26175","1:12918:26177","1:12921:26178","1:12924:2007","1:12927:29282","1:12930:29283","1:12933:29284","1:12936:29285","1:12938:29286","1:12940:29287","1:12942:29288","1:12943:29289","1:12944:29290","1:12947:29291","1:12950:25201","1:12953:26181","1:12956:29292","1:12959:29293","1:12962:29294","1:12965:29295","1:12967:25973","1:12968:27302","1:12969:25977","1:12970:25978","1:12971:25979","1:12972:27305","1:12973:27306","1:12974:27307","1:12975:29296","1:12977:3285","1:12978:29297"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5536":{"id":"5:5536","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5537:29985","5:5538:3212","5:5541:29986","5:5544:29987","5:5552:29988","5:5553:29989","5:5554:3367","5:5555:25975","5:5556:25976"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12865:29277":{"id":"1:12865:29277","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12112:1548","str::slice_mut_unchecked":"1:12866:29278","crate::ops::Index":"1:40008:2196"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12845:883":{"id":"1:12845:883","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12106:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12872:21710":{"id":"1:12872:21710","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12106:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44295:3559","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12927:29282":{"id":"1:12927:29282","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12541:3531","`DoubleEndedIterator`":"1:7934:128","prim@char":"4:12106:458","str::matches":"1:12924:2007"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44547:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12561:3547","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12967:25973":{"id":"1:12967:25973","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:1801":{"id":"0:28:1801","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"1:12876:21666":{"id":"1:12876:21666","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12875:21352"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44608:3570","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12850:29275":{"id":"1:12850:29275","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12848:29274"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12897:26168":{"id":"1:12897:26168","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12541:3531","`DoubleEndedIterator`":"1:7934:128","prim@char":"4:12106:458","str::split_whitespace":"1:12875:21352","str::rsplit":"1:12903:26171"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44325:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1801":{"id":"0:0:1801","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:1807","0:31:1808","0:28:1801"],"is_stripped":false}}},"1:12940:29287":{"id":"1:12940:29287","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12853:26125":{"id":"1:12853:26125","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12096:3551"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12906:29280":{"id":"1:12906:29280","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12541:3531","str::split":"1:12897:26168","prim@char":"4:12106:458","`DoubleEndedIterator`":"1:7934:128","str::rsplit_terminator":"1:12909:29281"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44375:3564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5544:29987":{"id":"5:5544:29987","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12856:26143":{"id":"1:12856:26143","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12123:1653"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12847:29273":{"id":"1:12847:29273","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12921:26178":{"id":"1:12921:26178","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42425:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12561:3547","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12965:29295":{"id":"1:12965:29295","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12502:134","`FromStr`":"1:12501:3050"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42572:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12501:3050","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12501:3050","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:29985":{"id":"5:5537:29985","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2106","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2106","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12889:2327":{"id":"1:12889:2327","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42427:198","prim@char":"4:12106:458","self::pattern":"1:12541:3531"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42425:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12970:25978":{"id":"1:12970:25978","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554:3367":{"id":"5:5554:3367","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:25975":{"id":"5:5555:25975","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12970:25978"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12879:21712":{"id":"1:12879:21712","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44617:3569","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12942:29288":{"id":"1:12942:29288","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12973:27306":{"id":"1:12973:27306","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:910:33554"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:1808":{"id":"0:31:1808","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12861:24010":{"id":"1:12861:24010","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12873:21533":{"id":"1:12873:21533","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12106:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44301:3558","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12977:3285":{"id":"1:12977:3285","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4740:3285"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44633:3286","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12846:2286":{"id":"1:12846:2286","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12971:25979":{"id":"1:12971:25979","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12870:26167":{"id":"1:12870:26167","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:12869:26166"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42425:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12867:26162":{"id":"1:12867:26162","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:12869:26166","str::split_at_mut":"1:12868:26163"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12956:29292":{"id":"1:12956:29292","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12106:458","self::pattern":"1:12541:3531"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12546:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12561:3547","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"4:12127:1649":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"17:13633:19824":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:7067:31579":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:5878:2741":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:6159:14046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:4401:13287":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:11666:16531":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"4:8207:3363":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"11:800:2741":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:16087:20811":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:12684:16362":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:4237:3290":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"4:2728:9145":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"4:8396:9240":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:1424:2960":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:4523:13299":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"4:1072:9033":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:9968:16388":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:13909:19839":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:6845:2759":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:45244:226":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"17:15244:20619":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:7038:2782":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:13516:19342":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:2472:15285":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:3315:218":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:34191:2180":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:44742:3586":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:13383:19332":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:4506:13297":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"4:7918:9103":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:2548:15288":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:1270:9031":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"4:12110:339":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"16:6818:16256":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:1604:10683":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:11590:16491":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:13491:19340":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:6391:3408":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"4:7802:9007":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:44624:3308":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:5104:13360":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:6136:30638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:15200:20615":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:10357:2839":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:6889:14463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:4710:13318":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:7128:16267":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:4488:13295":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:12387:16635":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:11369:16472":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:15680:20651":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:16062:20809":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:2197:16467":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"11:2352:9032":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:13869:19836":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:12029:16547":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"4:2275:9087":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"1:42179:3414":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:39961:2206":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"4:6710:240":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:6041:16225":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:1477:9022":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"4:4557:9213":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:43697:9266":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"11:1582:2952":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:1546:10677":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"11:832:9024":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:1514:10673":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:4218:3289":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:8294:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:43057:2150":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"5:7356:28866":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:7616:13528":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:2031:16473":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:13463:19338":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"4:10711:9103":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"4:10784:25234":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:3196:30213":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"4:2271:2783":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"17:14757:20586":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"15:327:15232":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"11:434:31369":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:7598:13525":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:11469:16522":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"11:687:2961":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"11:2536:31367":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:7722:16288":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"13:0:2030":{"crate_id":13,"path":["std_detect"],"kind":"module"},"4:12125:1651":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"5:903:2960":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"4:11611:9169":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:435:15252":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:13961:19843":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:7277:9039":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:13145:19317":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"4:12122:802":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"1:10004:3453":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:4195:108":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"5:3687:2719":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"4:8961:9293":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"4:10682:9241":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"18:548:150":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:15160:20611":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:1501:10671":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:9651:24869":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:10957:3501":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"4:5461:9277":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"4:11387:9289":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:7862:16294":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"4:5566:9280":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"4:5891:2160":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:10643:246":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"4:4864:2794":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:3581:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:10006:3454":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"4:8632:9271":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:41671:3373":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:32837:3266":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"4:5374:127":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"17:12850:16410":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"19:0:1142":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"4:7738:8989":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"18:491:32660":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:12052:16545":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"9:177:15178":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:15311:20626":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:8872:206":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"16:4585:15854":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:39343:2192":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:4366:271":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:48657:8655":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:45048:3541":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:42196:3415":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:15177:20612":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:46430:8685":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:47623:8694":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"4:12129:1708":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"17:15546:20642":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:32848:252":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"4:9061:25204":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:41644:3368":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:13365:19331":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"4:12104:408":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"4:12112:1548":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"1:3014:2171":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:40190:3267":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:5026:3356":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"16:5588:16205":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:15566:20644":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"4:357:8995":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:1789:2761":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:22741:21359":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:46362:8714":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"4:5698:2802":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:10919:3488":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"14:187:15211":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:6545:16248":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"4:415:182":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"4:363:8996":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:234:233":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:3187:138":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:2504:208":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"11:1883:2960":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:21568:8669":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"14:7:15203":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:15235:20618":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"4:3801:9167":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:4764:13322":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:14662:20584":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:654:9837":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:11563:16495":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"4:11117:3600":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"5:2975:28879":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:2971:2130":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"4:2446:9100":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"17:13182:19319":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:5905:16219":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:13336:114":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"5:40:2715":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:13441:3630":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"18:574:32640":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:41629:1948":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:21338:20943":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:5322:16183":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"4:9104:16267":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"5:3738:2962":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:6927:14466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"11:844:9028":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"4:8936:2290":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:48771:8663":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"4:10907:25221":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:2062:2965":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"4:951:9030":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:10941:16423":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:5121:16006":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:13882:19837":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:5130:13364":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:5023:13353":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:0:540":{"crate_id":1,"path":["core"],"kind":"module"},"4:4217:9203":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:10337:16393":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"4:11381:25888":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:41615:21521":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"16:4774:15923":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:3190:139":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:21995:20954":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:1632:10684":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:7520:9084":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:22238:8801":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"16:4745:15918":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:6868:14462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:31222:21649":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"4:12107:1669":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"17:12459:16438":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:14145:19853":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:6587:2836":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:4847:13332":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:13742:19829":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:41429:3406":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:42704:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:1516:9026":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:7513:16275":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"4:5846:2153":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:7492:16273":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:41109:3382":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:10950:16448":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"4:4808:9191":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:6332:16233":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:5798:16216":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:43919:3505":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:7651:13533":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:13695:16585":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:42665:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:12230:16592":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"4:10265:112":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:21953:9111":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"16:2670:15293":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:7533:2757":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"4:1054:2947":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"11:2542:24179":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:47577:8688":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:5982:14033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"4:12130:1258":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:21323:20939":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"4:4233:9205":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:10520:32633":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:14509:19878":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:1802:3192":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:8400:9242":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:15345:20630":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:6913:14465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:45241:147":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"16:7884:16295":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"4:5705:9290":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:9142:3545":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:40129:223":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:7006:16264":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:40958:21665":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:4002:9172":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:21547:9111":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:14778:20588":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:4698:13317":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:5816:31567":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"4:7759:2815":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"17:10315:16354":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"4:1885:2434":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"4:5512:112":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"5:1151:30073":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:6079:14039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:42572:233":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"17:14989:16437":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:4375:13285":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:40908:3312":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:41058:3380":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:45318:178":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"11:2469:2761":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"16:4986:15967":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:13584:19823":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:1703:9198":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:6485:2741":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"4:12121:806":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"17:16049:20808":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:12972:16364":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:8361:3377":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:6691:14454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:2450:15284":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:13235:19322":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:40778:3286":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:4884:13337":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:7385:2290":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:7651:16284":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"4:6662:2162":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"4:3903:9169":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:10293:3557":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:15079:20604":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:7694:16286":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:42543:2267":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:11395:16479":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:8239:16306":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"4:836:2960":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:6485:16244":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:22831:3055":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:3032:15306":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"9:0:2032":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:32830:2123":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"4:8296:9166":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:2428:15283":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:5146:13366":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:13083:16683":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:2351:3228":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:6346:16234":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"11:2548:31360":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"11:102:31364":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:3183:2103":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:4841:13331":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:12614:16403":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:42821:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:11399:16466":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:4497:15838":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"4:8356:9210":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:13754:19830":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:44920:3594":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:47183:21720":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:48677:8657":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"4:6606:2157":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:13407:19334":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:10667:32626":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:7102:16266":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"4:11334:25898":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"4:12117:702":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"16:6721:16253":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:5067:864":{"crate_id":1,"path":["core","iter"],"kind":"module"},"11:1676:2713":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:11126:16428":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:15101:20606":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:22597:21335":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:15733:20655":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:10246:3467":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:6687:16252":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"4:9006:9297":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:13436:19336":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:2969:15305":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"4:9029:2154":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"4:4635:9230":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"4:5812:2151":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:41240:3401":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:2474:2955":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:10422:16394":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:7460:2752":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"4:11414:25199":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"4:8563:9268":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"6:5004:13350":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:6499:16245":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:44137:2988":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:3003:3269":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"17:14455:19875":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"9:486:15072":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:36723:2187":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:2353:3229":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"11:700:2290":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:0:2039":{"crate_id":17,"path":["object"],"kind":"module"},"11:1160:9033":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:48646:8654":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:1708:2747":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:6279:16231":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:42485:2960":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:40183:2201":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:507:9779":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"3:0:2029":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"4:9054:8983":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:7597:31652":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:14324:19866":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:2154:28998":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:47160:21763":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"18:599:32659":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:13809:19833":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:13948:19842":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:4108:9180":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"4:621:8999":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"18:96:20830":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"4:4705:25918":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:7340:2290":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:14296:19864":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:12584:16643":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"16:3600:15312":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"4:12119:804":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"16:5403:16202":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:44953:3550":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"4:5117:28306":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:41021:2830":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:2744:15296":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:44773:3588":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:511:16379":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:40901:3311":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"16:6968:16263":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"4:3491:9108":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"17:9730:16382":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"4:10925:9286":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:33721:2175":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"5:7286:2290":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:5830:16217":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"4:3389:9140":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:6844:16257":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:15903:20802":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:12746:16405":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:11168:16458":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"4:5634:9281":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"4:4887:9187":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"4:3232:25706":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:7477:9085":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"4:10476:9152":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:11672:3243":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"16:2574:15289":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:15527:20640":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:4776:13323":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:4449:2114":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"18:582:3252":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:13309:19327":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:45120:3601":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:7534:16277":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:15557:20643":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:12555:3548":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:31058:21733":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"4:12123:1653":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"7:0:1698":{"crate_id":7,"path":["unwind"],"kind":"module"},"4:4195:28067":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:4893:13338":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"4:7733:8987":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"1:46909:8687":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"11:1025:2947":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:12758:16406":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:41231:3400":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:1528:10675":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"4:2492:1969":{"crate_id":4,"path":["std","io"],"kind":"module"},"6:7657:13534":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:6171:213":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"4:5497:9279":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"4:8866:9283":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"1:40795:3314":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:5419:16203":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:21494:9111":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:12357:3500":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"4:12072:28095":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:15037:20601":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:45305:3628":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:1024:2719":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:23424:197":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:21549:8668":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"4:7096:2807":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:6128:14045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:42493:2961":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"4:11097:9285":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"4:12109:1162":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"17:10608:16397":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"4:0:1540":{"crate_id":4,"path":["std"],"kind":"module"},"16:7828:16293":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:281:2106":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:22459:8797":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"6:7645:13532":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"9:450:15073":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:7474:16272":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"4:6877:9301":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:44157:2990":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:6531:16247":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"0:28:1801":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"4:4535:9212":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:11027:16430":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:4835:15936":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"11:774:9022":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:12290:16620":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"16:7015:16265":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:1718:10693":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:4989:13348":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:4928:16652":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:15356:20631":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"18:660:20845":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:6798:14457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:4814:13328":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"4:4701:25914":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:42615:2960":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"17:11269:16438":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:26433:273":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:3405:2204":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"4:11890:2826":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:21958:8675":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:10355:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"6:483:9775":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:3251:9037":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:13395:19333":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:7679:13536":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:11113:16429":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:12091:16623":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:41256:3402":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"4:504:2738":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:16109:20813":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"16:7660:16285":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"4:945:9029":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:43176:3452":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:21675:8670":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"11:2369:15197":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:13219:3625":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"4:11204:25928":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:4878:13336":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:2169:16507":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:8072:16297":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"4:4981:9238":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:5969:14031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:42938:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:11041:16398":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:42213:3416":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:2788:15298":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:9943:16366":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:9918:16387":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"4:10766:2972":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:43018:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:41199:3398":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:4364:13284":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:10211:154":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"18:538:20857":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:7702:15028":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:7568:16280":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:41221:3399":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:12418:16651":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"5:6878:2773":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"5:4092:2961":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"11:1728:153":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:43715:21520":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:5682:2747":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"5:6969:270":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"4:9198:9115":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"1:44229:2991":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"4:4766:9239":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:123:9457":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:44705:3584":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:6386:16238":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:40823:3313":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"4:8523:9266":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"11:787:9023":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"14:165:15204":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:7582:16281":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:4444:2750":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:13989:19845":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:47341:8722":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"4:640:9002":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:42553:2270":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:495:9777":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:7041:31776":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:44375:3564":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:22733:21327":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:44249:2992":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:3191:9035":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"11:2124:9031":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:6243:16229":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:13097:19315":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:45297:3627":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:31024:3217":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:6934:14467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:9813:16385":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:11113:3486":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"4:8239:9110":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"4:9048:114":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"4:10374:9283":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:3051:2195":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:10837:3487":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"5:2972:2354":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"11:875:9029":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"4:6492:1948":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"16:2832:15300":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"4:12055:25282":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:3172:2133":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"4:4246:9206":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:4417:15806":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:11321:16398":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:2728:264":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"17:12797:16408":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:4020:2741":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"4:9164:184":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:6120:14044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:5005:2747":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:5389:9338":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:6583:16250":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:44821:3589":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:13504:19341":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:4854:13333":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"4:4691:9177":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:45095:129":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"0:31:1808":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"1:10000:3452":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:12536:16640":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:12127:16598":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:34073:2179":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"4:8974:9296":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:4183:24613":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:31620:3252":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"17:14878:20592":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"4:2652:2790":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:22107:8671":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"4:9234:28341":{"crate_id":4,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"17:11256:16470":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:46652:8747":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:4535:13301":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"18:699:20849":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:42385:3419":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:43155:3450":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:14904:20582":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:4595:13308":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"4:1968:9081":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"6:4808:13327":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:32961:113":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"16:4613:15858":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:43169:3451":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:43707:21583":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:15027:20600":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:15329:20628":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:16004:20805":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"1:22415:9111":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:11155:16457":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"4:2266:136":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"17:13285:19325":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"10:0:2033":{"crate_id":10,"path":["adler"],"kind":"module"},"5:2979:28877":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"4:12106:458":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"4:9985:21372":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:14251:19861":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:15432:20635":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"4:9174:242":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:32873:251":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"4:4703:25916":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"4:11109:25295":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:41179:3397":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:13297:19326":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:4641:15862":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:40867:3286":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:1286:9032":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:3378:2200":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"4:7913:9106":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"17:9651:16381":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"4:918:9026":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:48497:8750":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:5612:16206":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"11:1007:9031":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:10633:9111":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"4:645:9003":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:3049:15307":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"5:266:2719":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:13145:162":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:9559:16355":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"4:9169:241":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:3470:2134":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:2721:142":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"6:1691:10690":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:42860:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:3888:15373":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:12077:16611":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:34328:2182":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:23610:188":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"4:1581:2741":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:2144:2738":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:5435:31808":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"4:3548:3319":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"1:42156:168":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"4:1939:9080":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"17:14413:19872":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"4:1590:9034":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:43435:21573":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:15659:20649":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:38654:2189":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:14156:19854":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:4862:15939":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:11485:16493":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:1795:642":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"6:4666:13314":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"4:5148:28306":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:867:9022":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:44429:3489":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:13056:16682":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:12096:3551":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:6804:14458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:6352:16235":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:6781:10798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:12561:3547":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:7896:163":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:42743:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:44933:3549":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"4:4806:9188":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:1710:10692":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:6100:14041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:6901:16259":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:15279:20622":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:14426:19873":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:7934:128":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"11:2562:31362":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"4:1887:2970":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"17:15192:20614":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"4:10191:9288":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"16:6268:31849":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:12921:16368":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:41087:3390":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"4:6963:2806":{"crate_id":4,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:30759:3011":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:31030:3183":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:8352:3287":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:14765:20587":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:6742:15221":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"4:7993:9144":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"4:12105:1044":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"1:44147:3493":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"4:11590:9167":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"4:8912:9286":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"1:3667:2741":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"4:8615:2960":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"6:4556:13304":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:3433:2132":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:7507:9083":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"8:0:2031":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:3655:15313":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:4902:13339":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:4738:9171":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:40807:21760":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:42425:201":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"6:4461:13292":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:43915:21728":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:119:9456":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:14399:19871":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:1032:1947":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"17:14194:19857":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:40837:3315":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"5:692:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:3019:2176":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:0:314":{"crate_id":5,"path":["alloc"],"kind":"module"},"15:288:15227":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:7432:9018":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:16160:20817":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:11755:16581":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:4616:13311":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:15480:20636":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:47837:8683":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:10423:2841":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:3388:261":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"4:7053:27979":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:4549:13303":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:2715:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"17:12999:16680":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:5648:16208":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:6531:2719":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"4:4377:9208":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:34847:2186":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:7668:13535":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:14170:19855":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:1576:10680":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:44475:3567":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"4:8455:9251":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:634:28917":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:42979:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:4182:2747":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:12103:16624":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"4:3229:25707":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:3753:2965":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:2688:9136":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:12541:3531":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"17:15589:20645":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"4:3307:9155":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:2339:15279":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"4:8283:3487":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"4:2666:2788":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:11088:16434":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:16180:19328":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:44068:23686":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"4:5194:211":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"14:215:15212":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:7544:250":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"11:123:2707":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:2256:29024":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:11307:16468":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:536:31450":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"4:533:2785":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"16:3232:15309":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"18:0:2040":{"crate_id":18,"path":["memchr"],"kind":"module"},"11:1917:9036":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:21321:20956":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"4:12131:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"4:2434:9094":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"1:32812:22158":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"6:1674:10688":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:2959:2131":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"9:330:15129":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:4866:224":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:13648:19825":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:3041:2193":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"6:5955:13988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:7708:16287":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:4977:13347":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:4529:13300":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:32776:3257":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:4454:2115":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:46793:8727":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:7462:16271":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"4:9118:25307":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:23800:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"4:8884:9284":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"1:22706:3051":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:45132:3602":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:46593:8686":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"11:2443:2741":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"5:6606:2290":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:7792:16292":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:12718:16404":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:6929:16261":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:9464:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:45262:214":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"14:221:15213":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:6682:9658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:489:9776":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:6658:9825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:41138:3393":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:41622:3364":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:6261:16230":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"4:2032:205":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:1990:186":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:34501:2183":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:261:32608":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:11497:16523":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:5384:16201":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:13676:16586":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"5:7326:29025":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:22328:21204":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:10852:16418":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:1455:2290":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"4:6423:183":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:14359:19868":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:21555:8672":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:4967:426":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"17:13976:19844":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:15519:20639":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:3159:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:4647:13313":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"4:5030:9247":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"11:328:31359":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:46985:8748":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"11:1107:2949":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:563:9785":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:45254:234":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"16:2284:15250":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:7782:16291":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:4628:13312":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"4:11462:25883":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"4:7976:9020":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"16:5743:16214":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:32846:244":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"16:7621:16283":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"4:7714:8997":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:42782:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"4:8351:9209":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:2810:15299":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"4:8605:9269":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"1:2341:643":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:22845:3052":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:6741:10815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:4566:13305":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:12596:16402":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:5712:16212":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:9998:3451":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:2540:202":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:22370:8804":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:5140:13365":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"4:3736:9164":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"4:12111:1515":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"11:1896:2761":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"4:12118:807":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"4:3798:9168":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:1521:10674":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:48435:8729":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"4:8290:3560":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"1:44885:3591":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:6189:31779":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:10137:16389":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:2504:15286":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"4:10756:126":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:41170:3396":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:43668:21367":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:5967:3383":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"4:8260:3390":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"4:1862:9062":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"17:10172:16390":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:14181:19856":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:40847:3316":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"15:306:15228":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:6764:10800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:24031:243":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:2228:16492":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"4:7965:126":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:542:9782":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:9891:16359":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:5939:16220":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:7324:3388":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"17:14087:19850":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"4:4104:9179":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:9996:3450":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"11:396:2711":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"5:2048:2962":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:3082:2185":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"4:11083:9284":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"4:10111:28340":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"4:6315:2802":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:7389:23685":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:7523:16276":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"18:681:20847":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:12306:3573":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"4:1824:9051":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:47129:21562":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:46492:8720":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:548:9783":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:15321:20627":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:2406:15282":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:42640:203":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:12898:16411":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:42510:2266":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:41118:3391":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"4:4116:9182":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:3315:15310":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:7768:16290":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"4:6228:2801":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:12572:16644":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:10102:16358":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:45040:3536":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"17:12264:16629":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:43405:3242":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:5963:16221":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:11226:16485":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:5111:13361":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:15049:20602":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:7633:13530":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:1570:10679":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:11767:16582":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:11604:16526":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:11779:16538":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:6467:16243":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:43660:3470":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:5673:16210":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:501:9778":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:12140:16597":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:11294:16469":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"4:1574:2960":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:4496:13296":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:12396:16599":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:14698:20585":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:44727:3585":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"18:652:32640":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"11:1903:9034":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:14057:19849":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:11800:16558":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:33535:2172":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:44325:3487":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"17:12930:16412":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:1734:10694":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"4:1578:2290":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"4:11274:27955":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"16:5017:15974":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:4050:2719":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:40025:220":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"4:11154:25226":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:3046:2194":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:44343:3491":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:6204:16227":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"11:2326:2947":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"5:1387:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"4:7971:9021":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:16076:20810":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"18:521:20852":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"10:36:31354":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:15212:20616":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"4:10706:25925":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:4988:24130":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:22682:21338":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:8399:24599":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"4:5481:9278":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"17:11507:16518":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:16170:19326":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:6879:16258":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:13026:16681":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:11243:16471":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:15671:20650":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:23242:195":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"4:3226:28579":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:7365:14838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:4344:15757":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:1900:3245":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:44899:3592":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:43451:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:12283:3576":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:40008:2196":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"6:5075:13358":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:4516:13298":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:4914:13341":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:3343:2761":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:14969:20581":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:30990:3216":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:5829:13959":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"11:811:2761":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:46670:8753":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:11657:16530":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"5:7644:2765":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:41078:3381":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:7622:13529":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:46408:8679":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:38709:2190":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:14346:19867":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:44194:3380":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:6017:16224":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"4:482:2784":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:4745:13320":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:45068:3537":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:5974:14032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:1832:1199":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"5:1495:9024":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"0:0:1801":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"1:46384:8719":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:12701:16363":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:13478:19339":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"4:588:8998":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:44311:3557":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:11345:16474":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:46815:8733":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:41031:3352":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"11:1066:15193":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"4:7599:16380":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:9759:16383":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"4:9481:136":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:11194:16459":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:6071:14038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:3584:16564":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:40784:3291":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:12301:16630":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:43478:135":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"16:8134:16300":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:6560:2706":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:9944:3319":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"11:299:2940":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:12474:16398":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"4:8227:2972":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"4:11686:15236":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"4:9096:28090":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"4:6136:2796":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"0:29:1807":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"16:6456:16242":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:14221:19859":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:5760:16215":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"4:557:2969":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:5808:258":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:32928:2102":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:42326:21375":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"4:7206:28062":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"14:40:19317":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:3251:16541":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:2766:15297":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"4:8920:2960":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:10569:32620":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"4:7713:9111":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"17:13832:19834":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:4528:2123":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"17:15612:20646":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:12115:16625":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:42555:2363":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"4:8422:9190":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:41638:3366":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:10618:32632":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"9:237:9266":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:14385:19870":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:6156:16226":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:5897:14027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:7371:14839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:2864:15301":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:4806:3300":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"4:8302:9165":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"4:9084:28324":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:6813:14459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"18:624:32646":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"18:515:20855":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:3222:2197":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:5155:2149":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"4:7985:25709":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:16032:20807":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"4:9488:9106":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"4:48:1943":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"1:40988:3328":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:14950:20597":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:11690:16578":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:11449:16520":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:6600:16251":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"4:10282:2976":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"4:4810:9192":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:47263:8716":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:41663:3371":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:6263:14076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:11701:16579":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:12202:16627":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:7692:15027":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"11:2140:2947":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:41188:3407":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:12546:3545":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:4543:13302":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:44128:3483":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:149:2703":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:0:888":{"crate_id":6,"path":["libc"],"kind":"module"},"4:11136:9115":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"4:6609:2158":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:13347:19330":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:42564:3424":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"4:939:2943":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11958:16543":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:7604:13526":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"4:12088:25298":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:6513:16246":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:7736:16289":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"4:3267:9153":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:15224:20617":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:12486:16647":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"4:2035:204":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:43685:154":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:6792:16255":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"4:2436:9095":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"17:15990:20804":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:256:32627":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:42899:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:11693:15236":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:7677:217":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:7294:9038":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:46717:8667":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:46318:8713":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:4212:2747":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:11001:16432":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:790:2722":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:46563:8680":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:2907:15303":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:22544:21696":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:8205:16305":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"9:357:15089":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"4:9043:28092":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:22969:196":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:5052:13356":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:15842:19315":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:4629:2127":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:6753:16254":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:7388:14840":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:1923:2982":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:6868:2771":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:1486:9023":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:22857:3056":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:4095:2747":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"18:690:20848":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:48373:8695":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:7611:3363":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:34014:2181":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:15747:20656":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:3230:30217":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"11:710:9025":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:6248:14075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:15184:20613":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:1664:10687":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:4806:15931":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"4:9493:2813":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"17:12828:16409":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:21677:8669":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:12772:118":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"4:9256:25896":{"crate_id":4,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"13:110:31420":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"4:2268:9086":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"5:7316:2731":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"4:2420:9090":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:33349:2173":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:48543:8701":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:13663:19826":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:14896:20594":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:4440:13290":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"4:5637:9282":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"1:2847:3262":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"17:13707:19827":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:7544:16278":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:14373:19869":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"18:636:32661":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"18:507:32640":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:886:2727":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:48741:8661":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:23151:194":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:2675:9111":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:4922:13342":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:7360:31839":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"4:4972:9237":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:48833:8665":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:2881:15302":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:10962:16442":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:9962:141":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"14:31:15203":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:1507:10672":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:11476:15189":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:48295:8723":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"4:8370:9166":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:15507:20638":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:31116:21705":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:3155:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:44547:3566":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:1496:10670":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:15087:20605":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:12366:16633":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"4:10482:9150":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:44633:3286":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:1505:9025":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:41270:3403":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:4889:15942":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:5727:16213":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:15301:20625":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:11632:16528":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:15133:20610":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:12009:16398":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:6318:16232":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"4:11456:25885":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:44207:3496":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"11:1923:9037":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:12432:16642":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:46462:8715":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"4:9217:9300":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:4252:2960":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:15367:20632":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:2526:15287":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"4:8898:9285":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:4377:1945":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:4:1125":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:11099:3490":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:44393:3563":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:44447:3485":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:14822:20590":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"4:9179:159":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:44220:3494":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:10035:16202":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:4870:13335":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:6569:16249":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"12:0:2035":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:45052:3540":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:15943:19318":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:44239:3495":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:12310:16621":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"4:12113:1634":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"16:3764:15321":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:1536:9041":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:6083:15249":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:22795:21579":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"18:481:20853":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:4411:2747":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"4:909:9024":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:48043:8717":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:10016:16353":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:15689:20652":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:44295:3559":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"17:10067:16357":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:5696:16211":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:15294:20624":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"4:637:9001":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"4:12128:858":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:40107:221":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:5117:13362":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:22:740":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:9992:127":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"17:14312:19865":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:4603:13309":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:11576:16525":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:11459:16521":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:21284:3252":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"4:1975:713":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"16:4053:15490":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:5009:13351":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:14485:16368":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"4:10522:2815":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:3393:144":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:45060:3542":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:16123:20814":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"11:2569:9018":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:22824:21552":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:43395:21699":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"4:1063:9032":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:588:9789":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"5:7377:2290":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:46863:8681":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:46939:8693":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:7284:2266":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:2712:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:13167:24253":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"4:3346:9151":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"5:1131:2954":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:41405:3404":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:2644:15292":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"4:2584:9143":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:40085:222":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:47007:8754":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:15117:20608":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:2438:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"4:7450:28088":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"4:5819:2152":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:7441:3360":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"4:12077:9008":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:11030:3492":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"4:3576:9131":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"1:22384:3228":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"10:44:15183":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:6012:14035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"4:8071:28325":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:2110:2985":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:4578:13306":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:4686:13316":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:10896:16420":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:4518:2122":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:11675:16577":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"11:430:31373":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:15980:20803":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"6:62:9402":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:6576:3385":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"16:8281:16307":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:7219:2298":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:11743:16580":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:32823:24619":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:2305:15277":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"18:766:20844":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:12784:16407":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:6898:14464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:11645:16529":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:23990:3054":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:1558:10678":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:11523:16496":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:527:9780":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:15493:20637":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:14470:19876":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:12255:16628":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:13922:19840":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:4462:15827":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:48581:8735":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"4:1826:9052":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"5:6014:2966":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:15384:20634":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"4:1809:666":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:43900:3528":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:10207:16391":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:1914:21736":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:7348:217":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:2806:135":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"17:11945:16542":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"13:226:31421":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:4428:13288":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"4:8990:9294":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:5992:14034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:22301:9111":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:44756:3587":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"9:507:15076":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"4:8362:9201":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:8167:16302":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"4:3344:9150":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:42476:171":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"17:10242:16392":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:10726:32613":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:3830:15339":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"4:3305:9154":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:10251:3468":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:13121:19316":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:8097:16298":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:1301:2947":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"4:7935:9104":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"18:614:32636":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:3801:2290":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:16134:20815":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:12345:16622":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:14235:19860":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:7342:31821":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:46763:8721":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:40875:3308":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:12953:16365":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:22193:8800":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"5:4381:2750":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"4:6676:2163":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:6222:14074":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"11:2151:9032":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:10812:2961":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"9:52:15092":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:45072:3538":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:7306:2741":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:10559:16396":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:14439:19874":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"9:426:15075":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:15337:20629":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:7558:9345":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"4:4094:9178":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:533:9781":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:31046:3242":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:42631:2290":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"16:0:2038":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:0:485":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"16:5634:16207":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"4:7824:9070":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:2321:15278":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:6169:14047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:10803:16401":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:15855:19316":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"16:6401:16239":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:1697:10691":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:4908:13340":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:6425:16241":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"11:0:2034":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:22718:21274":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:46532:8732":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:14282:19863":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:475:9774":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:2380:15281":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:14497:19877":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:40065:219":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"4:903:2761":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:12566:3546":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"9:393:15074":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:13194:212":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"6:6114:14043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:12246:3574":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:7671:2113":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:44529:3565":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"17:14786:20589":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"14:0:2036":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:48185:8689":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:41051:3357":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:10775:16400":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:48619:8756":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"11:2231:15189":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"15:394:15239":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"18:707:3548":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"4:3509:2971":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"4:914:9025":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:7054:31782":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:7391:16269":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:7892:143":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:4610:13310":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"18:736:20843":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:44617:3569":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:4480:13294":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:44589:3562":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:38599:2188":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:21306:20946":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:42404:3420":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"4:8307:9163":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"4:11429:25310":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:40151:2199":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"17:15631:20647":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:3818:2761":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"4:10479:9154":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"6:6047:14036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:11052:16399":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"4:7610:27984":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:4455:13132":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:11412:16465":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:14001:19846":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:8154:16301":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:11598:3498":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:23333:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:40377:21504":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:401:16378":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:7613:16282":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:48637:8653":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:47499:8682":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:5088:15997":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"5:6352:9302":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:13448:19337":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:23895:187":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:45056:3544":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:40012:2198":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:10455:2846":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:12191:16591":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:2933:15304":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:6118:2747":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:7436:16270":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"5:7444:9019":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:12066:3478":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:2961:116":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"16:6376:16237":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:4449:13291":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"4:7948:137":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"4:4060:9177":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"18:531:20856":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"4:6037:2802":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"4:922:9027":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"18:564:20858":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:13254:19323":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:46633:8698":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:7859:3378":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:15287:20623":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:5574:16204":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:7318:16268":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:43423:21560":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"4:5306:210":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"1:44642:3307":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:12560:16675":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"5:3607:2961":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"4:8942:9295":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"11:2383:2960":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"11:1910:9035":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:11215:16460":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:44599:3561":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:2722:15295":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:1685:2719":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:41208:3384":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"11:2554:31366":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"4:8277:3557":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"11:2403:2961":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:5152:13367":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"18:719:20842":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:1094:16435":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:44283:3555":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:3193:140":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"4:4297:9207":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"4:11550:9168":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:11617:16527":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:22650:21539":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:40894:3310":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"16:4949:15954":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"14:160:15203":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:7343:9735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:38764:2191":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"7:78:15051":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:5651:2759":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:4303:2135":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"4:5691:227":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:596:9790":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:7639:13531":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:22430:8796":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:12600:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:683:257":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"4:10724:25223":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"5:3217:9036":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:2618:15291":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:6700:14455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:15013:20599":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:7987:2104":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"4:3012:135":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:40041:217":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"6:1650:10686":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:12166:16595":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:23515:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:9790:16384":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"4:3010:233":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"17:12356:16632":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"4:10775:25318":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"4:928:9028":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:2718:160":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"6:5891:14026":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:13684:16584":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"11:837:9027":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:2703:28886":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"18:590:21582":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:44269:3556":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:42242:21762":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"4:6053:227":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:41415:3405":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"4:8081:9146":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:12380:16634":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:7556:14999":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:13202:19320":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:4719:15916":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:10510:16395":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:14843:20591":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"11:351:31355":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:14122:19852":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:12220:16410":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:15961:19319":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:15645:20648":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"14:202:9344":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"4:10090:9062":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"18:113:20831":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:43162:3449":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:21294:20946":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"4:7925:9107":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"5:2983:28878":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:5962:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:9994:3449":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"15:0:2037":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:6718:9242":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:6688:2719":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:11014:16431":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:12180:16626":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:9646:24596":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:5085:13359":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:22105:9111":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"4:8928:9298":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:15267:20621":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:12872:16356":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:40941:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:12501:3050":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:40859:3307":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:48756:8662":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"4:2418:3219":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"17:11536:16494":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:4445:228":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:14041:19848":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"4:7808:9069":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"17:14266:19862":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:22758:21517":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:3594:2960":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:4351:13283":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:5049:15982":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"4:3557:28295":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:21340:20953":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:1527:217":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"4:6496:2155":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:15374:20633":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:5867:14024":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:2724:265":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:46615:8692":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:34132:2178":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:42349:3417":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:830:2725":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:3029:2174":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:15003:20598":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:2966:254":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:12082:3480":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:4947:13344":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:40974:3353":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:4860:13334":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:21666:9111":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:8043:176":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:15108:20607":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"4:11173:159":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:40204:3281":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:40882:3309":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"11:2423:2290":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"4:12116:700":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"1:44301:3558":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:11439:16486":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:12510:16645":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:3558:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"4:11444:25290":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:11085:3485":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:31592:203":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"6:6711:14456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:1596:10682":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:10813:32622":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:8355:3376":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"4:6212:2798":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:11714:16537":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"11:490:151":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:45335:3633":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:11065:16436":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"4:8546:9267":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:3184:2960":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:11364:2820":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:45360:21709":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:22330:3228":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"4:7787:9006":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:14208:19858":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:13218:19321":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"4:6363:227":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:8181:16303":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"11:1891:2741":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:11631:3499":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"5:7013:2778":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"11:1887:2290":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:48718:8660":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:12153:16596":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:14633:20583":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"4:10973:2817":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:7855:3379":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"4:6260:28077":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"5:1115:30072":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:12322:3575":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:4334:2136":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:10992:3491":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:4800:13326":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:43676:3469":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:47653:8700":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:4573:2124":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:10974:16438":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:2696:15294":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:9624:16352":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:11071:3489":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:4527:15844":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"11:2304:9031":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:3460:16546":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:8195:16304":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"4:880:9023":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:9987:118":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"17:16016:20806":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:16098:20812":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:33955:2177":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"18:644:32640":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:40927:3306":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"4:8270:3404":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"4:12124:1650":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"16:5982:16222":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:8050:16296":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:4557:15850":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"4:10884:9070":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:43460:3242":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:9031:2268":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:4773:16646":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:11426:16519":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:3010:3241":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"4:11527:2822":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"4:1607:9037":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"4:10892:9280":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"4:1585:2761":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:10988:16433":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"4:4449:9202":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"18:671:20846":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"4:10701:25933":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:22779:21708":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:5777:2747":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:2596:15290":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:10881:16419":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"11:364:2709":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:21352:20950":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"4:12120:805":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"6:1639:10685":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:32959:3162":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:4582:2125":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"4:6532:2161":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"7:31:15044":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:2676:3010":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:4968:13346":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:4755:13321":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"4:1040:9031":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:6107:14042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"4:8344:3418":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:6944:31604":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:574:9787":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"4:9320:2434":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"16:6361:16236":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"4:3265:9152":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"4:849:2961":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"4:12126:1652":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"1:44493:3568":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:42623:2961":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"17:11978:16539":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:1913:10858":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:44579:3560":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:10002:213":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:3141:2205":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:21496:8673":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:13273:19324":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:4955:13345":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:32929:3271":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"11:1566:15195":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:41653:2837":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:2236:29028":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:4789:13325":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:11141:16456":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:4998:13349":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:5015:13352":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:5921:14029":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:1682:10689":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:580:9788":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:4676:13315":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"11:1603:15196":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"4:1446:153":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"4:10417:2814":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:10880:3500":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:10471:32623":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:13334:19329":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:13724:19828":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:12244:16594":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:4473:13293":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:4584:13307":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:5363:16200":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:2457:111":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"17:13162:19318":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:42362:3418":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:595:16380":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"4:4032:9174":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:1315:9033":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:5928:14030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:11991:16540":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:44848:3590":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:2183:29019":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:5941:13987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:41128:3392":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:7269:31857":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:44608:3570":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:6915:16260":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:11932:16544":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:3797:15330":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:5068:13357":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:7503:16274":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:5044:13355":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:14934:20596":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:2973:29031":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:8216:9157":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"6:6961:14469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:46338:8678":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:10915:16421":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"4:893:2741":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:15868:20801":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:45044:3539":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:12612:3578":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:2359:15280":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:6696:15222":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:7554:16279":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:5866:16218":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:4939:1112":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:44119:3484":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:4171:24627":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:9791:3465":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:13419:19335":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:13896:19838":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:12335:16368":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:4434:13289":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:44910:3593":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"18:609:32665":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:6943:14468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:4388:13286":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:22464:8795":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"11:1142:15194":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:8115:16299":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"4:3566:9109":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"18:80:20829":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:23705:189":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:47031:8755":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:44168:3497":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:22666:21546":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:21983:3481":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"4:6505:1949":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"6:1537:10676":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"4:8001:2962":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:5033:13354":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:13765:19831":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:14887:20593":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:6819:14460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:7325:3389":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:48666:8656":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:10716:16399":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:10440:2788":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:43500:3459":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"5:3225:9034":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:1439:2961":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:41280:3387":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:11549:16524":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:32847:2101":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"6:569:9786":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:212:2717":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:39922:2207":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:1591:10681":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:11817:16583":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:12410:16636":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"11:1087:31374":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:45347:3631":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"4:3460:2747":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"5:7491:21665":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:3065:15308":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:15710:20653":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:6666:10630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"4:4054:9176":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:3915:15376":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:5345:2719":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"4:1596:9035":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:14921:20595":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:12445:16641":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"4:9091:28098":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:42501:2290":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"6:7610:13527":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:6582:21757":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:5885:14025":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:6059:14037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"4:10736:9107":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:34674:2184":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:9860:16386":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:40946:3354":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:32816:16306":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"4:8378:9211":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"11:1051:9032":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:48794:8664":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:45076:3600":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:2509:132":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"5:7628:2761":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:10203:150":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:41100:2978":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:45064:3543":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:10925:16422":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"4:3432:3368":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"4:10990:2819":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:6086:14040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:4783:13324":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"4:859:2290":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"4:4225:9204":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"4:1602:9036":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:48703:8659":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:4724:13319":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:2795:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"17:12548:16639":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:10788:2960":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:7090:31766":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:3399:2202":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"18:755:20851":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:4921:15950":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"11:856:2943":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"4:5447:9276":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:4602:2126":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:14099:19851":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:13856:19835":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:5993:2149":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"4:3996:9173":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:3461:15311":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:555:9784":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:5123:13363":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"4:8621:9270":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"17:12273:16409":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:7905:2105":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:42554:2269":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"4:4046:9175":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:10657:16398":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:10051:16203":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:5910:14028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:22277:8802":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:15725:20654":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:12659:16360":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:47417:8734":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"4:7650:2809":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:7569:9346":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"4:7908:9105":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"17:11727:16559":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"11:673:2960":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:15:2008":{"crate_id":1,"path":["core","write"],"kind":"macro"},"4:11679:28313":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:48692:8658":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"4:8076:28087":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"17:10785:32625":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:46961:8699":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:15125:20609":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:13935:19841":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:23060:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:10432:32629":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:5995:16223":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"4:10109:2975":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:13347:2798":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"6:4824:13329":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:6960:16262":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:4830:13330":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:2546:209":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:5853:3395":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:46514:8726":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:6893:31772":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:6228:13199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:14021:19847":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:1203:16443":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"4:9139:25216":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:5661:16209":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:6226:16228":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:47082:21358":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:15535:20641":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"18:727:20850":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"4:2977:2793":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:15062:20603":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:41156:21509":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:5859:14023":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:2435:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:41147:3394":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"4:10746:137":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"11:742:9026":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"11:883:9030":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"4:723:151":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"4:7669:2811":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:13386:149":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:5393:9339":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:6837:14461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"4:8473:9265":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"17:13787:19832":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:4932:13343":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:22316:8803":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:16146:20816":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"4:11667:9315":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"17:15253:20620":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:6415:16240":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:9459:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:47387:8728":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:12324:16631":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"4:4769:9212":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:9678:16367":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"4:10984:2818":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:13322:19328":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:47687:8749":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:3418:23697":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:786:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}