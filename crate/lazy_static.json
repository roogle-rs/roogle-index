{"root":"0:0:1548","crate_version":"1.4.0","includes_private":false,"index":{"1:3324:1917":{"id":"1:3324:1917","crate_id":1,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3326:170","1:3327:1086"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8321:2232":{"id":"1:8321:2232","crate_id":1,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8323:2084"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13390:2069":{"id":"1:13390:2069","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"1:12985:2319","`None`":"1:47340:165","prim@char":"4:15753:1705"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8358:135":{"id":"1:8358:135","crate_id":1,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8360:669"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3276:1834":{"id":"1:3276:1834","crate_id":1,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6084:57825":{"id":"5:6084:57825","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8352:204"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13404:55371":{"id":"1:13404:55371","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12985:2319","`DoubleEndedIterator`":"1:8406:119","str::split":"4:15759:1710","prim@char":"4:15753:1705"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:49322:2671","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13010:2322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3521:1944":{"id":"1:3521:1944","crate_id":1,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3523:225","1:3524:195","1:3525:52497"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10193:2265":{"id":"1:10193:2265","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10194:1503","1:10195:52891","1:10197:52892"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5644:2942":{"id":"4:5644:2942","crate_id":4,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5645:53637","4:5646:56536","4:5647:56537"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13374:2348":{"id":"1:13374:2348","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:15753:1705"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:49280:2697","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5692:2946":{"id":"4:5692:2946","crate_id":4,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5693:56495","4:5694:56496","4:5695:56497","4:5696:56498"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13372:55362":{"id":"1:13372:55362","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"4:15759:1710"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13373:2736":{"id":"1:13373:2736","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:15753:1705"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:49274:2696","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6474:3054":{"id":"4:6474:3054","crate_id":4,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6475:53848","4:6476:53849"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13413:55373":{"id":"1:13413:55373","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:15753:1705","str::rsplitn":"4:15759:1710","self::pattern":"1:12985:2319"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:49408:2674","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8362:150":{"id":"1:8362:150","crate_id":1,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8363:2032","1:8364:2033","1:8365:751"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13394:2027":{"id":"1:13394:2027","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"4:15753:1705","self::pattern":"1:12985:2319","`None`":"1:47340:165"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13010:2322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13416:55375":{"id":"1:13416:55375","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"4:15759:1710","self::pattern":"1:12985:2319","prim@char":"4:15753:1705"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:49426:2675","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13010:2322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13360:55342":{"id":"1:13360:55342","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:15770:1719"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6870:2928":{"id":"4:6870:2928","crate_id":4,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6871:53495"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6096:57826":{"id":"5:6096:57826","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8352:204"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:4630:2979":{"id":"4:4630:2979","crate_id":4,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4631:54684","4:4632:54685","4:4633:54687","4:4635:2978","4:4636:54686","4:4638:54688","4:4639:3676"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"4:4548:2957","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8841:2438":{"id":"1:8841:2438","crate_id":1,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8560:156","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13448:57183":{"id":"1:13448:57183","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:15753:1705","self::pattern":"1:12985:2319"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2923:166":{"id":"1:2923:166","crate_id":1,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2924:401","1:2925:2073","1:2926:2074","1:2927:2093"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"1:2892:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2933:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13468:2922":{"id":"1:13468:2922","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4745:2314":{"id":"1:4745:2314","crate_id":1,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4746:2032","1:4747:53107","1:4748:2035"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3144:216":{"id":"1:3144:216","crate_id":1,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3146:126","1:3147:1390"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3393:1931":{"id":"1:3393:1931","crate_id":1,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3395:341"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2892:123":{"id":"1:2892:123","crate_id":1,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2887:172","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3454:115":{"id":"1:3454:115","crate_id":1,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3455:209","1:3456:529"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13474:3027":{"id":"1:13474:3027","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"4:15753:1705"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:49612:2717","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:39:1554":{"id":"0:39:1554","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6100:53428":{"id":"5:6100:53428","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"4:15759:1710"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9217:2010":{"id":"1:9217:2010","crate_id":1,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6081:57824":{"id":"5:6081:57824","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8352:204"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13351:57164":{"id":"1:13351:57164","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3148:215":{"id":"1:3148:215","crate_id":1,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3150:126","1:3151:1389"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6097:57827":{"id":"5:6097:57827","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8352:204","`Box<str>`":"5:432:1838"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1838","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:3336","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:7695:3136":{"id":"4:7695:3136","crate_id":4,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:7696:54393"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9218:2009":{"id":"1:9218:2009","crate_id":1,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2857:104":{"id":"1:2857:104","crate_id":1,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2858:395","1:2859:397"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:1079:3025":{"id":"4:1079:3025","crate_id":4,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:1080:2094","4:1081:2922","4:1082:53427","4:1083:53428","4:1084:53429","4:1085:53430","4:1086:53431"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3235:199":{"id":"1:3235:199","crate_id":1,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3308:1918":{"id":"1:3308:1918","crate_id":1,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3310:170","1:3311:1331"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8325:2234":{"id":"1:8325:2234","crate_id":1,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8327:2085"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6707:2923":{"id":"4:6707:2923","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6708:54235"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10459:2385","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13439:57178":{"id":"1:13439:57178","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3141:134":{"id":"1:3141:134","crate_id":1,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3143:666"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5658:2945":{"id":"4:5658:2945","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5659:54147","4:5660:54148","4:5661:53637","4:5662:54149","4:5663:3295","4:5664:3296","4:5665:54150","4:5666:1280","4:5667:54151","4:5668:54152","4:5669:54153","4:5670:54154","4:5671:54155","4:5672:54156","4:5673:54157","4:5674:54158"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8406:119":{"id":"1:8406:119","crate_id":1,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8407:2022","1:8408:2023","1:8409:2024","1:8410:2025","1:8414:2026","1:8417:2027"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8560:156","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2933:173":{"id":"1:2933:173","crate_id":1,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2935:981","1:2936:809","1:2937:775","1:2938:698","1:2939:681"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3240:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2887:172","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:5706:2948":{"id":"4:5706:2948","crate_id":4,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5707:53840"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10459:2385","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3377:1928":{"id":"1:3377:1928","crate_id":1,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3379:170","1:3380:1209"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3691:212":{"id":"1:3691:212","crate_id":1,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3692:170","1:3693:1941","1:3694:671","1:3695:356"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"1:3696:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3691:212","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:6776:2929":{"id":"4:6776:2929","crate_id":4,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6777:54915"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8845:2441":{"id":"1:8845:2441","crate_id":1,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"1:7886:2442","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:7886:2442":{"id":"1:7886:2442","crate_id":1,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7887:53291","1:7888:53292","1:7889:53289","1:7890:53287","1:7891:53293","1:7892:53290","1:7893:53288"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2857:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2933:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10260:178":{"id":"1:10260:178","crate_id":1,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10261:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13713:149":{"id":"1:13713:149","crate_id":1,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13714:170","1:13715:149","1:13716:750"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6780:2932":{"id":"4:6780:2932","crate_id":4,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6781:54223"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13367:52574":{"id":"1:13367:52574","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:13434:57176":{"id":"1:13434:57176","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12985:2319","`DoubleEndedIterator`":"1:8406:119","prim@char":"4:15753:1705","str::match_indices":"4:15759:1710"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:49472:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13010:2322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13471:53431":{"id":"1:13471:53431","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10481:141":{"id":"1:10481:141","crate_id":1,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10482:700","1:10484:52319"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6404:211":{"id":"5:6404:211","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6405:2097"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13425:1732":{"id":"1:13425:1732","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"4:15759:1710","prim@char":"4:15753:1705","`DoubleEndedIterator`":"1:8406:119","self::pattern":"1:12985:2319"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:49508:2709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5636:2943":{"id":"4:5636:2943","crate_id":4,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5637:54817","4:5638:54819","4:5639:54818","4:5640:54820"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13445:57182":{"id":"1:13445:57182","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:15753:1705","self::pattern":"1:12985:2319"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"1:13015:2323","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13466:2580":{"id":"1:13466:2580","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12924:2435","`FromStr`":"1:12924:2435"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47467:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"1:12924:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"1:12924:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3389:1930":{"id":"1:3389:1930","crate_id":1,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3391:339"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4605:2265":{"id":"4:4605:2265","crate_id":4,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4606:1733","4:4607:54437","4:4609:54438","4:4610:3599","4:4611:54439","4:4612:54440","4:4613:52892","4:4622:2058"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13401:13818":{"id":"1:13401:13818","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:15753:1705","self::pattern":"1:12985:2319"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:12777:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3355:1927":{"id":"1:3355:1927","crate_id":1,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3356:170","1:3357:936"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10262:2274":{"id":"1:10262:2274","crate_id":1,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10263:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13357:56485":{"id":"1:13357:56485","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12456:2877"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13437:57177":{"id":"1:13437:57177","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:4623:2976":{"id":"4:4623:2976","crate_id":4,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4624:54558","4:4625:36378","4:4626:54559","4:4627:54560"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3467:1864":{"id":"1:3467:1864","crate_id":1,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3468:531"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"1:3454:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6078:2847":{"id":"5:6078:2847","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8352:204"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:2569:126":{"id":"4:2569:126","crate_id":4,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:2570:52138","4:2572:1769","4:2573:54644","4:2574:54645"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"1:10243:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"1:10250:118","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3737:1863":{"id":"1:3737:1863","crate_id":1,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3240:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13375:3191":{"id":"1:13375:3191","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:49290:2698","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3481:129":{"id":"1:3481:129","crate_id":1,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3483:363"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"1:3484:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3213:114":{"id":"1:3213:114","crate_id":1,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3214:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5828:3330":{"id":"5:5828:3330","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5830:170","5:5831:418"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3240:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3135:74":{"id":"1:3135:74","crate_id":1,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3137:2020"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3240:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"4:6704:3045":{"id":"4:6704:3045","crate_id":4,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6705:54272","4:6706:56513"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10459:2385","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3610:1938":{"id":"1:3610:1938","crate_id":1,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3612:50516","1:3613:50517","1:3614:50518"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3240:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13349:776":{"id":"1:13349:776","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:15753:1705"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10491:145":{"id":"1:10491:145","crate_id":1,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10492:637","1:10493:1733","1:10494:50298","1:10495:50299","1:10496:50300","1:10497:50301","1:10498:50302","1:10499:50303","1:10500:50304","1:10501:50305","1:10502:50306","1:10503:50307","1:10504:50308","1:10505:50309","1:10506:50310","1:10507:1503"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4548:2957":{"id":"4:4548:2957","crate_id":4,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4549:2848","4:4550:53678","4:4552:53679","4:4553:53680","4:4554:2973","4:4555:53681","4:4556:53677","4:4558:53682","4:4559:2058","4:4560:3191","4:4561:2040","4:4563:2052"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3243:206":{"id":"1:3243:206","crate_id":1,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3484:130":{"id":"1:3484:130","crate_id":1,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3486:364"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"1:3487:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:12432:2915":{"id":"1:12432:2915","crate_id":1,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12433:2032","1:12434:53256"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12924:2435":{"id":"1:12924:2435","crate_id":1,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12925:125","1:12926:50790"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13469:53429":{"id":"1:13469:53429","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13004:2318":{"id":"1:13004:2318","crate_id":1,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13006:2341","1:13007:905","1:13008:53086","1:13009:53087"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:22992:2383":{"id":"1:22992:2383","crate_id":1,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"1:23641:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22983:2385","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10526:2450":{"id":"1:10526:2450","crate_id":1,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10527:145","1:10528:13608","1:10529:52651"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13475:57188":{"id":"1:13475:57188","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"4:15753:1705"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:49621:2718","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3401:1933":{"id":"1:3401:1933","crate_id":1,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3403:1210"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6076":{"id":"5:6076","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5896:1316","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6077:57823","5:6078:2847","5:6081:57824","5:6084:57825","5:6096:57826","5:6097:57827","5:6098:3001","5:6099:53427","5:6100:53428"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3702:1941":{"id":"1:3702:1941","crate_id":1,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3704:51692"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:38:1548":{"id":"0:38:1548","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"},"1:14097:140":{"id":"1:14097:140","crate_id":1,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14098:265","1:14099:504","1:14100:268","1:14101:1063"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13350:2028":{"id":"1:13350:2028","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10264:2263":{"id":"1:10264:2263","crate_id":1,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10265:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3397:1932":{"id":"1:3397:1932","crate_id":1,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3399:344"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3346:1920":{"id":"1:3346:1920","crate_id":1,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3348:545"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3318:1914":{"id":"1:3318:1914","crate_id":1,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3320:170","1:3321:544"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3138:148":{"id":"1:3138:148","crate_id":1,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3140:2021"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5702:2947":{"id":"4:5702:2947","crate_id":4,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5703:54148"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6778:2931":{"id":"4:6778:2931","crate_id":4,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6779:53401"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13363:52572":{"id":"1:13363:52572","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:47340:165"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13419:57172":{"id":"1:13419:57172","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13431:57175":{"id":"1:13431:57175","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12985:2319","`DoubleEndedIterator`":"1:8406:119","str::rmatch_indices":"4:15759:1710","prim@char":"4:15753:1705"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:49454:2706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:783:210":{"id":"5:783:210","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:2094","5:785:2095","5:786:2096"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3383:1929":{"id":"1:3383:1929","crate_id":1,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3385:170","1:3386:1212"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3313:1915":{"id":"1:3313:1915","crate_id":1,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3315:170","1:3316:875"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13370:57168":{"id":"1:13370:57168","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:15759:1710","str::slice_unchecked":"4:15759:1710","crate::ops::IndexMut":"1:3543:1936"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:22798:2384":{"id":"1:22798:2384","crate_id":1,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22788:2385","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13369:3188":{"id":"1:13369:3188","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"4:15759:1710","`str`":"4:15759:1710","crate::ops::Index":"1:3539:1935"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:13384:55057":{"id":"1:13384:55057","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:15753:1705","self::pattern":"1:12985:2319"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3350:1922":{"id":"1:3350:1922","crate_id":1,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3352:1087"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3539:1935":{"id":"1:3539:1935","crate_id":1,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3541:170","1:3542:736"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3240:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13410:57171":{"id":"1:13410:57171","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12985:2319","str::split":"4:15759:1710","str::split_terminator":"4:15759:1710","prim@char":"4:15753:1705"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:49372:2703","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13010:2322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10243:109":{"id":"1:10243:109","crate_id":1,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10244:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13015:2323":{"id":"1:13015:2323","crate_id":1,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13010:2322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13457:57184":{"id":"1:13457:57184","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:15753:1705","self::pattern":"1:12985:2319"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13010:2322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13470:53430":{"id":"1:13470:53430","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3334:1919":{"id":"1:3334:1919","crate_id":1,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3336:254"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13454:55377":{"id":"1:13454:55377","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:15753:1705","self::pattern":"1:12985:2319"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13010:2322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13398:54688":{"id":"1:13398:54688","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"prim@char":"4:15753:1705","str::rsplit":"4:15759:1710","str::split_whitespace":"4:15759:1710","`DoubleEndedIterator`":"1:8406:119","self::pattern":"1:12985:2319"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:49304:2667","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3342:1921":{"id":"1:3342:1921","crate_id":1,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3344:876"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13365:52573":{"id":"1:13365:52573","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:13361:1553":{"id":"1:13361:1553","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:47340:165"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3330:1916":{"id":"1:3330:1916","crate_id":1,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3331:170","1:3332:896"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3240:1833":{"id":"1:3240:1833","crate_id":1,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13379:57169":{"id":"1:13379:57169","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:49568:2712","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13407:57170":{"id":"1:13407:57170","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::rsplit_terminator":"4:15759:1710","str::split":"4:15759:1710","self::pattern":"1:12985:2319","prim@char":"4:15753:1705","`DoubleEndedIterator`":"1:8406:119"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:49354:2702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3543:1936":{"id":"1:3543:1936","crate_id":1,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3545:737"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3240:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"1:3539:1935","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13380:14212":{"id":"1:13380:14212","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:49596:2715","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3303:1913":{"id":"1:3303:1913","crate_id":1,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3305:170","1:3306:253"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3247:208":{"id":"1:3247:208","crate_id":1,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13010:2322":{"id":"1:13010:2322","crate_id":1,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13012:2022","1:13013:52167","1:13014:52168"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"1:13004:2318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13428:57174":{"id":"1:13428:57174","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"prim@char":"4:15753:1705","str::matches":"4:15759:1710","self::pattern":"1:12985:2319","`DoubleEndedIterator`":"1:8406:119"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:49526:2710","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13010:2322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:9237:3044":{"id":"4:9237:3044","crate_id":4,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:9238:54292","4:9239:54293","4:9240:54294","4:9241:54295","4:9242:2748","4:9243:28638","4:9244:54291"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10459:2385","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:0:1548":{"id":"0:0:1548","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:39:1554","0:41:1555","0:38:1548"]}},"1:14169:2443":{"id":"1:14169:2443","crate_id":1,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14170:53179","1:14171:53180","1:14172:53181","1:14173:53182","1:14174:53183","1:14175:53184","1:14176:2058"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6602:2945":{"id":"4:6602:2945","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6603:53511","4:6604:53512","4:6605:53513","4:6606:53514","4:6607:53515","4:6608:53516","4:6609:53517","4:6610:53518","4:6611:53519","4:6612:53520","4:6613:53521","4:6614:53522","4:6615:53523","4:6616:53524","4:6617:53525","4:6618:53526","4:6619:53527"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13354:57166":{"id":"1:13354:57166","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"4:15759:1710"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3070:2469":{"id":"1:3070:2469","crate_id":1,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:3069:2385","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13371:55361":{"id":"1:13371:55361","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"4:15759:1710"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3774:1946":{"id":"1:3774:1946","crate_id":1,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10258:2273":{"id":"1:10258:2273","crate_id":1,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10259:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8371:1837":{"id":"1:8371:1837","crate_id":1,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8373:2029","1:8375:2030","1:8376:2031"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3372:1926":{"id":"1:3372:1926","crate_id":1,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3374:170","1:3375:343"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13472:57187":{"id":"1:13472:57187","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"4:15753:1705"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:49603:2716","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5714:2950":{"id":"4:5714:2950","crate_id":4,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5715:53637"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13443:57180":{"id":"1:13443:57180","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10885:202":{"id":"1:10885:202","crate_id":1,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:10887:170","1:10888:1553","1:10889:52572","1:10890:52573","1:10891:52574","1:10892:736","1:10893:737"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3240:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10876:2385","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10254:2271":{"id":"1:10254:2271","crate_id":1,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10255:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13698:137":{"id":"1:13698:137","crate_id":1,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13699:170","1:13700:997"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13352:57165":{"id":"1:13352:57165","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13460:57185":{"id":"1:13460:57185","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:12985:2319","prim@char":"4:15753:1705"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5570:3021":{"id":"4:5570:3021","crate_id":4,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5571:4141","4:5572:56485"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10459:2385","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3362:1924":{"id":"1:3362:1924","crate_id":1,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3364:170","1:3365:338"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5564:3023":{"id":"4:5564:3023","crate_id":4,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5565:56522","4:5566:3423"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10459:2385","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3679:1939":{"id":"1:3679:1939","crate_id":1,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3240:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"1:3610:1938","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10250:118":{"id":"1:10250:118","crate_id":1,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10251:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6354:2923":{"id":"4:6354:2923","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6355:3295","4:6356:3296","4:6357:54289","4:6358:54310","4:6360:54314","4:6362:54311","4:6363:54312","4:6365:54313"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10459:2385","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10252:2270":{"id":"1:10252:2270","crate_id":1,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10253:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13463:57186":{"id":"1:13463:57186","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:15753:1705","self::pattern":"1:12985:2319"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13010:2322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6376:2926":{"id":"4:6376:2926","crate_id":4,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6377:53463","4:6378:36526","4:6379:53464","4:6380:53465","4:6381:53466","4:6382:53467"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10459:2385","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13359:291":{"id":"1:13359:291","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"4:15770:1719","str::as_mut_ptr":"4:15759:1710"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13348":{"id":"1:13348","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:12445:1316","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:13349:776","1:13350:2028","1:13351:57164","1:13352:57165","1:13354:57166","1:13357:56485","1:13358:57167","1:13359:291","1:13360:55342","1:13361:1553","1:13363:52572","1:13365:52573","1:13367:52574","1:13369:3188","1:13370:57168","1:13371:55361","1:13372:55362","1:13373:2736","1:13374:2348","1:13375:3191","1:13376:14183","1:13377:14221","1:13378:3676","1:13379:57169","1:13380:14212","1:13381:50518","1:13384:55057","1:13387:55059","1:13390:2069","1:13394:2027","1:13398:54688","1:13401:13818","1:13404:55371","1:13407:57170","1:13410:57171","1:13413:55373","1:13416:55375","1:13419:57172","1:13422:57173","1:13425:1732","1:13428:57174","1:13431:57175","1:13434:57176","1:13437:57177","1:13439:57178","1:13441:57179","1:13443:57180","1:13444:57181","1:13445:57182","1:13448:57183","1:13451:33550","1:13454:55377","1:13457:57184","1:13460:57185","1:13463:57186","1:13466:2580","1:13468:2922","1:13469:53429","1:13470:53430","1:13471:53431","1:13472:57187","1:13474:3027","1:13475:57188"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13377:14221":{"id":"1:13377:14221","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"4:15759:1710"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:49587:2714","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:41:1555":{"id":"0:41:1555","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["lazy",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"LazyStatic","id":"0:39:1554","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"4:4908:3028":{"id":"4:4908:3028","crate_id":4,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4909:2551","4:4910:54122"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:22947:28250":{"id":"1:22947:28250","crate_id":1,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:22948:50538","1:22949:53281","1:22950:53282"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22940:2385","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6098:3001":{"id":"5:6098:3001","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8352:204"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2832:97":{"id":"1:2832:97","crate_id":1,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2834:1695"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3240:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13451:33550":{"id":"1:13451:33550","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:15753:1705","self::pattern":"1:12985:2319"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6077:57823":{"id":"5:6077:57823","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1838","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:3336","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1838","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:3336","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3244:205":{"id":"1:3244:205","crate_id":1,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13381:50518":{"id":"1:13381:50518","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:15753:1705","self::pattern":"1:12985:2319"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5832:3332":{"id":"5:5832:3332","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5834:170","5:5835:14307"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13358:57167":{"id":"1:13358:57167","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:8431:1836":{"id":"1:8431:1836","crate_id":1,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8432:776","1:8433:2028"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8560:156","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3478:1835":{"id":"1:3478:1835","crate_id":1,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3479:564"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3487:131":{"id":"1:3487:131","crate_id":1,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3489:170","1:3490:365"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13441:57179":{"id":"1:13441:57179","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2835:2478":{"id":"1:2835:2478","crate_id":1,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2837:50176"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3240:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"1:2832:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2887:172":{"id":"1:2887:172","crate_id":1,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2889:590","1:2890:890"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3240:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3132:75":{"id":"1:3132:75","crate_id":1,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3134:292"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3240:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:8838:2439":{"id":"1:8838:2439","crate_id":1,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8560:156","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6099:53427":{"id":"5:6099:53427","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"4:15759:1710"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3245:106":{"id":"1:3245:106","crate_id":1,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2857:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:12995:2320":{"id":"1:12995:2320","crate_id":1,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12997:2318","1:12998:52686","1:12999:52687","1:13000:52688","1:13001:52690","1:13002:52689","1:13003:52691"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13376:14183":{"id":"1:13376:14183","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"4:15759:1710"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:49578:2713","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5652:2944":{"id":"4:5652:2944","crate_id":4,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5653:53637","4:5654:54196"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13422:57173":{"id":"1:13422:57173","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13010:2322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13387:55059":{"id":"1:13387:55059","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"1:12985:2319","prim@char":"4:15753:1705"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12995:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13010:2322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8560:156":{"id":"1:8560:156","crate_id":1,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8561:2032","1:8562:905","1:8563:2034","1:8566:2035","1:8567:481","1:8569:2036","1:8572:2037","1:8573:2038","1:8574:2039","1:8575:2040","1:8577:2041","1:8579:2042","1:8580:2043","1:8582:824","1:8585:2044","1:8592:2045","1:8594:2046","1:8597:2047","1:8598:2048","1:8599:2049","1:8601:2050","1:8603:2051","1:8606:1284","1:8607:2052","1:8608:2053","1:8612:2054","1:8615:2055","1:8616:2056","1:8617:2057","1:8619:2058","1:8620:1843","1:8622:2059","1:8625:2060","1:8627:2061","1:8637:2062","1:8652:2063","1:8654:2064","1:8658:2065","1:8667:2066","1:8670:2067","1:8672:2068","1:8675:264","1:8682:281","1:8689:2069","1:8696:2070","1:8705:2071","1:8715:998","1:8722:2072","1:8729:2073","1:8730:2074","1:8731:2075","1:8743:2076","1:8750:2077","1:8762:2078","1:8769:2079","1:8770:2080","1:8775:2081","1:8778:2082","1:8781:2083","1:8782:2084","1:8784:2085","1:8786:401","1:8789:2086","1:8792:981","1:8795:2087","1:8798:590","1:8801:2088","1:8804:890","1:8806:809","1:8808:775","1:8810:698","1:8812:681","1:8814:2089","1:8815:2090","1:8823:2091"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13378:3676":{"id":"1:13378:3676","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:49558:2711","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23641:2377":{"id":"1:23641:2377","crate_id":1,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:23642:2382"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:23637:2385","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3245:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3962:68":{"id":"1:3962:68","crate_id":1,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3963:1403"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"1:3406:1934":{"id":"1:3406:1934","crate_id":1,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3408:1213"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3696:136":{"id":"1:3696:136","crate_id":1,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3698:672"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3691:212","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3367:1925":{"id":"1:3367:1925","crate_id":1,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3369:170","1:3370:340"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10256:2272":{"id":"1:10256:2272","crate_id":1,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10257:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13444:57181":{"id":"1:13444:57181","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3338:1923":{"id":"1:3338:1923","crate_id":1,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3340:1332"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"1:32023:2827":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"5:923:3344":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:13054:49002":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:4316:2997":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:12982:48949":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"4:6354:2923":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"4:11303:2930":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"4:3253:3237":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"6:5130:40242":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:10260:178":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"4:9665:4321":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"4:8963:1890":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:9592:127":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"12:1688:3641":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:3172:3990":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:51563:2387":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:5231:42739":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"9:927:41474":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:1717:37553":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:5197:40288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:5975:3788":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"4:15768:1717":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"6:4183:39663":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"12:866:3060":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"4:2031:144":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"9:603:41585":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:4955:42538":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:10912:43805":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:11307:2672":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:46637:2499":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:48677:3105":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"4:10838:2990":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:13215:14048":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"9:0:1760":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:49096:2678":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:45876:2239":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"17:13810:49607":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:4046:39649":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"4:15772:1721":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"17:10081:4051":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:9034:43504":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:7205:3817":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"4:10486:3218":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"1:50048:120":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"4:1646:3072":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"15:0:1765":{"crate_id":15,"path":["addr2line"],"kind":"module"},"4:5702:2947":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:10489:4080":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:46265:2899":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"17:13978:49653":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:5407:40303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:46435:2484":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"4:8825:2226":{"crate_id":4,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"5:2772:3404":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:4060:39651":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"4:1306:142":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:55961:224":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:46219:2897":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:2171:7541":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"17:9088:43506":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:6185:40712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:11376:2676":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:24011:5008":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:52088:2411":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:11378:4061":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:4517:39699":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:6569:4018":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:10353:4118":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:10801:43704":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:6518:3802":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"18:837:2318":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:6091:40706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:9930:2654":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"12:0:1763":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"17:11947:48203":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:12373:48396":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"4:5652:2944":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:547:3968":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"4:5415:3280":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:3034:56906":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:12011:3172":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:46348:2799":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:11678:44255":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:8845:2441":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:6152:3723":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:4992:1847":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"4:3444:2985":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:5221:40290":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:3313:1915":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:8431:1836":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:23877:4976":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:10962:43793":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:8954:4069":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:7205:3060":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:38653:2468":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:50186:190":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"4:15764:1713":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"4:2166:3060":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"4:2163:2033":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:50024:2728":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"9:963:3560":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:6221:40715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"4:11089:3038":{"crate_id":4,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"17:12552:48408":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:4008:43707":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:10864:43708":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"4:10532:30118":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"4:10321:4323":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:48428:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"12:2032:3089":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:52005:2426":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"9:41:3545":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:7628:2041":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:4847:1866":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"9:900:41508":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:12598:48411":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"4:7695:3136":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"1:46818:11346":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"11:46:58767":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:5542:11059":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:49684:2321":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:51365:2422":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:3263:2373":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"4:4314:2996":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:48687:50204":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:12645:48475":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:56013:224":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:976:3069":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:4073:39653":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:11519:44145":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:1602:2552":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:46863:11351":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:11962:43740":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:1665:37548":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:49900:2337":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"13:120:41758":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"4:4182:3006":{"crate_id":4,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"12:1180:3627":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:50040:2725":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:11458:43928":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:24669:2770":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:13884:49620":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"4:3265:3243":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:2748:565":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"4:11885:54420":{"crate_id":4,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"12:1200:3628":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"4:6474:3054":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:0:265":{"crate_id":5,"path":["alloc"],"kind":"module"},"18:660:4188":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:52245:2406":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"4:6616:53524":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:6949:4029":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"4:15774:1723":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"6:1630:37546":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:6124:40709":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:5472:3771":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:7971:126":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:10611:43735":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:52431:2412":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:53322:19696":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:3195:3991":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:3767:2552":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"4:11013:2698":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"16:5766:3783":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:10377:4116":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:10246:109":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:46318:2797":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:13306:49168":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:7174:3814":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:11015:43817":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:50044:2726":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"4:15757:1708":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"4:2859:168":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"18:650:4184":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:11337:4063":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:294:59642":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:8849:4101":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:48695:50203":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"11:54:3616":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"17:12343:48393":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:2484:43620":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"4:11877:3133":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"1:48656:2452":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:12568:48409":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:49304:2667":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"16:5707:3779":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"16:7378:3728":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:2773:4010":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"4:6870:2928":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"4:13916:4328":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:51287:2430":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:4377:39683":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"12:930:3065":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"12:160:3630":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:3522:41886":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"4:1463:3059":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:50016:2727":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:49890:2336":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"4:8189:3220":{"crate_id":4,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"1:2246:2299":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"4:9660:4320":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"5:6250:3383":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"4:7534:3125":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"16:5384:3766":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"4:11509:3111":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"14:47:41803":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"4:9627:3267":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:11555:44206":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"4:15503:4332":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"18:677:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:7549:3732":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:47527:2033":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:22570:52558":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"4:8546:1883":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:11147:43523":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:4449:39692":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:13842:49611":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"4:13396:4412":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"4:5564:3023":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:48117:2272":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:0:416":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:49578:2713":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:13898:49638":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:13912:49644":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:49290:2698":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:14939:3182":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:3604:41888":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:7894:3760":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"4:3255:3238":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:49123:2681":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:2543:4073":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"9:692:3495":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"12:2005:2551":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:8144:2033":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:7884:3731":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:2892:123":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"4:10570:31090":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"4:8873:1896":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:4331:39677":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:11640:44252":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:9726:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:13119:49006":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"4:15758:1709":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"16:7514:3744":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:12307:48391":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:12685:48478":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:48406:126":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"6:4013:39645":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:6391:3799":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:4523:39700":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"4:7022:33274":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"17:11482:43929":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"7:85:41362":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"12:1762:4278":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:5941:178":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:46242:2898":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:12582:48410":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:22568:52556":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"4:11226:3030":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"12:2039:3090":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:1700:37551":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:3389:1930":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:5882:4292":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"6:4281:39671":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:3945:39637":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:9332:4059":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"4:1419:2551":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:13506:49542":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:10844:4079":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:22851:2382":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"4:897:3197":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:3965:4280":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:69:3379":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:23899:2587":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:13713:149":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"12:877:3061":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"6:4439:39691":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:7823:3735":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:47459:177":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:10264:2263":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:47340:165":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:8358:135":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"4:4276:3257":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"4:14423:53673":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:4638:4285":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"4:2569:126":{"crate_id":4,"path":["std","error","Error"],"kind":"trait"},"16:4448:42406":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:3881:39633":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:10458:43632":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:49223:2689":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:52214:2403":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:3714:41897":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:2487:2315":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:1311:4163":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:23641:2377":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:12726:2705":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:7250:4280":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:22994:2382":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"12:925:3062":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:47398:2033":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"6:4005:39644":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"4:699:3193":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:7342:3757":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:10529:43634":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"4:15769:1718":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"1:5589:762":{"crate_id":1,"path":["core","iter"],"kind":"module"},"4:8288:3105":{"crate_id":4,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"16:6136:3763":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"4:7875:4304":{"crate_id":4,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"1:4702:2471":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:8352:204":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:7264:3739":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"4:11834:170":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"4:3237:2300":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"17:12699:48479":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:10160:43590":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:14000:49689":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:6106:40708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:6051:37473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:3737:1863":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:6577:3804":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"4:14570:3024":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"4:1045:3057":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:7104:4294":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:49372:2703":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"18:849:4179":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:3295:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:5386:40301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:12467:48402":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"4:6848:2933":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"14:231:3341":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:6357:3798":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"4:14338:3047":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:50281:2448":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:56000:224":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:7360:183":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:7333:3743":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:7764:222":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"4:14363:2955":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:57296:53063":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"9:469:41480":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:24737:2772":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:47407:2006":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:3241:1862":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"4:12229:4405":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"5:8130:56923":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:24101:2786":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:5505:3773":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"4:8590:1884":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:11665:44254":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:57275:53064":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"4:9533:4411":{"crate_id":4,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"6:1527:37534":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:8902:43501":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"5:1639:3059":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:13772:49603":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"4:14353:54281":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"4:11277:3046":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"4:3112:127":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"17:11001:43790":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:9264:41883":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:12742:2708":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:4237:4280":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:11277:43490":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:48103:2271":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:3253:1861":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:50249:2740":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:5410:2965":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:22798:2384":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:46426:2501":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:12456:48401":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:3035:56589":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:5295:41885":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:5868:4289":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"16:3800:41933":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"4:11348:3095":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"1:22788:2385":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:3834:4280":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:5832:3332":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:49322:2671":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"4:10974:2977":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"17:13497:49541":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"4:14970:3184":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"18:720:53159":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:5998:40704":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:4401:39686":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:9933:43518":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:4023:39646":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:9721:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:10304:4054":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"15:269:3653":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:11767:44431":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"4:4605:2265":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"1:3543:1936":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:13780:49604":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:1838:4280":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:157:36338":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"4:8638:1895":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:11196:2669":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"4:8381:3167":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"18:712:2474":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"12:2045:3091":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"17:13942:49647":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"4:10833:3152":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"4:2159:2551":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"14:56:43929":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:24465:2765":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:24079:5009":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"9:1020:3562":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"4:14876:54251":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:8297:2798":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11254:4103":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:10236:4072":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:10926:43814":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:88:36272":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:9219:2008":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:5001:1849":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"4:13843:3129":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:4341:39678":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:6100:40707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"4:786:4322":{"crate_id":4,"path":["std","thread","local","fast","Key"],"kind":"struct"},"6:3892:39634":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:3877:2989":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:9649:43513":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:3357:3090":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:5953:37472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"4:11281:33272":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"13:0:1758":{"crate_id":13,"path":["std_detect"],"kind":"module"},"4:10953:3005":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"6:4227:39667":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:13620:49562":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"4:14583:3133":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:4995:42553":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:5815:3785":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:1457:3072":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:10531:2451":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:1669:3064":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:10448:4077":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"12:747:2551":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:9925:2653":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:11738:44422":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:632:36662":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:10398:53155":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"9:1056:3555":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:0:1767":{"crate_id":17,"path":["object"],"kind":"module"},"1:3318:1914":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:8362:150":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:46556:2508":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"4:7346:174":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"6:4347:39679":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"4:11399:3105":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"1:46279:2901":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"4:13748:4413":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:9368:43509":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:12632:48474":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:4535:42418":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"4:15753:1705":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"6:1690:37550":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:10975:43792":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"18:782:59655":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:4459:39693":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:7420:3745":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"1:49612:2717":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"4:15754:1706":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"4:8388:3168":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"4:14055:2994":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"4:5293:3273":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:25107:2595":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:51711:52493":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:13894:52968":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"16:7870:3730":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:4095:39655":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:12431:48399":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:3244:205":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:5167:40285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:23735:2756":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"9:27:3544":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"18:636:59655":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"4:5692:2946":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:12566:3229":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:14:1733":{"crate_id":1,"path":["core","write"],"kind":"macro"},"17:11082:4068":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"4:1136:3050":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:47511:2551":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:46396:4334":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:3287:3995":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"5:8160:3329":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:12408:48398":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:3862:39631":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"4:3543:4302":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:3962:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"17:11328:43528":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"14:244:41805":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"12:1118:3071":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:9280:41882":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"4:5706:2948":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"4:6612:53520":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:4293:39672":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"4:15763:1712":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"1:0:474":{"crate_id":1,"path":["core"],"kind":"module"},"1:51743:52495":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:9971:59640":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"4:12066:1886":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:23806:2759":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:13402:49531":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:3978:39641":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:6464:3736":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:511:36647":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:3218:3992":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:46575:2494":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:525:36649":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:8114:3060":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:12610:48425":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:10876:2385":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:47519:2552":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"4:9755:4322":{"crate_id":4,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"16:4671:42479":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:13598:49555":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"4:14884:3140":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:5347:40297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:51437:2410":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"18:610:4185":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"4:8539:1882":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"4:11032:3030":{"crate_id":4,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"16:7467:3725":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:46596:2496":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:1729:3286":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:11993:48208":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:13760:49568":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:11348:2674":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:2257:3402":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:53034:2424":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:9296:43491":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:3135:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"4:10750:2987":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:8328:3422":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:24499:2766":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"12:853:3059":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"4:6614:53522":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:10253:4115":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:50036:2731":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:6214:40714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:3372:1926":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:13386:49503":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:4033:39647":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"15:248:3649":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:6592:53106":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:48464:2269":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"4:10481:3202":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"16:7392:3729":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"4:14698:4329":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"4:6116:3291":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:1547:37537":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"5:1486:3073":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:46188:2902":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:7236:3820":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:47771:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:9961:43519":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"0:38:1548":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"16:4417:42400":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"4:1655:3073":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:3336:3354":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:51848:2431":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:10200:43587":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:4066:39652":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:10885:202":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"4:10828:3151":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:4210:3060":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"4:10702:2956":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"4:6776:2929":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"18:704:59655":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:7042:4033":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:10041:43574":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:55987:224":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"8:0:1759":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:12456:2877":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"4:10685:2958":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"16:4386:42394":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"4:1021:3220":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"17:13933:49646":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"4:8310:3466":{"crate_id":4,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"4:2366:586":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:38716:2374":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:12118:48320":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:9217:2010":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"4:8703:161":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:47729:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:5414:40304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:11809:44436":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:7195:3816":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:13788:49605":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"4:4394:2995":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:47645:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:50028:2732":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:3708:1943":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:1689:3397":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"12:2025:3088":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:49105:2679":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:6851:2507":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:46466:2485":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:681:43500":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:46495:2488":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:3041:3989":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:11089:2552":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:8375:3339":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:11406:43919":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:3346:1920":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:11696:44256":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"4:5636:2943":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"4:15735:53657":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"12:396:3632":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"4:11439:3107":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"17:12182:48382":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:4241:39668":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:3889:3467":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:53307:19695":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:4387:39684":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:10673:43737":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:8321:2232":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:13637:49564":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"9:686:3493":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"6:5292:40295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"4:10716:128":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:47981:1881":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:53222:2392":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"4:903:3198":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"4:4630:2979":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"1:49169:2684":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:53281:19693":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"4:10260:43500":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"4:11178:3274":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"18:774:59655":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:24533:2620":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:3064:4046":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:4623:223":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:10203:133":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"5:3043:56905":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:3145:3999":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"4:14389:128":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:10516:4081":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:5379:40300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:3342:1921":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:22947:28250":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:13221:49058":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:14061:190":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"1:12985:2319":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"5:374:3459":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:50032:2730":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:5783:4280":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"12:112:58776":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:6620:4016":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:13824:14311":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:5531:1880":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:13789:176":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:11572:44213":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:4230:42313":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:3245:106":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"6:599:36657":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:3487:131":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:12287:48390":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"4:11019:2667":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"17:13532:49547":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:2887:172":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:5969:36528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"4:11498:3110":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"1:11269:2671":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:12142:48379":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:5073:1855":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:3679:1939":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:5420:40305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:51022:2429":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:6731:4022":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:11794:44435":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:3355:1927":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"17:12783:48551":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:5359:40298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"4:10504:2228":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"16:5960:3973":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:12777:2668":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"18:811:4176":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:3393:1931":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:6591:3805":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:13210:14047":{"crate_id":1,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"4:9612:3266":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"17:3743:4131":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:46144:2566":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:49133:2682":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:22992:2383":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"9:749:3497":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"4:2399:31083":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:47813:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:9476:43512":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"18:766:59666":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:6644:41077":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:5790:3784":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:46547:2492":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"18:744:59670":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:46527:2491":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"4:11956:2033":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"4:14052:2998":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:13062:49004":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"4:10996:2484":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"1:51515:2402":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:4632:2965":{"crate_id":1,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"1:3303:1913":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"5:8430:3061":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"6:5185:40286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:10599:43734":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"4:6704:3045":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"4:6778:2931":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:9849:59649":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:3951:39638":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:4762:42495":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"4:14130:2228":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:6087:3721":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:12507:48405":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:6910:39830":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:51076:2421":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:12666:2701":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"9:1075:3563":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:5360:3765":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:6681:3462":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:3946:3061":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:24114:2785":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:13582:49553":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"4:11059:3032":{"crate_id":4,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"17:13205:49057":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:12195:48383":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:5170:1859":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"12:1159:3626":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:7437:4280":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:432:1838":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:49143:2683":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"4:14376:53669":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:13986:49655":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"5:8314:3421":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:1613:2033":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:6947:3324":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:27918:2237":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"7:0:1454":{"crate_id":7,"path":["unwind"],"kind":"module"},"4:15778:1727":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"1:50196:4417":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:3338:1923":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:11981:43739":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"4:15776:1725":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"0:39:1554":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"6:4052:39650":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"4:2586:54136":{"crate_id":4,"path":["std","error","from","StringError"],"kind":"struct"},"1:55974:224":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:161:36339":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:51200:52492":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"4:11121:53636":{"crate_id":4,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"6:5282:40294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:3264:3994":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:5469:40308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:50204:179":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"4:1476:3060":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"4:10553:3074":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:4306:39674":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:1554:37538":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"4:4614:53839":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:49045:2673":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"18:620:59661":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"4:11330:33275":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:49526:2710":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:5428:40306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:5159:40284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:1584:37541":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:994:3345":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:5273:3978":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:48648:50252":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:10635:43703":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:3331:3089":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"12:840:3058":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:49736:2330":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:1676:37549":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:10224:43592":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:10028:43573":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:5371:40299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:24363:2762":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"4:2727:3048":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"17:10827:4135":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:6870:39825":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:4922:42530":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:4:963":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"16:3506:3996":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"4:11482:3108":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"6:5255:40271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"18:644:4187":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:4477:42410":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"4:15148:3273":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:10256:2272":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:9943:59650":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"4:1156:30122":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"4:15247:3657":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:51127:2409":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:12917:48947":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:13574:49552":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:10938:43815":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:1540:37536":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:12221:48385":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"4:12071:1887":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:10140:4079":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:8406:119":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:4304:42362":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:3370:3355":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"4:5714:2950":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:3743:159":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:10317:4057":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:10435:43631":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:4511:39698":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"4:11940:2551":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:50966:2408":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:8371:1837":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:5456:3770":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:4694:4285":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:5978:40702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"4:4282:3259":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"4:11862:3132":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:3774:1946":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:45767:187":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"14:11:41803":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"4:10596:2484":{"crate_id":4,"path":["std","error","Chain"],"kind":"struct"},"4:9361:54145":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:3401:1933":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"4:3117:2848":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"16:7303:3822":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"12:812:3064":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:2512:4113":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"4:1079:3025":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:1622:37545":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"19:0:978":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:510:43498":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:46852:11349":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:4790:42498":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:51095:52441":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:6644:3806":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:4364:39681":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:11100:4107":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:51927:2419":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:8325:2234":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"4:11141:53665":{"crate_id":4,"path":["std","net","parser","AddrKind"],"kind":"enum"},"4:14983:3189":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:23916:50248":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:9218:2009":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:3521:1944":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"18:739:59672":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:53250:19690":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:10656:43718":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:1011:2551":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"4:11995:3171":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:1572:37540":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:3069:2385":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"18:152:50010":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:5314:41883":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:45904:2465":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:12756:48488":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"4:8960:1889":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:3144:216":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"11:0:1762":{"crate_id":11,"path":["adler"],"kind":"module"},"1:50293:2446":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"6:6176:40711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"4:13377:31095":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:3240:1833":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"6:4255:3293":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:52781:2400":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:3243:206":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:13865:49614":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:49182:2685":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"4:15771:1720":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"4:1528:3068":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:24635:2769":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"4:11164:32667":{"crate_id":4,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"16:3338:3975":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"4:6236:3292":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:6554:3803":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"9:809:3105":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"4:5775:3312":{"crate_id":4,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"1:32262:53062":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"17:11304:43527":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"4:15752:1704":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"1:3334:1919":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:5869:3317":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:6468:3060":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:4193:39664":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:6757:2965":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"4:15759:1710":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"1:47382:2551":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"6:3997:39643":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:5828:3330":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:3429:3710":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"4:11258:3294":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:2816:4003":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:4614:42472":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"4:1450:3058":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:4028:2244":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"1:51538:2405":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"4:11062:3036":{"crate_id":4,"path":["std","net","ip","IpAddr"],"kind":"enum"},"1:53241:19689":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:21:657":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"17:13258:49101":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:46406:11060":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"16:6126:3791":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:8181:2033":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:4325:39676":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:4419:39688":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:49454:2706":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"4:1505:3065":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:13733:49566":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:13564:49551":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:46565:2493":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:13819:49610":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:5269:40292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:5927:3787":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:2857:104":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:53097:2389":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:3362:1924":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"4:2170:3061":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:48367:132":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"6:4300:39673":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:51181:2401":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:1680:183":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"4:11962:3169":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:13477:49539":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:12051:48312":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:2945:4009":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:3091:4047":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:8105:3346":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:4431:39690":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:8841:2438":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:46173:2569":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"4:14989:3190":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:2912:3986":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:7714:2510":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"4:15232:53621":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"1:22591:52559":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:50872:52496":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:1522:37533":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:49828:2333":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"4:1492:3062":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:3213:114":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:2933:173":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:7146:3812":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"12:1253:3073":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:11628:44251":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:11779:44432":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:45836:1937":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"17:13799:49606":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:13446:49534":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:13394:49504":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"5:8447:3380":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:53144:2407":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:7808:4294":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"4:14566:31097":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"5:4438:2551":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"4:8032:3220":{"crate_id":4,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"1:32163:2793":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"5:1648:3062":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"4:14826:53622":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:13554:49550":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:3070:2469":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:13748:52970":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:50070:2811":{"crate_id":1,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"4:15719:54264":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:53261:19691":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:624:36661":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"4:11238:3319":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"12:949:3067":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:3330:1916":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:3868:39632":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:8560:156":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"4:6602:2945":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"4:7520:3124":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"17:13609:49556":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:53375:19699":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:4996:1848":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"17:10988:43791":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:49603:2716":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:10258:2273":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"4:1486:3061":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"4:2769:3049":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"1:46135:10670":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:8090:3336":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"9:722:3496":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"4:1442:2033":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"5:1091:4280":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:7250:3821":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:11390:2677":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:46298:2571":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:10211:43586":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:49204:2687":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:13746:49567":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"4:2401:31084":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"6:4164:39662":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:13240:49060":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:37496:2474":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"6:5548:40336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"4:14846:3155":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:22792:2381":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:4641:42474":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"4:2460:4405":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"1:3138:148":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"4:4623:2976":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"9:234:3520":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:2376:1865":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:4301:2552":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:11114:2667":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:49801:2332":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"4:2856:169":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:2733:3961":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:11992:4340":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"17:299:59648":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:12924:2435":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:49247:2802":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:7477:3746":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:13061:2326":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:4040:39648":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:4714:102":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"4:8815:1678":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"17:11847:44451":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"12:1100:3070":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"4:7827:3219":{"crate_id":4,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"1:48394:107":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:48376:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"6:531:36650":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"18:694:4190":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:23637:2385":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:50989:2396":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"4:3567:2981":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:49587:2714":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:6780:3808":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:11231:4105":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:6110:3762":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:10788:43705":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"4:4353:2998":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"4:5644:2942":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:51767:52494":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:9162:4104":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:7024:4032":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:6923:41262":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:10526:2450":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:2991:3998":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:47373:2032":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:48480:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:24567:2767":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"4:15751:1703":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"7:38:41355":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"4:823:4322":{"crate_id":4,"path":["std","thread","local","os","Key"],"kind":"struct"},"1:3132:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"17:12725:48486":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"4:7832:4408":{"crate_id":4,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"1:47390:2552":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"16:2843:3984":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:7816:2482":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:53183:2427":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:7843:3825":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:783:210":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:5855:3786":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:3377:1928":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:3772:41930":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:11714:44312":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"18:790:4174":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:45911:1855":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"4:1501:3064":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:48110:2270":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"12:181:3634":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:5433:3769":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"4:11982:3170":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:6208:3794":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:13590:49554":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:46211:2718":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:12521:48406":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:5595:3776":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"4:14955:3183":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:12442:48400":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"4:70:1464":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"4:15756:1707":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:24431:2764":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:4410:39687":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:45705:185":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:10623:43736":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:46157:2567":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:10571:43733":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:46834:11348":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:8363:3338":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:37472:167":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"6:1596:37542":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"4:14413:2975":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"4:11492:2551":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"6:6858:39823":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:12275:48389":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:14097:140":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:13520:49544":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:45721:183":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:49879:2335":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:10106:4157":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:3018:3988":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:13272:49103":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"4:10591:3408":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"1:3350:1922":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"4:10547:30121":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:13547:49549":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:51586:2390":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:22940:2385":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"4:1432:2552":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:8838:2439":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:2305:3474":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"4:10734:117":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"9:996:3561":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:3702:1941":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:23970:2583":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:46448:2502":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"0:0:1548":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"6:4425:39689":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:3392:4001":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:22589:52561":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:1602:37543":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:46457:2505":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:11157:2668":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:10262:2274":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:7406:3727":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:13429:49533":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:5191:40287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:24033:4999":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:4317:39675":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:4272:39670":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:49262:2437":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:8346:56588":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"12:774:2033":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:32198:2615":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:49596:2715":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"18:866:4181":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"4:10587:31097":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"4:10459:2385":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"6:6881:39826":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:5241:40270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:46272:2900":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"17:11539:44205":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:3383:1929":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:670:36691":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:50012:2724":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"17:13192:49056":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:11932:48202":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:3696:136":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"4:10742:3250":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:13296:49106":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:3406:1934":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:7279:4034":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:11434:43927":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:6744:4023":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:6101:3719":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:52638:2432":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:49354:2702":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:45897:2464":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"16:7786:3734":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"4:11189:3276":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:46313:100":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:13154:49010":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"4:10471:53631":{"crate_id":4,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"1:47939:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"4:3621:2988":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:8929:43502":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:3033:2094":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:4690:2470":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:3241:3993":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:4101:39656":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"14:216:41812":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"4:12106:3156":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"17:10403:4078":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:6413:3645":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:24397:2763":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:13488:49540":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:10468:4076":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:1235:3400":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"18:829:4178":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:610:36659":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:9896:59637":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:10420:4111":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:13010:2322":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"4:10758:2989":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"12:2309:50538":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:55881:2458":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:46504:52135":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:3905:39635":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:3467:1864":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:9065:43505":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"10:0:1761":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:10543:43731":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:5996:3789":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:4203:39665":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"18:801:4175":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:2866:3985":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"9:776:3542":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:12040:48311":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:10887:43706":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:52971:2404":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:46536:2506":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:11065:2551":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:49213:2688":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:4145:39661":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:9886:43517":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:6068:37476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:10814:4134":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"4:1153:30120":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:46843:3004":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:24086:2832":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:1658:37547":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:23932:4964":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:4470:39694":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:11588:44214":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:5436:58586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:591:36656":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"12:1235:3629":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"4:15724:30124":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:48891:2919":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:1630:3058":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"4:13770:3130":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:3391:3091":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:9769:59632":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:48124:2273":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:23985:4989":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:9440:43511":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:22983:2385":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:1908:37692":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"4:5658:2945":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:7626:3384":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:2060:2965":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:2968:3987":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:11859:2690":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:7856:3826":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:47441:2007":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:3488:3997":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:14010:2741":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"12:429:3631":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:3308:1918":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"4:10563:3075":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"5:3324:2551":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:15088:3039":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:1592:2551":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:47450:2098":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:5228:40291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:12168:48381":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"4:8093:4304":{"crate_id":4,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"4:10690:3229":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"6:3990:39642":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"4:10695:2955":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:12480:48403":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:2548:3405":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:53270:19692":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:6014:3790":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"18:885:4182":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:47897:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:7366:2033":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"4:12027:3173":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:49621:2718":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:300:194":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"4:8280:3220":{"crate_id":4,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"17:9839:4079":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:5330:41882":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:5310:189":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"4:13231:3287":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"18:896:4183":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:6252:3796":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:5488:3772":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"4:5885:3320":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"12:1144:3072":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:7158:3813":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:6200:40713":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"4:15767:1716":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"16:5561:3775":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:9689:59645":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"4:11026:2711":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"18:0:1768":{"crate_id":18,"path":["memchr"],"kind":"module"},"4:2175:3088":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:13963:49648":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:3276:1834":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"17:9245:4058":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:3118:4000":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"4:7637:3130":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"4:11092:3145":{"crate_id":4,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"5:8247:3081":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:10950:43816":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:11915:48201":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:5736:3781":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:584:36655":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:3141:134":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:24601:2768":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:13348:49172":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:47687:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"12:469:58773":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:4340:2033":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:3365:3976":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:49722:2327":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:3939:42047":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:4157:4138":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:8138:1846":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"16:7928:2464":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:46616:2503":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:6636:3740":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:10331:4079":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"4:9521:4410":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"4:3917:3154":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:49408:2674":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:7119:3715":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:3454:115":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:6807:3809":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"12:2009:2033":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:49568:2712":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:6028:37499":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:12771:43528":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:46129:2717":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:11653:44253":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:6396:2489":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:7761:3824":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:5370:2894":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:4745:2314":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:6935:41263":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:8065:3003":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:8122:52139":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"4:15773:1722":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"4:1534:3069":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:563:36653":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:5563:2548":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"15:230:3648":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:51663:52491":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"12:354:4397":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"4:14714:4330":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:6645:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:7886:2442":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"17:9600:59641":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:50083:2812":{"crate_id":1,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"1:49280:2697":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:6366:3646":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:48665:145":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"4:9074:54935":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"6:3972:39487":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:3720:2466":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:7804:3733":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"4:9488:4318":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:542:3696":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:3483:3061":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"18:820:4177":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:4506:42414":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:4890:42523":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:10407:4112":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:53345:19697":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"4:10460:3194":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:2195:4282":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:2923:166":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:46486:2487":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:13004:2318":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"4:11889:53668":{"crate_id":4,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"6:5459:40307":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:6718:4021":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:13331:49171":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:2213:3357":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:12659:48476":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:7738:3823":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:6219:3795":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"4:15765:1714":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"17:11159:43524":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:10061:43591":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:50240:2739":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"4:11422:3106":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:46331:2798":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:5063:1854":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"4:7927:3220":{"crate_id":4,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"18:857:4180":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:51388:2425":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:2794:3709":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:11362:2675":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:12155:48380":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"14:250:41811":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:11045:43521":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:10095:4156":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:4704:42487":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:10477:4075":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:8282:3420":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:3918:39636":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"4:5847:3315":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:4852:42510":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:6899:39829":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"14:194:41804":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:11970:43738":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:6887:39827":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:9133:43507":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:46825:1677":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:11604:44215":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:7185:3815":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"4:1511:3066":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:49195:2686":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"5:8234:3080":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:3365:3088":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:13465:49538":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:23957:2582":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"4:12559:127":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:45790:186":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:13370:49174":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"4:4521:2965":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"4:5898:3321":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:9404:43510":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"4:4548:2957":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"1:52280:2388":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"12:556:142":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:10252:2270":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"5:3039:56907":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:6085:40705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:1723:37554":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:13163:49011":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"14:0:1764":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:24703:2771":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:51611:2391":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:4358:39680":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:13041:48950":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:9339:2320":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:48887:2920":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:6691:3807":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:9759:43515":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:13732:3128":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"5:6665:1880":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"12:937:3066":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:6155:40710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:5945:36569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:12327:48392":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:12946:48948":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:6269:3797":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"4:4489:3004":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"1:48640:2453":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:48361:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"17:10279:4051":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"4:11900:54940":{"crate_id":4,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"1:12995:2320":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:4350:42383":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:12741:48487":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:12712:48480":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"13:232:58778":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"4:7160:54942":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:51974:2423":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:49114:2680":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"4:1497:3063":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"12:2018:3061":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"17:13180:49054":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"4:8374:191":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:3957:39639":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:9005:43503":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:12247:48387":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"12:2315:58769":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:2314:4117":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:49472:2707":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:6072:3742":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:5522:3774":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"4:7582:3128":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"1:3478:1835":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:47536:167":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:5580:3966":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:1472:3071":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:13098:49005":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"4:2462:4406":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"17:9574:4070":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:1455:1676":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"6:5400:40302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:1617:37544":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:12073:48313":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:9809:59651":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"18:729:59654":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:0:1766":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:5421:3768":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"4:6780:2932":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"4:9237:3044":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:5632:3777":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"4:11086:3037":{"crate_id":4,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"4:10946:3003":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"4:7412:118":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:47603:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:10071:4162":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"9:157:3512":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"16:5753:3782":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"12:1667:3640":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"4:14781:3131":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:50918:2428":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:8099:2033":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:616:36660":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"4:3964:126":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"4:5290:3272":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:5522:40335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"4:15760:1711":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"4:3962:194":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"16:6021:3983":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"18:136:50009":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:3691:212":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"4:11252:3274":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"4:15169:3280":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:7073:3811":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"4:15223:34993":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"16:5672:3778":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"4:10271:54132":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:10149:43517":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:6469:2504":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:4083:39654":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:4510:3447":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"1:46647:2500":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"14:189:41803":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"4:11056:3031":{"crate_id":4,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"1:45956:2608":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:52892:2420":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:5312:40296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:5407:3767":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:11892:2691":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:46476:2486":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"4:7692:3134":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"17:13685:49565":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:11726:44313":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:12432:2915":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:47561:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:10266:4114":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:4734:42492":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:12703:2704":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"4:12086:3155":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:50020:2729":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:9799:43516":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:46198:2903":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"4:14794:3132":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"4:14049:2996":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"12:784:3063":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"4:2192:3091":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:6032:3714":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"4:11244:3285":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:23993:5007":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:3324:1917":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:4395:39685":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:12095:48319":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"4:9528:4319":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"16:5717:3780":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:3484:130":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:13924:49645":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"4:12126:3157":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:6239:40716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:10250:118":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"4:15777:1726":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"17:12494:48404":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"4:9039:1892":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:7295:3741":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"12:2323:58770":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:52167:2399":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:9719:43514":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:50941:2416":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:11030:126":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:6005:33272":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:6424:3800":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:9659:59644":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:3966:39640":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:11118:43522":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:5563:40337":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:1195:57025":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:6404:211":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:4262:39669":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:9528:2698":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:11186:43525":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:13015:2323":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:8264:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:578:32299":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:50893:52457":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:5147:1858":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:14000:2316":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"4:3239:3233":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:13377:49186":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"4:2181:3089":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:47467:194":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:56039:224":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:49707:2324":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:1236:43589":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"18:169:50011":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"4:4908:3028":{"crate_id":4,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"4:13595:3138":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"4:12568:4327":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:7216:3818":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"12:1855:144":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:4501:39697":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:7453:3724":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:45657:1945":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:49753:2331":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:11750:44423":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:12234:48386":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:2754:3977":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:9186:4067":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:13318:49170":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:3367:1925":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"18:754:59659":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"4:12081:1894":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:6614:36606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:13356:49173":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:1563:37539":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"4:4566:2974":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:48343:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"4:1161:30123":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"4:2187:3090":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:6491:3801":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:51158:2397":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:605:36658":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:12671:48477":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"4:0:1307":{"crate_id":4,"path":["std"],"kind":"module"},"12:2303:58772":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:46518:2490":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:45869:1940":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"4:7237:175":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"6:5274:40293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:4112:39657":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:22551:52428":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"6:1708:37552":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"4:8808:1677":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"16:5029:42562":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:53296:19694":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:4883:1867":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"4:15110:3272":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:7604:3383":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"4:1522:3067":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:13698:137":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"12:892:3618":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"4:6707:2923":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:22536:52428":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:4478:39695":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:11026:43520":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:4594:4283":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"5:8122:3347":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"4:10962:2975":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"6:0:781":{"crate_id":6,"path":["libc"],"kind":"module"},"12:2013:3060":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:9729:59643":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"4:7554:3126":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"6:4120:39658":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:4494:39696":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:49913:14049":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"4:10346:4325":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"4:1194:4403":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:32210:53071":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"4:4392:2994":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:3610:1938":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:12028:48255":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:2889:4004":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"19:117:59676":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"1:51334:2418":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:12537:48407":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:6999:3810":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:53437:19701":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:6605:3738":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"4:11948:3166":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"4:5999:3282":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:2196:1034":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:2164:564":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"12:463:58777":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:1623:3070":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:1441:3070":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"4:15775:1724":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"17:11199:43526":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:8152:183":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:11499:44144":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:11358:4062":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"12:1651:3639":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:46236:2717":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:10193:2265":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:51484:2398":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"4:4355:2999":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"4:11184:3275":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:5528:39547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"4:5877:3318":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:10584:4137":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:49426:2675":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:519:36648":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:13172:49012":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:10502:43633":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:49865:2334":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"3:0:1755":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:53360:19698":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"4:7568:3127":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"16:6176:3793":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:45813:188":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"12:761:2552":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"12:377:3633":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:12010:48211":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:10179:43588":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"12:968:3068":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"4:1637:3071":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"4:3533:2986":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:6238:3726":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"4:6376:2926":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"4:11907:53658":{"crate_id":4,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"1:4927:1674":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"4:15770:1719":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:32204:2817":{"crate_id":1,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"6:4371:39682":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:12262:48388":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:2832:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"17:11616:44216":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:10052:43575":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:3754:2551":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"4:3114:3230":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"4:14406:117":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"4:11006:2498":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"6:5987:40703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:3397:1932":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"4:11847:3131":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"4:8739:54935":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"6:6893:39828":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:1658:3063":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:537:36651":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:56026:224":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"0:41:1555":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"16:7226:3819":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"4:11828:3129":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"17:9210:43508":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"4:13468:3123":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"12:2331:3080":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:13540:49548":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:51053:2417":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:10254:2271":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"4:5570:3021":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:45629:1947":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:1215:3399":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:50263:157":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:8187:2033":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:10117:4158":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:10001:43572":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:4823:42506":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:6166:3792":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:6812:41236":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:12208:48384":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:569:36654":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:543:36652":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"4:4279:3258":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:14169:2443":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:23542:2380":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:7571:3720":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"4:15258:3657":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:13627:49563":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:51239:52489":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:3235:199":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:46584:2495":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:1760:37557":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"18:667:4189":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:3539:1935":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"17:12795:48554":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:49558:2711":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:22523:2474":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:2325:3401":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:6636:41076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:1736:37555":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"4:14807:3156":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"5:7833:4300":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:47855:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:11822:44437":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:1533:37535":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"4:3120:2973":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"6:4215:39666":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:6682:3737":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:3481:129":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"16:3549:41887":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:46627:2498":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:45746:184":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:5127:1857":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:24049:5010":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:10491:145":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"16:6964:2006":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:3247:208":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:46258:2716":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:3148:215":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:2835:2478":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"4:14358:54421":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:6864:39824":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:607:43499":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:12385:48397":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:32362:53061":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:11234:2670":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:1934:3061":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:10128:4159":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"4:14720:4331":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:10558:43732":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:49274:2696":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"4:11233:3316":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"4:12051:1885":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:2269:2306":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:1744:37556":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:13282:49104":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"4:7191:54942":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:5210:40289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"4:2437:31095":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"17:9551:4102":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:11835:44450":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:51220:2386":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:2260:2305":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:6852:39822":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"4:15766:1715":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"6:4133:39660":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:6768:4025":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:3320:4048":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:49508:2709":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:10243:109":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:10481:141":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"4:12076:1893":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:5118:1856":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:4127:39659":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:46606:2497":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:13453:49537":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:5346:3722":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:53398:19700":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"}},"external_crates":{"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":15}