{"root":"0:0:2378","crate_version":"1.5.0","includes_private":false,"index":{"1:13963:22360":{"id":"1:13963:22360","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:45122:3828","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13958:22588":{"id":"1:13958:22588","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44816:3598","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13981:26447":{"id":"1:13981:26447","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:13618:3791","`DoubleEndedIterator`":"1:8516:133","prim@char":"4:12486:490","str::split_whitespace":"1:13959:22414","str::rsplit":"1:13987:28402"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44830:3749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14034:26214":{"id":"1:14034:26214","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12486:490","self::pattern":"1:13618:3791"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14049:30778":{"id":"1:14049:30778","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:13579:148","`FromStr`":"1:13578:3290"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:43092:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:13578:3290","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13578:3290","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13932:30757":{"id":"1:13932:30757","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13984:22296":{"id":"1:13984:22296","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12486:490","self::pattern":"1:13618:3791"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:13408:3762","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14022:30769":{"id":"1:14022:30769","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14053:27838":{"id":"1:14053:27838","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14020:30768":{"id":"1:14020:30768","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13977:2821":{"id":"1:13977:2821","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42829:202","prim@char":"4:12486:490","self::pattern":"1:13618:3791"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42827:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13639:3807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14061:3535":{"id":"1:14061:3535","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5153:3535"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:45138:3536","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13928":{"id":"1:13928","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13929:1024","1:13930:2822","1:13931:30756","1:13932:30757","1:13934:30758","1:13937:28288","1:13938:30759","1:13939:350","1:13940:28375","1:13941:2383","1:13943:22923","1:13945:22924","1:13947:22925","1:13949:30760","1:13950:30761","1:13951:28394","1:13952:28395","1:13953:28398","1:13954:28399","1:13956:22358","1:13957:22178","1:13958:22588","1:13959:22414","1:13960:21918","1:13961:26448","1:13962:30762","1:13963:22360","1:13964:26083","1:13967:27939","1:13970:27941","1:13973:2863","1:13977:2821","1:13981:26447","1:13984:22296","1:13987:28402","1:13990:30763","1:13993:30764","1:13996:28404","1:13999:28406","1:14002:28408","1:14005:28409","1:14008:2592","1:14011:30765","1:14014:30766","1:14017:30767","1:14020:30768","1:14022:30769","1:14024:30770","1:14026:30771","1:14027:30772","1:14028:30773","1:14031:30774","1:14034:26214","1:14037:28410","1:14040:30775","1:14043:30776","1:14046:30777","1:14049:30778","1:14051:27834","1:14052:28310","1:14053:27838","1:14054:27839","1:14055:27840","1:14056:28313","1:14057:28314","1:14058:28315","1:14059:30779","1:14061:3535","1:14062:30780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13960:21918":{"id":"1:13960:21918","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13959:22414"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:45113:3829","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5741:31478":{"id":"5:5741:31478","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14014:30766":{"id":"1:14014:30766","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:13618:3791","`DoubleEndedIterator`":"1:8516:133","prim@char":"4:12486:490","str::rmatch_indices":"1:14017:30767"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44980:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14028:30773":{"id":"1:14028:30773","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12486:490","self::pattern":"1:13618:3791"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13644:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14031:30774":{"id":"1:14031:30774","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12486:490","self::pattern":"1:13618:3791"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13937:28288":{"id":"1:13937:28288","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:13140:3811"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13931:30756":{"id":"1:13931:30756","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13941:2383":{"id":"1:13941:2383","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42829:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13939:350":{"id":"1:13939:350","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13940:28375","`u8`":"4:12505:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13945:22924":{"id":"1:13945:22924","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:14005:28409":{"id":"1:14005:28409","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13639:3807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13993:30764":{"id":"1:13993:30764","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:13618:3791","str::split":"1:13981:26447","prim@char":"4:12486:490","str::split_terminator":"1:13990:30763"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44898:3822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13639:3807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13943:22923":{"id":"1:13943:22923","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42829:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13962:30762":{"id":"1:13962:30762","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:45094:3821","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14011:30765":{"id":"1:14011:30765","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:13618:3791","`DoubleEndedIterator`":"1:8516:133","prim@char":"4:12486:490","str::matches":"1:14008:2592"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:45052:3825","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13639:3807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13949:30760":{"id":"1:13949:30760","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12492:1765","str::slice_mut_unchecked":"1:13950:30761","crate::ops::Index":"1:40375:2798"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:14017:30767":{"id":"1:14017:30767","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13618:3791","`DoubleEndedIterator`":"1:8516:133","prim@char":"4:12486:490","str::match_indices":"1:14014:30766"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44998:3827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13639:3807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14040:30775":{"id":"1:14040:30775","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12486:490","self::pattern":"1:13618:3791"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13639:3807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5727:2719":{"id":"5:5727:2719","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5745:27837":{"id":"5:5745:27837","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:14055:27840"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14046:30777":{"id":"1:14046:30777","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12486:490","self::pattern":"1:13618:3791"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13639:3807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13961:26448":{"id":"1:13961:26448","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:45084:3819","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5726:31475":{"id":"5:5726:31475","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2732","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:2732","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13970:27941":{"id":"1:13970:27941","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12486:490","self::pattern":"1:13618:3791"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13639:3807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14002:28408":{"id":"1:14002:28408","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:2385":{"id":"0:31:2385","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[206,0],"end":[208,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\nuse lazy_static::lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:2384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:2378":{"id":"0:28:2378","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[161,0],"end":[173,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"1:14027:30772":{"id":"1:14027:30772","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5743:3522":{"id":"5:5743:3522","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13940:28375":{"id":"1:13940:28375","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12505:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13996:28404":{"id":"1:13996:28404","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12486:490","self::pattern":"1:13618:3791","str::rsplitn":"1:13999:28406"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44934:3751","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14024:30770":{"id":"1:14024:30770","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14026:30771":{"id":"1:14026:30771","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13953:28398":{"id":"1:13953:28398","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13954:28399"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13930:2822":{"id":"1:13930:2822","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14056:28313":{"id":"1:14056:28313","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1126:36962"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13954:28399":{"id":"1:13954:28399","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13953:28398"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14057:28314":{"id":"1:14057:28314","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1126:36962"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2378":{"id":"0:0:2378","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[208,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\nuse lazy_static::lazy_static;\n\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\nuse lazy_static::lazy_static;\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.5.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:2384","0:31:2385","0:28:2378"],"is_stripped":false}}},"1:13959:22414":{"id":"1:13959:22414","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13960:21918"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:45104:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5730:31476":{"id":"5:5730:31476","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14058:28315":{"id":"1:14058:28315","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1126:36962"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14043:30776":{"id":"1:14043:30776","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12486:490","self::pattern":"1:13618:3791"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14051:27834":{"id":"1:14051:27834","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5744:27836":{"id":"5:5744:27836","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:14054:27839"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13938:30759":{"id":"1:13938:30759","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13952:28395":{"id":"1:13952:28395","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13951:28394","str::split_at_mut_checked":"1:13954:28399"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13990:30763":{"id":"1:13990:30763","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:13618:3791","str::split":"1:13981:26447","prim@char":"4:12486:490","`DoubleEndedIterator`":"1:8516:133","str::rsplit_terminator":"1:13993:30764"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44880:3823","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14008:2592":{"id":"1:14008:2592","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:13618:3791","`DoubleEndedIterator`":"1:8516:133","prim@char":"4:12486:490","str::rmatches":"1:14011:30765"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:45034:3824","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:2384":{"id":"0:29:2384","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[179,0],"end":[182,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"1:13999:28406":{"id":"1:13999:28406","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12486:490","str::splitn":"1:13996:28404","self::pattern":"1:13618:3791"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44952:3747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13639:3807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13956:22358":{"id":"1:13956:22358","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12486:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44800:3818","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13957:22178":{"id":"1:13957:22178","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12486:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44806:3817","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14052:28310":{"id":"1:14052:28310","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40728:3502","Self::is_ascii":"1:14051:27834"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40728:3502","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13973:2863":{"id":"1:13973:2863","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42829:202","prim@char":"4:12486:490","self::pattern":"1:13618:3791"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42827:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14062:30780":{"id":"1:14062:30780","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5150:30780"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:45147:3556","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5733:31477":{"id":"5:5733:31477","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14059:30779":{"id":"1:14059:30779","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5152:30779"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:45129:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13929:1024":{"id":"1:13929:1024","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12486:490"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14055:27840":{"id":"1:14055:27840","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14037:28410":{"id":"1:14037:28410","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12486:490","self::pattern":"1:13618:3791"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13639:3807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13964:26083":{"id":"1:13964:26083","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12486:490","self::pattern":"1:13618:3791"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13950:30761":{"id":"1:13950:30761","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12492:1765","crate::ops::IndexMut":"1:3608:2799","str::slice_unchecked":"1:13949:30760"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5725":{"id":"5:5725","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5726:31475","5:5727:2719","5:5730:31476","5:5733:31477","5:5741:31478","5:5742:31479","5:5743:3522","5:5744:27836","5:5745:27837"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13951:28394":{"id":"1:13951:28394","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13953:28398","str::split_at_mut":"1:13952:28395"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13967:27939":{"id":"1:13967:27939","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"4:12486:490","self::pattern":"1:13618:3791"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14054:27839":{"id":"1:14054:27839","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13934:30758":{"id":"1:13934:30758","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13932:30757"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5742:31479":{"id":"5:5742:31479","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:2732","`String`":"5:7809:256"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2732","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13987:28402":{"id":"1:13987:28402","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:13618:3791","`DoubleEndedIterator`":"1:8516:133","prim@char":"4:12486:490","str::split":"1:13981:26447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44848:3753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13624:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13639:3807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13947:22925":{"id":"1:13947:22925","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:12095:17310":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"4:4363:9492":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:7758:2835":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:10368:17177":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:44576:24815":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:7058:17049":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:4492:3527":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"17:13361:17208":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"4:4212:9460":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:15864:21479":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:46884:8992":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:2437:17308":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"4:5021:9469":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:6904:17039":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:8152:3608":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:6659:14817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:48138:8927":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:48089:8924":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:1657:10980":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:7358:17058":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:13554:17224":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"1:4860:2690":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:5670:14118":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"4:2329:9366":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"16:5198:16733":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:42074:3615":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"4:1870:9328":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:42827:205":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"4:11025:3187":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"4:12504:911":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"5:889:9308":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:40487:227":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:16283:21510":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"4:6408:27323":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"4:12487:1917":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:3762:2802":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"4:11842:26290":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:43157:207":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:12204:17345":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"4:4570:9486":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:42767:3658":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:8711:17106":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"18:521:21723":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:5107:14058":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:5265:14073":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:47272:22388":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:41403:3598":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:11818:17286":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:7577:15249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"4:8648:9485":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:2724:16083":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:3054:156":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"5:2295:30225":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:10246:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:14872:20721":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:15989:21492":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"15:306:16019":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:3411:2797":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:14975:20728":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:13958:20187":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:23627:22164":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:8612:17102":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:12249:17396":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:15064:20734":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:5348:16768":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:6526:14807":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:22472:8938":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"4:4226:9462":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"4:7508:27279":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:5375:14087":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"4:8520:3187":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"4:12503:930":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"18:613:34001":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:2880:16090":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:13222:17202":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:8399:3622":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"4:2733:3781":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"4:10987:27004":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:22411:9391":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:6443:14801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:42649:22405":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"4:8044:9256":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"9:53:15883":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:11958:17282":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:14821:20717":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"4:12497:763":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"5:3088:30582":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:14652:20708":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"4:11050:9520":{"crate_id":4,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"17:14947:20726":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:7832:9629":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:2215:3211":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:11878:17197":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:11851:17285":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"4:12512:1456":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"17:14902:20723":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:545:10072":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:34489:2780":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:5088:14057":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:7168:16013":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"4:1642:9305":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:6159:17006":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"4:8281:27597":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"5:789:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:13909:20183":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:43479:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:6046:3165":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:5271:14074":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:5570:14108":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:47798:8955":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"11:2323:3141":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"4:11921:3202":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"14:0:2622":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"4:10400:9339":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"6:1514:10967":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:4981:2699":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:4575:30625":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"4:576:3179":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"5:7267:30618":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:14554:3225":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"17:10784:33821":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"17:15844:21477":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"9:445:15864":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:8302:14286":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:41146:3540":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:48168:8929":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:46799:8985":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:1577:9291":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:11339:22763":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"3:0:2615":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"11:1920:9307":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:13719:17503":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:7765:17067":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"5:2368:30241":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:45034:3824":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"17:15785:21473":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:5165:14063":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:45578:3798":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:22863:9391":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"4:11270:9521":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:6631:14814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:41360:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:15602:21460":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"4:2755:9416":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"4:8591:9447":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:4890:14035":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:26789:281":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"4:3603:9388":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"1:46980:9013":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:13119:17465":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"16:8585:17100":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:12754:3480":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"5:3096:30579":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:14963:20727":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:43672:3716":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:4816:14029":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:43027:221":{"crate_id":1,"path":["core","range","Range"],"kind":"struct"},"6:491:10066":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"4:991:9299":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:10246:17173":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:11678:17245":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"4:8637:9495":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:15286:21446":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:10696:17187":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:6970:17043":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:14055:20194":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"4:2555:2550":{"crate_id":4,"path":["std","io"],"kind":"module"},"17:13306:17205":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:8308:14287":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:15665:21462":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:7568:3165":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:6130:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:485:10065":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"4:5636:9559":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"17:15997:21493":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"4:9390:27146":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:15896:21482":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:13781:20176":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:47888:8961":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:3140:149":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:41413:3595":{"crate_id":1,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"16:7016:17046":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:6917:14863":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"4:10784:9434":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"4:939:3165":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:12962:17453":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"4:8297:3161":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:1727:10987":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:10097:17168":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"4:535:9245":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:12570:17357":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:47528:9015":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:13662:17501":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"5:1555:2827":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"4:8549:3631":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"11:1884:2827":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:8014:15621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:10804:217":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"17:13181:17464":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:23915:22334":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"6:5541:14105":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:7332:9944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:44213:22406":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"4:5688:116":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"4:4826:26945":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:45084:3819":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"17:12941:17442":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:7563:15248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:4924:2697":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:44203:9548":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"4:8502:3608":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"16:3141:16100":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:11515:17264":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:16739:21684":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:16159:21501":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:2704:16082":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:15136:17216":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:7292:30629":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:14358:20689":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:41244:3536":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"4:10713:27311":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"7:32:15836":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:7822:9628":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"5:4135:3165":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:22335:26034":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:10802:3716":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:8151:17086":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:15:2593":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:42589:3654":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"11:2349:9302":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"6:5139:14061":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:10432:22848":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"19:0:1323":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:5976:264":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:16701:21681":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:12042:3763":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:1632:10978":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:7612:2827":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:45558:3800":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"11:1564:15986":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:6205:17009":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:44934:3751":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"11:785:9292":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"4:6217:3188":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:5387:14089":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:15431:21451":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:6852:17035":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:3092:30578":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"4:8023:9391":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"4:11984:9449":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:11291:33287":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"4:134:2530":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"1:47378:8994":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:11873:3159":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:15531:21455":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"4:11856:26207":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:15090:20736":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:13983:20189":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:7604:15251":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"11:2228:15980":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:41365:3592":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:15769:21471":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"18:581:3496":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:10442:17180":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"11:2148:9302":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:1589:10975":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"4:12500:936":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"1:42049:3611":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"18:589:22333":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:6713:17026":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"4:8596:9445":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"9:328:15920":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:6302:17012":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:4970:14044":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:7108:3628":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:44816:3598":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:14692:20710":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"11:364:3131":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:5145:3527":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:4929:14039":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:12683:3760":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:2403:3215":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"4:9455:246":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"4:3351:9434":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:44423:3767":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:14997:20729":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:6984:17044":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"5:1415:9303":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:5255:14072":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:4956:16652":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:2142:1393":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"16:7542:32797":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:6691:14821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:39716:2794":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:7128:9648":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:45774:218":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"4:6958:244":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:6935:30583":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:44806:3817":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:6588:17021":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"4:11867:27292":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:22890:3743":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:42040:2531":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:14845:20719":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:8137:17085":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"4:4703:9498":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:12335:17400":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:33051:3512":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:47644:8949":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:15812:21474":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:16613:20178":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:16832:20187":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:12359:17402":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:10843:17192":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:8096:17083":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:11527:17258":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:8457:2731":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:6731:17027":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:6953:17042":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"11:772:9291":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:12176:17343":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"4:5885:9571":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:33119:2728":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"16:2920:16092":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:22:842":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:45550:3799":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:0:582":{"crate_id":1,"path":["core"],"kind":"module"},"16:2450:16070":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:15549:21457":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:7986:10022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:12550:17361":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:10861:150":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"4:8642:9496":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:15121:20738":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"4:8062:3199":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"11:488:165":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:3403:2795":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"4:8902:3159":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"4:6392:3225":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:7337:17057":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:12280:17398":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:6337:17013":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:43366:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:47304:8982":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:11421:17231":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"18:531:21727":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:41642:3640":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:4766:16600":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"4:9369:26676":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"4:10971:29933":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:33151:117":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"5:4300:3527":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:23509:22244":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"4:12493:1855":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"1:41510:3207":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:6493:14764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:12044:17309":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:16642:21677":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"5:3707:3159":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:2640:16079":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"4:1624:2827":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:6584:9584":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:44848:3753":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"4:11098:9567":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"17:11592:17246":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:33592:2775":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"4:2336:9367":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"1:45807:3893":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:11971:17281":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:13266:17203":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:3889:16106":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:46934:8952":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:13028:17462":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"5:1230:3151":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"4:11013:27596":{"crate_id":4,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"4:11385:29916":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:11358:17228":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:47173:9014":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"9:390:15865":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"9:422:15866":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"18:643:34009":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:12319:17377":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"18:670:21717":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:44898:3822":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:12056:17339":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:5586:14109":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:44880:3823":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:42026:22362":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:41252:3557":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:41538:145":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:44665:3222":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:43132:3159":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"6:5249:14071":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"4:9764:3196":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:48054:8921":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:11503:17237":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"4:11066:9562":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"5:7785:9362":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:13592:17219":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:297:2732":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"4:9211:9579":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:5648:14116":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"4:1872:9329":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"1:34874:2785":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"4:11163:27316":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:4056:3165":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"4:8814:9548":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"6:7448:15240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:45129:3557":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:42999:3688":{"crate_id":1,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"6:6882:13942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:22362:26040":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"4:5622:9558":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"11:396:3133":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:7980:17076":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:5477:14098":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:15148:20739":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"4:3540:3612":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"17:13006:17456":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:12260:17397":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"4:11042:30080":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:11922:3749":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"4:5656:9560":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"5:1002:3159":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:13570:17218":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:13451:17212":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:5085:16712":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:42807:3660":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:12762:17415":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:47917:8995":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"11:685:3160":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:8058:17081":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"4:9781:130":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"4:5549:132":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"16:8598:17101":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:47222:22263":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"4:12508:1889":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"11:1580:3147":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"4:11320:9394":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"16:6738:32853":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:22413:8939":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:5395:14090":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:8565:17099":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:7469:15243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:24389:247":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:45264:3846":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:45839:3892":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"5:3338:9304":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:22379:26026":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:41488:3624":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:48100:8925":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:1494:10964":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:6480:14805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:6813:14833":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:42846:184":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:2029:3527":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:23838:22224":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:3303:260":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"16:6269:17011":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:23021:9391":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:7495:32810":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:6749:17028":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:1489:10963":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"18:573:34009":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:3461:2787":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:3772:267":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:16507:20175":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"16:6822:17032":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:12004:3750":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:47059:8993":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:11579:17247":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:46814:8945":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:6531:9668":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"1:41202:3562":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:12906:17441":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:22393:26029":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:48115:8926":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"11:671:3159":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:212:3149":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:15946:21487":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:23249:3464":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"6:5635:14114":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"4:7852:26223":{"crate_id":4,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"1:3048:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:2209:3453":{"crate_id":1,"path":["core","ptr","metadata","metadata"],"kind":"function"},"16:5172:16730":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:14933:20725":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:7416:17061":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:14531:118":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"17:14612:20705":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:3268:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:44737:3223":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:31847:3496":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"4:12492:1765":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"16:4983:16656":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:46831:8951":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"4:3688:9411":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"17:14043:20193":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:42733:22305":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"4:3660:3568":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"11:698:2827":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:41610:3638":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:5334:14082":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:10729:17188":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"13:110:32758":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:6534:14808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"4:6440:26690":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:34016:2777":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:34355:2783":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"4:6833:2759":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:23376:9061":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"18:689:21719":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:12673:17431":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:45635:3865":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"11:2466:9293":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"4:1985:9357":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"1:3520:2807":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:43901:3479":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"5:1250:30564":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:42605:3655":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:13624:3805":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"4:381:9263":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:6111:17003":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:43218:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:14599:20704":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:9576:3670":{"crate_id":1,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"6:6672:14819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:7462:17063":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"4:9225:9576":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"4:0:1757":{"crate_id":4,"path":["std"],"kind":"module"},"4:11058:9347":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"16:5727:16996":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:13331:3835":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:41681:3643":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:5408:23011":{"crate_id":1,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"17:12886:17440":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:13578:3290":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:15439:21452":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:12347:17401":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:16595:20177":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:14283:3636":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1:43658:3713":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:14807:20716":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"4:8585:9448":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:12931:17216":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:11706:17272":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:4851:232":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:14666:3897":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"6:8353:15820":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"4:600:3182":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:2652:694":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:14483:20696":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:47461:8954":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:42921:3672":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"11:2301:9301":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"11:1674:32735":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:14375:216":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"4:4816:9459":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"4:12501:918":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"11:2137:3141":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:5318:16761":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:3391:2776":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:16786:21688":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:14574:3227":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:23665:22324":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"4:2522:9382":{"crate_id":4,"path":["std","fs","exists"],"kind":"function"},"16:8528:17097":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"4:997:9300":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:7044:17048":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:11952:17295":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:48074:8923":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:12184:3752":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:41468:3623":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:42920:3673":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:14127:20199":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:4937:14040":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"18:735:21714":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:2859:146":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"5:1214:30561":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:45459:3810":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"5:3364:9307":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:4792:14027":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:5649:16977":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:7508:33129":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:2620:16078":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:45570:3803":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:5305:17472":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:11897:3160":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:564:10075":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:7282:17055":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"5:1487:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:14886:20722":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:155:16045":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"9:500:15867":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:6765:14830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"16:4902:16644":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"4:631:9266":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:7386:17060":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:2950:16093":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:45407:3851":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"4:664:9267":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:2766:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:43665:3715":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:15586:21459":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:3694:193":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"4:8268:9290":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"5:39:9324":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:7864:3571":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"11:2566:9287":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:8403:3621":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"13:0:2616":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:5043:2702":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:46782:8980":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"11:1914:9306":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:1898:3413":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"16:3695:16104":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:3181:3507":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"17:14346:17405":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:8296:14285":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:5255:16744":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:16332:21514":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:5288:14076":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"4:4900:9519":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"4:8371:27571":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:1889:9293":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:7075:17050":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:45600:134":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:10734:237":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"1:40392:224":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"4:3353:9435":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:12723:17418":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:15418:21450":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:5689:16994":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"4:1492:167":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:3551:2705":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:2666:3464":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"17:12035:15980":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:22868:8941":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"4:12490:349":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"4:3311:27773":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:4990:14047":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:7838:17068":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:12851:17448":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:11475:17236":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"5:7745:9360":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:3376:2773":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"17:16555:21675":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:14507:20697":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:45546:3796":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"6:8330:14289":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"4:5196:9528":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"5:3866:3164":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:16775:21687":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:5441:14094":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:7938:17072":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"4:4120:9454":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:43930:22205":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:7863:3570":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:4990:2700":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:43292:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"18:113:21703":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"4:895:3160":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:15714:21466":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:33061:250":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:41376:3597":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5007:14049":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"4:4312:27293":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:8267:14281":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:1569:10973":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"4:3449:9433":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:16008:21494":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:15777:21472":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:13491:17214":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:12108:17340":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:16668:21679":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:12840:17414":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:11864:17284":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:47038:8987":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"4:12061:9597":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"1:45766:238":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:12625:17365":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:12648:17363":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"4:9323:118":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:46867:8986":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"4:12499:758":{"crate_id":4,"path":["std","f128"],"kind":"primitive"},"16:7372:17059":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:14460:20695":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:4829:14030":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:15655:21461":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:23937:22210":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"16:2820:16087":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:2282:200":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:5057:14055":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:13108:3740":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"11:2121:9301":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:47416:8948":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:44221:22341":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:14327:17406":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:896:33116":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"4:6233:231":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"5:3851:3161":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"9:355:15880":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:7907:17070":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:11209:22792":{"crate_id":1,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"1:22484:8935":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:2348:31801":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"4:9410:26684":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:13537:17216":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"7:79:15843":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:884:201":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"16:7471:17064":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:23115:9066":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:11720:17273":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"6:4921:14038":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:41826:3645":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:497:10067":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:2378:17323":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:14611:163":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"4:4681:9497":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:16145:21500":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"11:328:32728":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:14438:20694":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:15621:21444":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:7578:17066":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:7548:2827":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"11:854:3135":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:12976:17454":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:13757:20175":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"4:8685:9524":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"4:9284:9578":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:33044:2698":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"16:3014:16096":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:23700:22357":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:47399:9000":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:2173:9316":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:11075:33433":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:7219:278":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:5405:14091":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"11:1907:9305":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:13157:17459":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:33120:3517":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:43946:22419":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"1:41632:3639":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:41619:3627":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"5:7588:9317":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"16:6837:17033":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:41443:3579":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"18:706:3808":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:5301:14078":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:1386:9302":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:6440:17018":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"4:11442:9364":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"5:5001:228":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:6173:17007":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"11:1064:15984":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:4582:21808":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:908:33148":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"11:2420:2827":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:31179:3274":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"18:491:34005":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:47190:9020":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:7316:10919":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"11:2545:32738":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:10778:17189":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"4:8289:9426":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:12392:17376":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:10806:3717":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:7990:17077":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:3854:17382":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"4:10578:3198":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"16:2840:16088":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:42621:3656":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:13070:17197":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:12711:17445":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"4:12469:27198":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"4:10790:9432":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"5:2816:30152":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:12687:17443":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:13610:17220":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"4:9377:17066":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:44952:3747":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:14019:20191":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:5757:32998":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"18:718:21713":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:6998:17045":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:23734:3306":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:23371:9063":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:6219:3527":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:11386:17229":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"4:4150:9456":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:15739:21468":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:23849:22228":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"6:532:10070":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"4:3076:237":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"16:0:2624":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:34556:2782":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:10394:17178":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:47141:8959":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:23329:9391":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:12409:17403":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"4:9182:9566":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"11:2400:3160":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:3061:270":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:3802:25973":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"4:960:9295":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:5224:16736":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"4:3078:149":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"4:3914:9450":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:4562:3527":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"4:12511:1957":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"17:1339:17259":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"4:4019:9451":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"4:12080:16027":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:11985:17335":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:45815:3894":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:2208:3483":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"6:578:10077":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:14738:20712":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:15641:17253":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:3777:158":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:1627:221":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"4:949:9293":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"4:9433:198":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:6408:17016":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:2772:16085":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:7368:9524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"4:11337:26298":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:22364:26031":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:10938:33307":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:45441:3809":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:44998:3827":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:3783:2804":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:13635:17500":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:6876:14861":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:3308:16101":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:3699:222":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:12826:17412":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:12018:17337":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:23247:22892":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"6:7487:15244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:23727:21891":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:23562:22372":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"4:9219:2827":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:3381:2778":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:10793:17190":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"4:680:9269":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:8179:17088":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:7773:9361":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:14312:20688":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"1:23860:22347":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:11232:17236":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:11998:17302":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"4:5999:2752":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:16198:21505":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:14114:20198":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:11777:17276":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:5507:14102":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"16:2435:16069":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"16:6389:17015":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:15887:21481":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:465:10062":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:4184:16133":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"4:6071:2763":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:7212:16012":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:5551:14106":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:4914:14037":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:5019:14050":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"4:5813:9564":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"16:3048:16097":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"4:8039:9254":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"17:11902:17290":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:14284:20686":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:41215:3564":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:6599:14811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"11:1085:32733":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:14708:20711":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"4:4334:9489":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:7350:15238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:5494:14101":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:8284:14283":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:31409:2725":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"4:9446:3527":{"crate_id":4,"path":["std","sync","poison","Guard"],"kind":"struct"},"11:1601:15987":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:8448:176":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"4:1627:3165":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:4152:16124":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:5379:16776":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:5641:14115":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:4842:14031":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:47076:8999":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:14072:20195":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:2802:3489":{"crate_id":1,"path":["core","clone","CloneToUninit"],"kind":"trait"},"17:14031:20192":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:16209:21506":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:2816:3490":{"crate_id":1,"path":["core","clone","InitializingSlice"],"kind":"struct"},"4:1636:9304":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:34701:2784":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:16019:21495":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:1616:9296":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:45428:3853":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:40379:2800":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:5428:14093":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:1521:10968":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:5282:14075":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:3556:2706":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"4:5871:231":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:4165:30583":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:8212:2688":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"16:8105:17084":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:1551:10971":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"4:9152:9565":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"16:5144:16725":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:6902:14862":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:6623:14813":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:15760:21470":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:7463:15242":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:16812:21690":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:10274:17174":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:13427:17211":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"6:5319:14080":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"14:7:15994":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:7305:17056":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:2148:3161":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"9:480:15863":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:22592:8935":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:1711:10986":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:23893:22373":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"4:1855:719":{"crate_id":4,"path":["std","env"],"kind":"module"},"16:6462:17019":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:7891:9293":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"16:4404:16284":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"4:12437:27215":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:16520:21674":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"16:5417:16791":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:15573:21458":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:44627:3746":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:3587:16103":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"11:740:9296":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:10332:17176":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:6794:17030":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"16:6256:32922":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"18:623:34020":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:7341:15237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:8546:17098":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:6777:14832":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:6700:14822":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:11965:3762":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:5533:14104":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:6666:14818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:8343:15819":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:929:9309":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:15315:21447":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:46995:9019":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"4:9254:9577":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:44757:3224":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:15919:21484":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:11805:17287":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:8516:133":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:4694:16551":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:22590:8936":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:11065:17195":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:12104:27317":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"1:43403:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:9450:245":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:42880:3668":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"6:570:10076":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:40407:221":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"6:4957:14042":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"4:5317:27570":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:8209:9385":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:45554:3801":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"15:288:16018":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:3309:30665":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:35047:2786":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:47511:8966":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"4:8656:9448":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:10800:3715":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:11630:17252":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:16241:21508":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"11:708:9295":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:22464:9391":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:6410:3626":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:48017:9022":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:6239:17010":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"11:2380:3159":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:4189:2827":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:1401:3141":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"4:12484:434":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"17:13854:20180":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:47289:22346":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"18:765:21715":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:40375:2798":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"6:6823:14834":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"4:1933:3184":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"17:11606:17197":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:13370:3834":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"11:1005:9301":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"4:9318:26686":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:40467:225":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:5460:3601":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:12816:17213":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"4:6712:2531":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"4:10421:27600":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:15953:21488":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"4:440:196":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"4:10947:9522":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:2105:693":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"11:2559:32740":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:12524:17362":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:39137:2793":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:2896:213":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:45214:3843":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:42951:3664":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"17:13471:17213":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:4617:3538":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:12163:17342":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:13970:20188":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:5069:14056":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"11:881:9300":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:13644:3806":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"4:4998:9475":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:14400:3888":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:5325:14081":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:8978:22706":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:42789:3659":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"4:4496:9494":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:41339:3561":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"4:8559:3644":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"11:1725:167":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:1500:10965":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:11539:17254":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:23904:22218":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"17:11831:17254":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:5839:9646":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:7980:3605":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"17:3503:17359":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:45566:3802":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"9:0:2618":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:10167:17171":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:10796:3713":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"17:2406:17283":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:12736:17417":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:13618:3791":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"4:8376:26657":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"4:6887:2765":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"6:4896:13867":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:23816:22081":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"1:14348:23252":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:13082:17198":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"4:5129:9518":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"4:2246:132":{"crate_id":4,"path":["std","ffi","os_str","Display"],"kind":"struct"},"4:8273:9289":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:12605:17197":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"4:7838:26280":{"crate_id":4,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"17:10218:17172":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"15:0:2623":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:4855:2689":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"16:903:33117":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"16:2550:16075":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:46913:8946":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:45418:3852":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"5:2585:3152":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"18:507:34009":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:10798:3714":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:44655:3755":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:45756:230":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"16:3110:16098":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:10141:17170":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:3576:153":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:23456:22190":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:5117:14059":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:23300:3464":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1:43440:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:44006:3217":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"17:14099:20197":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"4:8740:9533":{"crate_id":4,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"1:3308:2704":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"4:2794:9427":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"4:3043:3185":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"4:4944:9474":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:1595:9294":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"4:8892:9551":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"1:2206:3482":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:5217:14067":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:16341:21515":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:47843:8989":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"4:6830:2758":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:37096:2789":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:15106:20737":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"4:9357:27605":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:31447:2726":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"4:2014:9358":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"6:5357:14085":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"16:3441:16102":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:4483:279":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:15024:20731":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"4:12073:27608":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:3567:2729":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"4:1118:9303":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:559:10074":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:14533:20699":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"4:7756:26658":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"17:14152:20201":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:3344:3478":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"6:5629:14113":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:40507:2801":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:34422:2781":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:6573:17020":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"4:7909:17166":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:1696:9482":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:11448:17233":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"4:6752:2764":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"4:3314:27772":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:15852:21478":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:2112:2721":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:8566:3598":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"1:8624:189":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:7259:17054":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:7350:33151":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"4:12507:1883":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"6:5205:14066":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:11222:17198":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:5044:14053":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:16084:21498":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:42055:3612":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:5349:14084":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"4:3308:26916":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:15731:21467":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"4:9438:2755":{"crate_id":4,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"17:10928:17193":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"11:2551:32744":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:13124:3742":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"4:11816:26678":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"4:9336:26201":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:43918:22242":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:43017:3687":{"crate_id":1,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"16:3987:16107":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"17:12234:17395":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:5381:14088":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"4:8579:3819":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"6:5622:14112":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:12371:17356":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:15905:21483":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:15679:21463":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"18:548:164":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:11691:17244":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:15829:21475":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:5658:14117":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"11:434:32745":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"4:9305:2754":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:2570:16076":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:6781:17029":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:3126:16099":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:1667:10981":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:41840:3646":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:40544:3513":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:43516:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:7361:15239":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:43329:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:23197:9068":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"4:4830:26949":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"18:96:21702":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"11:0:2620":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:42082:3617":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"4:8125:9347":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:6183:3172":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:22325:3496":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"4:12458:9275":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:9726:3805":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"4:9269:9575":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:7308:10115":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:0:2625":{"crate_id":17,"path":["object"],"kind":"module"},"17:12191:17344":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:10534:16996":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"4:4178:9459":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"18:563:21729":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:43092:237":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"5:2162:3164":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"11:2366:15988":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:11055:3731":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:45624:3864":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:4267:16170":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:11124:33865":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:6611:14812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:2256:9245":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:7919:17071":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:44776:3816":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:41259:3558":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"4:508:27314":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:15689:21464":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:1690:10984":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:6296:3635":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:23641:22231":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:45562:3804":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:47009:8933":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:4594:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:10753:155":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"6:5366:14086":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:5449:16800":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"11:830:9294":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:12716:3761":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"4:3447:9432":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"11:873:9299":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"4:7186:9582":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:13055:17254":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"4:12489:1348":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"4:12087:16027":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"4:3497:9419":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"11:842:9298":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:6708:14823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:22902:26037":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:43051:225":{"crate_id":1,"path":["core","range","RangeInclusive"],"kind":"struct"},"4:2649:9424":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"4:387:9264":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:41816:3644":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:13633:3808":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:8626:17103":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:7929:22921":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:45094:3821":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:2854:212":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"4:10293:22302":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"16:6680:17024":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"6:6462:14803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:41528:3632":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:40295:2809":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:14260:3890":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:23758:3307":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"4:769:165":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"18:726:21721":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:41298:3559":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"4:8630:3658":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:46951:8958":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:47205:9021":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"4:12491:1731":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"1:43553:2750":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:11757:17275":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:23882:21883":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"17:10516:17182":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"4:4350:9491":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:43072:223":{"crate_id":1,"path":["core","range","RangeFrom"],"kind":"struct"},"17:14520:20698":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:1563:10972":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:5186:14064":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:13354:3832":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:48230:8931":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"4:11508:9363":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"11:835:9297":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:31462:3479":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:6770:14831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:3854:131":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:33149:3414":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"4:1100:3141":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:7521:33181":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:7907:9643":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:44419:22344":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"4:1620:3159":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:23577:22313":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:1636:9315":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:14627:20706":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"4:2497:9374":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"1:45888:22337":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:45122:3828":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:7118:9647":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:10564:17183":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:6473:14804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"4:11424:3201":{"crate_id":4,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"4:955:9294":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:45147:3556":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:5131:17466":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"16:8223:17090":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:12983:17455":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:16822:20185":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:12149:17307":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"5:7648:2827":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:2684:16081":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:7949:17073":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:16264:21509":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:5051:14054":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"4:2481:3453":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"16:6421:17017":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:14335:17404":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:10031:17167":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:16750:21685":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:11026:33791":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:11699:251":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:1507:10966":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:2530:16074":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:13515:17215":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"10:0:2619":{"crate_id":10,"path":["adler"],"kind":"module"},"1:44174:22223":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"11:299:3127":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:23871:22230":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"4:10670:9565":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:3579:154":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:47158:8965":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:5502:1004":{"crate_id":1,"path":["core","iter"],"kind":"module"},"17:10597:17184":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:14560:20701":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:23023:8937":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:23779:9391":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:44166:3733":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:7454:15241":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:4869:14032":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:7807:32870":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:2796:16086":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:985:9310":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:4976:14045":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"11:430:32749":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:2327:150":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"18:651:34009":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:5341:14083":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"4:8852:9550":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"4:3852:9446":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"18:698:21720":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:11788:17301":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:41347:3555":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:41598:3647":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:44715:3758":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:7548:15247":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"4:974:9298":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"11:1880:3159":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:10241:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:11114:17196":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"4:5115:9517":{"crate_id":4,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"4:8024:9265":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:44645:3220":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:13921:20184":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:4210:3160":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:23221:9391":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:7391:11108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:8569:2730":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"4:10561:116":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"4:11752:9548":{"crate_id":4,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"1:22381:26036":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:12293:17355":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:15557:21445":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"5:7539:9313":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:5224:14068":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:3297:3159":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:7556:9311":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:6028:16998":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"11:1140:15985":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:16656:21678":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"1:45574:3797":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:4964:14043":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:8255:14279":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"4:4903:9497":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:23747:3292":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:42567:181":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:473:10063":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"4:8090:9273":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:23286:9070":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:11281:17199":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:47349:8988":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"11:1893:9293":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"18:0:2626":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:2668:3465":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"1:3338:3515":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"17:16385:21518":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:5036:14052":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:6680:14820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:15036:20732":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:5241:14070":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:8273:14282":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"4:913:9291":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:6565:9583":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"4:9460:2761":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"17:14001:20190":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:4810:16621":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"4:9759:9386":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:31820:207":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"17:15981:21491":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:1684:10983":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:2415:16040":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:6042:16999":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:41580:3636":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:4636:3539":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"16:8298:17093":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:8043:32815":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:7119:22058":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:3834:16105":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:45329:3848":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"4:5363:215":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"4:2483:9370":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:4529:3527":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:10803:3598":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"4:12505:1895":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:41187:21886":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:48043:8920":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:12198:3748":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:10823:17191":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:4733:2708":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:1584:10974":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:12537:17360":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"4:9465:2762":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"4:7347:26234":{"crate_id":4,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"17:13547:17217":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"1:45849:191":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:6876:17037":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:32984:3501":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"6:6716:14824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"6:586:10078":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:8000:17078":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"4:6543:231":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:5179:9481":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:7431:11091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:6723:14825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:31473:22146":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:12992:17419":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:15753:21469":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:16494:20174":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:14750:20713":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:16179:21503":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:1109:9302":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:506:16042":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:47490:8960":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:3538:127":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:5471:14097":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:2660:16080":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:2266:30650":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:12216:17346":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"11:1105:3143":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:7223:17053":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"4:9169:9521":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"1:43148:2827":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"16:2506:16073":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:41519:3625":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:7518:15245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"0:31:2385":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"17:14586:20703":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"4:6716:2756":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:1605:9295":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"4:10996:9387":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"18:80:21701":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"15:394:16030":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"16:6640:17022":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"6:7586:15250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:41557:3634":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:5593:14110":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"4:5742:9562":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"4:4828:26947":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"4:3404:9436":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:13294:3833":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:10572:3728":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"11:351:32730":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:4875:14033":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:3129:126":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"17:15475:21453":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"4:12498:779":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"1:47721:8983":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:42959:3686":{"crate_id":1,"path":["core","range","iter","IterRange"],"kind":"struct"},"1:23235:9069":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:45865:3900":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"4:12496:760":{"crate_id":4,"path":["std","f16"],"kind":"primitive"},"1:43140:3160":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"4:11142:27303":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:3933:9293":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"4:8908:9552":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"4:8511:9439":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"1:23926:22243":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"17:13398:17210":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"8:0:2617":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"4:688:9271":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:11015:168":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"17:10296:17175":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"11:1023:3141":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:11686:9391":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:5530:30583":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:41391:3593":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:8014:17079":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:43255:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"5:7703:9287":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"4:6026:2753":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:33037:22675":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:14672:20709":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"4:2087:208":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:12920:17451":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:46846:8981":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:8940:3620":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:13854:122":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:12115:3754":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:41651:3641":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:13349:17207":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:2486:16072":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"5:780:263":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:43181:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:5311:14079":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:2590:16077":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"4:2021:810":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"1:43985:149":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"5:7797:9619":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:4781:2527":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:16026:21496":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:10630:17185":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"4:6725:2532":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"1:10808:3718":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"4:10830:3199":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:8934:3569":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"4:8110:9346":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"17:2227:17289":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:44747:3757":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:3051:174":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:41140:3536":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"5:6763:30583":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:7656:2827":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"4:12502:924":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"17:12749:17416":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:1625:10977":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:13818:20178":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:41589:3637":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"4:683:9270":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:47996:9001":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:16399:21519":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:14393:20691":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"4:7441:27254":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:7030:17047":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:41236:3556":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:6411:14798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"4:4342:9490":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"11:1158:9303":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:10977:33785":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:14220:20684":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"4:968:9297":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:16714:21682":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:15010:20730":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:8483:17095":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:47975:8967":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"4:12005:9451":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:6748:14828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"6:8319:14288":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"4:12506:1877":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"16:8669:17105":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:16311:21512":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:13041:17461":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"4:5286:27570":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:726:30097":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:45876:3898":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"6:5420:14092":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"11:1049:9302":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:5676:14119":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:45749:162":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"17:10487:17181":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"1:46899:8998":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:11346:22791":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"1:46966:8964":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:11653:17250":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"4:3570:3527":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"5:4372:3159":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:5412:1275":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:10735:3568":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"6:5295:14077":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:16171:21502":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:4332:3527":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:12869:17212":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:23649:22408":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"14:187:16002":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:6638:14815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"4:3669:27299":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:12583:17358":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:41332:3560":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"4:882:3159":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:4984:14046":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:8261:14280":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"4:1908:9339":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"16:7401:32824":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:6144:17005":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"4:8381:9428":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"14:31:15994":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:7414:11093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:13733:20174":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"4:5672:9561":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"6:8249:14278":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:2890:206":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"14:160:15994":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"4:11302:3863":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:11007:164":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"4:1631:9293":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:22347:26034":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:6731:14826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"5:3720:3160":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"11:1888:3165":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"18:659:21716":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:3304:9305":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"4:9329:9250":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:15963:21489":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:8837:9549":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:1785:30583":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:6368:17014":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:5575:9621":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:41548:3633":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"4:1653:9307":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"4:8766:9547":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"17:16297:21511":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:47594:22066":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"1:13408:3762":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:6521:14806":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"4:11081:27210":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:42911:3669":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:3406:2796":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"16:5709:16995":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"4:8919:9553":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:15836:21476":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:3298:120":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:2792:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"16:546:32854":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:5450:14095":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:4805:14028":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:40331:2808":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:5462:14096":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:42064:3613":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:6890:17038":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:11309:17200":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:6740:14827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:4702:2707":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"4:9473:173":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"17:15050:20733":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:23159:9067":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:523:10069":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"4:2332:3470":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"17:13945:20186":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:8503:17096":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:45356:3849":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:33026:25217":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"16:2990:16095":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:5682:14120":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"4:4940:9470":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:0:1029":{"crate_id":6,"path":["libc"],"kind":"module"},"4:8262:130":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:7969:17075":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:10663:17186":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"4:6901:2766":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:13140:3811":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:42863:3160":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:881:3293":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"6:6437:14800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"11:2440:3165":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"16:7959:17074":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:3045:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"0:0:2378":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"1:4934:2698":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"4:8572:3749":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"1:41225:3565":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"4:11034:30082":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:11553:17249":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"4:11283:9566":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"18:515:21726":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:45393:3850":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:42871:2827":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"4:8226:9387":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"4:8104:9274":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"18:538:21728":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:40429:223":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"4:10966:27017":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"17:13798:20177":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:44800:3818":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"5:7578:9312":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"4:905:2827":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:44676:3759":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:8008:15620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"18:481:21724":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:42755:3657":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:43891:22213":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:7192:17052":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:8437:157":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:16684:21680":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:8233:17091":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:41423:3594":{"crate_id":1,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"1:3296:276":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:41176:3563":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:1586:9292":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:12860:17449":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:15540:21456":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:11733:17274":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"15:327:16023":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:45582:3863":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:8209:17089":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"4:1931:3183":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"4:11006:151":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:43968:3479":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:42033:3609":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"4:12272:27305":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:41497:3631":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"18:598:34004":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:7883:17069":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:44830:3749":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:5441:452":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"16:8066:17082":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:6843:17034":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:3343:30660":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:35220:2788":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:1370:9301":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:12170:3747":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:41691:3630":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:5429:9618":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"17:13209:149":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:15931:21485":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:4844:16632":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:11319:33917":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:7809:256":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"18:635:34014":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"4:5992:2751":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:15939:21486":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:13385:17209":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:1220:17251":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"4:8219:9383":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:2467:16071":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:11926:17288":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"4:4164:9457":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"4:11157:27313":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:33060:248":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:40728:3502":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:317:33117":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:885:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:45052:3825":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:7598:30652":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:48153:8928":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:5223:3549":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:2769:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:4873:16638":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:9613:3671":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:3608:2799":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:3086:30580":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:10418:17179":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"5:0:323":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:23343:9062":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"4:9594:3183":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"5:7620:221":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:6658:17023":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"4:9203:3159":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"4:3621:3186":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"4:12486:490":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"4:11355:173":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"16:8165:17087":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:8121:221":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"4:2499:9375":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:42942:3681":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"4:8529:9390":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"4:9158:210":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:3025:3236":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:12306:17399":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"14:220:16004":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:15077:20735":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:10789:122":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"17:11457:17234":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"17:15410:21449":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:45235:3844":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"4:8662:9488":{"crate_id":4,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:47549:22361":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"1:44182:3732":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:22466:8934":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"11:809:9293":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:7716:33207":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:14269:20685":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:472:17164":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:4902:14036":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:6717:3165":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:13322:17206":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"4:4942:9473":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:7114:22387":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:40537:2803":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:47946:9016":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"4:2509:9380":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"4:11944:9450":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:8723:149":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"4:926:9292":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"4:11598:27300":{"crate_id":4,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"16:6696:17025":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:7628:30125":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"4:12509:1871":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"4:6606:197":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:47623:22169":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"4:5479:214":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"17:14917:20724":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:13692:17502":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"5:5304:2749":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:0:524":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"4:8749:9532":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:40555:3530":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:23593:22363":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:14773:20714":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:5151:14062":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:11173:33305":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:12008:17336":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:4947:14041":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:14573:20702":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:12776:17446":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"11:123:3124":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:583:17165":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:553:10073":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"5:4498:30625":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:13871:20181":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:11016:17194":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:6914:17040":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:15160:20740":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:44406:22386":{"crate_id":1,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"6:6564:14810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:15701:21465":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"4:3406:9437":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:12028:17338":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:12122:17311":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:14859:20720":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:2748:16084":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:46752:8979":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:1643:10979":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:12066:17334":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:10115:17169":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:8267:17092":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:16036:21497":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"4:10976:9383":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:44702:3623":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:14405:20692":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"11:2533:32739":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:5113:16717":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:23827:22064":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:23685:22308":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"4:8236:9384":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"17:14832:20718":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:3817:115":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:13290:17204":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:6808:17031":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:13838:20179":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:2860:16089":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:7159:17051":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"4:7410:27306":{"crate_id":4,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:517:10068":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:14796:20715":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:7729:9258":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:40447:226":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"18:608:34010":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:7731:3668":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:16761:21686":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"4:985:3135":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"13:229:32759":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:15973:21490":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:3330:9306":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:13205:17201":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"4:9195:9567":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"4:3678:9389":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"1:34288:2779":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:5810:9563":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"5:3456:9293":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:234:237":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:41566:21887":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:45752:175":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:41667:3642":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:22580:9391":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:11163:17197":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"4:5106:9516":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"11:798:3165":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"4:12485:1204":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"4:4222:9461":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:8320:17094":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:15496:21454":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:45828:25224":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"14:165:15995":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"4:8214:9386":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"14:40:20176":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:1530:10969":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:13145:17460":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:44728:3756":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"5:3800:30583":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:3720:17364":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:12225:17347":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:6419:14799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:6162:2749":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:11050:3730":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:16323:21513":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:15876:21480":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"10:44:15974":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:5603:14111":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:14084:20196":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"4:6316:27324":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:13639:3807":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:3057:271":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"4:12453:26670":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:39082:2792":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"10:36:32727":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"4:2084:209":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:14640:20707":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:6942:17041":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"4:11828:26306":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:6507:14765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:10549:16997":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"4:6495:3188":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:45744:22421":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"17:16132:21499":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"18:680:21718":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:1675:10982":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:2966:16094":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"4:4114:9455":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:23616:3291":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:4881:14034":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:48063:8922":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:44191:168":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:45250:3845":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:13095:17467":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"16:6502:16039":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"12:0:2621":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:7094:9646":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"4:8248:151":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:12077:3753":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:3944:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"16:6625:32949":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:10794:132":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"4:9242:9574":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:7758:3597":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:6844:2827":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:4120:16115":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"9:176:15969":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"4:5878:3188":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:1703:10985":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:6123:17004":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:8028:17080":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:7424:17062":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:13193:17463":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:16798:21689":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"0:29:2384":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"16:6084:17001":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:5282:16748":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:33804:2774":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"14:202:9627":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:7554:17065":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:38972:2790":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:5127:14060":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"4:10487:9569":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"17:14375:20690":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:42855:3159":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"6:4997:14048":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"4:12510:993":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:47091:8947":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:13692:3837":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"11:1900:9304":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"4:11294:30085":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:14243:23297":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"1:12156:3751":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:3085:2887":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:13890:20182":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:1123:30583":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:16218:21507":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:12699:17444":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"4:12513:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"1:31441:2529":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:12787:17411":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:6288:3527":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:13933:20185":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:5579:9622":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:14416:20693":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:6758:14829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:41461:3602":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:43651:3714":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"11:102:32742":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"4:4234:9464":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:45104:3820":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:13169:17495":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"6:479:10064":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:4929:16648":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"0:28:2378":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"1:45138:3536":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"4:7814:26203":{"crate_id":4,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"1:48034:8919":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:1524:3159":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:6064:17000":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:8290:14284":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:8199:15783":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:16632:21676":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"9:236:9548":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:16728:21683":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"6:5196:14065":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:14140:20200":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:10427:22702":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:282:30583":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:4:1288":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"17:15351:21448":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:45281:3847":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:2900:16091":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:6098:17002":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:667:17166":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:1597:10976":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:39027:2791":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:47120:8953":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"4:10419:3197":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:43960:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:44636:3745":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:11401:17230":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"7:0:1947":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:44980:3826":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:6790:32510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:8636:17104":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:5025:14051":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:48191:8930":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:11483:22794":{"crate_id":1,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"4:7964:27308":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:13014:17471":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:14299:20687":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"1:44789:3815":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:4570:22450":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"4:8707:9472":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:47251:22422":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:11617:17198":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:16377:21517":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"4:9364:26674":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:11465:17235":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"1:45113:3829":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"4:11822:9570":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"4:11873:27286":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:3573:152":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"6:7539:15246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:12952:17452":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"4:4172:9458":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:33062:257":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:11566:17248":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:46767:8944":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"4:9491:9394":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"4:3917:9449":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:12135:17341":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:6608:217":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"4:8681:9520":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"4:7826:26285":{"crate_id":4,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"1:5012:2701":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:7714:9288":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:12897:17450":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"4:4781:9515":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"4:10787:9436":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:33030:17105":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"4:964:9296":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:5060:16710":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"18:754:21722":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:6652:14816":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:6188:17008":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"4:9752:150":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:8931:161":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"4:4415:9493":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:16187:21504":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:6449:14802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:6866:17036":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:5562:14107":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:4241:16167":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:12082:17312":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:16362:21516":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:322:33148":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:5230:14069":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:8031:15622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:3024:9391":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:6381:14736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:5520:14103":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:11432:17232":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:14547:20700":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:7789:33215":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:6919:3648":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"4:1086:9301":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:1539:3160":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:3789:2806":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"4:2719:9425":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"14:214:16003":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"4:1648:9306":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:5488:14100":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:6544:14809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"11:2539:23344":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:12798:17447":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:5482:14099":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:538:10071":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"4:9509:9581":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:5742:16997":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:7919:26217":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:1539:10970":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":32}