{"root":"0:0:1937","crate_version":"1.4.0","includes_private":false,"index":{"1:13031:3214":{"id":"1:13031:3214","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4681:3214"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43462:3215","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5615:27100":{"id":"5:5615:27100","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13025:26969"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12934:22183":{"id":"1:12934:22183","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12263:458","self::pattern":"1:12589:3452"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5611:30246":{"id":"5:5611:30246","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:1937":{"id":"0:28:1937","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"0:29:1943":{"id":"0:29:1943","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:0:1937":{"id":"0:0:1937","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:1943","0:31:1944","0:28:1937"],"is_stripped":false}}},"5:5603:30245":{"id":"5:5603:30245","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12969:25819":{"id":"1:12969:25819","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12263:458","str::splitn":"1:12966:25817","self::pattern":"1:12589:3452"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43276:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12610:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13019:29545":{"id":"1:13019:29545","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12550:137","`FromStr`":"1:12549:2960"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41414:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12549:2960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12549:2960","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12937:25823":{"id":"1:12937:25823","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"4:12263:458","self::pattern":"1:12589:3452"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12921:25806":{"id":"1:12921:25806","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:12923:25810","str::split_at_mut":"1:12922:25807"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12932:29529":{"id":"1:12932:29529","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43418:3483","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12972:25821":{"id":"1:12972:25821","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41271:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13024:26968":{"id":"1:13024:26968","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12900:2420":{"id":"1:12900:2420","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12927:22609":{"id":"1:12927:22609","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12263:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43130:3479","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12990:29535":{"id":"1:12990:29535","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12919:29527":{"id":"1:12919:29527","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12269:1657","str::slice_mut_unchecked":"1:12920:29528","crate::ops::Index":"1:38890:2330"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12920:29528":{"id":"1:12920:29528","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12269:1657","crate::ops::IndexMut":"1:3158:2331","str::slice_unchecked":"1:12919:29527"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12924:25811":{"id":"1:12924:25811","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:12923:25810"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41271:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12996:29538":{"id":"1:12996:29538","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13022:26965":{"id":"1:13022:26965","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39244:3184","Self::is_ascii":"1:13021:26964"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41271:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39244:3184","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12960:29530":{"id":"1:12960:29530","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12589:3452","str::split":"1:12951:25812","prim@char":"4:12263:458","`DoubleEndedIterator`":"1:7966:131","str::rsplit_terminator":"1:12963:29531"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43204:3485","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5613:3286":{"id":"5:5613:3286","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5595":{"id":"5:5595","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5596:30243","5:5597:3135","5:5600:30244","5:5603:30245","5:5611:30246","5:5612:30247","5:5613:3286","5:5614:27099","5:5615:27100"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:31:1944":{"id":"0:31:1944","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1943","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13027:26972":{"id":"1:13027:26972","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:970:37093"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12917:23456":{"id":"1:12917:23456","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10681:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10681:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12957:25815":{"id":"1:12957:25815","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12589:3452","`DoubleEndedIterator`":"1:7966:131","prim@char":"4:12263:458","str::split":"1:12951:25812"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43172:3411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12610:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12901:29523":{"id":"1:12901:29523","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12997:29539":{"id":"1:12997:29539","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13004:25825":{"id":"1:13004:25825","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12263:458","self::pattern":"1:12589:3452"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41271:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12994:29537":{"id":"1:12994:29537","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13016:29544":{"id":"1:13016:29544","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12263:458","self::pattern":"1:12589:3452"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12610:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12998:29540":{"id":"1:12998:29540","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12263:458","self::pattern":"1:12589:3452"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12615:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12928:22319":{"id":"1:12928:22319","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43140:3478","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12898":{"id":"1:12898","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12899:963","1:12900:2420","1:12901:29523","1:12902:29524","1:12904:29525","1:12907:26961","1:12908:29526","1:12909:334","1:12910:25787","1:12911:1942","1:12913:23454","1:12915:23455","1:12917:23456","1:12919:29527","1:12920:29528","1:12921:25806","1:12922:25807","1:12923:25810","1:12924:25811","1:12926:23029","1:12927:22609","1:12928:22319","1:12929:22986","1:12930:22996","1:12931:28242","1:12932:29529","1:12933:23031","1:12934:22183","1:12937:25823","1:12940:25824","1:12943:2461","1:12947:2419","1:12951:25812","1:12954:22980","1:12957:25815","1:12960:29530","1:12963:29531","1:12966:25817","1:12969:25819","1:12972:25821","1:12975:25822","1:12978:2139","1:12981:29532","1:12984:29533","1:12987:29534","1:12990:29535","1:12992:29536","1:12994:29537","1:12996:29538","1:12997:29539","1:12998:29540","1:13001:29541","1:13004:25825","1:13007:25826","1:13010:29542","1:13013:29543","1:13016:29544","1:13019:29545","1:13021:26964","1:13022:26965","1:13023:26967","1:13024:26968","1:13025:26969","1:13026:26971","1:13027:26972","1:13028:26973","1:13029:29546","1:13031:3214","1:13032:29547"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12909:334":{"id":"1:12909:334","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12910:25787","`u8`":"4:12280:1784"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5614:27099":{"id":"5:5614:27099","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13024:26968"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12922:25807":{"id":"1:12922:25807","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12921:25806","str::split_at_mut_checked":"1:12924:25811"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5596:30243":{"id":"5:5596:30243","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:2238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:294:2238","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12943:2461":{"id":"1:12943:2461","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41273:191","prim@char":"4:12263:458","self::pattern":"1:12589:3452"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41271:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12987:29534":{"id":"1:12987:29534","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12589:3452","`DoubleEndedIterator`":"1:7966:131","prim@char":"4:12263:458","str::match_indices":"1:12984:29533"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43322:3489","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12610:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13010:29542":{"id":"1:13010:29542","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12263:458","self::pattern":"1:12589:3452"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12610:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13032:29547":{"id":"1:13032:29547","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4678:29547"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43471:3236","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12981:29532":{"id":"1:12981:29532","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12589:3452","`DoubleEndedIterator`":"1:7966:131","prim@char":"4:12263:458","str::matches":"1:12978:2139"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43376:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12610:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12907:26961":{"id":"1:12907:26961","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12137:3472"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12947:2419":{"id":"1:12947:2419","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41273:191","prim@char":"4:12263:458","self::pattern":"1:12589:3452"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41271:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12610:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12899:963":{"id":"1:12899:963","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12263:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12992:29536":{"id":"1:12992:29536","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12930:22996":{"id":"1:12930:22996","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12929:22986"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43437:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12966:25817":{"id":"1:12966:25817","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12263:458","self::pattern":"1:12589:3452","str::rsplitn":"1:12969:25819"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43258:3409","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13007:25826":{"id":"1:13007:25826","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12263:458","self::pattern":"1:12589:3452"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41271:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12610:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12929:22986":{"id":"1:12929:22986","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12930:22996"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43428:3482","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13028:26973":{"id":"1:13028:26973","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:970:37093"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12910:25787":{"id":"1:12910:25787","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12280:1784"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13013:29543":{"id":"1:13013:29543","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12263:458","self::pattern":"1:12589:3452"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12911:1942":{"id":"1:12911:1942","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41273:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41271:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10681:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10681:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12931:28242":{"id":"1:12931:28242","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43408:3481","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12940:25824":{"id":"1:12940:25824","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12263:458","self::pattern":"1:12589:3452"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12610:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12978:2139":{"id":"1:12978:2139","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12589:3452","`DoubleEndedIterator`":"1:7966:131","prim@char":"4:12263:458","str::rmatches":"1:12981:29532"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43358:3486","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12904:29525":{"id":"1:12904:29525","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12902:29524"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12913:23454":{"id":"1:12913:23454","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41273:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41271:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10681:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10681:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13001:29541":{"id":"1:13001:29541","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12263:458","self::pattern":"1:12589:3452"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5600:30244":{"id":"5:5600:30244","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5612:30247":{"id":"5:5612:30247","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:294:2238","`String`":"5:7608:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:2238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12984:29533":{"id":"1:12984:29533","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12589:3452","`DoubleEndedIterator`":"1:7966:131","prim@char":"4:12263:458","str::rmatch_indices":"1:12987:29534"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43304:3488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12926:23029":{"id":"1:12926:23029","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12263:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43124:3480","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13021:26964":{"id":"1:13021:26964","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13026:26971":{"id":"1:13026:26971","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:970:37093"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13023:26967":{"id":"1:13023:26967","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12923:25810":{"id":"1:12923:25810","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:12924:25811"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41271:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12933:23031":{"id":"1:12933:23031","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43446:3490","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12902:29524":{"id":"1:12902:29524","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13029:29546":{"id":"1:13029:29546","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4680:29546"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43453:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12915:23455":{"id":"1:12915:23455","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10681:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10681:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12908:29526":{"id":"1:12908:29526","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13025:26969":{"id":"1:13025:26969","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12951:25812":{"id":"1:12951:25812","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12589:3452","`DoubleEndedIterator`":"1:7966:131","prim@char":"4:12263:458","str::split_whitespace":"1:12929:22986","str::rsplit":"1:12957:25815"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43154:3407","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5597:3135":{"id":"5:5597:3135","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12963:29531":{"id":"1:12963:29531","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12589:3452","str::split":"1:12951:25812","prim@char":"4:12263:458","str::split_terminator":"1:12960:29530"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43222:3484","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12610:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12975:25822":{"id":"1:12975:25822","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41271:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12610:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12954:22980":{"id":"1:12954:22980","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12263:458","self::pattern":"1:12589:3452"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12405:3420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12595:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"4:9367:162":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"17:11419:16848":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:3871:8953":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:491:9720":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:43570:3507":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:7461:14896":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:11051:16898":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:8306:13938":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:2440:135":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"6:8351:15474":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:6738:14481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"6:6447:14456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:5244:13722":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:22050:8729":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:4120:22129":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"4:9097:2834":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:13308:19808":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:13173:17133":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"4:10393:115":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:43898:3459":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:46281:8584":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:40076:3319":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:5031:13703":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"4:9230:27869":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:7602:14905":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"18:643:33420":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:45236:8613":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:7429:10742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:7456:2424":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"4:4615:9156":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"4:3368:9091":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"14:31:15650":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:3028:30668":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:13473:19819":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:12076:16989":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:15222:21098":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:15206:21096":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:578:9731":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:4932:13691":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4864:13683":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:10155:16650":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:7397:32242":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"18:706:3469":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:35611:2321":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:9938:16835":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:517:9722":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:4308:2834":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:9683:22469":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:42495:3390":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:4885:13686":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:2708:15743":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:14325:20347":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:7537:14900":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:40499:3287":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"4:9403:9236":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:7448:2424":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:5061:3207":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:11102:16882":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:12887:16857":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:6494:16689":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:38810:2341":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:721:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"9:178:15624":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"4:2427:9030":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"4:12274:730":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"1:4386:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"4:867:8951":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:38961:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:2203:16917":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:6079:16671":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:21247:21487":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:4771:16371":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:150:15702":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:8253:13930":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:14475:20357":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:12043:16992":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:10068:16816":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:41337:2835":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:41856:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:1929:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:39885:3271":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:21352:8596":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:13832:20316":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:11115:16881":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:6519:14460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"4:8813:9207":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:45201:8659":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:4802:16379":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:45297:8680":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:5107:16454":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:4959:13694":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:41093:21719":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"4:1596:8965":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:45492:8681":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:13899:20320":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:13922:20321":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:12808:16813":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:44178:3558":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"16:7727:16735":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:12604:3469":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:15582:21125":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:8226:16754":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:42000:3369":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"13:109:32189":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"11:2542:23260":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"12:0:2167":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"4:4593:9155":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:523:9723":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:13855:20318":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:14079:20332":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"11:2231:15635":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"4:2983:2860":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"4:3018:138":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:40095:3321":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"4:7984:8935":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:3032:30828":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:15521:21123":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:3014:15755":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"4:11469:28491":{"crate_id":4,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"1:7703:2245":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"4:12262:1137":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"1:45792:8621":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:726:2963":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:43428:3482":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:40518:3291":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"11:2569:8947":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:40484:2080":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:6714:14478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"16:4856:16387":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:3810:15778":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:6407:9239":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:4928:22747":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"4:12261:405":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"16:7549:16724":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"4:7931:8915":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"17:15023:21084":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"4:8473:3407":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"17:12824:16854":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:3473:16996":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:6153:3207":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"4:903:8953":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"9:392:15520":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:43084:2896":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:10284:16840":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:5385:16650":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:42335:3379":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"16:7355:16717":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:0:543":{"crate_id":1,"path":["core"],"kind":"module"},"4:1063:8962":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:8093:16746":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"4:8262:28487":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"4:1939:9017":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"1:4514:2256":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:1593:10627":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"4:2660:9083":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"4:11526:29088":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:7251:2432":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:39963:3302":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:45069:8605":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:5598:13762":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:32843:2311":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:6746:14482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"8:0:2163":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:43358:3486":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:43676:3511":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:6614:23052":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:14968:21080":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:41345:2424":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"6:473:9717":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"11:811:8953":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"4:11156:3525":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:11405:16918":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:12993:16861":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:39875:3270":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:15799:21141":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:2572:15737":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"4:11174:9054":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"4:8142:140":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"17:15400:21114":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:1607:8967":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"4:9385:9054":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"4:10846:9043":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:1098:16885":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:3778:15769":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:41396:2403":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:6821:14488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:2297:3154":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"6:8247:13929":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:8155:16749":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"11:2369:15643":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:14503:20359":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"4:6185:29095":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:14284:20344":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:8118:16747":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"18:96:21329":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:4924:13690":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:10710:16847":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:12353:17078":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:11269:16908":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:14912:21078":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"4:11124:9220":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"4:6585:2287":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"4:4847:9132":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:12530:17092":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:16032:19805":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:4986:17102":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"5:5445:9276":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:5536:13756":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:5624:13764":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"4:4031:9113":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:6160:15696":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:7545:9022":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"4:5542:9215":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"5:1426:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:6543:16692":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"4:8588:9179":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:4837:13682":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:11547:16970":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:8393:3297":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:4922:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:43601:3509":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"4:12263:458":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"1:42272:21879":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:33389:2317":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:7144:16715":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:9781:16831":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:11242:16906":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:2838:15749":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:16093:21304":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"1:42243:3168":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:15616:21128":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:2234:16942":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:38890:2330":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"16:2592:15738":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:7514:8948":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:41049:3335":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:5020:13702":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:2748:15745":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:11066:3412":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:45054:8640":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"11:832:8954":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:38921:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:43304:3488":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:14298:20345":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:7467:14897":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:10018:16809":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"4:9178:9233":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:15151:21091":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:40493:3285":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:43738:3514":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:5995:16667":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:22505:21956":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"11:2554:32140":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:14147:20336":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"18:651:33420":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"4:2033:197":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:6263:32645":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:15390:21113":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"4:2453:9040":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:41414:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:7966:131":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:8288:13935":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:465:9716":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:38894:2332":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:42233:21808":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:3251:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:46322:8587":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:14599:20365":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:1828:8953":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"4:12283:1778":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"16:7052:16713":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:5146:13713":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:5266:13725":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:5122:13711":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:10954:16868":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:4108:22130":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:3669:15761":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:13064:16814":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"4:9633:9046":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"16:2374:15728":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"4:10859:27800":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:39845:3272":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"11:1107:2818":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:9501:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:41011:171":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:5842:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:43172:3411":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"4:5193:28474":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:8075:179":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:6768:14485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:43534:3505":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"18:726:21349":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"11:883:8960":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:6900:14516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:37652:2325":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:21261:21491":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:11915:17033":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:41251:3340":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"9:238:9202":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:6588:16695":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:7420:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:25465:266":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:10185:16807":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:33562:2318":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:6586:30885":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:5742:16655":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"4:1578:2424":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:3208:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:45763:8615":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:5320:13732":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"4:8158:129":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:45268:8625":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:39992:3313":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:2394:15729":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:22141:8731":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:7497:16720":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"4:9052:199":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:5910:3303":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:11063:16892":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:2876:2262":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:2956:2327":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"4:4332:9151":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:4641:16310":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:22100:23749":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:14545:20362":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:6664:14472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"4:6819:233":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:43074:3415":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:261:32441":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"4:11709:9108":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:21735:8602":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:14529:20361":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:5445:13746":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:15078:16887":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"4:9251:28509":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:11583:16943":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:4876:13685":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"4:4252:9147":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:2379:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:39021:2333":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"4:11031:29103":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:11367:16888":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"11:328:32120":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:14311:20346":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:14177:20337":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"4:11770:9109":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:1724:30885":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"4:2443:9035":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:43029:3300":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:545:9726":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:13455:19818":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:11293:16909":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:10828:33361":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:6433:16684":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:45282:8674":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:46224:8683":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:6353:16679":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:23065:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:44167:3560":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:33216:2316":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:7741:16736":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:44063:150":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"17:11647:16974":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:11702:16976":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:6634:16698":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"4:8786:9205":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"6:5546:13757":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"4:8103:9045":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"14:160:15650":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:5449:9277":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:5912:2840":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:42963:3403":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:7928:166":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"4:9113:2424":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:22433:23045":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"18:698:21348":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:16121:21306":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"4:9199:2285":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:7100:30925":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:39684:21954":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:3329:147":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:5307:16631":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:4830:16384":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"4:10251:2872":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:14587:20364":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:6606:16696":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:5407:1205":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"5:5401:30885":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"4:6621:2295":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"4:645:8932":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:4273:2267":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:5347:16648":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:10317:16841":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:42014:3372":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:31751:3193":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"4:3577:3248":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"17:14372:20350":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"15:394:15686":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"16:6385:16680":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:13814:20315":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"9:502:15522":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:5677:13771":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:14994:21070":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:12175:17061":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:13497:19821":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:15249:21099":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:13089:17130":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"4:356:8924":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"18:735:21342":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:13187:19802":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:2508:15734":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"4:5526:9214":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"17:15376:21111":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:43113:3476":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:10905:16851":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:22418:21955":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"4:3415:9079":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:13412:19815":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:5336:13734":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"6:5200:13717":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:11788:17028":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:12137:3472":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"4:9327:187":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:42954:3404":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:13325:19809":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:13797:20314":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:4966:3275":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"11:1603:15642":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:22483:22159":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:6388:9238":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:5212:13718":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:7575:14903":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"4:8660:9201":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"17:13785:17035":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:41895:2281":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:11256:16907":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"5:4422:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:5250:13723":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"4:12275:881":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"1:2961:2328":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"4:928:8958":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:7446:14894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:9858:16832":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:7558:22157":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:45553:21883":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:13594:19828":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"4:9332:2286":{"crate_id":4,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"4:8460:3324":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"1:22556:21919":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:42511:3389":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:4800:13679":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:14402:20352":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:14246:20341":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:14876:21077":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"4:11491:28093":{"crate_id":4,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"1:10681:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:5802:16659":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:46050:8650":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:2883:246":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"17:4821:17096":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:22102:3153":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"4:3244:29308":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"4:3520:9048":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"4:9359:2293":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"5:1534:8954":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:46296:8585":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:32609:2309":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:15058:21069":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:39932:3301":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"4:6594:2081":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"1:7887:3299":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:43779:3471":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:8282:13934":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:40284:3326":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:11510:16915":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"4:11378:9024":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"5:3806:2839":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:3241:29307":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:5102:13709":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"11:2352:8962":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:22200:8723":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:2281:649":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:39857:3257":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"11:856:2810":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"4:12267:333":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"17:12388:17070":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:11214:16879":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:13774:17034":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:32423:2306":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"16:6456:16686":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"11:396:2808":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:7516:14899":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:1580:10625":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:570:9730":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"4:10125:22143":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:22:791":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"4:6309:27933":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:4718:16364":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:5344:13735":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:40526:3293":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:5075:16445":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:2764:3189":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"6:1496:10616":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:40470:23060":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:11443:16924":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:5769:16657":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:14414:20353":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"4:4728:9117":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:8216:16753":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:4913:16398":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:10170:16651":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:3126:142":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:13015:16818":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"11:2562:32136":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:39830:22157":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:1854:21823":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:12851:16855":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"4:10817:9178":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"4:8467:3478":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"1:10032:3369":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:41065:3336":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:42007:3371":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"4:10951:27866":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:13375:19812":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:2477:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:43878:3461":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:6788:31963":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:4390:2246":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"4:0:1649":{"crate_id":4,"path":["std"],"kind":"module"},"1:22614:2977":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"4:11440:9023":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"18:613:33425":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:43437:3491":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:15748:21137":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:730:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"4:10232:8999":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:37597:2324":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:6427:16683":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"5:5708:9304":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:4909:13688":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:2640:257":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"4:9258:27924":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"4:8540:9153":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:39722:3245":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:12863:16856":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:14051:20330":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:43748:3515":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:14868:21076":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:15:2140":{"crate_id":1,"path":["core","write"],"kind":"macro"},"17:13485:19820":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:6813:16703":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"4:8272:9086":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:6629:14468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:5329:13733":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:46345:8588":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"4:12273:714":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"1:43124:3480":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:7891:3298":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:0:968":{"crate_id":6,"path":["libc"],"kind":"module"},"6:6609:14466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:7378:8972":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:5225:13720":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"4:11137:9221":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:12300:17077":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:11189:16884":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"18:491:33418":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:3842:15787":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:1671:10633":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"4:8533:3338":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"4:5557:115":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"17:10915:32922":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:13946:20322":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:4870:13684":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:4468:16275":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:7573:9020":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:5211:2280":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:45186:8653":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:31761:2233":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:2628:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"6:5472:13749":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:45084:8641":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:4316:2077":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"16:8175:16750":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:43453:3237":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:12671:17125":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:12494:17049":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:5174:9139":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:42503:23036":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:15720:21135":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"4:9163:9230":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:44070:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"4:6102:220":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:5037:16430":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"4:5740:220":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:15301:21104":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"11:123:2799":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:31726:24148":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"4:11686:2876":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:8431:22468":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:7769:16738":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:31688:3183":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"6:5423:13744":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"4:12049:27470":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:4570:2259":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:9999:144":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"6:6650:14470":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:6670:14473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"4:8559:9106":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"4:7936:8917":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"1:43100:3477":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:2382:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"5:4073:2840":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:14986:21082":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:924:8970":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:11764:16981":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:39244:3184":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:4891:13518":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:1663:10632":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:7656:16732":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"4:6261:2897":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:4787:13678":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:497:9721":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:15138:21090":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:7306:9769":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:8301:16756":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:2175:16957":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:6409:14452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:14788:21073":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:15102:21087":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"4:8108:9046":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"6:4992:13699":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"4:7913:8926":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:12030:16994":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"9:357:15535":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:12900:16858":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:6763:14484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:3119:2235":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:42972:2892":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:6657:14471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:8300:13937":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:10241:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"6:4979:13697":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:43258:3409":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"4:1887:2859":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"16:7428:16718":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"4:4089:9116":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:11026:16872":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"5:6749:30885":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"4:12281:1766":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"1:1734:648":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"17:11715:16977":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"16:4062:15938":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:5400:16651":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:14449:20355":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:45378:8660":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:437:15699":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:21203:21494":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:15992:21301":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:5863:16663":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"11:1903:8964":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:30251:21804":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:41329:2834":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:46005:8616":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:5817:16660":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:45851:8610":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:6811:14487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:15383:21112":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:15324:21106":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"11:700:2424":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:5046:13705":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:7528:16722":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"4:4143:9120":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:860:32644":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:15646:21131":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:15368:21110":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:6758:15669":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:39775:3240":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"5:3244:8965":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:15116:21088":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:6466:16687":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:45148:8642":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:12371:16859":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:40001:3314":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:10439:16843":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"4:8430:9050":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:41211:3338":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"11:2383:2834":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"5:6540:2840":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:12707:16852":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:1490:10615":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"11:2403:2835":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:43944:3526":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:3369:2263":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:12549:2960":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:12543:17091":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"4:8731:9203":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"4:11576:27712":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:6379:14387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:6665:16700":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:14066:20331":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"18:80:21328":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"4:2271:9026":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"4:10841:28111":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:2438:15731":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:3925:15824":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"4:1040:8961":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:13116:17131":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:1503:10617":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"4:6750:2296":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"17:11661:16945":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:5831:16661":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:4952:13693":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:15957:21300":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"16:6749:16701":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:6441:14455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"4:8194:2836":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:7570:16726":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:32961:2313":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:2287:30698":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:10759:16848":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:13738:20312":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:16138:21307":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:16235:21315":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"6:5382:13740":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"4:1826:8989":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"1:40054:3318":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:11674:16975":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:11354:16920":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:9984:16836":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:9688:23126":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:6026:16668":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:3335:2336":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:5219:13719":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"11:2326:2816":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"6:6524:14461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:6927:16707":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:1565:10624":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:11667:3419":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:15039:21085":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:13509:19822":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:41233:3339":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:39656:3215":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:39814:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"4:945:8959":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"11:1087:32132":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"4:3831:9108":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:12823:121":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:0:2170":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:7421:22421":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"4:9638:2871":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:10042:3373":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:13252:19805":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:43418:3483":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:41271:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"16:7686:16733":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:12485:17085":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:9496:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:4437:30910":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:12443:17072":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:45606:8643":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:40270:3325":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:39768:3239":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"4:5018:9175":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"4:7849:29106":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:46182:8628":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:1207:16893":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:15678:21133":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"4:5419:130":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"15:306:15675":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:22583:23034":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:15092:21086":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:13474:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:42260:21720":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"4:5351:203":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"6:8294:13936":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:7014:16712":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:43064:2895":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:11773:17027":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:2808:15748":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:12584:16849":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:13581:19827":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:8271:13933":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"9:447:15519":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:2878:119":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"4:12286:1844":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"16:2936:15753":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:21968:8727":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:6619:22686":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"11:875:8959":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:7356:3308":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"4:10319:9224":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"17:15655:21132":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:2660:15741":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:2644:256":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"16:4940:16402":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:12127:16997":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"11:1896:8953":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"4:7225:29109":{"crate_id":4,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"4:8267:27950":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"4:1574:2834":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"4:6086:2863":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:41395:2404":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"4:1968:9018":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"17:14575:16818":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:8259:13931":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:14356:20349":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:9737:16803":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"1:4907:423":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"16:2458:15732":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:6505:14416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:43866:3457":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"17:11089:16883":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:7559:16725":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"4:8708:9202":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"17:15426:21117":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:12792:16812":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:5134:13712":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"4:8397:3282":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"16:872:32441":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"16:4587:16302":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:2684:15742":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"4:2696:9075":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:7379:32297":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:41462:2835":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"6:1621:10628":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:41320:174":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"17:14489:20358":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"4:4067:9114":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"4:9217:117":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"4:1072:8963":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:31762:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:39749:3237":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:14516:20360":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"3:0:2161":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"5:6667:2424":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:6478:14459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:12225:17048":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"4:12279:856":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"1:38981:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:12405:3420":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"15:327:15679":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:11537:16936":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:21249:21496":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"4:3595:9049":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"18:718:21341":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"11:2140:2816":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:3123:141":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:22541:21729":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:5636:13766":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"18:581:3178":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:6915:14517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:2918:3196":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"5:6940:9306":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"5:824:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"11:2548:32130":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"4:6475:186":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"4:8406:9097":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"1:6608:3305":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"4:3325:9095":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:22186:9051":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:2049:2888":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:6706:14477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"4:11025:29091":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"11:1051:8962":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:7031:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:11688:16941":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:9755:16801":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:3603:2840":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"4:12284:1760":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"1:39673:3243":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:559:9728":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:3018:2319":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:10671:9051":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"7:31:15490":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"4:2591:9082":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:6231:16674":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"4:621:8928":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"4:4803:9176":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:6872:16705":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:6636:14469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:12089:16990":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:7608:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"4:8164:8950":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"16:6948:16708":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"4:9223:8911":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:7473:16719":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:10661:16846":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:10478:22716":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:6907:9304":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:14038:20329":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:43204:3485":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"4:7956:2874":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"17:15281:21102":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"4:9284:27883":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:21459:8596":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"4:8610:9130":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:45443:8620":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:42542:22684":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:4148:2835":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:3769:9104":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:13437:19817":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:7357:3309":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:15418:21116":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"4:11209:162":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:42982:3413":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"4:4268:9149":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:4743:16366":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"4:9089:9222":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"17:15931:19802":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"16:4560:16298":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:45133:8612":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"0:29:1943":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"1:3406:2265":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:14131:20335":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:43649:3510":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:1653:10631":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:256:32389":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:43890:3464":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:41406:3344":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:41033:3334":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:6597:14465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:2478:15733":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:46375:8590":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:14560:20363":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:5112:13710":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"11:687:2835":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:13419:2897":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:22088:8730":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"16:3899:15821":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"4:9263:27930":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:39001:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:11135:3410":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:10916:3420":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:10534:33359":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"4:10502:9219":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"4:5506:9213":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"5:669:30813":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"4:4742:27797":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"4:4845:9131":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:45460:8626":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:39071:3210":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:22603:2962":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:6756:14483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"4:4095:9117":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"4:533:2854":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"4:5492:9212":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"17:12557:16888":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:12464:17083":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:6775:14486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"16:3029:15756":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"4:7047:9237":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:5960:16666":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:11493:16929":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:8313:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:7085:32649":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"4:914:8955":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:30225:3106":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:41354:2400":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"4:893:2840":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:6621:14467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:2788:15747":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:1478:2835":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"4:939:2810":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:21215:21494":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"4:4738:27793":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"18:563:21357":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:40:8984":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"4:1975:759":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"13:0:2162":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:11142:16848":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:41177:22146":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:2902:15752":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:4268:3207":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:13753:20313":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:7618:16730":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:10289:3388":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:30240:3168":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:2101:2839":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:11605:16968":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"4:5754:9226":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:39712:3244":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"5:7398:30693":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"11:2423:2424":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:8341:15473":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:1692:9140":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:7546:14901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"11:1883:2834":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:11877:16988":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:16069:21302":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:5796:3315":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:11634:16944":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"4:849:2835":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"4:8643:9187":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:725:9051":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:41817:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:12695:17093":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"6:5489:13752":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:32237:2307":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"4:12230:27941":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:7306:32308":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:6620:16697":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:43376:3487":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"4:3538:2861":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:39756:3238":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"11:837:8957":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"4:4139:9119":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"5:1494:2424":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"4:8480:3481":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"14:0:2168":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"11:1887:2424":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"18:689:21347":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:29789:2921":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"4:588:8927":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"4:10836:27780":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:3354:21699":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:31817:2234":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"5:7388:8977":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:1771:1298":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"17:11574:15635":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:8188:16751":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:45361:8654":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:10092:16838":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:7584:14904":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:13553:19825":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:5006:16422":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:11557:16971":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:41397:2497":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:12107:16848":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:12399:17080":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:8202:16752":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:40010:22990":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:11595:16973":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:10030:130":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"17:15410:21115":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:3597:17014":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:1648:3207":{"crate_id":1,"path":["core","mem","maybe_uninit","clone_from_slice","Guard"],"kind":"struct"},"4:8584:9177":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:46307:8586":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:22521:21735":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:14260:20342":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:7098:32247":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:43874:3462":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:2418:15730":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"14:7:15650":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:46250:8581":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:6412:16682":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"6:5390:13741":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:5927:16665":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"4:8178:28523":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"4:5682:9218":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"1:2637:145":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"5:7706:9301":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:21334:8595":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:10044:16837":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:7389:10759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:1516:8951":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:6562:14464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:33079:2314":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:12362:17079":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:2401:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"6:8006:15274":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:3025:2488":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:43955:3527":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"4:10607:9094":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:1840:3171":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:7888:16743":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:11853:17031":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:42750:22178":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:5283:13727":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:13538:19824":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:15569:21124":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:6802:15668":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:10137:16802":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:11016:16871":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:40508:3289":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:6560:16693":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"4:5009:9174":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"14:202:9282":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:1189:30782":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:46153:8677":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:1628:10629":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"11:1676:32134":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"11:430:32131":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:10936:9216":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"17:11799:17029":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:41620:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:1485:10614":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:4031:3207":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:33020:2312":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:13999:20326":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"4:7404:28227":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"4:3281:9092":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:14855:21075":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:5588:13761":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:1741:3115":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:12595:3466":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"18:573:33420":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:5260:13724":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"9:424:15521":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"4:9063:9220":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"1:21332:9051":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"18:538:21356":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:45718:8609":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:10573:33211":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:45215:8607":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"11:1142:15640":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"4:12276:863":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"6:1535:10621":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:31730:16755":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:22497:21926":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"4:1054:2816":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:10025:121":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:13225:21560":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:4:1218":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"4:6764:2297":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:7356:8971":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:2303:15697":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:43003:3417":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:39733:3236":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:12659:17089":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"6:5466:13748":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:41542:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"11:2151:8962":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:44080:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:10399:3478":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:14111:20334":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:10818:16849":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:5722:16654":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:7910:16744":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"4:8486:9106":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:15814:21142":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"4:10880:140":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:43870:3460":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:7539:16723":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"4:2274:3159":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"4:10545:29101":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"4:836:2834":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:2934:2310":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:40260:3324":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:30219:3140":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:31744:2255":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"6:5436:13745":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:14723:21071":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:0:2171":{"crate_id":17,"path":["object"],"kind":"module"},"6:5083:13708":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:3278:8964":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:41454:2834":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"16:4502:16286":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"4:6696:2290":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"5:1340:2816":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"4:7809:28488":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:39941:3310":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:728:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:12121:3400":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:2929:2305":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"4:1581:2840":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"4:414:185":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"4:5611:9216":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"1:41503:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:5781:16658":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:5502:13753":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:44121:3553":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"15:0:2169":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:2944:2308":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:479:9718":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:1547:10622":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:13972:20324":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:11711:3169":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"5:7621:9283":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"5:1062:30885":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"4:6364:2863":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:5160:13714":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:4523:2257":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"4:5239:204":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"1:4747:3229":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:1325:8962":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:13529:3557":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"17:12597:17097":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"5:6049:2847":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:46241:8580":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:10720:32681":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:41659:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:9671:16805":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:11634:3418":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:13401:117":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"16:867:32389":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"1:4395:2247":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:11898:17008":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:10038:3372":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:2712:126":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:42314:138":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"5:294:2238":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"4:11014:29097":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"4:5679:9217":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"1:2888:2261":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"6:4916:13689":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:5002:13700":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:6460:14457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:43140:3478":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:5747:2863":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:12422:17081":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:43584:3508":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:553:9727":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"5:2525:2827":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"4:11615:28107":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:2548:15736":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"10:0:2165":{"crate_id":10,"path":["adler"],"kind":"module"},"1:12663:3499":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:2323:15725":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:30600:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:31847:3084":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"6:485:9719":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:46437:8592":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:3475:15759":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:12351:3494":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"19:0:1235":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:45116:8606":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"9:482:15518":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:13606:19829":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:4132:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"11:774:8951":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:7857:16742":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"4:10899:2862":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:10036:3371":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:4352:16205":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"7:78:15497":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:45311:8594":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:4155:3218":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:15342:21108":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:13766:17036":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:4965:13695":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:4897:13687":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:16105:21305":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:3314:2334":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:15463:21121":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:10034:3370":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"6:5528:13755":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:43920:132":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"5:2307:30625":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"11:800:2840":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:868:8969":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:11324:16935":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:3095:127":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:13526:19823":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"7:0:1834":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:22074:9051":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"5:941:2834":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:6419:3328":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"18:589:23043":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"18:623:33445":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:22590:2976":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:6504:16690":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:8387:3296":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:15836:21144":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:43761:3470":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:38906:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:38231:2326":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"4:12288:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"6:7330:9598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:7111:32648":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:7799:16739":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:2634:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"6:1526:10620":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"11:2469:8953":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"16:5686:16652":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:9981:3248":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"17:15769:21139":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:16187:21311":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:14752:21072":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:41470:2424":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:39912:3300":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:15701:21134":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"10:36:32118":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"11:1582:2822":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:10769:32819":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:6335:16678":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"0:28:1937":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"1:2471:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"4:10604:9092":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"4:6277:29094":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"4:6581:2080":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"4:10928:9007":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:8019:2236":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:5361:13737":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:5296:13729":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"4:2030:198":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:12929:16859":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"14:40:19804":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:3270:8966":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:532:9724":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"4:12268:1623":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"5:828:8968":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"4:4412:9152":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"4:11590:27474":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"4:557:2857":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:7823:16741":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:22365:22166":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:12150:16995":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:6940:32641":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:3304:8967":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"4:859:2424":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:5400:13742":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:6782:16702":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"11:710:8955":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:14189:20338":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:1309:8961":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"4:11148:27851":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"15:288:15674":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:3647:2834":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:46398:8591":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:6317:16677":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:2756:30669":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:538:9725":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:5996:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"11:787:8952":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:10218:16808":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:2998:15754":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:3158:2331":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:7585:9021":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:11567:16972":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:10955:3408":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:7168:16716":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:11128:16880":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"4:8565:9146":{"crate_id":4,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:513:16829":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:31849:116":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:14271:20343":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:3026:30831":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:7359:14893":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:1354:8963":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:43042:3416":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:41199:3337":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:22228:8724":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:40033:3317":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"4:10889:129":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:14012:20327":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"18:754:21350":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:2355:15727":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"4:1824:8988":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"16:7590:16728":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:12610:3468":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:3196:15757":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:16259:19813":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:45422:8614":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:16165:21309":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:22449:21945":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:12251:17046":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:41737:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:13344:19810":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"4:11621:28115":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"11:1566:15641":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:11042:16873":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:5052:13706":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:7561:14902":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:6491:14415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:6698:14476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:6689:14475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"6:5236:13721":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:0:485":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"4:880:8952":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"4:4843:9128":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:4467:3207":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:12969:16806":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"4:1809:672":{"crate_id":4,"path":["std","env"],"kind":"module"},"11:0:2166":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:39982:3312":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:9886:16833":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"4:4924:9127":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"4:3016:226":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"1:4543:2258":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"4:3323:9094":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"4:5895:2284":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:31818:3198":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:7412:10744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:12724:16853":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:12278:17076":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:14341:20348":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:1153:30781":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:11845:15683":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:44151:181":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"4:8746:9204":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"4:3834:9107":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:39905:3276":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"4:7798:16830":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:4531:16292":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"4:3936:9109":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:15010:21083":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:5352:13736":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:13363:19811":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"10:44:15629":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"5:217:2824":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:7006:16711":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:45651:8649":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:22312:22137":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:45475:8675":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:21340:8599":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:15176:21093":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"4:7297:27477":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"11:351:32128":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:21279:9051":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:43882:3465":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:2728:15744":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:14436:20354":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:42754:3425":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:5630:13765":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:16079:21303":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:13723:20311":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:5914:32270":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"0:31:1944":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"1:12328:3497":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"4:4901:9133":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:7428:30534":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"11:299:2802":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"4:922:8957":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:6066:16670":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:11730:16978":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:12328:17042":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"5:1169:2826":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"4:9105:9234":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:15445:21119":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:12454:17082":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:15734:21136":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"18:481:21352":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"14:187:15658":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:43902:3525":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:14025:20328":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"18:521:21351":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"4:2499:2101":{"crate_id":4,"path":["std","io"],"kind":"module"},"17:10887:33360":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:40135:3307":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:279:30885":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"11:1066:15639":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:11467:16922":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"9:53:15538":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:13277:3550":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:41993:3370":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:12615:3467":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:41581:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:597:16830":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:10044:3374":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:11121:3405":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:40024:3316":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:12647:17090":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:30187:3139":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:11149:3406":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:7924:146":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:12572:16848":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:9828:3385":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:2606:9051":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:15434:21118":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:6895:16706":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:3264:16991":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:31760:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"17:15760:21138":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"4:12280:1784":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"4:2188:130":{"crate_id":4,"path":["std","ffi","os_str","Display"],"kind":"struct"},"11:742:8956":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"4:3586:28088":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:21883:8598":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:5515:13754":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:22233:8722":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"18:765:21343":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:13986:20325":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:918:8956":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:14386:20351":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:1559:10623":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:44088:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:11107:3409":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"4:1585:8953":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"4:11604:27713":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:13844:20317":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:1463:2834":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"4:3283:9093":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:2854:15750":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"4:8004:9006":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"6:1510:10618":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"4:7868:29099":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:9179:3466":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:12408:17071":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:37542:2323":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"4:951:8960":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"11:2443:2840":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"4:12278:875":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"17:14933:21079":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:45507:8682":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:12056:16993":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"4:9046:9219":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"16:7633:32387":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:5415:13743":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:8259:16755":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"18:608:33438":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"4:10652:2874":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"5:3396:8953":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:5565:13759":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:5290:13728":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:8136:16748":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"4:9136:9229":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"4:10968:9222":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"5:6930:9305":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:7314:10573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:41776:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:3660:2835":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"4:8186:9084":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:16269:19815":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"4:909:8954":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:14212:20339":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:4424:16254":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:5370:13738":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"4:12285:937":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:5719:3207":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"5:7348:2424":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:3737:2424":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:3129:143":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:3077:2339":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:12201:17074":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"4:9212:27921":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:15456:21120":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"0:0:1937":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"16:2878:15751":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:5014:13701":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:2037:16923":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:7321:2400":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:44142:3552":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"6:8265:13932":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"4:4281:9150":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"4:12214:27884":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"4:11549:9225":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:10997:16870":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"4:9271:16716":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:11166:16886":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"4:1862:8999":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"6:5671:13770":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:7631:9284":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"4:2269:139":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"17:15197:21095":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:10395:3433":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"5:3791:2836":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:21457:8597":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:11743:16979":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:6962:16709":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:2195:8907":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:21448:9051":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:7132:32643":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:5897:16664":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:43471:3236":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:5314:13731":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"4:10410:2873":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:39819:3273":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:39051:2335":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:7648:16731":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"11:364:2806":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"4:10253:28518":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:45830:8676":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:4976:16415":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:11227:16878":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:1723:10638":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:2112:8976":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:3324:253":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:10040:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"17:15333:21107":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:403:16828":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:39801:3235":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:22155:3153":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"1:43222:3484":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:46270:8583":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:1639:10630":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:42735:3449":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:21730:9051":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"6:7984:9676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:21281:8600":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"11:1923:8967":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:4469:2255":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:45101:8646":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:5617:13763":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:13959:20323":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:42532:9202":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"17:12949:16860":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:12367:3496":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:30627:3178":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"4:8450:3310":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"6:6880:13593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:43462:3215":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:10249:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"5:1525:8952":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:44190:23044":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:37487:2322":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:42550:22685":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:2631:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"17:11865:17032":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:13674:20310":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"18:659:21344":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:5756:16656":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:5181:13715":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:7503:8947":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:44129:3554":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:40111:3322":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:40086:3320":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:12189:17073":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:5191:13716":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:15596:21126":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"4:9344:234":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:13211:19803":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:3740:30885":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:16212:21313":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:13252:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:41479:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:10284:3387":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:11524:16969":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"4:12235:8937":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"4:10870:9047":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:10824:2834":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"13:226:32141":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"11:844:8958":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:7695:16734":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"4:2441:9034":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"18:0:2172":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:15266:21100":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:43055:3414":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:11028:3411":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:43276:3405":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:15168:21092":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:21771:21499":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"4:5162:28474":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:6342:32392":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"4:3605:9070":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"17:15473:21122":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"18:680:21346":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:45340:8648":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"4:9465:2858":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"16:6120:16673":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"4:4485:9144":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:2087:2836":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"4:4260:9148":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:7339:14891":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"11:2536:32138":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:14977:21081":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:11497:16916":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:41385:2401":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:8012:15275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:44066:165":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"4:637:8930":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:12238:17047":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:46203:8662":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:11812:16987":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"4:48:2075":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"17:13235:19804":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"4:6412:220":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"4:4740:27795":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"18:507:33420":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:3341:2338":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"4:9340:3207":{"crate_id":4,"path":["std","sync","poison","Guard"],"kind":"struct"},"4:9148:9232":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:22472:2961":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:31737:23258":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:4242:2266":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:5277:13726":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:5064:13707":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:7813:16740":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:42903:24147":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"18:515:21354":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:5623:3207":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:11313:16910":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:11153:16849":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"4:2735:9085":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:8197:15437":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:7348:14892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:15126:21089":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:7580:16727":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:10982:16869":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"4:12264:1805":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"17:12508:17086":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:6398:16681":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:2234:30607":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"11:2304:8961":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:15635:21130":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:15356:21109":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:542:32425":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:5700:16653":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:1095:2079":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"1:40125:3323":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"4:4081:9115":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:13424:19816":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:6532:16691":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:2612:15739":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:45680:8655":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"4:8120:9047":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"4:6693:2289":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"11:434:32122":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"11:1891:2840":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:45253:8619":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:6849:16704":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"4:8113:9043":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:15608:21127":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:39662:3220":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:15190:21094":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:15624:21129":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:7529:8918":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:564:9729":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:1517:10619":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"9:0:2164":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"4:9626:139":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:12264:17045":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"4:8545:9154":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:8384:3216":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"4:8130:9044":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:10873:3407":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:3494:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"6:5643:13767":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:7643:3282":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"4:7649:27951":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"1:39699:3242":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:8073:16745":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:46360:8589":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:46261:8582":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:45524:21920":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"4:4037:9112":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:6300:16676":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"18:635:33446":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:43322:3489":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:1585:10626":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"11:1917:8966":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:3237:2834":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:10671:33289":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:43713:3512":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:5665:13769":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:43408:3481":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"5:1555:8956":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:14463:20356":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:33735:2320":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:21193:3178":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:8317:13939":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:4971:13696":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"4:4230:28234":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:16151:21308":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"5:4238:3207":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"18:531:21355":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"4:9119:9231":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:6542:14463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:1707:10637":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:12291:3495":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"4:3458:3287":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"6:1686:10635":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:21881:9051":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:2528:15735":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:3634:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:8029:15276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:12342:17044":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:12318:16860":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:2925:3167":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"6:5653:13768":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"16:6442:16685":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:6047:16669":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"4:7998:8936":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:4174:3219":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"5:1544:8955":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:6028:2280":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:4882:16390":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"4:10917:27855":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"4:8796:2834":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"17:11825:17009":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:2338:15726":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:39058:3194":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"4:11826:9252":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"4:1602:8966":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:6721:14479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:2966:2329":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"6:5039:13704":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:7690:8953":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:40477:3283":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:5367:16649":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"4:362:8925":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:7412:2424":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:43894:3458":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"14:220:15660":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"18:670:21345":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"4:8418:2862":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"1:13439:2899":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"17:12289:17041":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:12621:17095":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"5:2205:30695":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"4:12287:1357":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:43555:3506":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:11841:17030":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:2636:15740":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"4:2425:3142":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"6:6471:14458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:15778:21140":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:21759:3401":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"4:11239:28095":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:45701:8661":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:39954:2881":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:12478:17084":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"18:113:21330":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:7604:16729":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:43130:3479":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:3329:15758":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:15313:21105":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:9807:16817":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:6678:14474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"4:8497:9103":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"6:5557:13758":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"4:10610:9090":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:11075:16888":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:6574:16694":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"4:10908:27877":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:4824:13681":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:2607:2920":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"4:5940:2294":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"4:8551:9143":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:11341:16921":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:3249:30827":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:4459:2254":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:4103:30885":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:40042:3327":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"4:1590:8964":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:45393:8608":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"4:5868:2283":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:4500:30910":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:15289:21103":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:43727:3513":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:13146:17132":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"11:2124:8961":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:5477:13750":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:12683:17094":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"16:6991:32533":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"4:481:29092":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:42520:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:3283:30822":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:39741:3215":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"18:598:33442":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:38846:2340":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"11:1025:2816":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:7509:16721":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:13877:20319":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"4:11191:27714":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"4:12270:1745":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"17:10877:16850":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:39972:3311":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:6417:14453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:7339:8973":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:10461:22713":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:6648:16699":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:42297:3168":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"17:13046:16815":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:10848:2835":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"4:7912:9051":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"17:13387:19813":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:4811:13680":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"4:12246:27879":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:7075:30890":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:46124:8656":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"4:11749:9107":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:16223:21314":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"5:7368:2840":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:3108:2264":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:10524:16844":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:5581:13760":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:6435:14454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:4942:13692":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:2768:15746":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:16176:21310":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"6:7366:9179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:45928:8644":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:2295:3153":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:1863:2885":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:10993:3421":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:12516:17101":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"16:6976:16710":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"11:673:2834":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:40063:3304":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:15214:21097":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:13292:19807":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"9:330:15575":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:42992:2894":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:45169:8647":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:6532:14462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:6874:14515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"4:9349:235":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:12589:3452":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:5008:943":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:2723:138":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:9068:2402":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"4:11838:28507":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"4:12269:1657":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"17:14847:21074":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:3614:15760":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:7485:14898":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:586:9732":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:13272:19806":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:42288:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"4:3238:28723":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:1566:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:16198:21312":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:45813:8627":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:38943:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"4:2279:9027":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"6:5457:13747":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:12768:16810":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:4614:16306":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:32902:2315":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:1699:10636":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"4:4693:9173":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:7755:16737":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"11:102:32133":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:14235:20340":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:46095:8622":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:43446:3490":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:41698:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:22012:8728":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"16:6278:16675":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:11392:16919":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:5846:16662":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:45574:21725":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:43886:3463":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:13568:19826":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"4:7254:28892":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"4:11852:15683":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"4:1885:2858":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"4:8019:9007":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"4:640:8931":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"4:4806:9155":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:9916:16834":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"11:1910:8965":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:7937:2237":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:16050:19806":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:10612:16845":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"14:214:15659":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"4:8169:8949":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"5:3036:30829":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:15944:19803":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:16249:21316":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"4:8802:9206":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"1:43154:3407":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"6:8328:13940":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"5:1575:8975":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"4:1446:156":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:7473:3279":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"4:5861:2282":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:21232:21489":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"4:723:154":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:10350:16842":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:5376:13739":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:5306:13730":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:4985:13698":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"14:165:15651":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"11:1007:8961":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:13399:19814":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:45591:21739":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"4:3488:3207":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:12105:3398":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:15273:21101":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:6098:16672":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:5483:13751":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:11621:16946":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:11755:16980":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"4:9354:2292":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"17:14091:20333":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"4:12266:1256":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"17:10622:32754":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:12213:17075":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:7452:14895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"4:8492:9105":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"4:4151:9122":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:7597:9274":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"4:12282:1772":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"4:5074:9183":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"1:2435:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:10251:16839":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:6729:14480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:15822:21143":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"4:9304:27472":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"4:2674:22716":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:10493:21570":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"4:503:8907":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:1680:10634":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:21230:21484":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"4:11543:27927":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"4:4129:9118":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:6480:16688":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:5415:32529":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:39782:3241":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"4:12277:869":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"11:1160:8963":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:12433:16818":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:10419:16804":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:7061:16714":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"4:3366:9090":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:9076:9221":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:13024:16862":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}