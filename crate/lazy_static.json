{"root":"0:0:1774","crate_version":"1.4.0","includes_private":false,"index":{"1:12790:1981":{"id":"1:12790:1981","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12410:3489","`DoubleEndedIterator`":"1:7780:124","prim@char":"4:12034:444","str::rmatches":"1:12793:29472"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44050:3523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12806:29477":{"id":"1:12806:29477","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12745:21867":{"id":"1:12745:21867","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44138:3527","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12749:26848":{"id":"1:12749:26848","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12034:444","self::pattern":"1:12410:3489"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12734:29467":{"id":"1:12734:29467","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12040:1523","str::slice_mut_unchecked":"1:12735:29468","crate::ops::Index":"1:3112:2164"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12742:21061":{"id":"1:12742:21061","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12741:21065"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44129:3528","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12816:25672":{"id":"1:12816:25672","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12034:444","self::pattern":"1:12410:3489"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41924:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:1780":{"id":"0:29:1780","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"1:12726:1779":{"id":"1:12726:1779","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41926:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41924:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12793:29472":{"id":"1:12793:29472","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12410:3489","`DoubleEndedIterator`":"1:7780:124","prim@char":"4:12034:444","str::matches":"1:12790:1981"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44068:3524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12430:3505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:1781":{"id":"0:31:1781","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12838:29486":{"id":"1:12838:29486","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4610:29486"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44145:3266","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12787:26847":{"id":"1:12787:26847","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41924:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12430:3505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12769:26840":{"id":"1:12769:26840","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12410:3489","`DoubleEndedIterator`":"1:7780:124","prim@char":"4:12034:444","str::split":"1:12763:25442"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43864:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12430:3505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1774":{"id":"0:0:1774","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:1780","0:31:1781","0:28:1774"],"is_stripped":false}}},"5:5533:30148":{"id":"5:5533:30148","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7520:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12738:21865":{"id":"1:12738:21865","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12034:444"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43816:3517","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12784:26846":{"id":"1:12784:26846","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41924:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525":{"id":"5:5525","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5526:30146","5:5527:3170","5:5530:30147","5:5533:30148","5:5541:30149","5:5542:30150","5:5543:3325","5:5544:26081","5:5545:26082"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5530:30147":{"id":"5:5530:30147","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7520:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12834:27983":{"id":"1:12834:27983","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39873:21413","Self::is_ascii":"1:12833:26079"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41924:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39873:21413","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12714:863":{"id":"1:12714:863","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12034:444"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12804:29476":{"id":"1:12804:29476","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5541:30149":{"id":"5:5541:30149","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7520:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5543:3325":{"id":"5:5543:3325","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7520:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12746:24265":{"id":"1:12746:24265","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12034:444","self::pattern":"1:12410:3489"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12796:29473":{"id":"1:12796:29473","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12410:3489","`DoubleEndedIterator`":"1:7780:124","prim@char":"4:12034:444","str::rmatch_indices":"1:12799:29474"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43996:3525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12766:21056":{"id":"1:12766:21056","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12034:444","self::pattern":"1:12410:3489"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12226:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12737:26831":{"id":"1:12737:26831","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12736:26830"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12728:22282":{"id":"1:12728:22282","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41926:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41924:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12716:29463":{"id":"1:12716:29463","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12775:29471":{"id":"1:12775:29471","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12410:3489","str::split":"1:12763:25442","prim@char":"4:12034:444","str::split_terminator":"1:12772:29470"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43914:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12430:3505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12822:29482":{"id":"1:12822:29482","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12034:444","self::pattern":"1:12410:3489"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12430:3505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12840:3244":{"id":"1:12840:3244","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4611:3244"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44154:3245","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:3170":{"id":"5:5527:3170","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7520:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12740:21765":{"id":"1:12740:21765","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43832:3515","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12763:25442":{"id":"1:12763:25442","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12410:3489","`DoubleEndedIterator`":"1:7780:124","prim@char":"4:12034:444","str::split_whitespace":"1:12741:21065","str::rsplit":"1:12769:26840"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43846:3445","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12752:26849":{"id":"1:12752:26849","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12034:444","self::pattern":"1:12410:3489"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12430:3505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12808:29478":{"id":"1:12808:29478","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12825:29483":{"id":"1:12825:29483","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12034:444","self::pattern":"1:12410:3489"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12813:29481":{"id":"1:12813:29481","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12034:444","self::pattern":"1:12410:3489"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12802:29475":{"id":"1:12802:29475","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:1774":{"id":"0:28:1774","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"1:12719:29465":{"id":"1:12719:29465","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12717:29464"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12725:26811":{"id":"1:12725:26811","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12051:1628"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12741:21065":{"id":"1:12741:21065","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12742:21061"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44120:3519","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12781:26844":{"id":"1:12781:26844","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12034:444","str::splitn":"1:12778:26842","self::pattern":"1:12410:3489"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43968:3443","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12430:3505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12833:26079":{"id":"1:12833:26079","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12819:26850":{"id":"1:12819:26850","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12034:444","self::pattern":"1:12410:3489"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41924:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12430:3505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12841:29487":{"id":"1:12841:29487","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4608:29487"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44163:3265","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5542:30150":{"id":"5:5542:30150","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2080","`String`":"5:7520:246"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2080","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12744:29469":{"id":"1:12744:29469","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44110:3520","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12715:2253":{"id":"1:12715:2253","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12724:336":{"id":"1:12724:336","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12725:26811","`u8`":"4:12051:1628"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12778:26842":{"id":"1:12778:26842","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12034:444","self::pattern":"1:12410:3489","str::rsplitn":"1:12781:26844"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43950:3447","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12717:29464":{"id":"1:12717:29464","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12837:26085":{"id":"1:12837:26085","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12743:25443":{"id":"1:12743:25443","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44100:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12755:2294":{"id":"1:12755:2294","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41926:194","prim@char":"4:12034:444","self::pattern":"1:12410:3489"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41924:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12759:2252":{"id":"1:12759:2252","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41926:194","prim@char":"4:12034:444","self::pattern":"1:12410:3489"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41924:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12430:3505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12799:29474":{"id":"1:12799:29474","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12410:3489","`DoubleEndedIterator`":"1:7780:124","prim@char":"4:12034:444","str::match_indices":"1:12796:29473"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44014:3526","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12430:3505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12730:22283":{"id":"1:12730:22283","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12836:26084":{"id":"1:12836:26084","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12828:29484":{"id":"1:12828:29484","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12034:444","self::pattern":"1:12410:3489"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12430:3505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:30146":{"id":"5:5526:30146","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2080","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2080","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12713":{"id":"1:12713","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12714:863","1:12715:2253","1:12716:29463","1:12717:29464","1:12719:29465","1:12722:25257","1:12723:29466","1:12724:336","1:12725:26811","1:12726:1779","1:12728:22282","1:12730:22283","1:12732:22284","1:12734:29467","1:12735:29468","1:12736:26830","1:12737:26831","1:12738:21865","1:12739:20886","1:12740:21765","1:12741:21065","1:12742:21061","1:12743:25443","1:12744:29469","1:12745:21867","1:12746:24265","1:12749:26848","1:12752:26849","1:12755:2294","1:12759:2252","1:12763:25442","1:12766:21056","1:12769:26840","1:12772:29470","1:12775:29471","1:12778:26842","1:12781:26844","1:12784:26846","1:12787:26847","1:12790:1981","1:12793:29472","1:12796:29473","1:12799:29474","1:12802:29475","1:12804:29476","1:12806:29477","1:12808:29478","1:12809:29479","1:12810:29480","1:12813:29481","1:12816:25672","1:12819:26850","1:12822:29482","1:12825:29483","1:12828:29484","1:12831:29485","1:12833:26079","1:12834:27983","1:12835:26083","1:12836:26084","1:12837:26085","1:12838:29486","1:12840:3244","1:12841:29487"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12809:29479":{"id":"1:12809:29479","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12739:20886":{"id":"1:12739:20886","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12034:444"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43822:3516","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5544:26081":{"id":"5:5544:26081","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12836:26084"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5545:26082":{"id":"5:5545:26082","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12837:26085"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12735:29468":{"id":"1:12735:29468","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12040:1523","crate::ops::IndexMut":"1:3116:2165","str::slice_unchecked":"1:12734:29467"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12723:29466":{"id":"1:12723:29466","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12732:22284":{"id":"1:12732:22284","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12772:29470":{"id":"1:12772:29470","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12410:3489","str::split":"1:12763:25442","prim@char":"4:12034:444","`DoubleEndedIterator`":"1:7780:124","str::rsplit_terminator":"1:12775:29471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43896:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12831:29485":{"id":"1:12831:29485","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12371:130","`FromStr`":"1:12370:3013"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42069:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12370:3013","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12370:3013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12835:26083":{"id":"1:12835:26083","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12736:26830":{"id":"1:12736:26830","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12737:26831"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12722:25257":{"id":"1:12722:25257","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11965:3509"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12810:29480":{"id":"1:12810:29480","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12034:444","self::pattern":"1:12410:3489"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12415:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12435:3504","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"4:533:2748":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"17:13990:20533":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:3232:15267":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:42009:2233":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"16:6318:16190":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:149:2670":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:6136:30391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:4676:13273":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:13907:20526":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:3441:16503":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"4:5989:223":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:7610:13485":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"4:10157:25400":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:1537:10634":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:1496:10628":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:4040:2686":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"4:4385:9160":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:11049:16568":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"18:614:32280":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:40421:3264":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:10276:2805":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"7:31:15002":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"4:923:8985":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:4616:13269":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:10667:2925":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"4:3241:9112":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:12268:19257":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:574:9745":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:6927:14424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"4:3203:9111":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:14309:20557":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:1682:10647":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:10210:2802":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:6666:10588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:2884:2142":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"6:1650:10644":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"4:5634:2765":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:1419:2924":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:6107:2714":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:40317:3271":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:14479:20570":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:44878:24774":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:2297:100":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:21535:9069":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"4:1064:8990":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:7736:16247":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:8072:16255":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"4:10432:9241":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:10604:16485":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:10140:16415":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:46935:8692":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:46311:8685":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:9831:114":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"4:850:2925":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:47205:8707":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:5829:13917":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:7128:16225":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:22575:3014":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:11112:16554":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"9:52:15050":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"4:7844:9064":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"17:9278:16343":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:43996:3525":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:46701:21182":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:39625:219":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:2580:156":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"17:12514:19746":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:3797:15288":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:4523:13257":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:4500:2100":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:11152:16583":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:2974:29116":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:2822:2075":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"17:14135:20548":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"4:8301:9124":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:10930:16500":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"5:1531:8999":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:46188:8711":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"11:1051:15151":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:9973:16389":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:6594:2257":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"4:8867:2257":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:0:310":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:6268:31540":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:13287:19795":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:42916:22272":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:234:229":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:22239:8762":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"5:7262:2257":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"4:641:8960":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"4:5448:108":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"18:548:146":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:10576:16483":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"4:10955:9238":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:3191:29220":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:46525:8712":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"4:3168:26451":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:2974:2160":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:46427:8645":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:5117:13320":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:14500:20571":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:13555:20505":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"10:44:15141":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:10950:16496":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"4:11518:9125":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:47141:8652":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"4:10782:25403":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:4835:15894":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:6279:16189":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:46503:8706":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"4:11478:9126":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"4:8327:9198":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:44585:3501":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:22466:21950":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"4:9049:25216":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:2832:250":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"11:1541:2916":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"4:8386:9209":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:8687:16329":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:48312:8622":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"4:8992:25081":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:43421:3486":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"4:1797:9020":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:42279:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:1019:2686":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:13869:20522":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"3:0:2003":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"4:2946:229":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"16:2810:15257":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:3031:2173":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:43770:2956":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:14101:20544":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:43649:3441":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:39603:217":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:6079:13997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:42061:3381":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"6:654:9795":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:14084:20542":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:7342:31563":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:1710:10650":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:11816:16599":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"11:1562:15154":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:43750:2955":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:41678:3372":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:8205:3335":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:7467:21193":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:2953:2155":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"4:8851:2924":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"4:8494:9226":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"1:32494:3231":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:4434:2717":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:14449:20567":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:7360:31581":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:12025:19240":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:4641:15820":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:41848:3375":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:5891:13984":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:10589:16484":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:4316:224":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"5:2231:28991":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:9702:16350":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:43914:3521":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:4401:13245":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:6583:16208":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:12226:3458":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"14:187:15169":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"4:7530:16328":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:5144:2121":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:44853:3591":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:6012:13993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:4461:13250":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"4:1744:649":{"crate_id":4,"path":["std","env"],"kind":"module"},"6:548:9741":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:13759:20499":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:7742:159":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:41695:3373":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:9351:16311":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:3461:15269":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:22726:3018":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"18:652:32281":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:13025:19778":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"4:8282:9167":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:7534:9303":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:6898:14422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:13275:16366":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"4:837:2924":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:6742:15179":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:10411:16443":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:7792:16250":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:23099:188":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:4205:2109":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:6386:16196":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:22610:21474":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"4:2519:9101":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"4:10475:2777":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:40632:3351":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"11:2286:8990":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:9934:16399":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:12099:19245":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:12424:3506":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:10198:16442":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:2709:3221":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:43864:3449":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"4:7924:9102":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:10954:3448":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:7604:13484":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"4:8921:9252":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:42137:199":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:4082:2925":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:4947:13302":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"9:177:15136":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:14127:20547":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:13827:20519":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:1576:10638":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:6893:31487":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"4:1557:8993":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:11789:16598":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:40664:3354":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:44406:3549":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:42999:131":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"6:7371:14797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:44581:3500":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:6261:16188":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"15:394:15197":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"4:9973:21483":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:43189:22418":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:30628:21281":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:43181:3428":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:6813:14417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:23285:183":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"18:736:20601":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:3049:120":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"4:2381:9058":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"17:11390:16353":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:12173:19250":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:44129:3528":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:3830:15297":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:4320:2087":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:9788:3277":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:9148:9258":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"4:8353:9148":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:7604:2728":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:1840:182":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:3557:2708":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"16:7102:16224":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:21822:9069":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"6:5111:13319":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"6:6263:14034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:261:32267":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:8181:16261":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"11:785:2708":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:1146:28983":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:40764:3361":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"4:7664:8945":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"6:4764:13280":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"18:515:20613":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:39422:2175":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:2450:15242":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:30333:2975":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"6:6169:14005":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:13452:20502":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:43968:3443":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:43678:2954":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:7616:13486":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"5:6847:2738":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"4:9276:2401":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:42972:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:4914:13299":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"11:1855:2728":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:14119:20546":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:30560:3174":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:7692:14985":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:8050:16254":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:9633:3423":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:48274:8620":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:2574:15247":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:1528:10633":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:10904:16501":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"11:1882:8995":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:14347:20561":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:7738:139":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:4488:13253":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:47561:8675":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:6658:9783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:41137:3324":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:3220:8992":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:13175:19788":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:40622:3350":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"18:491:32291":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:3225:29213":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:7598:13483":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:4745:13278":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:6945:266":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:11587:16362":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:3080:135":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:13034:24504":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:13740:20515":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:9306:88":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:9946:16395":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:5743:16172":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:30686:21283":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"4:11342:25404":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:2178:29026":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:13136:19785":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"11:389:2678":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:10508:16451":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:43728:3454":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:11282:16578":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:10751:16495":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:9806:137":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"11:992:8989":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"11:357:2676":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"4:415:178":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:44823:3586":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"4:10537:9112":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"18:660:20603":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:4388:13244":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:13817:20518":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"4:5755:2124":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:4789:13283":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:21175:24246":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"11:860:8987":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:2472:15243":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:43218:9224":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"17:12960:19773":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:6248:14033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"11:2260:2911":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:43790:3514":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:2548:15246":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:42318:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:41825:21486":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:11192:16364":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:22146:8760":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"4:1822:2934":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"4:12059:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"1:44569:3499":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:7639:13489":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:1913:10816":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:9986:16388":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"4:9197:25695":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:14325:20559":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:7015:16223":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:45902:8677":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"4:1761:9010":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"17:13056:19780":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:11474:16356":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"4:10078:9020":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:11911:19234":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"4:8404:9223":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"6:62:9360":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"18:690:20606":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"11:2303:15155":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:44865:3589":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"5:7282:2708":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:46479:8657":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:3692:2257":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:4698:13275":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"4:3243:9113":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"4:3282:9109":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:8134:16258":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:12191:3533":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"4:11292:2783":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"4:8960:2126":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"14:7:15161":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:2982:2162":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:48221:8617":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:10686:16494":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:11359:16592":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:527:9738":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:32382:24609":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"4:2203:9044":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"1:48164:8612":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"5:4371:2717":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"4:860:2257":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:40440:3312":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:39461:2174":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:40572:3339":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"4:5782:2125":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:41861:3376":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"11:759:8980":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"5:7436:2719":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"7:0:1673":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:31190:3211":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"6:4884:13295":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:2406:205":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:8873:2237":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:14402:20564":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"4:11607:26583":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:7544:16236":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:13163:19787":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:44277:3545":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:7633:13488":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:43228:22360":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"18:564:20616":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:12555:19749":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:9532:32258":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:12075:19243":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"14:202:9302":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"4:8233:9123":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:5995:16181":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:7828:16251":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:40376:3267":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:4496:13254":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"4:11315:9247":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:5867:13982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"4:11053:2782":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:26163:269":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:3293:2170":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:12226:19254":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:1521:10632":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:13974:20531":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:9897:16379":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:6531:16205":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:12877:19768":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:5382:9297":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:9446:16345":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"4:9481:2776":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"18:507:32281":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:44653:3560":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:47813:8681":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"4:4705:9170":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:2943:2153":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:9173:16340":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"4:4744:9149":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"4:646:8961":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:1703:9156":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:44100:3518":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:46050:8690":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:1500:8983":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:12306:19260":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:2978:2161":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"4:12034:444":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"17:14537:20574":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:5760:16173":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:21363:9069":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"16:7613:16240":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:7453:9043":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:21365:8631":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:41143:3326":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"18:727:20608":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:10495:16453":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:44561:3494":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"6:4783:13282":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:2406:15240":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:13711:20513":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:40914:3363":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:5574:16162":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"4:4040:9137":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:4814:13286":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:42515:94":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"11:2074:2911":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:40435:103":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:22107:8759":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:47355:8641":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:10940:3443":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:8205:16263":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"18:699:20607":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:21852:3439":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:12532:19747":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"4:1055:2911":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"11:2351:2257":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:47953:8687":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:10699:16516":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:1651:3150":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"17:11408:16354":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:14523:20573":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:1772:2946":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"11:841:2907":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:7694:16244":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:40402:3270":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"4:3445:2935":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:4989:13306":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:12209:19253":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:13612:20508":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:8154:16259":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:9087:16161":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:1570:10637":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:4889:15900":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:9922:16405":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:42112:2924":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"4:7739:9027":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"1:4473:2099":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:4375:13243":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:5928:13988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"4:12047:786":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"6:4776:13281":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:5648:16166":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:11352:16591":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"4:10099:26552":{"crate_id":4,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"9:450:15031":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:434:15210":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:14222:20553":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:7365:14796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:7353:2257":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:7332:28973":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:41162:3329":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:2284:15208":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:4440:13248":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:1749:3204":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:21192:24259":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"4:3325:9098":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:2919:2152":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:44294:3546":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:11951:3438":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:2574:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:42000:2257":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:44226:3542":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:2526:15245":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:12699:19757":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:2823:2104":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"5:2043:2926":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:7768:16248":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:8795:16332":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:4939:1086":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:5982:16180":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:48351:8623":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"4:12046:789":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"17:13793:20516":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:22253:3187":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:10926:3447":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:44565:3497":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:6915:16218":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"4:4637:25281":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:123:9415":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:2968:29261":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:14002:20534":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"4:363:8954":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:2364:204":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:12175:3531":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"11:693:2257":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:5974:13990":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:14336:20560":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"0:28:1774":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"5:3808:2728":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:10485:9069":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"4:1539:2257":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:10774:3446":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:40331:3273":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:13061:208":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:40904:3362":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:0:469":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"5:5951:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:6520:2686":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"18:766:20602":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"4:3512:9089":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"17:12497:19745":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:9853:16376":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:2537:9069":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:32407:3225":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"4:8170:9068":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"4:4823:9145":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:46905:8686":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:12415:3503":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"4:3968:9132":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"4:1546:2728":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:8243:24837":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:4535:13259":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:3179:2924":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:910:8982":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:43021:3417":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"17:9753:16351":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"18:707:3506":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:7457:3321":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:48210:8616":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:542:9740":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:12577:19750":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:2251:29024":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"4:6612:2135":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:13310:3588":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"4:8974:26006":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:48195:8615":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:7270:8996":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:2827:112":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"6:4878:13294":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:12751:19761":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:1718:10651":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:6929:16219":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:30594:3175":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:2923:2150":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"4:5641:9248":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:2915:2148":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:10885:3450":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"11:868:8988":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:11296:16588":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"5:4202:2714":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:42162:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:22535:22408":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:43760:3453":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:12766:19762":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:44616:125":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"17:10228:16427":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"4:4153:9161":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:2826:247":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"4:4182:9164":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:12430:3505":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"4:6428:1922":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"6:5897:13985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:5939:16178":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:2970:28990":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:4417:15764":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:10037:16393":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:6171:209":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:5140:13323":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:10293:2751":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"4:2913:2756":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:5712:16170":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:5009:13309":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"11:0:2008":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:46333:8691":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"4:12000:25991":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"4:7028:2770":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"14:215:15170":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:9493:22370":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:6107:14000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:14435:20566":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"4:10814:122":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"4:915:8983":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:41712:3374":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:6114:14001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:6968:16221":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"11:817:8982":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:8979:16338":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"10:36:31069":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:11935:3436":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"4:8191:3348":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"6:555:9742":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:596:9748":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:9850:3412":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:44815:3585":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:5033:13312":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:12438:19743":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:678:253":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:10293:16349":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"4:7381:25990":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"1:3062:2106":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:23223:185":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"16:3600:15270":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:881:2694":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:1075:16392":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:22587:21147":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:2057:2929":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"4:12005:8966":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"5:1450:2257":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:13423:20501":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:12641:114":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:0:2012":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:8199:3334":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:12847:19767":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:5673:16168":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"14:221:15171":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:3312:22724":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:43206:150":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"4:9095:180":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"4:894:2708":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:504:16327":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"4:6432:2127":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:1507:10630":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:2869:3228":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"17:11328:16589":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:40301:21155":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:22664:21427":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"4:7718:8964":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:13255:145":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:3338:2728":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:12738:19760":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:10215:16428":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:7651:13491":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"4:12044:682":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"1:44431:3551":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:5941:13945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"4:6164:2764":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"4:9105:238":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:13149:19786":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:21864:24256":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:45980:8673":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:6513:16204":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:4854:13291":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"4:11217:25048":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"16:4862:15897":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:9913:16380":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"11:2368:2708":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:44597:3558":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:8595:16312":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:6961:14427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:10495:242":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:14283:20555":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"18:681:20605":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:10441:16479":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:10638:16488":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:39700:3240":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:11394:131":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:6819:14418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:4808:13285":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:12912:19770":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"14:0:2010":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:43668:3451":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:9243:16342":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"4:7644:9069":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"4:2663:9103":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:43236:22359":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:4585:15812":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:276:2080":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:5152:13325":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"4:1551:8992":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"4:9129:9073":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"1:40388:3268":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:11453:3456":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:2864:15259":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"4:11047:2781":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:11762:16369":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:6944:31473":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"11:101:31070":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:4902:13297":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:13915:20527":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"11:2317:2924":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:4364:13242":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:12008:19239":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:12946:19772":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:6346:16192":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:39686:3226":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"17:10166:16416":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:40641:3352":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:10308:2810":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:47095:8646":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:14043:20538":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"4:8477:9225":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"13:226:31136":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:9791:32268":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"4:2948:131":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:10643:2924":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"4:2369:9052":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"4:724:147":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"4:4169:9163":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:11873:16601":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"18:755:20609":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:10647:16534":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:6700:14413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:5982:13991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:3073:2077":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:22551:21419":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:6189:31520":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"11:2238:8989":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:6440:24906":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"5:1522:213":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:4738:9129":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:1644:625":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:40581:3348":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"4:10804:133":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"16:6017:16182":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:4325:2088":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"4:2353:3178":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"17:11720:16367":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:7503:16232":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:4610:13268":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:4529:13258":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"4:7856:9065":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"16:4557:15808":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:46281:8679":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:12725:19759":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:30616:3201":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"4:5570:9239":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"4:8012:9104":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:7054:31522":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"4:7600:2774":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:261:2686":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"4:10249:9246":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:40515:2793":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"4:5627:223":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:15:1982":{"crate_id":1,"path":["core","write"],"kind":"macro"},"4:8214:3445":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"1:5710:3353":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"4:8158:2936":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"16:5830:16175":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"11:2461:31073":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"4:4471:9170":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"4:1542:2708":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:22693:24904":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"4:12058:1231":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:45926:8637":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:11099:16555":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:21546:8627":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:6753:16212":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"4:8563:9229":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"4:10833:26542":{"crate_id":4,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:9301:81":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"4:8979:110":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"4:10824:2936":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"16:6041:16183":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:5088:15955":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:44780:210":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"18:80:20587":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:3448:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:40341:3274":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:8766:16331":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"18:113:20589":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:13086:3583":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:4058:20666":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"4:8208:3515":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"17:11227:16585":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:10047:146":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"16:2881:15260":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:2339:15237":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:13488:20503":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:2967:2321":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:3287:140":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"4:1967:201":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:11965:3509":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:536:31182":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:4806:15889":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:11449:16355":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"4:1910:695":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"17:13686:20512":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"4:7866:9062":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:9836:123":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"4:2206:2746":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"4:12039:1490":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"17:11338:16590":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:7677:213":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:7014:2745":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:14356:20562":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:825:2692":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"5:898:2924":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:12410:3489":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:32346:3216":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"5:3743:2929":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"11:1846:2257":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:23006:189":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:43950:3447":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:41924:197":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"4:10942:9028":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:1734:10652":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"4:6542:2129":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"4:7669:8947":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"5:2139:2705":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"4:2427:1943":{"crate_id":4,"path":["std","io"],"kind":"module"},"6:4449:13249":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:11574:16361":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:13189:19789":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:781:98":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:1680:2686":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"4:2201:132":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"1:46678:21425":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"4:10534:9110":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:9844:3410":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"9:330:15087":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"4:588:8956":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:9838:3407":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"5:7545:9304":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:2200:626":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:4174:2108":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"4:8803:202":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"4:9110:155":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"5:6828:2726":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"4:8287:9168":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"4:4917:9196":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:2428:15241":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:5049:15940":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:7645:13490":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:11662:16313":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:9208:16341":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:6159:14004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:10098:16385":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:14461:20568":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:9373:16344":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:2359:15238":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"15:327:15190":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:48155:8611":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:7253:8997":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:44772:230":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:21974:9069":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"4:6646:236":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"4:7849:9061":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"4:622:8957":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:47703:8647":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:7520:246":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:8986:3503":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:7361:2257":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:42944:22268":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:12124:19247":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"11:1850:2708":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:1481:8981":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"4:11621:15194":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:23130:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:42120:2925":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"6:569:9744":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:495:9735":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:9763:32263":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"18:0:2014":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:4556:13262":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"18:96:20588":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"4:12050:784":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"5:2469:2919":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:39679:2169":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:2369:128":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:2905:2146":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:39537:213":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:10735:3458":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:3083:136":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:9522:16346":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:12889:19769":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:4977:13305":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:2872:2076":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"10:0:2007":{"crate_id":10,"path":["adler"],"kind":"module"},"9:357:15047":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:43741:3452":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:2825:248":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"11:2494:8976":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:4647:13271":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:10847:3449":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:11618:16363":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"4:3484:3277":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"4:11036:2780":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:41170:3331":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:6222:14032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:4242:2924":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:4628:13270":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"18:599:32289":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:7657:13492":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:2766:15255":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:12622:19752":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"4:12056:838":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:22299:8754":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"11:2334:2925":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:10469:16480":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:11972:19237":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:11952:19236":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"4:3734:9126":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:40750:3360":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:11075:16581":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"0:0:1774":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"11:1010:2911":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:9575:32248":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:5612:16164":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"4:3493:26596":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"4:12033:1020":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"16:4053:15448":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"11:822:8985":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:22199:3187":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:9071:16160":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:13633:20509":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:22627:21464":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"18:644:32281":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:10692:3445":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"4:8147:9115":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"16:5363:16158":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:5727:16171":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:2696:15252":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:3246:8995":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:1110:28981":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:11199:9073":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"4:9187:25676":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"4:12052:1625":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"1:40395:3269":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"6:6741:10773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:5004:13308":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:12044:19241":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:5015:13310":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:2178:16424":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:9608:16348":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:10715:16537":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:40603:3340":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:44068:3524":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:6248:3366":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:2931:2151":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:43689:3455":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:43846:3445":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"5:4172:2714":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:8281:16265":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"5:6003:2930":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"18:719:20600":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:41152:2800":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:12466:16543":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"4:5433:9237":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"1:2586:261":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:44593:3496":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:23254:186":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"11:122:2674":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:5121:15964":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:47171:8658":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"5:7420:8977":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:21424:8630":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:2837:2103":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"16:4774:15881":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:43436:22368":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:4847:13290":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"4:4746:9150":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:11307:16366":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"4:946:8987":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:11711:16366":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:12435:3504":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"4:11983:25899":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"11:1635:2680":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:46032:8684":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:22975:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"9:0:2006":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:5068:13315":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:3655:15271":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"4:11455:2785":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:46647:21284":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:3077:134":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"5:3576:176":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:12197:19252":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:6047:13994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:12063:19242":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:8660:16309":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:2927:2149":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:3212:8994":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:46859:8680":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:5816:31293":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:12811:19765":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:12238:19255":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:6857:2740":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"4:2210:9045":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"1:5537:2714":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"5:2149:28996":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:2815:240":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"16:7597:31318":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:44263:3544":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"4:8002:26569":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"11:2473:31071":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:11262:16577":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:39647:2167":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:43715:3338":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"18:481:20611":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:1591:10639":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:6943:14426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:2380:15239":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"4:3427:9066":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"17:13260:19794":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:687:113":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:46235:8625":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:42042:2234":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"4:5748:2123":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"19:0:1116":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"4:1407:149":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"4:12040:1523":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"4:8905:9254":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"4:4052:9140":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:10266:16426":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:44454:3507":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:10090:3425":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:2788:15256":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:2504:15244":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:10431:16478":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:5085:13317":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:582:16328":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:2590:260":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"4:8985:8941":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"4:4966:9205":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"4:10794:9065":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:13217:2761":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"6:580:9746":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:4755:13279":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"14:160:15161":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:13779:16394":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:13852:20521":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:4710:13276":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:22185:8761":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"18:624:32286":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"4:6441:1923":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"1:2936:2156":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"16:6545:16206":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"4:11236:155":{"crate_id":4,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"6:4893:13296":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"12:0:2009":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:3112:2164":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:21544:8628":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:44342:3547":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"4:7907:8978":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:10981:16349":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:11491:16357":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"4:12048:787":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"16:6226:16186":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:40280:3249":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:44474:3508":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"4:9476:9064":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:12370:3013":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:22062:8758":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:11216:16551":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"5:1511:8984":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:2577:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"16:7554:16237":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"4:3162:25891":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:10562:16448":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:42476:87":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:7780:124":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:5963:16179":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:21209:24250":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:5123:13321":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"4:5084:26544":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:12055:1624":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"6:4351:13241":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:10127:16414":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:12659:19754":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:5797:254":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:7408:8976":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"4:10097:2939":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:11001:16504":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:10673:16536":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:7269:31573":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:12779:19763":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:32386:16264":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:43804:3513":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:11174:16584":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"0:29:1780":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"16:8239:16264":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"18:582:3211":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"4:12049:788":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"4:952:8988":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:5146:13324":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:1596:10640":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:10187:16417":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:6837:14419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"4:11818:2789":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:3327:2105":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:22648:21151":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:40369:3266":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:1681:1172":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"6:6228:13157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:13724:20514":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:41884:3377":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"4:6251:2765":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:7284:2233":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:43197:3427":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:4994:2714":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:40594:2942":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"5:5334:2686":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:42069:229":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"5:6676:2686":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"4:4030:9136":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:40725:3358":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:12374:19741":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"4:10764:25704":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:7556:14957":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:44589:3495":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:42240:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:10739:16539":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:2618:15249":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:1961:2949":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:4838:413":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"6:563:9743":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:1018:1921":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"1:2400:198":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"6:4549:13261":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"4:10580:2778":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:5322:16141":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"4:8227:9124":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:7782:16249":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:1472:8980":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:0:2013":{"crate_id":17,"path":["object"],"kind":"module"},"5:5982:2121":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:14014:20535":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:14111:20545":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:6071:13996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"4:8275:3376":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:10521:16481":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:4070:20665":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:7705:3336":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:11527:3202":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"4:9035:16225":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:42926:3201":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"5:3150:97":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:42690:3409":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:6718:9200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:4986:15925":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:6434:3343":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:48099:8693":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:0:868":{"crate_id":6,"path":["libc"],"kind":"module"},"16:3764:15279":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"4:904:2728":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:6467:16201":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"11:344:31080":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:4666:13272":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:22519:21272":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:7889:172":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:6711:14414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"4:1535:2924":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:43822:3516":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:11382:16593":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:9999:16387":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"4:8859:9256":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:5419:16161":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:6083:15207":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:7651:16242":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:4745:15876":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"4:11357:25266":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"4:881:8981":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"4:48:1917":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"17:9329:3515":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:2899:2143":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:45836:8671":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:0:524":{"crate_id":1,"path":["core"],"kind":"module"},"16:6485:16202":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:48137:8714":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"18:671:20604":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"11:1127:15152":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:6425:16199":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"9:486:15030":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"11:483:147":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"4:3990:9134":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"4:3672:9122":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:3049:15265":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:6100:13999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:22333:8753":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"16:3915:15334":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"4:4800:2757":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:41903:3378":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:39521:216":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"11:1036:8990":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:46170:8705":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:5378:9296":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:9052:16310":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"4:3201:9110":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:6889:14421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"4:2371:9053":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"17:12646:19753":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:3272:2168":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:4719:15874":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"4:9022:26004":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"4:6813:9259":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:6569:16207":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:1434:2925":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:39508:2166":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:507:9737":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:12453:19744":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"4:1563:8994":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"4:3932:9131":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:7388:14798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:1697:10649":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:10535:16452":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"4:8892:9251":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:10548:16482":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:7751:2079":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:2583:138":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:43832:3515":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"11:680:2925":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:39581:218":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"4:5383:9234":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"16:6376:16195":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:22284:9069":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"6:7668:13493":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:5661:16167":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:4830:13288":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"4:2601:2751":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:22:722":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:42396:85":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:6196:25999":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:3315:15268":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:10060:16391":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:4603:13267":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:1558:2714":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:9661:32259":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"4:4044:9138":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:10367:16436":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"4:1568:8995":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"4:9100:237":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:13898:20525":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"4:3839:9127":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:40468:3311":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:10789:16540":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:4595:13266":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"4:3396:2714":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"6:5130:13322":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:7090:31495":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"4:8843:9244":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"4:10842:26535":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"4:6598:2134":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"11:427:31085":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:2948:2154":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:1184:16400":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:11508:16358":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:6879:16216":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:1265:8989":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:3364:2107":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"9:393:15032":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:13206:110":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"16:6499:16203":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:11536:16359":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:42052:2330":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"4:557:2933":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"11:1092:2913":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"18:531:20614":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:13576:20507":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:6474:2708":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"18:590:24795":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:3565:16521":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:3032:15264":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"4:1874:9038":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"17:12998:19776":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:5632:2714":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:6764:10758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:21163:24246":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:42683:3407":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:6445:2799":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"4:8221:3518":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"1:31162:199":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"11:1842:2924":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:13114:19784":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:7708:16245":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:10772:16515":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:4922:13300":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:11548:16360":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:2316:107":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"17:10963:16497":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:10095:3426":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:46781:8674":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:8196:3246":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:1784:2728":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:22602:22271":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:1674:10646":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:13072:19781":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:23192:184":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:44138:3527":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:4480:13252":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:14077:20541":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"4:3502:9067":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"1:9848:3411":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:5885:13983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"4:8201:3362":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"1:21418:8626":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:4955:13303":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:4516:13256":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"4:11146:9242":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:42128:2257":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"17:12294:19259":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:44154:3245":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:10055:150":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:42697:3410":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:10398:16476":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:6989:2741":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:40612:3349":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:13568:20506":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:2294:99":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"4:8797:9241":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"4:5502:9238":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"17:10341:16429":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:10448:15147":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:21221:24252":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:13299:19796":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:9456:32249":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:13668:20510":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:14270:20554":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:4566:13263":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:14297:20556":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:13012:158":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"4:7581:2772":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:6901:16217":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:10421:16477":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:5023:13311":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"4:929:8986":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:46381:8639":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:5910:13986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:12253:19256":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:13245:19793":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"4:6359:179":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"4:8293:9159":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:207:2684":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:12115:3532":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"4:5573:9240":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"16:6156:16184":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:2933:15262":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:10279:16425":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:44836:174":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"4:4313:9166":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:5104:13318":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:6868:14420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"4:10323:108":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:10384:16422":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:7391:16227":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"5:5640:2726":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:40673:3355":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:7660:16243":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:5634:16165":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:2978:29117":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"4:8873:9253":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:6352:16193":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"4:5417:9236":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"17:9887:16378":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:11163:16548":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:2970:2159":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:400:16326":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"4:12053:1626":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"1:48236:8618":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"4:8007:25989":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"1:42357:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:46457:8651":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:46081:8638":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"4:12054:1627":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"18:574:32281":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:4428:13246":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:44573:3498":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:4082:104":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"4:2587:2753":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:4908:13298":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:8896:16335":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"4:940:2907":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"5:4855:220":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:44762:222":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"6:6913:14423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:12686:19756":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:7722:16246":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"4:6299:223":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:47891:8653":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:6086:13998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:5696:16169":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:5435:31491":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"4:7839:9063":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:21976:8629":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:11935:19235":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"8:0:2005":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:48259:8619":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:4578:13264":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:4453:2098":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:40693:3356":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"11:829:8986":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"9:237:9224":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:14057:20539":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"4:1759:9009":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"4:1903:9039":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"1:40482:3286":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:12281:19258":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:4949:15912":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"4:1820:2401":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"16:7318:16226":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:12831:19766":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:2964:2158":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:6691:14412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:41121:3322":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"4:7902:8979":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:8874:2236":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:8294:131":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:14515:20572":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:9846:209":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"4:5827:2132":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"11:2467:22361":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"4:11539:9127":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:48289:8621":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"4:7137:25620":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:2210:3187":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:46111:8644":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:533:9739":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:4444:2097":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"4:7645:8955":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:48015:8708":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:44120:3519":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:11743:16368":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"4:11390:25624":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"4:4641:25285":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:2722:15253":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:9651:16349":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:44248:3543":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:5859:13981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:7316:2257":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:5403:16160":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"14:31:15161":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:44641:3559":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:11236:16586":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:12423:19742":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:10113:16413":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:10968:3444":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"11:666:2924":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:2880:3200":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"4:9070:25269":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:41114:24186":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"4:11384:25635":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:43640:3442":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"4:6072:2759":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:12481:3536":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:5969:13989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:10371:16423":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"4:504:2705":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:44441:3552":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:4677:3258":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"4:11372:25399":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:7884:16253":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:12544:19748":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:13677:20511":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"15:288:15185":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:4506:13255":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:7324:213":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:1604:10641":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"4:10759:25391":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:12155:19249":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"4:2355:9048":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"4:11180:3558":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:43896:3522":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"4:10988:9244":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:7622:13487":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:42956:22264":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:48184:8614":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:12984:19775":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:8849:16334":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:6804:14416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"11:2479:31075":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:13086:19782":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:4543:13260":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"4:8937:9255":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:6781:10756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:11317:16579":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:2212:3188":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"4:3368:3326":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"6:1514:10631":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:1310:8991":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"4:482:2747":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:6361:16194":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:13803:20517":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"4:8552:9228":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"17:13216:19791":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:4399:2096":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"17:11087:16582":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"4:6898:2769":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:2969:15263":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:4613:15816":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:8167:16260":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:5588:16163":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"4:868:8980":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:7582:16239":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:40928:3364":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:9712:32250":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:4968:13304":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:39873:21413":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:40353:3265":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"11:1687:149":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:10629:16487":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"4:5973:2765":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:9618:32264":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:2670:15251":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:3299:2172":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:7436:16228":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"9:426:15033":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:4897:3314":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:41128:1922":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:40274:3245":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"4:11172:26540":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"4:12045:684":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"5:629:29153":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:2744:15254":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:2150:16464":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:48061:8659":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:7679:13494":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:7523:16234":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"9:507:15034":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:44163:3265":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"5:7483:9041":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:14164:20551":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:9004:16339":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:42435:92":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:14146:20549":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:6818:16214":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:9960:16390":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:4455:13090":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"15:0:2011":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:13923:20528":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:8875:2235":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:6128:14003":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:5044:13313":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:11245:16363":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"4:8454:9224":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"1:2958:2157":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"11:772:8981":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:4841:13289":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:7343:9693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:40545:3315":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:44369:3548":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:1501:10629":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:10085:16386":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"4:8536:9227":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"16:6696:15180":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:48175:8613":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:10317:16431":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"11:796:2728":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:10457:16450":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"4:10769:9061":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:23316:3016":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:6204:16185":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"11:1869:8993":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:3728:2926":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:4344:15715":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:42201:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:6798:14415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:3116:2165":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:13694:20500":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:7067:31271":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:45856:8636":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:2832:15258":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"5:1296:2911":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:13839:20520":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:9489:32256":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:1664:10645":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"4:9015:26566":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:6721:16211":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"4:4493:9171":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:46549:8713":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:40734:3359":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:6456:16200":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:4401:2714":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:23761:239":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:2875:3124":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"17:3232:16498":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:41984:2924":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"11:2165:15147":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:46600:21184":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:35:2682":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"14:40:19235":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"4:3737:9125":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"4:12057:1683":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"17:14317:20558":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:4010:2708":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:1639:10643":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:40650:20729":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:256:32265":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:13011:19777":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:2894:2144":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:7302:28993":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:10727:16538":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:2657:119":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"11:1525:15153":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:13229:19792":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:11273:16587":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:40715:3357":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"15:306:15186":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"4:4908:9195":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:40452:21193":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11887:19233":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:14174:20552":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"4:0:1515":{"crate_id":4,"path":["std"],"kind":"module"},"17:12474:16541":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:13041:19779":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:12137:19248":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:11640:16364":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"4:12038:335":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"1:40774:3345":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"4:6985:26336":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"4:3280:9108":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:7916:26454":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"5:7496:9042":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:4462:15785":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:32400:2096":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"16:8097:16256":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:6792:16213":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"4:7541:26337":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"11:324:31078":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"4:10740:9199":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"4:6468:2133":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:4:1099":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"4:7755:9028":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:2305:15235":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"0:31:1781":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"1:32393:22632":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:40552:3338":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:13547:20504":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"11:2085:8990":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:30600:3176":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:11992:19238":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:43589:24179":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"4:7879:133":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"17:10917:16499":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"4:8829:9243":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"4:11309:25712":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"4:10946:25349":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:2668:131":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"5:7292:2698":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"4:6545:2130":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"4:12041:1609":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"4:3996:9135":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:9842:3409":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:7065:2265":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:10013:16349":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:6934:14425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:40525:3310":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"4:8815:9242":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"16:7862:16252":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:30792:21268":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:23161:187":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:41992:2925":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:46133:8650":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:14470:20569":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"4:638:8959":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"4:12016:25691":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:9824:16375":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"4:10340:2940":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"11:298:2904":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:22170:9069":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:5075:13316":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:13950:20529":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:41975:167":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"17:12087:19244":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"11:1072:31083":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"18:636:32277":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:6120:14002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:43658:2952":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:2698:28995":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:9781:16352":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:2321:15236":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:10662:16535":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"18:609:32303":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"18:521:20610":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"4:1970:200":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:22413:21948":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:9391:132":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:7474:16230":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:13877:20523":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"11:731:8984":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:6401:16197":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:6600:16209":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:4686:13274":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:21153:3211":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:44110:3520":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:1632:10642":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:4870:13293":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:12599:19751":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:44050:3523":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"6:483:9733":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:42676:3408":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:45948:8643":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:7702:14986":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:3677:2686":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:10024:16350":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"4:4702:9197":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:12672:19755":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:1763:22273":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:21437:8627":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"4:1041:8989":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:45880:8672":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:475:9732":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:1691:10648":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:4932:13301":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:22197:21879":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"4:1073:8991":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"4:919:8984":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:22328:8755":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"11:1862:8992":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:23068:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:21827:8633":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:13982:20532":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:4938:844":{"crate_id":1,"path":["core","iter"],"kind":"module"},"4:3938:9130":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:2596:15248":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:7620:2732":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:5992:13992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:13203:19790":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:2911:2145":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:6059:13995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:10617:16486":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:11138:16552":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"4:4639:25283":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"5:1281:8990":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:11846:16600":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:12791:19764":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"4:7690:2778":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"16:7492:16231":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:2987:2163":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:7833:2078":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:21416:9069":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:2889:2147":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:4800:13284":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:3282:257":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:489:9734":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:8927:16336":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:3065:15266":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:5866:16176":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:44014:3526":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:11368:16556":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:7513:16233":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"4:8546:2924":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"16:8115:16257":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:7621:16241":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"7:78:15009":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:47017:8640":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:10479:16475":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"4:8309:9169":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"4:8138:3321":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"5:4356:267":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:9868:16377":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:2209:16449":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:4859:22714":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:12971:19774":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:6415:16198":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:3209:214":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"4:357:8953":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"4:12051:1628":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"4:12037:1136":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:41741:22266":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:44577:3502":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:10241:16395":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:7462:16229":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:4389:2095":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:4998:13307":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:6687:16210":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"11:423:31084":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:4742:9146":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:7509:2724":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:7517:2086":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"17:9138:16315":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:43440:3463":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"13:110:31135":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:4105:3248":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:46010:8678":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:13102:19783":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:1546:10635":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:5955:13946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:23037:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:12112:19246":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:13967:20530":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:21190:24261":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:5905:16177":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:785:2689":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:4860:13292":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:6560:2673":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"4:9165:26553":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:40682:3365":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"4:9469:132":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"4:3982:9133":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"4:5397:9235":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"11:1876:8994":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"11:2394:2728":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:13891:20524":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:2538:2974":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"4:4627:9135":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"4:5053:26544":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:14069:20540":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"13:0:2004":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:42554:2122":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:22700:3017":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:1490:8982":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"4:2623:9094":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:7006:16222":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:6960:16220":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"4:5310:123":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"16:4921:15908":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:1382:96":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"5:3602:2925":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:14379:20563":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:8714:16330":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:7568:16238":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:3589:2924":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:11024:16502":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:5921:13987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:7171:3347":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:12152:3534":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"4:10970:25681":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:2644:15250":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:14157:20550":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:14091:20543":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:4434:13247":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"4:11160:9243":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"4:9027:25987":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"4:4161:9162":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:3186:8993":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:1558:10636":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"4:5130:207":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"16:4527:15802":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:501:9736":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:588:9747":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:4584:13265":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"4:4233:9165":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:44145:3266":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:46151:8656":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:43816:3517":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"17:12485:16542":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:41655:164":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:7235:21541":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:11125:16553":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:2907:15261":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:14034:20537":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:2877:109":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"4:7896:122":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"4:7733:8965":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:2012:16430":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:4724:13277":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:8826:16333":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:11486:3457":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"4:8331:9200":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:6243:16187":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:21207:24255":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:1126:2918":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:9565:16347":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:5384:16159":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:5867:2708":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:22714:3015":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:40361:3245":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"11:2487:31076":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:12999:143":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"6:4473:13251":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:6341:9260":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"14:165:15162":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:40702:3342":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:10812:3459":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"4:5242:206":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"11:2058:8989":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:40289:3272":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"18:538:20615":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:5017:15932":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:12935:19771":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:8195:16262":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:3986:2714":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"4:8238:9121":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:39561:215":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"4:12032:395":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"4:4571:9188":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:9840:3408":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"16:3888:15331":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:7041:31164":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"4:11595:9273":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"4:6148:2761":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"4:3165:26465":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:7287:3318":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"16:6844:16215":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"4:7932:2926":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:11202:16549":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:7534:16235":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"4:11614:15194":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:5823:3341":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:4824:13287":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:12185:19251":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:14025:20536":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"11:1145:8991":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:6682:9616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"4:12035:1644":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"4:10540:9108":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:8954:16337":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:12712:19758":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"4:4131:25626":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:4497:15796":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:119:9414":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:11688:16365":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:4248:1919":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:44420:3550":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:5052:13314":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:7701:3337":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:6332:16191":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:42981:3201":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"16:5798:16174":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:9488:24834":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"11:703:8983":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:9103:16314":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:11063:16580":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:14421:20565":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}