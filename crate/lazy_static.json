{"root":"0:0:2393","crate_version":"1.5.0","includes_private":false,"index":{"1:13859:26947":{"id":"1:13859:26947","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12652:492","self::pattern":"1:13453:3810"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13790:22527":{"id":"1:13790:22527","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12652:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44704:3838","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13786:26929":{"id":"1:13786:26929","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13785:26928","str::split_at_mut_checked":"1:13788:26933"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13787:26932":{"id":"1:13787:26932","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13788:26933"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5713:2738":{"id":"5:5713:2738","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13877:26857":{"id":"1:13877:26857","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1148:37207"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5715:31432":{"id":"5:5715:31432","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13880:30718":{"id":"1:13880:30718","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5068:30718"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:45033:3577","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13876:26680":{"id":"1:13876:26680","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13766:30696":{"id":"1:13766:30696","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13777:25787":{"id":"1:13777:25787","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42736:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5711":{"id":"5:5711","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5712:31431","5:5713:2738","5:5715:31432","5:5717:31433","5:5725:31434","5:5726:31435","5:5727:3542","5:5728:26683","5:5729:26682"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13793:22525":{"id":"1:13793:22525","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13794:22526"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:45008:3840","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13882:3555":{"id":"1:13882:3555","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5069:3555"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:45042:3556","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13808:2840":{"id":"1:13808:2840","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42736:203","prim@char":"4:12652:492","self::pattern":"1:13453:3810"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13867:30716":{"id":"1:13867:30716","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12652:492","self::pattern":"1:13453:3810"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13836:30704":{"id":"1:13836:30704","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this\nstring slice, yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:13453:3810","`DoubleEndedIterator`":"1:8394:134","prim@char":"4:12652:492","str::matches":"1:13834:2610"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44956:3848","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13795:29403":{"id":"1:13795:29403","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44988:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13792:25671":{"id":"1:13792:25671","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"Returns an iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44720:3235","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13873:26854":{"id":"1:13873:26854","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40630:3522","Self::is_ascii":"1:13872:26684"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40630:3522","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5727:3542":{"id":"5:5727:3542","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13798:25230":{"id":"1:13798:25230","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12652:492","self::pattern":"1:13453:3810"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13857:26462":{"id":"1:13857:26462","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12652:492","self::pattern":"1:13453:3810"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13794:22526":{"id":"1:13794:22526","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13793:22525"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:45017:3836","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13884:28107":{"id":"1:13884:28107","crate_id":1,"name":"substr_range","span":null,"visibility":"public","docs":"Returns the range that a substring points to.\n\nReturns `None` if `substr` does not point within `self`.\n\nUnlike [`str::find`], **this does not search through the string**.\nInstead, it uses pointer arithmetic to find where in the string\n`substr` is derived from.\n\nThis is useful for extending [`str::split`] and similar methods.\n\nNote that this method may return false positives (typically either\n`Some(0..0)` or `Some(self.len()..self.len())`) if `substr` is a\nzero-length `str` that points at the beginning or end of another,\nindependent, `str`.\n\n# Examples\n```\n#![feature(substr_range)]\n\nlet data = \"a, b, b, a\";\nlet mut iter = data.split(\", \").map(|s| data.substr_range(s).unwrap());\n\nassert_eq!(iter.next(), Some(0..1));\nassert_eq!(iter.next(), Some(3..4));\nassert_eq!(iter.next(), Some(6..7));\nassert_eq!(iter.next(), Some(9..10));\n```","links":{"`str::split`":"1:13812:26934","`str::find`":"1:13805:2882"},"attrs":["#[must_use]","#[unstable(feature = \"substr_range\", issue = \"126769\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["substr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Range","id":"1:40309:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:2399":{"id":"0:29:2399","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[179,0],"end":[182,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"5:5729:26682":{"id":"5:5729:26682","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13876:26680"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:2393":{"id":"0:28:2393","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[161,0],"end":[173,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"1:13788:26933":{"id":"1:13788:26933","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13787:26932"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13862:30714":{"id":"1:13862:30714","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12652:492","self::pattern":"1:13453:3810"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5726:31435":{"id":"5:5726:31435","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:299:2751","`String`":"5:7774:257"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:299:2751","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13783:30699":{"id":"1:13783:30699","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12658:1772","str::slice_mut_unchecked":"1:13784:30700","crate::ops::Index":"1:40277:2820"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13878:26858":{"id":"1:13878:26858","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1148:37207"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13800:26945":{"id":"1:13800:26945","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"4:12652:492","self::pattern":"1:13453:3810"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13852:30712":{"id":"1:13852:30712","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12652:492","self::pattern":"1:13453:3810"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13482:3824","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13764:2841":{"id":"1:13764:2841","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:2400":{"id":"0:31:2400","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[206,0],"end":[208,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\nuse lazy_static::lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13819:30702":{"id":"1:13819:30702","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:13453:3810","str::split":"1:13812:26934","prim@char":"4:12652:492","`DoubleEndedIterator`":"1:8394:134","str::rsplit_terminator":"1:13821:30703"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44784:3850","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13844:30707":{"id":"1:13844:30707","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13855:30713":{"id":"1:13855:30713","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12652:492","self::pattern":"1:13453:3810"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13785:26928":{"id":"1:13785:26928","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13787:26932","str::split_at_mut":"1:13786:26929"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13872:26684":{"id":"1:13872:26684","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13839:30705":{"id":"1:13839:30705","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:13453:3810","`DoubleEndedIterator`":"1:8394:134","prim@char":"4:12652:492","str::rmatch_indices":"1:13841:30706"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44884:3841","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13765:30695":{"id":"1:13765:30695","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5725:31434":{"id":"5:5725:31434","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5717:31433":{"id":"5:5717:31433","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13779:25788":{"id":"1:13779:25788","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5728:26683":{"id":"5:5728:26683","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13875:26681"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2393":{"id":"0:0:2393","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[208,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\nuse lazy_static::lazy_static;\n\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\nuse lazy_static::lazy_static;\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.5.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:2399","0:31:2400","0:28:2393"],"is_stripped":false}}},"1:13773:352":{"id":"1:13773:352","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13774:26909","`u8`":"4:12671:1903"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13814:22510":{"id":"1:13814:22510","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nDiffers from the iterator produced by `split` in that `split_inclusive`\nleaves the matched part as the terminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12652:492","self::pattern":"1:13453:3810"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:13240:3783","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13771:26851":{"id":"1:13771:26851","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12976:3828"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13846:30708":{"id":"1:13846:30708","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13826:26941":{"id":"1:13826:26941","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning at\nmost `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12652:492","str::splitn":"1:13824:26939","self::pattern":"1:13453:3810"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44856:3777","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13841:30706":{"id":"1:13841:30706","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13453:3810","`DoubleEndedIterator`":"1:8394:134","prim@char":"4:12652:492","str::match_indices":"1:13839:30705"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44902:3842","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13797:22529":{"id":"1:13797:22529","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:45026:3834","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13851:30711":{"id":"1:13851:30711","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13802:26946":{"id":"1:13802:26946","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12652:492","self::pattern":"1:13453:3810"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13831:26944":{"id":"1:13831:26944","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13791:22538":{"id":"1:13791:22538","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12652:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44710:3837","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13865:30715":{"id":"1:13865:30715","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12652:492","self::pattern":"1:13453:3810"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13796:30701":{"id":"1:13796:30701","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44998:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13784:30700":{"id":"1:13784:30700","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12658:1772","crate::ops::IndexMut":"1:3628:2821","str::slice_unchecked":"1:13783:30699"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13870:30717":{"id":"1:13870:30717","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:13412:149","`FromStr`":"1:13411:3310"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:13411:3310","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13411:3310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13821:30703":{"id":"1:13821:30703","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:13453:3810","str::split":"1:13812:26934","prim@char":"4:12652:492","str::split_terminator":"1:13819:30702"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44802:3849","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5712:31431":{"id":"5:5712:31431","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:299:2751","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:299:2751","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13772:30698":{"id":"1:13772:30698","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13762":{"id":"1:13762","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13763:1027","1:13764:2841","1:13765:30695","1:13766:30696","1:13768:30697","1:13771:26851","1:13772:30698","1:13773:352","1:13774:26909","1:13775:2398","1:13777:25787","1:13779:25788","1:13781:25789","1:13783:30699","1:13784:30700","1:13785:26928","1:13786:26929","1:13787:26932","1:13788:26933","1:13790:22527","1:13791:22538","1:13792:25671","1:13793:22525","1:13794:22526","1:13795:29403","1:13796:30701","1:13797:22529","1:13798:25230","1:13800:26945","1:13802:26946","1:13805:2882","1:13808:2840","1:13812:26934","1:13814:22510","1:13816:26937","1:13819:30702","1:13821:30703","1:13824:26939","1:13826:26941","1:13829:26943","1:13831:26944","1:13834:2610","1:13836:30704","1:13839:30705","1:13841:30706","1:13844:30707","1:13846:30708","1:13848:30709","1:13850:30710","1:13851:30711","1:13852:30712","1:13855:30713","1:13857:26462","1:13859:26947","1:13862:30714","1:13865:30715","1:13867:30716","1:13870:30717","1:13872:26684","1:13873:26854","1:13874:26685","1:13875:26681","1:13876:26680","1:13877:26857","1:13878:26858","1:13879:26859","1:13880:30718","1:13882:3555","1:13883:30719","1:13884:28107"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13775:2398":{"id":"1:13775:2398","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42736:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13774:26909":{"id":"1:13774:26909","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12671:1903"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13848:30709":{"id":"1:13848:30709","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13812:26934":{"id":"1:13812:26934","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:13453:3810","`DoubleEndedIterator`":"1:8394:134","prim@char":"4:12652:492","str::split_whitespace":"1:13793:22525","str::rsplit":"1:13816:26937"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44734:3779","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13874:26685":{"id":"1:13874:26685","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13834:2610":{"id":"1:13834:2610","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within the\ngiven string slice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:13453:3810","`DoubleEndedIterator`":"1:8394:134","prim@char":"4:12652:492","str::rmatches":"1:13836:30704"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44938:3847","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13875:26681":{"id":"1:13875:26681","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13879:26859":{"id":"1:13879:26859","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1148:37207"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13816:26937":{"id":"1:13816:26937","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:13453:3810","`DoubleEndedIterator`":"1:8394:134","prim@char":"4:12652:492","str::split":"1:13812:26934"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44752:3775","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13805:2882":{"id":"1:13805:2882","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42736:203","prim@char":"4:12652:492","self::pattern":"1:13453:3810"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13768:30697":{"id":"1:13768:30697","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13766:30696"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13850:30710":{"id":"1:13850:30710","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13781:25789":{"id":"1:13781:25789","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13883:30719":{"id":"1:13883:30719","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5066:30719"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:45051:3576","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13763:1027":{"id":"1:13763:1027","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12652:492"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13829:26943":{"id":"1:13829:26943","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13824:26939":{"id":"1:13824:26939","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby a pattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12652:492","self::pattern":"1:13453:3810","str::rsplitn":"1:13826:26941"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44838:3781","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:45689:231":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"17:14776:20839":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:22142:26029":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"16:8623:17221":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:2908:207":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"4:12603:26560":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"5:7510:9430":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"4:2344:3490":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"4:4925:9613":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:545:10190":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:5196:14183":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:5051:14172":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:2682:16199":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:6121:3547":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:5241:14188":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:6547:9702":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"4:4185:9573":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"4:953:3184":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:14690:20835":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:41417:3226":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:46970:8977":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"4:5873:9684":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"6:5295:14195":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:11994:3776":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:8176:17206":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:8243:14399":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:41333:3614":{"crate_id":1,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"17:11552:17383":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:40233:2819":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"16:2818:16205":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"4:5575:133":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"4:6605:232":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:1494:11082":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:14746:20838":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:10815:17309":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"6:5387:14207":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"4:8738:9636":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:3524:17478":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:3411:2795":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"4:12253:16145":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:14971:20852":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:2914:214":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:15595:21572":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"4:9424:26495":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:8582:17218":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:4890:14153":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:6441:14921":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:22686:26040":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:33033:3434":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"4:6454:3245":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"10:0:2637":{"crate_id":10,"path":["adler"],"kind":"module"},"16:8525:17215":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:14373:17523":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:46999:9032":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:6366:17132":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:46818:9004":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:16315:21638":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:7806:24996":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:13021:17574":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"4:10889:9553":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"5:4473:281":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:11883:3780":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:15534:21581":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"4:974:9412":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"4:4848:26580":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"4:9209:9674":{"crate_id":4,"path":["std","pipe","PipeReader"],"kind":"struct"},"6:4792:14145":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"4:6087:2772":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:13243:17321":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:10919:3749":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:42734:206":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"17:11112:33503":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:42674:3677":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"4:8559:3654":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"1:33494:2794":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:42512:3674":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:46850:8970":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:16828:21817":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"6:1690:11102":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:8281:3667":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"4:988:9415":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"4:3426:9554":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:16717:21808":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:47323:9001":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:33003:2747":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:8447:2749":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:45740:3912":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"4:8642:9564":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:6459:14923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"4:11050:9638":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:44580:3242":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:14258:20811":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"4:12656:351":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"4:8965:9668":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"5:884:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:5405:14209":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:43845:22490":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:7156:17169":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"4:3560:3658":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"18:765:21841":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:0:527":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"6:7580:15369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:41747:3648":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:2618:16196":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:6157:17124":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:16329:21639":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:2770:16203":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:15001:20854":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:3965:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"5:2810:30330":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:16658:21804":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"5:7872:9762":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:42770:3179":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:34190:2798":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:34949:2808":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:155:16163":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:43042:3178":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"6:8326:15938":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:1535:3179":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"15:327:16141":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:14389:3247":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:44720:3235":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:2258:133":{"crate_id":4,"path":["std","ffi","os_str","Display"],"kind":"struct"},"17:16211:21630":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:6668:198":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:13630:17270":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:15699:21589":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:14152:20325":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"4:8653:9561":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"4:4803:9631":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:45390:3852":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"11:859:9417":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:14845:20843":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:43050:3179":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"4:8713:9564":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:1382:9419":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"4:8166:9391":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:7549:9429":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:16051:21622":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:41353:3599":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:41464:3636":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:4954:16770":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:1366:9418":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:6631:14934":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:12035:3781":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"4:9543:2785":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:12008:17400":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:2964:16212":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:11269:17355":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:14585:20827":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:14081:20320":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:10441:3743":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:10667:17305":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"4:2025:9473":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"17:13079:17580":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"4:11090:26516":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"17:14431:20818":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:3327:2723":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"17:14190:20328":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:13399:17328":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"7:78:15961":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:8230:17209":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"4:7915:26640":{"crate_id":4,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"1:42714:3679":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:13231:17582":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"16:6678:17142":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"1:47291:22256":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:7990:15739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:2810:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"4:2811:9544":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:5280:16866":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:4842:16750":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"11:1871:9410":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:15624:21586":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:2167:9433":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:13648:17338":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:14545:20824":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:41539:3641":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"4:12651:1208":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"4:8616:3646":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"11:851:9416":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:4776:2709":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:12725:17562":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:12072:16098":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:13971:20312":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:4239:16285":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:4850:2717":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:22188:26038":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"4:5022:9591":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:48249:8950":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:2702:16200":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:7835:17186":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:6756:14950":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"4:5716:9680":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"16:7539:33190":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"18:623:34188":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:6820:17150":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"6:4970:14162":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:7317:15355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:31358:22020":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"6:5494:14219":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:12621:17477":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:16791:21814":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"4:3328:29156":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"4:11604:9480":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:12146:17459":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"18:613:34185":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:8543:17216":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"4:1123:9419":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:41445:146":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:5381:14206":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:2872:213":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"4:436:197":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:5170:16848":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:23001:9088":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"16:7880:17187":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:7055:17167":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:4171:2846":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:16164:21626":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"4:11981:26544":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:23277:21902":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:7635:2854":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:23347:22389":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:2424:3234":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:2685:3484":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"4:1883:9445":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:44734:3779":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:41723:3646":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"4:9551:174":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"17:10733:17307":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"4:11116:26522":{"crate_id":4,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:5136:3569":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:10634:17273":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:44551:3770":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"4:3590:3547":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"16:8480:17213":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:16068:21624":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"4:2511:9491":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"4:9385:26489":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:13983:20313":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:7248:30323":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:11458:17350":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:7627:2846":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:10766:17308":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"11:776:3184":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:3571:2724":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:586:10196":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:13133:17586":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:22648:9507":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"11:2533:32914":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:5265:14191":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:6523:14927":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:8040:33268":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:22963:9087":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:45477:3822":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:23651:21944":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"1:7857:3651":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"4:619:3201":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"12:0:2639":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:11564:17377":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:32945:249":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"4:9505:2775":{"crate_id":4,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"16:6873:17155":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:6695:14942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:40197:2817":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:41473:22441":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:47817:8974":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:6679:14940":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:11643:17317":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"4:12650:436":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"1:23410:22405":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:41157:3577":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"4:8152:9390":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:1584:11092":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:6901:17157":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:8317:17212":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:6148:2769":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:45026:3834":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:22259:8953":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:6747:17146":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"11:423:32922":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:15144:20864":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:10975:33500":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"4:5130:9632":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:12643:17317":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:41588:3645":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"4:4838:9575":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:8030:3654":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"4:6898:2780":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:11814:17395":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:15659:21571":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"4:8276:9502":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"4:12038:26616":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"4:8568:9556":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"16:2988:16213":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:3792:268":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"4:3679:3587":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"6:5205:14184":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:14859:20844":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"18:589:22540":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:10898:151":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"4:11465:174":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"6:7524:15365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:38929:2813":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:14498:20822":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:43072:208":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"4:2521:9496":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"16:6438:17136":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:11356:33507":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:7984:15738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"4:10515:3216":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"16:2878:16208":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:5088:14175":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"4:3697:9505":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"4:4171:9572":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:48015:9020":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:6026:17116":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:11956:3775":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:6702:14943":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:14069:20319":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:16191:21628":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"4:5389:216":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"1:2687:3485":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"1:41104:3591":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:5415:16909":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:5740:17115":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:0:325":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:0:2643":{"crate_id":17,"path":["object"],"kind":"module"},"4:6295:232":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"4:896:3178":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"9:435:15982":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"4:6787:2550":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"1:22277:8954":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:12254:17465":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"4:8648:9563":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:45685:176":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:11825:17420":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:35122:2810":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:16802:21815":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"4:6132:2774":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:12969:17336":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:4984:14164":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:23109:9081":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"11:686:9412":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:44704:3838":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:8315:158":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:8225:14396":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:42753:185":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:31326:2547":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:5165:14181":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:3985:16225":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"1:41549:3642":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:14476:20821":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:11346:17320":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:15876:21604":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:44542:3771":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"4:9538:2784":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:2671:697":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"4:4436:9609":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:8272:14403":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:14057:20318":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:13856:20305":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"4:12672:1885":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"11:813:9414":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:3599:155":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:13608:17271":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:9447:3689":{"crate_id":1,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"4:11069:26595":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:10876:165":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:47663:8968":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:10840:3235":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:44956:3848":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:2433:16187":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:48157:8946":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:23454:21930":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:16417:21646":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"4:1643:9410":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:43394:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:6651:14937":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:47907:8980":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:485:10183":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:13000:17572":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"4:6778:2776":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:7519:2846":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:44693:3832":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:32946:251":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"16:7728:3687":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:3439:16220":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:5560:9740":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"4:9403:26494":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:2898:16209":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:13240:3783":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:11801:3779":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"16:6186:17126":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:7308:10062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:12103:17453":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"4:2032:813":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"6:5366:14204":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:46771:8998":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"4:707:9388":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:41598:3632":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:15198:20867":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:12588:17480":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"4:5682:9678":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"16:7072:17168":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"9:168:16087":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:13207:17614":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:13120:17318":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"4:7819:28847":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"1:11564:9507":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:10150:17290":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"11:1858:3178":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:12397:17521":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:14788:20840":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"4:919:2846":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"5:4127:3184":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:3712:3179":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:3063:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:10663:3732":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:32947:258":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:3540:2818":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"5:3699:3178":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:13553:17335":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"15:0:2641":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:3147:127":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:10667:3734":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:10524:17302":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"17:12187:17426":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:7553:15367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:4947:14159":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:23469:21932":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"17:16848:20314":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:11318:17319":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:7494:15363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"4:6967:2783":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:3364:3498":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:43833:22483":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"4:5946:9690":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:6513:9787":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"18:538:21854":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:11757:17392":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"4:8359:3180":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"4:10657:116":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:16631:20305":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"4:2096:210":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:14322:20813":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"4:4703:9613":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:16766:21812":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"16:7165:16131":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:48187:8948":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:10605:3587":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:3424:9553":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"4:12668:927":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"4:5343:26460":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:5462:14214":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"4:12087:3221":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:44988:3839":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"6:4957:14160":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:5617:14232":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:13819:20303":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"4:9513:3547":{"crate_id":4,"path":["std","sync","poison","Guard"],"kind":"struct"},"4:6502:26502":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:4871:16756":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"4:12675:1879":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"1:47740:9002":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:1703:11103":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:5604:14230":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:4921:14156":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"4:8298:9500":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:34776:2807":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:8090:2707":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"11:1862:2846":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:40630:3522":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:11222:23473":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"1:3576:2725":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"17:11502:17354":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"4:9292:9695":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:4990:14165":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"11:427:32923":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:6852:14979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:11063:33502":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:7413:17179":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:5058:16828":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:2142:3180":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:10623:156":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"4:2772:9533":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:13477:3826":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:40:9441":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:15324:21573":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"4:4384:9608":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:41956:3657":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:2229:3473":{"crate_id":1,"path":["core","ptr","metadata","metadata"],"kind":"function"},"1:41940:3655":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"5:1781:30257":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:14811:20841":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:7492:33183":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:6792:17148":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"5:4362:3178":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"4:4363:9606":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:11469:17351":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:47530:8985":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:6360:14854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:47509:8979":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:7987:17195":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:1521:11086":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:12946:3759":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:5356:454":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"16:6171:17125":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:3686:194":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"11:2507:32909":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:7762:17185":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:2122:696":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"18:96:21829":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:14396:20816":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:3822:25069":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"4:1639:3184":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"4:4255:9580":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:33004:3537":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:3315:277":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"6:4896:13985":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:2235:3230":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:5255:14190":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:12749:17564":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:12229:17463":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:6893:14981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:7551:17183":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"4:12171:9567":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:7398:33170":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"4:969:9411":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:3423:2803":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"4:11993:26547":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:11690:17369":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:7713:33236":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:3298:9422":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:570:10194":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:42778:2846":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:46918:9017":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:1632:9432":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"4:4591:9602":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"4:8797:9649":{"crate_id":4,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"1:3797:159":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:7569:30354":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"4:3334:29301":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:45485:3818":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:12242:17464":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:45033:3577":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:13700:17620":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:23548:9507":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:12049:3777":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:11151:17316":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:4701:2545":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"4:11585:3220":{"crate_id":4,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"1:3803:2825":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:894:33093":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"13:229:32940":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:45555:3883":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:1601:9412":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:8220:17208":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:3843:3180":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:596:17286":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"4:8694:9611":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:11915:17317":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"4:8629:3779":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"18:643:34172":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"4:699:9386":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:10296:25556":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:11395:17347":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:906:33095":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:23706:21949":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:46801:8999":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:10675:3737":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"4:11412:3882":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:41141:3576":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:44560:3240":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:6310:3628":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"4:2736:9542":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:44884:3841":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:6472:14882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:13163:3846":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:5127:14178":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:31705:208":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"5:6826:2846":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:13126:3845":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:6835:17151":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:7804:33245":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"4:1632:3178":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:14870:20845":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"18:581:3516":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:15801:21598":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:3809:2828":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:6590:14930":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:10673:3736":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:15186:20866":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:42927:3703":{"crate_id":1,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"11:808:9411":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:14369:3245":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"17:13052:17590":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"5:7762:9738":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:5377:16894":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"4:10810:26655":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"5:6030:3184":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"4:6279:3207":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"4:12657:1738":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"17:12298:17516":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"17:14598:20828":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:6878:14980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:14055:22659":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"1:43281:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:13157:17584":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:46932:8965":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:2413:16158":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:14443:20819":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:13066:17581":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"13:110:32939":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:8304:14407":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"4:12438:26666":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:2448:16188":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"4:4333:28873":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:6571:17138":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:1500:11083":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:5471:14215":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:4118:16233":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:4071:3184":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:22265:8957":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"4:12673:1891":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"1:47095:9018":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:32922:22623":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"5:5289:2769":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:34603:2806":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:13183:17579":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"4:1114:3160":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"4:1506:168":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:14955:20851":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:47613:22275":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"4:12678:1460":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"6:7326:15356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:12120:17431":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:11842:17406":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:3858:3183":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:41371:3621":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"4:9214:9675":{"crate_id":4,"path":["std","pipe","PipeWriter"],"kind":"struct"},"7:0:1957":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:8326:177":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"4:9236:9637":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"5:7750:9476":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"4:12655:1352":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:45008:3840":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:15074:20859":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:13219:17583":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"6:5025:14169":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"4:7501:26662":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:6911:17158":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"4:9528:246":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:36998:2811":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"4:789:166":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"4:4233:9576":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:13344:17325":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:13093:17373":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"4:8343:26371":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:538:10189":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:16403:21645":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"5:6274:3547":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"11:1866:3184":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"4:5696:9679":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"5:3324:9423":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"4:10935:3218":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"4:0:1764":{"crate_id":4,"path":["std"],"kind":"module"},"4:11161:9462":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"6:6727:14946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"18:706:3827":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"4:11174:9682":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"4:3371:9551":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"19:0:1327":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"4:12652:492":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"17:11616:17366":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:7337:15357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:16241:21633":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:23142:9080":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:12944:17560":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:22163:26032":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:15477:21579":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:1597:11094":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"4:3097:150":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:3043:3256":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:12619:3500":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"4:2339:151":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"1:45481:3816":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:5450:14213":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"11:292:3146":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"4:9321:9696":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:3874:132":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:3303:30479":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:45677:22549":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"5:724:30468":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:1711:11104":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:15102:20861":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:43468:2768":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:6850:17153":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:14413:20817":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:14665:20833":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:45359:3872":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"4:4243:9577":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:42790:3687":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"4:1919:9454":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"6:7439:15360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:23095:9507":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:15785:21596":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:15513:21580":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:48119:8944":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:11989:17414":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:31062:3257":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"16:7256:17172":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:13673:17619":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:5447:16918":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:6802:14952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:24260:248":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:6109:17121":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"13:0:2634":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:6513:14926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:23629:21942":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"4:8086:9507":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"5:3792:30257":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:12787:17535":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"4:8871:9664":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"6:5420:14210":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"4:10517:26524":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"4:6953:2782":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"6:7367:11226":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:8294:14406":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"4:8894:9665":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:15951:21611":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:41378:3625":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:299:2751":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:8278:14404":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:13876:20306":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:15733:21592":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:6864:17154":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:11053:17314":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:5111:16835":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:2588:16195":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:7539:3184":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:6416:14918":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"4:8271:9501":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"4:9351:9697":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:517:10186":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:47965:9035":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:43861:22493":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"1:45497:3819":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:10665:3733":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:13411:3310":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:7468:17182":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:47936:9014":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:13771:20301":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:12022:17454":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"4:11153:9636":{"crate_id":4,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"7:31:15954":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:41301:3612":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:45181:3866":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:15035:20856":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:10669:3735":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:16021:21619":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:11629:17365":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"4:12663:766":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"5:3448:9410":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:7424:15358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:1551:11089":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:10283:17294":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:40309:222":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"4:8959:3178":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"4:650:9383":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:44591:3766":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:1507:11084":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:5521:14222":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:48062:8939":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"4:9286:2846":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:13996:20314":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:6656:17141":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:13757:17622":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:14350:20815":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"17:14637:20831":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:45761:22664":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:43133:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:45505:3815":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:523:10187":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:47057:9006":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:10586:17115":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:12960:3761":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"18:515:21852":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"5:7738:9475":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:15985:21615":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"4:7889:26638":{"crate_id":4,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"17:14910:20848":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"4:8742:9640":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"4:5732:9681":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"1:47568:22274":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"4:10766:9685":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:2062:9188":{"crate_id":2,"path":["compiler_builtins","int","big","u256"],"kind":"struct"},"4:12669:933":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"6:5230:14187":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"4:940:9409":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:13436:17330":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:43566:3733":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:38984:2814":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"18:481:21850":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"4:6774:2549":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"11:1652:32927":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"4:11099:9503":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:15713:21590":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"4:8172:9461":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"4:5505:215":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"6:5623:14233":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:2504:16191":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:44998:3835":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"15:394:16148":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"11:2519:32911":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:23396:21916":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:5222:16854":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:680:17287":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:8118:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:2465:16189":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:8813:3666":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:14678:20834":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:8500:17214":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:13529:17334":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:2291:30357":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:42474:182":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"4:3937:9565":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:13014:17573":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:45682:163":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:41286:3617":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5007:14167":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:544:33031":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:46985:8983":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:23585:21938":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"5:6700:3184":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:11423:17348":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:41089:22174":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:3139:16218":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"5:4990:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:43921:3237":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"6:7407:11209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"4:4247:9578":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"11:2374:3179":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"4:12032:26615":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:8007:15740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:2453:17427":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"4:562:9382":{"crate_id":4,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"16:8093:17201":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"4:12677:1967":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"17:15088:20860":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:7013:17164":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:43816:3499":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"4:909:3179":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:2858:16207":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:2784:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"11:1878:9421":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:7098:9766":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"9:226:9664":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:479:10182":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:11014:33501":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:44710:3837":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:47110:8966":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:15908:21607":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"4:11145:26623":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"4:927:9408":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:4150:16242":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"14:164:16113":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"11:2323:9419":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:14710:20836":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:43573:3732":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:6981:17162":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:6737:14947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:31332:2745":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:5107:14176":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:3431:2805":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:40439:2826":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:7591:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:7741:3590":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:6398:14917":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:11084:23469":{"crate_id":1,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"4:4134:9571":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:2746:16202":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:23640:21943":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"5:7583:2846":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:11079:9499":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"6:6769:32690":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:15746:21593":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:23496:22406":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:8025:17198":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"4:9309:9693":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:7027:17165":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:4565:30270":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:8206:17207":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:7421:17180":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:12889:17567":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:42821:3688":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"4:11074:26597":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:12430:17495":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:22165:26034":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:15353:21574":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"9:49:16001":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:12898:17568":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:1411:9420":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:1489:11081":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:14454:20820":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:15677:17372":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"4:11917:9664":{"crate_id":4,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"11:357:3150":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:6197:3637":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:5417:1007":{"crate_id":1,"path":["core","iter"],"kind":"module"},"17:15013:20855":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:43900:150":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:45239:3867":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:45772:3911":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"16:5687:17112":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"4:10886:9551":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:15861:21602":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"4:6053:2770":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:22176:26035":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:3587:2748":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"4:12667:921":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"4:12150:9565":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:2422:17402":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:14039:20317":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:11728:17363":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"4:377:9379":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:23015:3484":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"17:16177:21627":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:7004:22453":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:43580:3734":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:15809:21599":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:5142:16843":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:23662:21945":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:38874:2812":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:13202:3844":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:8394:134":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:5271:14192":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:2156:3183":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:6505:14925":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:1667:11099":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:12093:17458":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:7220:17171":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:22790:8956":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"4:10892:9549":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"4:9834:151":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:42861:3683":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:41981:3661":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:3199:3527":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:42640:22197":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"11:763:9409":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:47139:8972":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"4:1654:9422":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:47241:22254":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:5630:14234":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:5134:3547":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:8175:15901":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:519:16160":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"11:1118:16103":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:7463:15362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:0:1032":{"crate_id":6,"path":["libc"],"kind":"module"},"4:9396:9367":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"4:11128:3206":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:44321:22504":{"crate_id":1,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"4:9533:247":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:12737:17563":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"4:3872:9562":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:40457:3550":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:13030:17538":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:12065:17457":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:10671:218":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:32929:2717":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"5:7527:9428":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"11:123:3143":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:12800:17534":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:4771:2708":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:34257:2802":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:10333:17296":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"4:8705:9601":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:6543:14928":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:47397:9013":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:3832:16223":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:10880:17312":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:3481:2809":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"17:16814:21816":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"6:5585:14229":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:5139:14179":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:45118:3862":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:42909:3704":{"crate_id":1,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"1:4413:3547":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"16:8720:150":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"4:9431:26496":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:6729:17145":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"4:8187:9462":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:5821:9765":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:45139:3863":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:16013:21618":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:23516:3313":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"18:573:34172":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:5640:14235":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"16:6939:17159":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"4:8976:9669":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:11995:17401":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:10860:17311":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"4:12619:28848":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:3401:2797":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:3628:2821":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"11:787:9410":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:10114:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:41048:3560":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:3837:115":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"4:1005:9416":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:4182:16251":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:7383:17178":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:11752:3178":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:1247:31890":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"4:2493:3473":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"6:4805:14146":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:4692:16669":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"4:1665:9424":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:41237:3580":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"17:15721:21591":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"14:201:9746":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"18:635:34189":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:6040:17117":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"11:1558:3166":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:8316:15937":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:1625:11095":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"4:11447:26601":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:44784:3850":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:6116:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"18:680:21844":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:3693:16222":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:6267:17129":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:1233:17370":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:7515:15364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:12331:17474":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:11743:17391":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:16203:21629":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:16288:21636":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:8148:17204":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"4:6816:2777":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:2344:30361":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"4:12624:9392":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:44938:3847":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"6:6390:14916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:12081:17428":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:912:202":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"9:470:15981":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:6422:14919":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"4:4852:26584":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"9:0:2636":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"4:7569:28874":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"5:7200:280":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"4:9846:3215":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"4:8438:9545":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:8708:17224":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:11667:17371":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:12907:17332":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:7074:9765":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:7334:17175":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:5179:9597":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:23695:21948":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"5:2261:30356":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:41404:3633":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"4:11430:9510":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"11:1885:9422":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:8666:17223":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:1623:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:7279:17173":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:16341:21640":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:10656:123":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"17:15062:20858":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"11:1898:9424":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:45531:135":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"6:1643:11097":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:10604:238":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"4:1944:3203":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"18:726:21847":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:41323:3615":{"crate_id":1,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"1:3322:261":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"4:11493:26604":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:14483:3916":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"4:4922:9635":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:12958:17570":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"4:12671:1903":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:4489:22626":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:5346:16886":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:47014:9038":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"4:9390:119":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"18:659:21842":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"0:28:2393":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"1:41149:3556":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:2043:3547":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"6:7562:15368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:10405:17298":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:7369:17177":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:8562:17217":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"4:6557:3207":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:12201:17461":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"5:1612:9413":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:2303:201":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:15995:21616":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:44838:3781":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:12063:3782":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:465:10180":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:11844:3783":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:15389:21575":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:22152:26029":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"16:6335:17131":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"4:12658:1772":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"4:1100:9418":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:7786:33237":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"11:481:166":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:44128:22502":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:6736:33091":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:6566:9703":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:14384:17524":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:47308:22257":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"4:9457:26501":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:45821:22574":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:42528:3675":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"5:284:30257":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:46833:8964":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:1001:3178":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:45273:3868":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:6858:14060":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:15763:21594":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:14834:20842":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"4:3467:9549":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:3124:16217":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:4869:14150":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:7977:17194":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"4:11165:9677":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"16:5755:32992":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:15868:21603":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:7390:11211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:8249:14400":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:6610:14932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:31347:3499":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:9484:3690":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:12318:17517":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"4:2534:9498":{"crate_id":4,"path":["std","fs","exists"],"kind":"function"},"4:8091:9381":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:13575:17336":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:45017:3836":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"18:698:21846":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:23618:21941":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"16:6606:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:43058:2846":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"6:5249:14189":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:1919:3433":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"4:8719:9604":{"crate_id":4,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:10479:17301":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:2948:16211":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:11868:17373":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"4:9841:9502":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"18:608:34199":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:10431:17299":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:2394:17442":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:23222:21899":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"4:3707:9527":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"6:7292:11037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"4:8687:3677":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:15817:21600":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:42762:3178":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:43207:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:48073:8940":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:7956:17192":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"4:8433:26374":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"1:46865:9000":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:6792:14951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:44136:22503":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"4:982:9414":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:4519:3547":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"4:9270:3178":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:12825:17530":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:13247:150":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"14:31:16112":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"4:4963:9586":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"4:683:9384":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:47160:8978":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:4767:233":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:12864:17531":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:11590:17368":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:6419:17135":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:12272:17514":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:4202:3179":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:15896:21606":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:8609:17220":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:4964:14161":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:6617:14933":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"4:5312:26460":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:978:9413":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"4:11404:26626":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:13947:20310":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:8102:17202":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:12373:17519":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"4:4725:9614":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"11:2099:9418":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:5117:14177":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:47078:9012":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:6915:30257":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:1352:17378":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:7946:17191":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"11:1579:16105":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:39039:2815":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"4:595:3198":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"5:214:3168":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:5057:14173":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:12924:17559":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:13585:17337":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"6:532:10188":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:12173:17460":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:4488:30270":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:15691:21588":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:11603:17367":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:5341:14201":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:10830:17310":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"1:4536:3558":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"4:8764:9588":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:16755:21811":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"14:186:16120":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"5:7797:9748":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:5288:14194":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:12878:17533":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:44623:3767":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:1573:9408":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:47368:9007":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:2787:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"4:4355:9605":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:7518:33188":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:12836:17566":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:11161:33504":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"18:507:34172":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:22385:8954":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:42937:222":{"crate_id":1,"path":["core","range","Range"],"kind":"struct"},"16:6300:17130":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:6586:17139":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"11:2115:3160":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:6237:17128":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:11776:3179":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"4:8577:3206":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"17:14307:20812":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:44106:169":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:5529:14223":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"18:531:21853":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:6687:14941":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:14365:17525":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:13195:17578":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"6:4976:14163":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:7774:257":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:40281:2822":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"11:750:9408":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:48172:8947":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:14212:3909":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"4:12676:996":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"4:11670:9479":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:3317:121":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:43875:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:45051:3576":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:41117:3583":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"4:12246:16145":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:10202:17292":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:7966:17193":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:22383:8955":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:7108:9767":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:15569:21582":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:12686:17482":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:4902:14154":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:7668:9399":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:40409:2824":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"17:11259:17318":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:12663:17484":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:6645:14936":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:8277:3668":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:5375:3620":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:10109:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"15:306:16137":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"4:8823:9663":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"11:2540:9399":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:16301:21637":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:11359:23474":{"crate_id":1,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"17:12035:17421":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:12077:3778":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:3585:16221":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"5:1520:3178":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:1885:9410":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:5725:17114":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:485:17285":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:23013:26267":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:12761:17537":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:10301:22741":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:1397:3160":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"18:670:21843":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:16005:21617":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"4:383:9380":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:11654:17318":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:13260:17322":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:23137:9082":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:45782:192":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:12990:17571":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"18:491:34171":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:2484:16190":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:46786:8963":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:41517:3640":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:3046:16215":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:15963:21612":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:7619:2846":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:15174:17336":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:44338:3764":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4875:14151":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:6254:33011":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:7302:17174":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:5083:16830":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"4:12653:1925":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"17:11939:17409":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"4:8909:9666":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"1:45566:3884":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:47177:8984":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"4:12670:914":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"5:5515:30257":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"4:9436:26497":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:48082:8941":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:3090:30486":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:15587:21584":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:44612:3625":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:5960:265":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:8295:17211":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:14924:20849":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:44802:3849":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:42982:224":{"crate_id":1,"path":["core","range","RangeFrom"],"kind":"struct"},"1:41203:3579":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"11:102:32916":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:13909:20308":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"14:159:16112":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:40331:224":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"4:9225:211":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"11:2440:9410":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"4:1867:722":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:10924:3750":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:4997:14166":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:3357:3535":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:32869:3521":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:44663:3244":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:4937:14158":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:33706:2793":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:41487:3638":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:40446:3533":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:43170:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:4927:16766":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:10255:17293":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"4:8335:9406":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"6:5375:14205":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:6887:17156":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:321:33095":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:13108:17317":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"4:6378:26646":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:12160:17430":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:14985:20853":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:6500:16157":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:6169:3191":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:1785:238":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"0:31:2400":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"1:43244:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:47862:9008":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:5044:14171":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"4:7471:26660":{"crate_id":4,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:44902:3842":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:7344:9640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:5550:14225":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"4:1011:9417":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"4:6895:2779":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:15844:21601":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:3925:9410":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:6810:3650":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"4:3934:9566":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"9:412:15984":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"4:4193:9574":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:5647:17095":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:41265:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:3558:128":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"4:11759:26657":{"crate_id":4,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"5:5564:9741":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:3012:16214":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:7347:33166":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:22206:8958":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"4:5139:9633":{"crate_id":4,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:3426:2804":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:14160:25642":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:3877:17501":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:4653:2727":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:13453:3810":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"4:12239:26555":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"9:490:15985":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:15640:21587":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:12547:3768":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"11:344:32919":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:12979:17561":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"4:12635:26619":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:23684:21947":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"6:5488:14218":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"4:1636:2846":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"4:8324:131":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:2568:16194":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"4:5222:9644":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"1:4501:22628":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"11:1001:3160":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"18:113:21830":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:14187:217":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"6:5568:14227":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:5611:14231":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"4:1132:9420":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"4:508:26642":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:12045:17455":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:22881:9085":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:10700:17306":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:5282:14193":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:3743:17483":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:4906:2719":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:42662:3676":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:13928:20309":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:41164:3578":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:13959:20311":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"4:3622:9504":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"1:46903:9011":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:13465:17331":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"1:11577:252":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:7904:17188":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:43318:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:6203:17127":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"9:345:15998":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:11540:17356":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"18:80:21828":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:23503:3314":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:11715:17364":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:41989:3663":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:23052:9089":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:45798:3919":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:13423:17329":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:15469:21578":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:0:585":{"crate_id":1,"path":["core"],"kind":"module"},"11:2126:9419":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:11328:33506":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:15128:20863":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:6460:17137":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"18:754:21848":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:2077:9187":{"crate_id":2,"path":["compiler_builtins","int","big","i256"],"kind":"struct"},"6:1696:9598":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:15611:21585":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:6710:14944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"16:6121:17122":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:4900:16762":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:40294:225":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:16029:21620":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:16380:21643":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"4:11251:26651":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"4:7022:245":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:13460:3825":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:11770:17393":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"11:2354:3178":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:6486:14883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:12133:17429":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"4:9500:199":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:15159:20865":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:6623:33072":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:40369:226":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:5334:14200":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:44643:3243":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"11:1542:16104":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:4829:14148":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:3042:9507":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:2918:16210":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"4:4140:9570":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:41455:3635":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:44334:22506":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"4:12664:782":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"1:23607:21940":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:44752:3775":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:44634:3773":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:6744:14948":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:14178:20327":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:14337:20814":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"16:8011:17197":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:5154:17585":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:23418:21917":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"18:598:34182":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:10571:17114":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"4:9587:9700":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:2129:2740":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"18:651:34172":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"4:8351:9543":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:22373:9507":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:22675:3762":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:8231:14397":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:47994:8986":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:8633:17222":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:9597:3825":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"8:0:2635":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:5707:17113":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:5664:14238":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:47642:22276":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"4:9863:131":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"6:6452:14922":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"4:8428:26373":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"4:3688:28906":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:6998:3630":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:22178:26037":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:6578:14929":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:7723:3617":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:31732:3516":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:22204:9507":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:1569:11091":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:15928:21609":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:3079:2906":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:11512:17355":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"4:537:9361":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:31294:2744":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:14110:20322":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:41426:3627":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:3782:2823":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:14730:20837":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:47270:22255":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:14137:20324":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:46953:8971":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:3306:16219":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"11:1136:9420":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:3075:272":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"17:2243:17408":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:3262:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"18:521:21849":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:14427:164":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"11:832:3154":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:4959:2721":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:13530:3856":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:6841:17152":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:5482:14217":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:12774:17536":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:46886:9005":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:16684:21806":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:22788:9507":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:11485:17352":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:12263:17466":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:4840:2716":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"4:2663:9541":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:13509:17333":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:40389:228":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"4:12666:939":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"4:9249:9686":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:578:10195":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"5:7559:9434":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"4:9569:9510":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"17:16650:21803":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:2834:3510":{"crate_id":1,"path":["core","clone","InitializingSlice"],"kind":"struct"},"1:11921:3784":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"10:36:32908":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"5:3086:30485":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"4:2509:9490":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"1:41962:3658":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"4:3373:9552":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:12409:17475":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:2228:3503":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"17:11210:33505":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"4:8806:9648":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:16219:21631":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"4:2348:9483":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"4:8330:9407":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:41127:3584":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:45338:3870":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:48210:8949":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:13328:17324":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:34324:2800":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:10821:33487":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"11:2525:32913":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:316:33094":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:6749:14949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"17:15048:20857":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:6719:14945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"11:2275:9418":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:2820:3509":{"crate_id":1,"path":["core","clone","CloneToUninit"],"kind":"trait"},"4:8623:3235":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"4:11206:9687":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:45707:219":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"6:8284:14405":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:11888:17404":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"4:12674:1897":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"18:718:21839":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:7916:17189":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:928:9426":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"4:8606:3633":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"6:5412:1279":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"4:12021:26551":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:45493:3821":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"14:0:2640":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:6638:14935":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:7009:22451":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:6406:17134":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:14624:20830":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:5069:14174":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:15792:21597":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"4:1996:9472":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"4:5932:232":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:42869:3702":{"crate_id":1,"path":["core","range","iter","IterRange"],"kind":"struct"},"17:12814:17565":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"4:963:9410":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:12575:17479":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"4:5939:3207":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:42961:226":{"crate_id":1,"path":["core","range","RangeInclusive"],"kind":"struct"},"1:44081:3752":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:5301:14196":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:909:3315":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"5:1582:9409":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:8134:17203":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:41947:2549":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"4:9278:9698":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:5328:17591":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"6:5477:14216":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"4:4850:26582":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"16:8055:17199":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:5019:14168":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:2794:16204":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:14165:20326":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:45748:3913":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:12357:17496":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:7284:10233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:6950:17160":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:901:33094":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"6:5539:14224":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:16359:21642":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:15884:21605":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:4816:14147":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:10884:169":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"4:8636:3839":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"1:13186:3843":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:15448:21576":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:8807:3588":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"4:12665:761":{"crate_id":4,"path":["std","f128"],"kind":"primitive"},"6:5311:14197":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:10455:17300":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"11:321:32917":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:42831:3691":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:1227:3170":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"4:9444:17184":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:22987:9507":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:45513:3882":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"10:44:16092":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"4:5870:9683":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"17:10553:17303":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:5217:14185":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"4:2495:9486":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:15937:21610":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:4842:14149":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:3079:271":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"16:7209:16130":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:3080:30487":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:8335:2750":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"11:1703:168":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:13482:3824":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:41933:22465":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:22134:3516":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"4:11393:9686":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:23434:21927":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:42496:3673":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"11:1892:9423":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:3291:3178":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:10965:17313":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:7355:17176":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:559:10192":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:1675:11100":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"4:7901:26639":{"crate_id":4,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"1:44491:22654":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:41042:3556":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:44097:3751":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:2877:147":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"6:5575:14228":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"4:1885:9446":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"16:7459:17181":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:8264:17210":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"11:1042:16102":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:13044:17575":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"4:1942:3202":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"17:15978:21614":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:5319:14198":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:778:264":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:4808:16739":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:6659:14938":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:1122:30257":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:5512:14221":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:10311:17295":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:473:10181":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:6142:17123":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:11794:17394":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:1514:11085":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:4621:2726":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"4:130:2548":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"17:10601:17304":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:15:2611":{"crate_id":1,"path":["core","write"],"kind":"macro"},"16:8595:17219":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:497:10185":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:43096:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:14940:20850":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:1530:11087":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:2364:30362":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:14650:20832":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"14:7:16112":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:4981:16774":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:13836:20304":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:23527:3312":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:5652:14236":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:33035:118":{"crate_id":1,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"4:6470:26650":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:7189:17170":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:7273:30327":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:1563:11090":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:3596:154":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:39618:2816":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:787:122":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:43002:238":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"17:13304:17323":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:5253:16862":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:12608:17476":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:11494:17353":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"1:43431:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:41574:3644":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:43883:3499":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"5:6746:30257":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:984:9427":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:14072:3908":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:4513:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"16:2638:16197":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"14:213:16121":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:7787:9747":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"14:40:20303":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:6995:17163":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:1211:31889":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:4292:3547":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"4:7877:26636":{"crate_id":4,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"1:33918:2796":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:43806:22478":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:45042:3556":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:48036:9041":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:3158:150":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"5:4552:3547":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"1:8499:190":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:41435:3634":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"4:4039:9567":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:7679:9400":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"4:1648:9421":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"0:29:2399":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"16:8162:17205":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:16730:21809":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"18:689:21845":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:45699:239":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"4:9477:26592":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:16838:20312":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:22925:9086":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"16:6062:17118":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"4:2341:9482":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"4:9262:9687":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"1:47209:9039":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"11:389:3152":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"0:0:2393":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"4:9336:9694":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"4:10674:3217":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:40349:227":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:2548:16193":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:40277:2820":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"11:2414:3184":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"4:10496:9454":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"16:7505:33185":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"4:9372:2773":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:42696:3678":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"4:12662:763":{"crate_id":4,"path":["std","f16"],"kind":"primitive"},"6:8237:14398":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"4:3517:9536":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"4:11380:9637":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:16613:20304":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:3069:175":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"6:5325:14199":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:3072:157":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"4:3095:238":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"17:14521:20823":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"4:9219:9685":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"4:11189:26533":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:45324:3869":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:12711:17550":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"4:10388:22194":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"4:4517:9610":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:15115:20862":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"4:5154:9634":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:41078:3582":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:22653:8960":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:3593:153":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"6:4929:14157":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:32915:17223":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"17:12287:17515":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:3082:30329":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:6779:17147":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:7575:17184":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:42852:3700":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:13795:20302":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"4:4967:9590":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:3066:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"4:2750:3800":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"4:12659:1862":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"17:16116:21625":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:15971:21613":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:7694:9478":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"18:0:2644":{"crate_id":18,"path":["memchr"],"kind":"module"},"4:8288:9503":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"4:7408:26635":{"crate_id":4,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"18:735:21840":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:14897:20847":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:44570:3772":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:491:10184":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"4:8586:9506":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"17:12447:17522":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:13360:17326":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:45509:3823":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"14:219:16122":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:5224:14186":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:14095:3638":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1:45489:3817":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:1727:11105":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:6711:17144":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:26660:283":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:7856:9410":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:41496:3639":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:11576:17373":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:6082:17119":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:4881:14152":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"4:8101:9371":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"11:0:2638":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:7740:3589":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"16:7997:17196":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:15456:21577":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:14558:20825":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:43587:3735":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:6096:17120":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:6638:17140":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"1:8852:25555":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:11855:17405":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:3108:16216":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:12214:17462":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:4:1292":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:41526:3629":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:5441:14212":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"4:8949:9667":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"15:288:16136":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:41252:3575":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:1591:9411":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:5428:14211":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:1684:11101":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"4:8124:3218":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"6:5658:14237":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:3396:2792":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"4:11137:26620":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:10062:17288":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:45349:3871":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"3:0:2633":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"4:2568:2568":{"crate_id":4,"path":["std","io"],"kind":"module"},"17:16350:21641":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:5503:14220":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"17:14093:20321":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:45168:3865":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"11:1063:32930":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"4:11109:152":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:23332:21905":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:12854:17333":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:1551:2846":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:16700:21807":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:16250:21634":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"4:6060:2771":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:13688:123":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"4:12110:9566":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:16525:20302":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"4:4371:9607":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:6500:14924":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"4:11272:26654":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"4:3061:3204":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:13489:17332":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:2579:3171":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"4:12679:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"1:13471:3827":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:16573:21802":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:12562:17481":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:23066:3484":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1:41505:3649":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"4:702:9387":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:45501:3820":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:47435:8967":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:5395:14208":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:14611:20829":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:34458:2801":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:45154:3864":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:1539:11088":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:5357:14203":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"6:5557:14226":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:15771:21595":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"11:983:9418":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"11:2206:16098":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:16058:21623":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:4764:16718":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:0:2642":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:564:10193":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:1632:11096":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:23362:21906":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:41733:3647":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:48093:8942":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:6602:14931":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:2838:16206":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:2159:1397":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"16:2528:16192":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"4:5802:9682":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"1:41558:3643":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:1657:11098":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:4157:30257":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:7445:15361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:32936:3532":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:44089:22495":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"4:7982:26558":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:14883:20846":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:48053:8938":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:11102:17315":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:16744:21810":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"16:6694:17143":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:12976:3828":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"11:1027:9419":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:5036:14170":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:2251:9361":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:8260:14401":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:16269:21635":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:41275:3613":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:4265:16288":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"9:318:16038":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:47028:8952":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:888:9425":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:4555:3559":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"4:4965:9589":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:3358:9424":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:16777:21813":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:3719:223":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:5349:14202":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"6:1589:11093":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:47480:8973":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:23596:21939":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"5:7710:9477":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:6428:14920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"4:8310:152":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"6:7430:15359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:16395:21644":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:42830:3692":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:10176:17291":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:7599:30363":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:13592:17343":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"4:3640:3205":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"4:11987:9689":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"11:2394:2846":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:15919:21608":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:2226:3502":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:44653:3774":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:48108:8943":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:41395:3626":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:34391:2799":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:10369:17297":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:16538:21801":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:41244:3581":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"5:4322:3547":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"4:7972:17287":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"4:12270:26664":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"4:8699:9612":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:13387:17327":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:7041:17166":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"4:8281:9499":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:4402:16402":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:45809:3917":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:44118:9664":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:47547:9034":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"4:2099:209":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:48134:8945":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"4:9674:3202":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:41313:3235":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"6:6670:14939":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"4:4199:9575":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:16230:21632":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:10661:133":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:43355:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:14021:20316":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:11901:17403":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:33036:278":{"crate_id":1,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"17:11963:17407":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:16672:21805":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"11:820:9415":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"11:2297:3160":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:4928:2720":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:22257:9507":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:11215:23471":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"11:2513:26044":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"4:11266:26653":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:5323:23434":{"crate_id":1,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"1:47224:9040":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"4:5748:116":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"1:22:845":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:12580:3769":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:44856:3777":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"4:3469:9550":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:12935:17569":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:16512:20301":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"6:5151:14180":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:2658:16198":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"4:8106:9372":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"16:5196:16851":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:13730:17621":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"4:1660:9423":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:8804:162":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:32911:22620":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:23673:21946":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"16:6967:17161":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"5:3337:30483":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:6387:17133":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:13892:20307":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:41971:3659":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:1483:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:23385:3311":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"4:5045:9585":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:8266:14402":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:14346:119":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"17:16040:21621":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:10132:17289":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"6:7539:15366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:6806:17149":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"18:563:21855":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"18:548:165":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"11:663:3179":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"11:2340:16106":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"16:3887:16224":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"4:999:3154":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:12055:17456":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"4:3331:29300":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:12385:17520":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:11438:17349":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:44680:3833":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:15578:21583":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:2722:16201":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:14122:20323":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"11:718:9413":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:8063:17200":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"9:380:15983":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:47192:9033":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:14571:20826":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"4:12007:26549":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:7935:17190":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:3332:9421":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"4:12227:9716":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"6:553:10191":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:47418:9019":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"11:649:3178":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:5414:9737":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"6:5186:14182":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"4:7250:9701":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:4897:2718":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:7962:10140":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"4:8027:26667":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:14008:20315":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:11200:17317":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:12344:17518":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"6:4914:14155":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"11:676:2846":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"11:1083:3162":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:42556:22476":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:5316:16879":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:45372:3851":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":33}