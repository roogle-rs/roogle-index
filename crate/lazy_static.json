{"root":"0:0:1590","crate_version":"1.4.0","includes_private":false,"index":{"1:13817:57408":{"id":"1:13817:57408","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:13331:2291","prim@char":"4:15904:1750"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6650:2973":{"id":"4:6650:2973","crate_id":4,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6651:54072"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3834:1983":{"id":"1:3834:1983","crate_id":1,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3836:52136"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6246:3042":{"id":"4:6246:3042","crate_id":4,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6247:56659","4:6248:36540","4:6249:56660","4:6250:56661","4:6251:56662","4:6252:56663"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10436:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3505:1970":{"id":"1:3505:1970","crate_id":1,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3507:183","1:3508:1243"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10562:110":{"id":"1:10562:110","crate_id":1,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10563:665"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13829:57410":{"id":"1:13829:57410","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"4:15904:1750"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:50041:2774","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9532:2052":{"id":"1:9532:2052","crate_id":1,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13729:55021":{"id":"1:13729:55021","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"4:15910:1755"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6846:3099":{"id":"4:6846:3099","crate_id":4,"name":"TcpStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6847:54324","4:6848:54325"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10436:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3363:215":{"id":"1:3363:215","crate_id":1,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13735:3733":{"id":"1:13735:3733","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:49996:2769","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13832:57411":{"id":"1:13832:57411","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"4:15904:1750"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:50059:2776","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13714:56888":{"id":"1:13714:56888","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12795:2925"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4145:2519":{"id":"1:4145:2519","crate_id":1,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4146:52904"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13785:57397":{"id":"1:13785:57397","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:13331:2291","prim@char":"4:15904:1750","str::matches":"4:15910:1755","`DoubleEndedIterator`":"1:8716:121"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:49964:2768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13356:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13755:55028":{"id":"1:13755:55028","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::split_whitespace":"4:15910:1755","`DoubleEndedIterator`":"1:8716:121","str::rsplit":"4:15910:1755","self::pattern":"1:13331:2291","prim@char":"4:15904:1750"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:49742:2726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2861:98":{"id":"1:2861:98","crate_id":1,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2863:50521"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3368:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2858:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3368:1878":{"id":"1:3368:1878","crate_id":1,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10569:120":{"id":"1:10569:120","crate_id":1,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10570:665"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9160:2496":{"id":"1:9160:2496","crate_id":1,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Step","id":"1:8196:2497","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13716:309":{"id":"1:13716:309","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"4:15921:1764","str::as_mut_ptr":"4:15910:1755"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3452:1959":{"id":"1:3452:1959","crate_id":1,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3454:183","1:3455:1111"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8741:1881":{"id":"1:8741:1881","crate_id":1,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8742:800","1:8743:2070"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3511:1971":{"id":"1:3511:1971","crate_id":1,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3513:183","1:3514:1246"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13724:50969":{"id":"1:13724:50969","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:11204:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11204:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:13825:2959":{"id":"1:13825:2959","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13715:57390":{"id":"1:13715:57390","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:3517:1972":{"id":"1:3517:1972","crate_id":1,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3519:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13782:1777":{"id":"1:13782:1777","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"4:15904:1750","str::matches":"4:15910:1755","self::pattern":"1:13331:2291","`DoubleEndedIterator`":"1:8716:121"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:49946:2767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3671:1977":{"id":"1:3671:1977","crate_id":1,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3673:183","1:3674:759"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3368:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"4:4472:2401":{"id":"4:4472:2401","crate_id":4,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4473:1778","4:4474:56534","4:4476:56535","4:4477:3656","4:4478:56536","4:4479:56537","4:4480:51396","4:4489:2100"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3653:1986":{"id":"1:3653:1986","crate_id":1,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3655:242","1:3656:208","1:3657:51297"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3462:1961":{"id":"1:3462:1961","crate_id":1,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3464:271"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23386:28379":{"id":"1:23386:28379","crate_id":1,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23387:52735","1:23388:52736","1:23389:52737"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:23379:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:5518:3057":{"id":"4:5518:3057","crate_id":4,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5519:53984","4:5520:54125"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5906:3382":{"id":"5:5906:3382","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5908:183","5:5909:437"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3368:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"4:6224:3039":{"id":"4:6224:3039","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6225:3345","4:6226:3346","4:6227:54133","4:6228:54166","4:6230:54170","4:6232:54167","4:6233:54168","4:6235:54169"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10436:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:6654:2970":{"id":"4:6654:2970","crate_id":4,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6655:56478"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9153:2494":{"id":"1:9153:2494","crate_id":1,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3446:1956":{"id":"1:3446:1956","crate_id":1,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3448:183","1:3449:563"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23237:2288":{"id":"1:23237:2288","crate_id":1,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:23227:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:39:1596":{"id":"0:39:1596","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:20:1725":{"id":"0:20:1725","crate_id":0,"name":"Lazy","span":{"filename":"src/inline_lazy.rs","begin":[19,0],"end":[19,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3375:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:8635:2506":{"id":"1:8635:2506","crate_id":1,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8637:2128"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13356:2294":{"id":"1:13356:2294","crate_id":1,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13358:2064","1:13359:53034","1:13360:53035"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"1:13350:2293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:5524:3050":{"id":"4:5524:3050","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5525:54481","4:5526:54482","4:5527:53984","4:5528:54483","4:5529:3345","4:5530:3346","4:5531:54484","4:5532:1316","4:5533:54485","4:5534:54486","4:5535:54487","4:5536:54488","4:5537:54489","4:5538:54490","4:5539:54491","4:5540:54492"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13717:55001":{"id":"1:13717:55001","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:15921:1764"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3436:1960":{"id":"1:3436:1960","crate_id":1,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3438:183","1:3439:1367"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13711:57389":{"id":"1:13711:57389","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"4:15910:1755"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13350:2293":{"id":"1:13350:2293","crate_id":1,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13352:2313","1:13353:929","1:13354:51095","1:13355:51096"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10845:2379":{"id":"1:10845:2379","crate_id":1,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10846:147","1:10847:13707","1:10848:51128"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3619:133":{"id":"1:3619:133","crate_id":1,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3621:183","1:3622:383"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5510:3056":{"id":"4:5510:3056","crate_id":4,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5511:53984","4:5512:57140","4:5513:57141"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8873:158":{"id":"1:8873:158","crate_id":1,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8874:2074","1:8875:929","1:8876:2076","1:8879:2077","1:8880:500","1:8882:2078","1:8885:2079","1:8886:2080","1:8887:2081","1:8888:2082","1:8890:2083","1:8892:2084","1:8893:2085","1:8895:848","1:8898:2086","1:8905:2087","1:8907:2088","1:8910:2089","1:8911:2090","1:8912:2091","1:8914:2092","1:8916:2093","1:8919:1320","1:8920:2094","1:8921:2095","1:8925:2096","1:8928:2097","1:8929:2098","1:8930:2099","1:8932:2100","1:8933:1888","1:8935:2101","1:8938:2102","1:8940:2103","1:8950:2104","1:8965:2105","1:8967:2106","1:8971:2107","1:8980:2108","1:8983:2109","1:8985:2110","1:8988:281","1:8995:299","1:9002:2111","1:9009:2112","1:9018:2113","1:9028:1021","1:9035:2114","1:9042:2115","1:9043:2116","1:9044:2117","1:9056:2118","1:9063:2119","1:9075:2120","1:9082:2121","1:9083:2122","1:9088:2123","1:9091:2124","1:9094:2125","1:9095:2126","1:9097:2127","1:9099:2128","1:9101:420","1:9104:2129","1:9107:1004","1:9110:2130","1:9113:609","1:9116:2131","1:9119:914","1:9121:833","1:9123:799","1:9125:718","1:9127:701","1:9129:2132","1:9130:2133","1:9138:2134"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3176:233":{"id":"1:3176:233","crate_id":1,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3178:128","1:3179:1429"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8196:2497":{"id":"1:8196:2497","crate_id":1,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8197:51439","1:8198:51440","1:8199:51437","1:8200:51433","1:8201:51441","1:8202:51438","1:8203:51436"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2883:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2962:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13767:57394":{"id":"1:13767:57394","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split":"4:15910:1755","self::pattern":"1:13331:2291","str::split_terminator":"4:15910:1755","prim@char":"4:15904:1750"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:49810:2761","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13356:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13764:57393":{"id":"1:13764:57393","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::rsplit_terminator":"4:15910:1755","prim@char":"4:15904:1750","`DoubleEndedIterator`":"1:8716:121","self::pattern":"1:13331:2291","str::split":"4:15910:1755"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:49792:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5580:3062":{"id":"4:5580:3062","crate_id":4,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5581:53984"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10512:2401":{"id":"1:10512:2401","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10513:1546","1:10514:51395","1:10516:51396"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8681:1882":{"id":"1:8681:1882","crate_id":1,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8683:2071","1:8685:2072","1:8686:2073"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13776:57395":{"id":"1:13776:57395","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47779:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13705":{"id":"1:13705","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:12784:1352","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:13706:800","1:13707:2070","1:13708:57387","1:13709:57388","1:13711:57389","1:13714:56888","1:13715:57390","1:13716:309","1:13717:55001","1:13718:1595","1:13720:50967","1:13722:50968","1:13724:50969","1:13726:3122","1:13727:57391","1:13728:55020","1:13729:55021","1:13730:2794","1:13731:2320","1:13732:3125","1:13733:14306","1:13734:14344","1:13735:3733","1:13736:57392","1:13737:14335","1:13738:53829","1:13741:55037","1:13744:55038","1:13747:2111","1:13751:2069","1:13755:55028","1:13758:13916","1:13761:55031","1:13764:57393","1:13767:57394","1:13770:55033","1:13773:55035","1:13776:57395","1:13779:57396","1:13782:1777","1:13785:57397","1:13788:57398","1:13791:57399","1:13794:57400","1:13796:57401","1:13798:57402","1:13800:57403","1:13801:57404","1:13802:57405","1:13805:57406","1:13808:33666","1:13811:55039","1:13814:57407","1:13817:57408","1:13820:57409","1:13823:2647","1:13825:2959","1:13826:54285","1:13827:54286","1:13828:54287","1:13829:57410","1:13831:3088","1:13832:57411"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:38:1590":{"id":"0:38:1590","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"},"1:13734:14344":{"id":"1:13734:14344","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"4:15910:1755"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:50025:2772","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:9155:3093":{"id":"4:9155:3093","crate_id":4,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:9156:57159","4:9157:57160","4:9158:57161","4:9159:57162","4:9160:57163","4:9161:28784","4:9162:57158"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10436:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:14455:142":{"id":"1:14455:142","crate_id":1,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14456:282","1:14457:523","1:14458:285","1:14459:1088"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8716:121":{"id":"1:8716:121","crate_id":1,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8717:2064","1:8718:2065","1:8719:2066","1:8720:2067","1:8724:2068","1:8727:2069"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3521:1973":{"id":"1:3521:1973","crate_id":1,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3523:359"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6163":{"id":"5:6163","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5976:1352","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6164:58046","5:6165:2896","5:6168:58047","5:6171:58048","5:6183:58049","5:6184:58050","5:6185:3021","5:6186:54283","5:6187:54284"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13707:2070":{"id":"1:13707:2070","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23434:2440":{"id":"1:23434:2440","crate_id":1,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdElement","id":"1:24071:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23425:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3180:232":{"id":"1:3180:232","crate_id":1,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3182:128","1:3183:1428"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13737:14335":{"id":"1:13737:14335","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:50034:2773","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3828:138":{"id":"1:3828:138","crate_id":1,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3830:692"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"1:3823:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6171:58048":{"id":"5:6171:58048","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8459:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8459:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13758:13916":{"id":"1:13758:13916","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"1:13331:2291","prim@char":"4:15904:1750"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:13123:2727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3441:1957":{"id":"1:3441:1957","crate_id":1,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3443:183","1:3444:899"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3906:1988":{"id":"1:3906:1988","crate_id":1,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13361:2295":{"id":"1:13361:2295","crate_id":1,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13356:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:14071:151":{"id":"1:14071:151","crate_id":1,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:14072:183","1:14073:151","1:14074:774"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3610:1880":{"id":"1:3610:1880","crate_id":1,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3611:583"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13727:57391":{"id":"1:13727:57391","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"1:3675:1978","`str`":"4:15910:1755","str::slice_unchecked":"4:15910:1755"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:8672:152":{"id":"1:8672:152","crate_id":1,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8673:2074","1:8674:2075","1:8675:775"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10575:2409":{"id":"1:10575:2409","crate_id":1,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10576:665"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:1031:3086":{"id":"4:1031:3086","crate_id":4,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:1032:2137","4:1033:2959","4:1034:54283","4:1035:54284","4:1036:54285","4:1037:54286","4:1038:54287"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:11204:218":{"id":"1:11204:218","crate_id":1,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:11206:183","1:11207:1595","1:11208:50967","1:11209:50968","1:11210:50969","1:11211:759","1:11212:760"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3368:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:11195:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3470:1963":{"id":"1:3470:1963","crate_id":1,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3472:900"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13820:57409":{"id":"1:13820:57409","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:13331:2291","prim@char":"4:15904:1750"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13356:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23767:28398":{"id":"1:23767:28398","crate_id":1,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23768:51176","1:23769:51177","1:23770:51178"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialOrd","id":"1:23762:2441","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13718:1595":{"id":"1:13718:1595","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:47779:178"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47779:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:11204:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11204:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13814:57407":{"id":"1:13814:57407","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:15904:1750","self::pattern":"1:13331:2291"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13356:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3404:1879":{"id":"1:3404:1879","crate_id":1,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3247:116":{"id":"1:3247:116","crate_id":1,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3248:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3372:221":{"id":"1:3372:221","crate_id":1,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6578:3053":{"id":"4:6578:3053","crate_id":4,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6579:54363","4:6580:54364"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10436:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10577:2410":{"id":"1:10577:2410","crate_id":1,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10578:665"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3599:1909":{"id":"1:3599:1909","crate_id":1,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3600:550"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"1:3586:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13728:55020":{"id":"1:13728:55020","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"4:15910:1755"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23048:2602":{"id":"1:23048:2602","crate_id":1,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23049:2439","1:23050:52776","1:23051:53066","1:23052:53067","1:23053:53068","1:23054:39429","1:23055:53070","1:23056:53071","1:23057:53072","1:23058:53073","1:23059:53074","1:23060:53075","1:23061:53076","1:23062:53077","1:23063:53078","1:23064:53079","1:23065:52828","1:23066:53080","1:23067:51177","1:23068:51176","1:23069:51178","1:23070:52777","1:23071:52778","1:23072:52779","1:23073:52780"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3373:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23150:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10579:191":{"id":"1:10579:191","crate_id":1,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10580:665"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13828:54287":{"id":"1:13828:54287","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6168:58047":{"id":"5:6168:58047","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8459:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8459:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3431:1955":{"id":"1:3431:1955","crate_id":1,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3433:183","1:3434:270"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2858:97":{"id":"1:2858:97","crate_id":1,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2860:1739"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3368:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:14539:2527":{"id":"1:14539:2527","crate_id":1,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14540:51201","1:14541:51202","1:14542:51203","1:14543:51204","1:14544:51205","1:14545:51206","1:14546:2100"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10583:2412":{"id":"1:10583:2412","crate_id":1,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10584:665"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:41:1597":{"id":"0:41:1597","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["lazy",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:39:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:3490:1966":{"id":"1:3490:1966","crate_id":1,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3492:183","1:3493:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3495:1967":{"id":"1:3495:1967","crate_id":1,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3497:183","1:3498:358"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4757:3069":{"id":"4:4757:3069","crate_id":4,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4758:2610","4:4759:54766"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13730:2794":{"id":"1:13730:2794","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:15904:1750"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:49712:2754","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3458:1958":{"id":"1:3458:1958","crate_id":1,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3459:183","1:3460:920"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10810:147":{"id":"1:10810:147","crate_id":1,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10811:657","1:10812:1778","1:10813:53198","1:10814:53199","1:10815:53200","1:10816:53201","1:10817:53202","1:10818:53203","1:10819:53204","1:10820:53205","1:10821:53206","1:10822:53207","1:10823:53208","1:10824:53209","1:10825:53210","1:10826:1546"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13811:55039":{"id":"1:13811:55039","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:15904:1750","self::pattern":"1:13331:2291"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47779:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13356:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13788:57398":{"id":"1:13788:57398","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"4:15904:1750","self::pattern":"1:13331:2291","str::rmatch_indices":"4:15910:1755","`DoubleEndedIterator`":"1:8716:121"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:49892:2764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9156:2495":{"id":"1:9156:2495","crate_id":1,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3811:1981":{"id":"1:3811:1981","crate_id":1,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3368:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3742:1980","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:6652:2974":{"id":"4:6652:2974","crate_id":4,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6653:54727"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3869:1908":{"id":"1:3869:1908","crate_id":1,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3368:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:2916:185":{"id":"1:2916:185","crate_id":1,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2918:609","1:2919:914"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3368:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3466:1965":{"id":"1:3466:1965","crate_id":1,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3468:1368"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3823:229":{"id":"1:3823:229","crate_id":1,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3824:183","1:3825:1983","1:3826:691","1:3827:374"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromResidual","id":"1:3828:138","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"1:3823:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:6472:3050":{"id":"4:6472:3050","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6473:56813","4:6474:54393","4:6475:54394","4:6476:54396","4:6477:54395","4:6478:54397","4:6479:54398","4:6480:54400","4:6481:54401","4:6482:54404","4:6483:54405","4:6484:54406","4:6485:54407","4:6486:54408","4:6487:54409","4:6488:54402","4:6489:54403"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13741:55037":{"id":"1:13741:55037","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:15904:1750","self::pattern":"1:13331:2291"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3271:128":{"id":"1:3271:128","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3272:2854","1:3274:53525","1:3275:53526","1:3276:52904"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"1:10569:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:9533:2051":{"id":"1:9533:2051","crate_id":1,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13796:57401":{"id":"1:13796:57401","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3371:222":{"id":"1:3371:222","crate_id":1,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3474:1962":{"id":"1:3474:1962","crate_id":1,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3476:564"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6184:58050":{"id":"5:6184:58050","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:444:1883","`String`":"5:8459:220"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:1883","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8204:3386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8459:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13731:2320":{"id":"1:13731:2320","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:15904:1750"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:49718:2755","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5568:3059":{"id":"4:5568:3059","crate_id":4,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5569:54482"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12771:2966":{"id":"1:12771:2966","crate_id":1,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12772:2074","1:12773:51124"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3373:107":{"id":"1:3373:107","crate_id":1,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2883:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13720:50967":{"id":"1:13720:50967","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:47779:178"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47779:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:11204:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11204:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4094:68":{"id":"1:4094:68","crate_id":1,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4095:1441"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"1:13747:2111":{"id":"1:13747:2111","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"1:13331:2291","`None`":"1:47779:178","prim@char":"4:15904:1750"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47779:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10571:2407":{"id":"1:10571:2407","crate_id":1,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10572:665"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13800:57403":{"id":"1:13800:57403","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:4490:2996":{"id":"4:4490:2996","crate_id":4,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4491:56393","4:4492:36390","4:4493:56395","4:4494:56394"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13270:2542":{"id":"1:13270:2542","crate_id":1,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13271:127","1:13272:52953"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3525:1974":{"id":"1:3525:1974","crate_id":1,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3527:362"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4497:2999":{"id":"4:4497:2999","crate_id":4,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4498:56683","4:4499:56684","4:4500:56685","4:4502:2998","4:4503:56686","4:4505:55028","4:4506:3733"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"4:4415:2978","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10581:2411":{"id":"1:10581:2411","crate_id":1,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10582:665"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13831:3088":{"id":"1:13831:3088","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"4:15904:1750"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:50050:2775","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13761:55031":{"id":"1:13761:55031","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"1:8716:121","self::pattern":"1:13331:2291","str::split":"4:15910:1755","prim@char":"4:15904:1750"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:49760:2730","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13356:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5572:3060":{"id":"4:5572:3060","crate_id":4,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5573:54316"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10436:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13823:2647":{"id":"1:13823:2647","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"1:13270:2542","FromStr::Err":"1:13270:2542"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47904:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"1:13270:2542","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13270:2542","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3478:1964":{"id":"1:3478:1964","crate_id":1,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3480:1112"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:14056:139":{"id":"1:14056:139","crate_id":1,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:14057:183","1:14058:1020"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6750:3044":{"id":"4:6750:3044","crate_id":4,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6751:54756"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3742:1980":{"id":"1:3742:1980","crate_id":1,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3744:53827","1:3745:53828","1:3746:53829"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3368:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:23174:2603":{"id":"1:23174:2603","crate_id":1,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23175:2439","1:23176:1259","1:23177:1284"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6165:2896":{"id":"5:6165:2896","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8459:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8459:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13744:55038":{"id":"1:13744:55038","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:15904:1750","self::pattern":"1:13331:2291"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13356:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6344:3089":{"id":"4:6344:3089","crate_id":4,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6345:56857","4:6346:56858"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13738:53829":{"id":"1:13738:53829","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"1:13331:2291","prim@char":"4:15904:1750"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6186:54283":{"id":"5:6186:54283","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"4:15910:1755"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8459:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2883:105":{"id":"1:2883:105","crate_id":1,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2884:413","1:2885:415"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5910:3380":{"id":"5:5910:3380","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5912:183","5:5913:14430"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/inline_lazy.rs","begin":[16,0],"end":[16,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"self::std::sync::ONCE_INIT","name":"ONCE_INIT","id":"4:8727:1724","glob":false}},"1:13808:33666":{"id":"1:13808:33666","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"1:13331:2291","prim@char":"4:15904:1750"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47779:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3483:1969":{"id":"1:3483:1969","crate_id":1,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3484:183","1:3485:959"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23137:2281":{"id":"1:23137:2281","crate_id":1,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23138:52776","1:23139:1237","1:23140:1238","1:23141:52777","1:23142:52778","1:23143:52779","1:23144:52780","1:23145:52781","1:23146:52782","1:23147:52783"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3373:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23150:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:7607:3233":{"id":"4:7607:3233","crate_id":4,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:7608:54104"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3586:117":{"id":"1:3586:117","crate_id":1,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3587:226","1:3588:548"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8631:2504":{"id":"1:8631:2504","crate_id":1,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8633:2127"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5502:3055":{"id":"4:5502:3055","crate_id":4,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5503:56489","4:5504:56491","4:5505:56490","4:5506:56492"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6183:58049":{"id":"5:6183:58049","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8459:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8459:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13805:57406":{"id":"1:13805:57406","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:15904:1750","self::pattern":"1:13331:2291"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2962:186":{"id":"1:2962:186","crate_id":1,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2964:1004","1:2965:833","1:2966:799","1:2967:718","1:2968:701"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3368:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2916:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:24071:2437":{"id":"1:24071:2437","crate_id":1,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:24072:2439"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:24067:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"1:3373:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6185:3021":{"id":"5:6185:3021","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8459:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8459:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13708:57387":{"id":"1:13708:57387","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13779:57396":{"id":"1:13779:57396","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47779:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13356:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4895:2600":{"id":"1:4895:2600","crate_id":1,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4896:2074","1:4897:50927","1:4898:2077"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5436:3097":{"id":"4:5436:3097","crate_id":4,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5437:4176","4:5438:56888"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10436:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13706:800":{"id":"1:13706:800","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:15904:1750"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1590":{"id":"0:0:1590","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:39:1596","0:41:1597","0:38:1590"],"is_stripped":false}},"1:8668:137":{"id":"1:8668:137","crate_id":1,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8670:689"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3529:1975":{"id":"1:3529:1975","crate_id":1,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3531:1244"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13726:3122":{"id":"1:13726:3122","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"1:3671:1977","`str`":"4:15910:1755","str::slice_mut_unchecked":"4:15910:1755"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:2921:125":{"id":"1:2921:125","crate_id":1,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2916:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13732:3125":{"id":"1:13732:3125","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:49728:2756","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3375:224":{"id":"1:3375:224","crate_id":1,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13751:2069":{"id":"1:13751:2069","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"4:15904:1750","self::pattern":"1:13331:2291","`None`":"1:47779:178"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47779:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13356:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13827:54286":{"id":"1:13827:54286","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6498:228":{"id":"5:6498:228","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6499:1409"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13733:14306":{"id":"1:13733:14306","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"4:15910:1755"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:50016:2771","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6581:3039":{"id":"4:6581:3039","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6582:54134"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10436:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6164:58046":{"id":"5:6164:58046","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:1883","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8204:3386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:1883","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8204:3386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10573:2408":{"id":"1:10573:2408","crate_id":1,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10574:665"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13802:57405":{"id":"1:13802:57405","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"1:13331:2291","prim@char":"4:15904:1750"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13361:2295","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13826:54285":{"id":"1:13826:54285","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13794:57400":{"id":"1:13794:57400","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13773:55035":{"id":"1:13773:55035","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"4:15910:1755","self::pattern":"1:13331:2291","prim@char":"4:15904:1750"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:49864:2734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13356:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3500:1968":{"id":"1:3500:1968","crate_id":1,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3502:183","1:3503:361"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2952:179":{"id":"1:2952:179","crate_id":1,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2953:420","1:2954:2115","1:2955:2116","1:2956:2136"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2921:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2962:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:4415:2978":{"id":"4:4415:2978","crate_id":4,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4416:2897","4:4417:54560","4:4419:54561","4:4420:54562","4:4421:2993","4:4422:54563","4:4423:54144","4:4425:54564","4:4426:2100","4:4427:3125","4:4428:2082","4:4430:2094"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23762:2441":{"id":"1:23762:2441","crate_id":1,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23763:1282","1:23764:1281","1:23765:1279","1:23766:1278"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialEq","id":"1:23174:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13798:57402":{"id":"1:13798:57402","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5558:3058":{"id":"4:5558:3058","crate_id":4,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5559:56866","4:5560:56867","4:5561:56868","4:5562:56869"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5430:3095":{"id":"4:5430:3095","crate_id":4,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5431:56884","4:5432:3498"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10436:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3675:1978":{"id":"1:3675:1978","crate_id":1,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3677:760"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3368:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Index","id":"1:3671:1977","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13801:57404":{"id":"1:13801:57404","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3616:132":{"id":"1:3616:132","crate_id":1,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3618:382"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3619:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13770:55033":{"id":"1:13770:55033","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:15904:1750","str::rsplitn":"4:15910:1755","self::pattern":"1:13331:2291"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:49846:2733","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6187:54284":{"id":"5:6187:54284","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"4:15910:1755"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8459:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3170:150":{"id":"1:3170:150","crate_id":1,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3172:2063"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13709:57388":{"id":"1:13709:57388","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3613:131":{"id":"1:3613:131","crate_id":1,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3615:381"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3616:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3173:136":{"id":"1:3173:136","crate_id":1,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3175:686"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10800:143":{"id":"1:10800:143","crate_id":1,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10801:720","1:10803:53788"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3167:74":{"id":"1:3167:74","crate_id":1,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3169:2062"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3368:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13341:2290":{"id":"1:13341:2290","crate_id":1,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13343:2293","1:13344:53751","1:13345:53752","1:13346:53753","1:13347:53755","1:13348:53754","1:13349:53756"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13791:57399":{"id":"1:13791:57399","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"1:8716:121","str::match_indices":"4:15910:1755","self::pattern":"1:13331:2291","prim@char":"4:15904:1750"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:49910:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13341:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13356:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:844:227":{"id":"5:844:227","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:845:2137","5:846:2138","5:847:2139"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23101:2539":{"id":"1:23101:2539","crate_id":1,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23102:2439","1:23103:52776","1:23104:1237","1:23105:1238","1:23106:39429","1:23107:52824","1:23108:52825","1:23109:52826","1:23110:52827","1:23111:52828","1:23112:52777","1:23113:52778","1:23114:52779","1:23115:52780","1:23116:52781","1:23117:52782","1:23118:52783"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3373:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23150:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3102:2276":{"id":"1:3102:2276","crate_id":1,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:3101:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3164:75":{"id":"1:3164:75","crate_id":1,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3166:310"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3368:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13722:50968":{"id":"1:13722:50968","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:11204:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11204:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:13736:57392":{"id":"1:13736:57392","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:50006:2770","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3534:1976":{"id":"1:3534:1976","crate_id":1,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3536:1247"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"4:3381:4358":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"4:2359:31233":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"5:8393:3495":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:6533:4072":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:49686:2845":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:5639:3836":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"6:5390:40329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:157:36350":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:4362:39706":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:5439:40335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:49846:2733":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:1669:37564":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:51399:2465":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:12731:48829":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"4:15916:1759":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"17:13472:49882":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:5146:1893":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:46602:2675":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:6286:3703":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"4:9673:4378":{"crate_id":4,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:3906:1988":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:5460:3831":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:6656:4079":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:5301:40324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:6688:41118":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"12:2269:3139":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:52828:2469":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:13539:49892":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:3511:1971":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:13377:49872":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"18:704:60320":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"4:2654:181":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:9517:2756":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:12015:48652":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:0:435":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"4:4834:3173":{"crate_id":4,"path":["std","net","ip","display_buffer","IpDisplayBuffer"],"kind":"struct"},"17:2512:4199":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:1684:2075":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:6899:51040":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"16:5289:3779":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:4488:2075":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:8301:2075":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:10340:4202":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:586:36669":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:5962:4348":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"1:51375:2473":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:10464:4131":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:13341:2290":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"4:15345:54362":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"4:1483:3136":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:8236:3449":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:50265:2305":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:12417:48741":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"4:9279:54414":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:24526:2829":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:3933:39663":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:3199:4048":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"18:645:4243":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:5149:40270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:3177:4047":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:49792:2760":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"9:692:3552":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"5:1152:4336":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"0:0:1590":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"6:3896:39660":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"4:3371:3006":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"4:13627:3235":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"4:11216:3325":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:853:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:10913:44155":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:3852:2384":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:47282:3024":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:4218:39692":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"4:8737:2268":{"crate_id":4,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"17:10304:4113":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:56578:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"9:1056:3612":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:6498:228":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:4689:42833":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"18:720:50744":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:3314:4027":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:47035:2569":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"4:15092:3124":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:10571:4172":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:2813:4059":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:4088:39680":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:8436:3497":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"4:10663:3280":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"16:5176:43080":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:6595:3794":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"4:8293:3158":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:7079:3871":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:14368:2799":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:48842:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"17:13306:49512":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:12048:48654":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:7659:3881":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:3114:57384":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:3883:39659":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"4:14895:3229":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:6060:3820":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"12:979:3137":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"4:4757:3069":{"crate_id":4,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"5:8407:2841":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12607:48815":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:56552:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:11019:3071":{"crate_id":4,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"5:7477:2075":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:6937:39855":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:3173:136":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"4:1489:3137":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:5906:3382":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:3525:1974":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"4:14084:3018":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"9:41:3602":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"6:4110:39682":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"4:10685:3068":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"17:12646:48818":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:46142:198":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"19:0:1001":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:7358:4336":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:13196:49399":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:10476:4136":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:11810:44791":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"4:1405:3128":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:4864:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"17:13428:49878":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:46669:2945":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"7:38:41396":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:3613:131":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"16:3366:4057":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"4:15903:1749":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"5:8213:2075":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:3490:1966":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:4067:39677":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:3391:2345":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:46986:2564":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:4532:39726":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"4:15909:1754":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"1:46341:1900":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"4:10993:2572":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"4:11042:3072":{"crate_id":4,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"4:10531:30271":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:52332:2476":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:4142:39686":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"4:7098:54149":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:2839:4040":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:13549:49893":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:2843:3514":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:46224:199":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:47904:207":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:5320:1904":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:11305:43869":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:5726:2604":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:9561:4126":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"4:8651:54121":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:51754:2475":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:7238:3800":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:13573:49896":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"4:15336:35109":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"6:5378:40328":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:11476:2727":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"4:15908:1753":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"5:4281:3101":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:10988:44131":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:4840:42864":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:7782:3788":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:5605:3835":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:1680:37565":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:4775:42847":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"0:38:1590":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"6:5216:40318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:13094:49347":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:777:57193":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"4:10516:30268":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"12:815:3132":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:5398:40330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:5974:36583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:14:1778":{"crate_id":1,"path":["core","write"],"kind":"macro"},"16:3029:4045":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:4048:39674":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"4:11469:3198":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"1:23231:2286":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:9646:60304":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:12674:48820":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:51976:2444":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:51483:2474":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"4:6654:2970":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:51453:2486":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:24952:2679":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"4:8222:3501":{"crate_id":4,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"12:2419:3108":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:47963:2075":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:2962:186":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:11713:44763":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:12634:48817":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"4:7253:187":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"1:12327:4397":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:56195:2535":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"4:11197:3365":{"crate_id":4,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"1:52120:50764":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"4:1456:3132":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:1547:3141":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:7025:3772":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:46327:2598":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"17:10198:43927":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:4454:39718":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:3366:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:46706:2948":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"12:1238:3685":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"9:1075:3620":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:47273:11439":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"18:820:4233":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:6549:3797":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:3686:42238":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:53648:19821":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"4:70:1505":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"17:9948:43860":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:11474:44485":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:3461:4053":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:46957:2557":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:13495:49885":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:49642:2745":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"4:1452:3131":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:50050:2775":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:1721:37569":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:3051:4102":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:12250:48730":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"4:6581:3039":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:6943:39856":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"4:15911:1756":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"17:13404:49874":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:4351:42735":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"4:13781:4470":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:6925:39853":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:3610:1880":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:1764:37573":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"4:11154:54361":{"crate_id":4,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"4:9583:4377":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"1:10569:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"4:1418:3129":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:22846:53192":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"5:8348:3108":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:2959:4043":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:5238:42226":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:11256:43831":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"4:14822:4387":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:46874:2550":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:53785:19830":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:3458:1958":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:5204:40316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:580:32398":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:7281:3785":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:13975:50030":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:12194:2748":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:11754:44773":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:5229:40319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:6557:3863":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:6135:40748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:11797:44778":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:5288:40322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"4:11379:3186":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"1:46158:196":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:3176:233":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:9654:2290":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:1662:37563":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:294:60083":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"4:1431:3101":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:527:36663":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"9:469:41521":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:3770:42274":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:1673:2611":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:1733:3336":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:11494:44486":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"4:8451:1927":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:6277:3855":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:12003:48596":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"4:10809:3217":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:10545:44073":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:3101:2285":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:11742:44772":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"12:2052:3103":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"4:14419:54384":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"4:8951:1936":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:11384:2610":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:7155:3878":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"4:13764:3225":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:13233:49442":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:11195:2285":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"4:11290:3344":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:56565:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:10723:3302":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:49910:2765":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:3436:3103":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:3105:57385":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:11653:44596":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:5217:4031":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"4:12073:1930":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:46095:1987":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:49652:2746":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:6775:3469":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:49760:2730":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:4467:42755":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:14071:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:5582:40367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:4411:42747":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:7826:2598":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"12:2040:3101":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:5861:4336":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:4157:4173":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"14:194:42145":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:24363:5047":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:3221:4049":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"4:11174:3364":{"crate_id":4,"path":["std","net","parser","AddrKind"],"kind":"enum"},"16:5303:3822":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:0:805":{"crate_id":6,"path":["libc"],"kind":"module"},"1:3441:1957":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"4:15926:1769":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:46386:2629":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:6099:3850":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"12:764:2611":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:13735:49909":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"4:12616:54151":{"crate_id":4,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"17:12170:48724":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:7141:3877":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:6214:40752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:4315:39700":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:46925:2555":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:12093:48661":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:39079:2275":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"4:11068:3075":{"crate_id":4,"path":["std","net","ip","IpAddr"],"kind":"enum"},"1:49607:2549":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"10:0:1806":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:12573:48752":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"4:5865:3332":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:24460:5082":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:321:207":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:22899:53581":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:1751:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:6250:40755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:47947:2610":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"17:11725:44764":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:3743:42271":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:4694:240":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:5910:3380":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:4160:2523":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"4:8875:1934":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:2916:185":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:14539:2527":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:53628:19819":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:48539:2408":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:24512:2882":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"12:183:3690":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:9466:43853":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:10571:2407":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"16:5348:3824":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:46744:2840":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"4:2361:31234":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"4:1261:144":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:10435:4133":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"4:6246:3042":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:39119:2540":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"17:13755:49945":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:1729:3131":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:50680:2797":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:9396:43851":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:571:36668":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:13721:49908":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:53747:19828":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:69:3419":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:6873:2048":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:1626:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"12:0:1808":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:8631:2504":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:47972:180":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:4256:39695":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"4:4388:2985":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:56604:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:3407:3439":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:3164:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"17:10558:44074":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:4296:39698":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:49996:2769":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:48039:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:48165:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"4:3044:3285":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:1694:37566":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:9240:4114":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"4:11874:3228":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"5:1909:4336":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:8258:2075":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"18:621:60324":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:10565:110":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:53709:19826":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:50025:2772":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:3340:4028":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:3576:42229":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:10318:4135":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:9836:59850":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:7121:3875":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:7449:3789":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:47055:2571":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:4:986":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"17:12543:48750":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:2484:43961":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"12:114:59439":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:6490:3861":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:5240:40320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:46202:200":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:46915:2554":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"4:11521:2610":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"1:50481:2789":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:51421:2453":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"4:11862:183":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"5:8376:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:3599:1909":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:7947:4356":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:53657:19822":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:11381:44260":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:49550:2739":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"4:13501:3185":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:46934:2556":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:51784:2479":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"4:9406:4374":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:11671:44597":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:49532:2737":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:39155:2346":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:52490:2468":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:1576:37556":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:13088:2766":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"4:9155:3093":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:25117:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:24071:2437":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:47887:2140":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:23048:2602":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:2390:1910":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:49581:2742":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:6902:39850":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:50159:2299":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:3436:1960":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:47076:2573":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:8716:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:50493:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"4:8872:1933":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:48081:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:53694:19825":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:5311:40325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:7721:3792":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"4:15927:1770":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"17:8954:4125":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"4:11527:3201":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"4:1088:3277":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:13123:2727":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:46246:201":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:11530:44547":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:1760:3507":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:3505:1970":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"4:11429:3196":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"4:8720:1723":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"16:6159:3783":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:53034:2489":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:10530:44072":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:6716:2559":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"4:8785:1938":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:5247:40321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"4:10554:31240":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"5:5948:4345":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"1:6639:2558":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:23961:2287":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:5488:2985":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:8021:2548":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"4:4149:3310":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:46646:2944":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:9532:2052":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"12:2280:3140":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"18:651:4240":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:51624:50739":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"4:13803:3227":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:6896:39849":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:5260:40298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:10925:44156":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:3170:150":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"16:5668:3838":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"4:2420:4462":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"16:3908:42388":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:4332:39702":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:10583:2412":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:10874:44047":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:13356:2294":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:4379:39708":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"4:2326:605":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:47845:2048":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"4:4259:3014":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:3920:39662":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:3534:1976":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:32607:2636":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"18:857:4236":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:3960:39664":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:12406:48740":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"4:14989:3237":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"4:11276:3335":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:50526:2862":{"crate_id":1,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"17:9636:43854":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:4493:39722":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"4:12126:3176":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"16:7247:3814":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"18:766:60328":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:3363:215":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"4:6578:3053":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:6468:3860":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:6931:4088":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"4:9530:3317":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"6:6027:40744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:12196:48726":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:13270:2542":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"12:952:3135":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"4:6929:33390":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"4:783:4378":{"crate_id":4,"path":["std","thread","local","fast","Key"],"kind":"struct"},"4:11856:3226":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"17:1236:43930":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"15:230:3705":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:4509:2610":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:5210:40317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:22861:53192":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:51606:2458":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:11408:2611":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"4:5735:3373":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:48123:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:6331:3702":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:607:43840":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"4:11312:33388":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:6504:3862":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:6205:40751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:13073:49346":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:23137:2281":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:4425:39714":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:4012:39670":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"4:13948:4384":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"4:14981:54161":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"4:15044:3116":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:11922:48544":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:49742:2726":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"9:776:3599":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"4:15059:3117":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:11553:2729":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:46626:2950":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:7207:4350":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"6:4346:39704":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:4852:2278":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:10975:44132":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:4410:39712":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"4:3755:3220":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:5257:42224":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:1701:3128":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:9539:4188":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:2858:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"5:4036:4336":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:11588:2730":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"18:611:4241":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:2543:4129":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:5447:40336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"4:11006:2726":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"5:3838:2611":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:13785:49948":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:1712:37568":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"4:14933:53992":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"4:6482:54404":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:53762:19829":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"4:2141:3104":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:1296:3510":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"4:4490:2996":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"12:1162:3682":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:1727:37570":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"12:869:3101":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:3103:4056":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:539:36665":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:50461:2785":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:6016:40743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:3395:2610":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:7868:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:13361:49844":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:4271:42703":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:12026:48653":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"4:7744:4465":{"crate_id":4,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"16:6075:3780":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"4:2510:3276":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"1:11709:2736":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:5331:40326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:49131:50753":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:8741:1881":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"4:973:3267":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"4:11108:3077":{"crate_id":4,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"5:8453:57245":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"16:2905:4042":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:6679:4081":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:3474:1962":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:1518:3140":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:7090:3872":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:2501:2601":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:1544:37552":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:46896:2552":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:13840:49955":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:9153:2494":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:5609:1925":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:5033:1912":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"12:1703:3698":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:1072:2610":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"18:136:50350":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:10660:44078":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"4:8550:1937":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"4:15918:1761":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"4:4356:3024":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"17:9361:43850":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:50730:2530":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"4:4143:3308":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"4:6344:3089":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:4871:42871":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:6604:3864":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:7208:3879":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:4509:39723":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:11547:44554":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:6007:40742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:5541:40365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:5326:3823":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:11013:43861":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:6012:3778":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:10249:2713":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:11681:2734":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"4:12050:3164":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:9533:2051":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"4:15919:1762":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"4:11054:3073":{"crate_id":4,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"1:53572:2484":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"4:11910:54392":{"crate_id":4,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"9:603:41626":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:11102:43863":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:49570:2741":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"4:1578:3138":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"4:1397:2075":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"4:7427:3221":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"5:3905:4336":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:8681:1882":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"18:152:50351":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:10962:44133":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"4:2911:3281":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"18:739:60338":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:10810:147":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"6:1551:37553":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:23434:2440":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"4:13414:31245":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"4:2914:2897":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"1:5752:786":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:48207:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:6381:3793":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:3428:3105":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:9064:43846":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:9587:60298":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:24538:2828":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:11769:44776":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:3129:4055":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:53488:2446":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:6907:3867":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:6114:40745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:53286:2477":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"4:12092:1931":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"4:2651:182":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:6141:3852":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:521:36662":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"4:4036:3026":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:12383:48739":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"12:940:3134":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:4803:42851":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:3840:1985":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"4:8005:4360":{"crate_id":4,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"4:11972:3157":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:57926:50717":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"12:2392:59443":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"15:269:3710":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"4:14449:3282":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:9706:43855":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"4:14490:54344":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:612:36673":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"4:15915:1758":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"17:11640:44595":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"9:722:3553":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"17:13331:49514":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:7051:3869":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"4:15274:3330":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"4:3801:207":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"17:10058:4218":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:46975:2560":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"4:12248:4462":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"4:15074:3118":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"4:10739:3009":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:50514:2861":{"crate_id":1,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"1:46300:1982":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:3368:1878":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"17:3743:4166":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:3402:3767":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:48830:108":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"3:0:1800":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"17:12302:48733":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:51952:2462":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:3372:221":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:1502:3138":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:49810:2761":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:5374:3826":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"4:2119:2610":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"4:5568:3059":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"4:5436:3097":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:46334:2599":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"14:244:42146":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"4:10941:3025":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"1:24886:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:6173:3853":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:7158:2561":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:47955:2611":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:50034:2773":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:8244:57192":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:28329:2509":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"4:12145:3177":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"12:2045:3102":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:51309:50774":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:47836:2075":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:0:493":{"crate_id":1,"path":["core"],"kind":"module"},"6:88:36284":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"14:231:3392":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"4:4222:3019":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"4:15904:1750":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"17:11956:44080":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:50302:2306":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:7295:3786":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:10104:4214":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:3155:4046":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:3554:3102":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"6:1606:37559":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:7922:4350":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:24476:5093":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:48560:2410":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:6967:41303":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"12:2066:3105":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:2921:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:11822:44792":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:6739:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"4:15086:3123":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"18:885:4238":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:50688:2798":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:4008:44048":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:47779:178":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:47066:2572":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:4340:39703":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:51661:50734":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:5426:40333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:7063:3870":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:32613:2867":{"crate_id":1,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"4:10658:3051":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"6:3972:39666":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:12687:48821":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:50327:2308":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:11626:2731":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"4:4146:3309":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"4:13879:3226":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:11695:2735":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"4:14883:3228":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:13037:49345":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:12130:48721":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:5567:40366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:9883:59868":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"4:1460:3133":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"18:774:60320":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:7702:3790":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"14:189:42144":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:50350:2849":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:23150:2285":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"4:5580:3062":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:53176:2457":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:13293:49511":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:6243:40754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:6562:3101":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"4:7475:3224":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"1:50016:2771":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:6120:40746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:12660:48819":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:51523:50765":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"9:809:3196":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"4:8300:3159":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:12512:48748":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:53668:19823":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:52568:2456":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:7471:3777":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:50489:2784":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"4:12585:3280":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"18:866:4237":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:8228:3101":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:24505:5092":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"4:15923:1766":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"6:1626:37561":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"4:4183:3017":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"4:11125:3172":{"crate_id":4,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"4:11265:3372":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:12227:2749":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"18:801:4231":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"4:14651:31247":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"4:15191:3078":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:5649:3837":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:8196:2497":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"6:5455:59380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"4:6652:2974":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:48291:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:6129:40747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:2861:4041":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"12:2072:3106":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:47878:2049":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:12771:2966":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:4242:39694":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:3834:1983":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:5478:40337":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"12:162:3686":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:48797:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"17:13660:49906":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"12:1881:146":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"12:971:3136":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:12496:48747":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"4:10323:4381":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:6858:4085":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:2883:4060":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"4:12102:214":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:52073:50763":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"11:46:59435":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"6:4116:39683":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:24239:2812":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:13155:49395":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:8635:2506":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"11:0:1807":{"crate_id":11,"path":["adler"],"kind":"module"},"16:6643:4078":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"13:233:59446":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:6630:4077":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:47014:2567":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:47257:11437":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:4287:39697":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:981:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:12716:48828":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"4:8192:3267":{"crate_id":4,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"12:1147:3140":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:56630:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:12442:48743":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:47811:2074":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"17:9920:43859":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:3441:3440":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"4:5283:3330":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"12:777:2075":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"4:9439:4467":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"17:11603:44592":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:542:3753":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"4:2147:3105":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:13559:110":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:5213:1899":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:634:36676":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"4:10437:3241":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"4:8727:1724":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"4:7739:3266":{"crate_id":4,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"17:12455:48744":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:5528:2941":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"4:0:1343":{"crate_id":4,"path":["std"],"kind":"module"},"1:46849:2549":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:3243:4050":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:3993:39668":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:6665:41116":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"4:11452:3197":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:48249:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:10028:43915":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:13961:49996":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:5273:42223":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:4765:4341":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:50627:203":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"16:2792:3766":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:12770:48895":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:3653:1986":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:52408:2483":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"4:10547:3142":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"4:10950:2995":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"4:3060:3290":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"12:1183:3683":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"4:10237:43841":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:626:36675":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:5396:3827":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:4179:39689":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:8470:3389":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:49892:2764":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:6310:3856":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:4440:39716":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:1256:57379":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:15360:54356":{"crate_id":4,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"4:10570:31247":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:7718:3424":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"4:1592:3139":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:4743:42839":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:10717:52758":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:14147:189":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"4:6728:2975":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:7551:4336":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"4:11308:3052":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:10082:4212":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:4316:42724":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:10586:44075":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:49712:2754":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"17:9676:60023":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:24985:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:11667:2733":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"4:6486:54408":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:1740:3132":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:4321:39701":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"4:10819:3010":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:4061:39676":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"18:811:4232":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:10949:44134":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:14056:139":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:46725:2677":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:601:36671":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:11142:43865":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:51708:2487":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:25018:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:6643:36620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"4:3803:128":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:13049:2762":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:9756:60014":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:3521:42228":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:25051:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:2764:584":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:13817:49952":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:3470:1963":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"14:47:42144":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:11968:48549":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:10364:4200":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"4:11013:2769":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"1:57905:50770":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"16:7184:4090":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:53426:2481":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:24787:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:11579:44556":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:4660:42828":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:4895:2600":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:3529:1975":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:10039:43916":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:3811:1981":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:46559:2775":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:24067:2285":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"4:859:3245":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"4:7319:120":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"14:11:42144":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"4:6484:54406":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:48864:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:46905:2553":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:4402:39711":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:2314:4201":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:53824:19831":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"4:15907:1752":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:14106:50844":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:4439:42751":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"12:2032:2610":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:49541:2738":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:984:3446":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:24310:5059":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"4:11000:2756":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"4:15654:4388":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:10093:4213":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:11433:44269":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:3007:4044":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:46574:2672":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:14182:14434":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:52644:2463":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:50190:2303":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:6050:3848":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"4:1601:3140":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:5443:3830":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"4:7144:188":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"4:4261:3015":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"4:13265:3337":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:4148:39687":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:47302:11442":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"12:856:3129":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:3869:1908":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"4:14686:3230":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:4055:39675":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:5902:3845":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:5887:4025":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:6130:3851":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"4:15917:1760":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"16:2937:4065":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:10850:2380":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:11628:44594":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:5366:40327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:4942:42894":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:13507:49888":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:4160:39688":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:47004:2566":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:10038:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:9160:4190":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:14419:203":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"17:11409:44268":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"4:10983:2550":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"6:4373:39707":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"4:15914:1757":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"17:10455:4132":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:51806:2482":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:48812:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:50477:2788":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:2187:7597":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:50041:2774":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:7323:3802":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"4:11221:3326":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"16:6026:3776":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:4474:39720":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:13345:49515":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"4:12097:213":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:4495:42759":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"4:3070:3295":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"16:6518:3795":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:1748:37572":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:24347:50713":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"4:5751:3376":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"4:14480:2995":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:12557:48751":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"4:11888:3229":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:9160:2496":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:4386:39709":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:5948:4039":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:53732:19827":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:37899:180":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"4:5502:3055":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:8219:3448":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:4434:39715":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"4:5518:3057":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:10577:2410":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:4903:42879":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:1055:3447":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:9259:42224":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:49718:2755":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:5412:3828":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:52254:2488":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:6979:41304":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:50645:192":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"9:157:3569":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"12:472:59436":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:8459:220":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:3483:1969":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"5:2284:3442":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:46829:11151":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"16:7684:3791":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:5705:11150":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"5:3106:57246":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:23436:2439":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"4:5558:3058":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:5223:1900":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"17:13899:49986":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"4:14668:54002":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"4:10436:2285":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"6:1588:37557":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:10166:43929":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:4782:2985":{"crate_id":1,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"17:13271:49447":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:6931:39854":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:10015:43914":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:50485:2783":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:13481:49883":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:3369:1907":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"4:6472:3050":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:5178:40314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"18:790:4230":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"4:7604:3231":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"16:2754:4029":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:6342:3857":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:4020:39671":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:3907:39661":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"4:14800:4385":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:47264:1723":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"4:11091:3076":{"crate_id":4,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"6:4127:39684":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:8849:4187":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:6851:2985":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:13917:49988":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:23174:2603":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:10775:44046":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:7369:3782":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:7131:3876":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:32773:50615":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:52174:50752":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"4:11902:3230":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"6:4446:39717":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"4:15886:54065":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:50457:2782":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"9:27:3601":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"6:4416:39713":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:3494:42227":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:6980:3868":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"14:216:42153":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:46865:2547":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"4:14437:53983":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"4:15213:3322":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:50637:4474":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:12157:48723":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:4372:2611":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:510:43839":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"0:39:1596":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"17:12620:48816":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"18:661:4244":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:7768:3787":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:22833:2498":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:8873:158":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:49327:2957":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:4599:42815":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:10788:44045":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"4:12087:164":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:49092:2381":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"4:1387:2611":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"4:14087:3014":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"12:1103:3138":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:12318:48734":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:547:4020":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:49864:2734":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:2055:2985":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"4:5572:3060":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:13887:49985":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:8929:43843":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:51584:2454":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:50718:2532":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:11068:4124":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:46307:2517":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"4:10698:130":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"16:5566:3834":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:13421:49875":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:5268:1901":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:24168:2809":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:5784:3843":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"4:10934:3023":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"1:50316:2307":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"18:896:4239":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:10489:43974":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:3077:4103":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:24422:5090":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:23290:2439":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:2396:3511":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"4:1610:3141":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"4:14081:3016":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:52614:2460":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"4:6105:3342":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:48916:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"9:749:3554":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"17:12183:48725":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:7935:2083":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:10187:43928":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:10562:110":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"16:7264:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"4:5743:3374":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:13361:2295":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:10573:2408":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"6:4356:39705":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:50173:2302":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"4:2917:2993":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"15:0:1810":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:13747:49944":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:1719:3130":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:11907:48543":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:32673:50773":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"1:10033:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:4277:39696":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:46068:1989":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:10147:43931":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"4:7544:3227":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"18:169:50352":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:3825:2610":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:13522:49890":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"18:712:2498":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:3877:39658":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:12222:48728":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"12:880:3102":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:11168:43866":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:513:36661":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:533:36664":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:5186:40315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:3297:4104":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:48779:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:3180:232":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"17:13180:49398":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:2262:2366":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:672:36705":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:12527:48749":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:4198:42654":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"4:6846:3099":{"crate_id":4,"path":["std","os","net","tcp","TcpStreamExt"],"kind":"trait"},"4:7461:3223":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"17:13938:49989":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:13774:49947":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:13029:49343":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:46685:2774":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:5419:40332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:3381:1906":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:5151:1894":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:7309:3784":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"4:8502:1929":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"12:2404:59442":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:47023:2568":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"12:2036:2075":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:23425:2285":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"4:11334:3045":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:5698:3840":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:11937:44081":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"13:121:42099":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"4:15253:3323":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"4:2397:31245":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:2952:179":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"6:1531:37550":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"4:853:3244":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:23237:2288":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:5745:3842":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"18:754:60327":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:3167:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"17:0:1812":{"crate_id":17,"path":["object"],"kind":"module"},"1:1479:1722":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"1:2180:583":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:24331:2654":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:9958:59838":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:25084:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:13859:49961":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:10253:4161":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:46887:2551":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:9087:43847":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:9183:4123":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"4:14424:3067":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"4:6750:3044":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:8360:3145":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:13908:49987":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"4:10458:3249":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"4:13433:4469":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:49084:50724":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:13873:49979":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"12:843:3128":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"4:7839:3267":{"crate_id":4,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"4:14399:3054":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"4:14915:3176":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:8448:1891":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"16:5959:3771":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:6035:3819":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:5405:40331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:13012:2759":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:9326:4115":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:7637:3880":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:12892:49288":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:383:3475":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:8204:3386":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"7:85:41403":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:3960:3502":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:13129:49351":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:4094:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"4:14414:54411":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:53683:19824":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:3478:4052":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:9786:43857":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:4538:39727":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:23101:2539":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"6:4028:39672":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:52151:50662":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:4208:39691":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:1533:3139":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:48553:2409":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:10581:2411":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"4:8458:1928":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"4:2909:129":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"9:0:1805":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:4198:39690":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:8672:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:46995:2565":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:10136:43858":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:46692:2946":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:46943:50631":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:4081:39679":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:2285:2371":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:6482:4074":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"12:1121:3139":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:10899:44146":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:47086:2562":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"4:3284:3005":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:1912:37708":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:12758:48892":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:14252:50842":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:23379:2285":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:6908:39851":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:2861:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"4:15905:1751":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"6:4526:39725":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:5869:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:9988:43913":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:3404:1879":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:39115:3518":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"4:3042:2365":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"17:12921:49289":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"4:14816:4386":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:4038:39673":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"18:829:4234":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:6914:39852":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:49560:2740":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:49964:2768":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:51353:2485":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"4:11258:3071":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:12117:48720":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:48546:2407":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"4:12107:3169":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"6:4098:39681":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:51505:2478":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:50337:2309":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:3823:229":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:23227:2285":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"4:2130:3102":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"16:5941:3847":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"4:1991:146":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:47828:2611":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"5:844:227":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:10801:4169":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:48417:1926":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:12585:48766":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"18:0:1813":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:3375:224":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"9:900:41549":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:9206:43849":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"12:432:3687":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"4:10814:3218":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"1:3586:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:4308:4336":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"14:250:42152":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:1558:37554":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:3478:1964":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:3431:1955":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"16:5427:3829":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"4:11980:2075":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:8266:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"4:10715:119":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:11204:218":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:4709:4341":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"4:2126:3101":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"4:7607:3233":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"17:10266:4107":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:11591:44557":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:10390:4134":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:607:36672":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"4:8101:3267":{"crate_id":4,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"16:6949:4089":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"4:15398:3714":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:1567:37555":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"4:11964:2610":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:5142:1892":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"6:6268:40756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:4075:39678":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:37923:2498":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"4:6224:3039":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:3462:3106":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:6057:37517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:14358:2502":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"5:7740:3425":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:5498:3832":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"4:15875:30274":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:3495:1967":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:7878:239":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:4270:3343":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:50144:2296":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:11335:4118":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:13138:49352":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:13016:49291":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"12:559:144":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"4:7787:4360":{"crate_id":4,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"1:32621:50766":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"4:11538:3202":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"9:996:3618":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"4:1447:3130":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:50465:2787":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"4:3459:3008":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"18:729:60335":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:11514:44546":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"12:379:3689":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:10291:4110":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:4581:3485":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"5:3110:57383":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:3466:1965":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"4:15910:1755":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"8:0:1804":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:3675:1978":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:47291:11440":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"4:15928:1771":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"17:13247:49444":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"4:15921:1764":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"17:11130:43864":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:50059:2776":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"18:637:60320":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:9579:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:9156:2495":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:5855:3844":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:48900:2406":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"5:8553:3420":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:4135:39685":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"4:14952:3169":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:49323:2956":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:3742:1980":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"4:5764:3377":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:46819:4391":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:9275:42223":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:1621:37560":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:2328:3512":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:8481:3390":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:11002:44158":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"18:668:4245":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:50122:2292":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:4005:39669":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"4:11210:3324":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:4381:42741":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"12:750:2610":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"4:12578:129":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"4:10668:3067":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:7754:3883":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:13794:49951":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:10610:44077":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"4:9451:4468":{"crate_id":4,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"4:15902:1748":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"1:49123:50762":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"15:248:3706":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"18:849:4235":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"4:10962:2997":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"17:13167:49397":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"4:9545:3318":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:6717:3866":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:53637:19820":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"4:1466:3134":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"12:399:3688":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:7741:3882":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:9033:43845":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"4:5159:3323":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:10211:43933":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"4:7944:3267":{"crate_id":4,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"16:5530:3833":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:10814:4170":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"4:5156:3322":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"4:8286:204":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:53610:2449":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:46565:10753":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:10127:4135":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:10068:4107":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"4:10675:3282":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"16:4716:42836":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:56591:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9131:43848":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:3966:39665":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"4:7067:54149":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10422:43972":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:12262:48731":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:4840:2277":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:5488:40338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:14455:142":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"4:3058:3289":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"6:1526:37549":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"4:2422:4463":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"1:32969:2512":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:46772:2842":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:50469:2786":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"4:9446:4375":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"16:5685:3839":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"5:2619:3515":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:10445:43973":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:4516:39724":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"4:8200:3196":{"crate_id":4,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"17:10622:44044":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"4:10574:3518":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"4:5641:3368":{"crate_id":4,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"12:1203:3684":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:24853:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:49101:147":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:50701:159":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:5982:37490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"4:9578:4376":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"17:9930:60072":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"4:4433:2994":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:23767:28398":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"4:997:3092":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:11784:44777":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:12795:2925":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:24387:2649":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:3517:1972":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:52022:2448":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:4017:3102":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:49113:3196":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:47045:2570":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:2005:3102":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"6:161:36351":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:8295:2075":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:13529:49891":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:51998:2447":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:618:36674":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:51643:2443":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:12431:48742":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"18:678:143":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:3500:1968":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:2212:1057":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"17:13602:49904":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"0:41:1597":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"17:11689:44653":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:49662:2747":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:12700:48827":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"4:11284:3324":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:7110:3874":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:5547:39574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"18:782:60320":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:3616:132":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:3446:1956":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"5:3104:2137":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"4:10463:3265":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"1:49728:2756":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:15922:1765":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"1:8126:2607":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:10831:4135":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"4:8986:54121":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"16:7169:3796":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:13557:49894":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:25519:2662":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:11234:4189":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:48333:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"13:0:1803":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:12746:43869":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:48803:134":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:23762:2441":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"12:2398:52735":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:5721:3841":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"18:744:60323":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:13407:2298":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:5274:40299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"4:12587:4383":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:51900:2455":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:10223:4128":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:46756:2841":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:1031:3086":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:2733:4030":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:11701:44654":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"4:10922:3027":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"6:6184:40750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:593:36670":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:444:1883":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:6671:41117":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"4:15920:1763":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"17:10516:43975":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:2266:4338":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:7792:3817":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:9291:43832":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"4:1108:30272":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"12:1256:3141":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:13350:2293":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:5516:4018":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"9:963:3617":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:46699:2947":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"17:13369:49845":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:565:36667":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:10522:135":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"4:15409:3714":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"4:11925:54145":{"crate_id":4,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"17:11890:48542":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"4:8615:163":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:13257:49445":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:48375:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"12:2059:3104":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:10512:2401":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"17:13565:49895":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"4:11511:3199":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"1:22878:53583":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:8902:43842":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:49076:2382":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:10407:4197":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:10503:4137":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"14:56:44270":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:8423:3496":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:4628:42820":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:49946:2767":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"17:11985:48552":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:12282:48732":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"4:4481:54818":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:10394:4198":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:23973:53195":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:1600:37558":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:10845:2379":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:11017:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"4:4472:2401":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"1:47896:190":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:11515:2728":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:24399:2650":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:5293:40323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"12:895:3681":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"16:3265:4051":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:10937:44157":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"4:15924:1767":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"6:6229:40753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:7312:3101":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:13281:49509":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:6340:3424":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:13352:49527":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:11615:44593":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:5923:3846":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"12:933:3133":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"4:15870:56904":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:7100:3873":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:3462:1961":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:11181:43867":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:32433:2877":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"16:6407:3858":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"5:1710:3129":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:46268:1979":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"4:6650:2973":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:3981:39667":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"4:11914:53991":{"crate_id":4,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"17:13763:49946":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"9:1020:3619":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:5297:1903":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:5277:1902":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"7:0:1494":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:13584:49897":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:4230:39693":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:2772:4066":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:50370:2850":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:12957:49290":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"18:837:2293":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"4:7441:3222":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"6:6097:37494":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:9796:60084":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"18:694:4246":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"4:4497:2999":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"1:13072:2763":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:10851:44049":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:49620:2743":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:8668:137":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:32573:2836":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"12:2412:59444":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"4:5713:3371":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:13215:49401":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:2883:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:5077:1720":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:11433:2726":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:46182:197":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"4:4220:3018":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"4:2135:3103":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:47997:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:51930:2459":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"9:927:41515":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:7355:3781":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:3948:3009":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:6034:33388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:6080:37491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:10800:143":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"17:10115:4215":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:13463:49881":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:12237:48729":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:3247:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"17:12482:48746":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:9534:2050":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:7415:3801":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:3373:107":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:4997:1911":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"4:11932:53985":{"crate_id":4,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"17:9716:60126":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:1740:37571":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:22880:53579":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:12143:48722":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:4145:2519":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"16:7200:3798":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:9431:43852":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"4:15929:1772":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"1:49633:2744":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:8432:52708":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"9:234:3577":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:51854:2467":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"4:12034:3163":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:46586:2673":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:11085:4193":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:46638:2776":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"4:5430:3095":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"4:14907:54341":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:2981:4054":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:12209:48727":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:3987:39514":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:1704:37567":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:49481:2732":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:50473:2790":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:11354:4117":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:11457:44270":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:3102:2276":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:23386:28379":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:4975:42903":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"4:2152:3106":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:50238:2304":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:46966:2563":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:11282:43868":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"9:686:3550":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"4:10537:3110":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"5:3402:3104":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:24439:5091":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:13595:49903":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:46663:2775":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"4:11986:3160":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:11314:4119":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:12070:48660":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:53534:2464":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:7379:3803":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"4:1477:3135":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"4:3405:3001":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:6954:39857":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:6089:3849":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:51554:2466":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:47820:2610":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"4:10248:54141":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:4392:39710":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:1663:2610":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"4:1113:30273":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"4:15925:1768":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"5:0:282":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:13612:49905":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"4:4415:2978":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"5:1276:3509":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:56617:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:2123:2075":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:12469:48745":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:545:36666":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:25150:2815":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"12:1666:3696":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:4464:39719":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:11031:43862":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:10048:43932":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:13323:49513":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:10240:4158":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:681:43841":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"4:10448:54355":{"crate_id":4,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"6:5998:36542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:8274:3397":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:299:59929":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"4:11361:33391":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:3371:222":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"4:14655:3098":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:52378:2480":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"4:12005:3161":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:12360:48738":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:46616:2949":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:5998:3799":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"4:14457:130":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:1634:37562":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"4:7489:3225":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"1:24820:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:11563:44555":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:6759:1925":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:9826:4135":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"4:1105:30270":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"4:14162:2270":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:49700:2544":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:24414:5072":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"12:1784:4334":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:12348:48737":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:3814:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:13953:49994":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:1537:37551":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:5433:40334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:22901:53584":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"4:10488:2270":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"16:6190:3854":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:3619:133":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"4:5983:3341":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"4:2481:3275":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"4:12018:3162":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:13452:49880":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:51329:50723":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:10643:44059":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:21:677":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"5:5388:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:13515:49889":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"4:4181:3016":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:13708:49907":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"12:1682:3697":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:3271:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"4:5524:3050":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:9746:43856":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:0:1811":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:2376:3531":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:10579:191":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"4:1441:3102":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"16:5362:3825":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:13331:2291":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:24919:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:13440:49879":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:50006:2770":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:13147:49353":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:6856:41277":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:6153:40749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:11212:4191":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:3671:1977":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"4:14473:119":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:10575:2409":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"5:4665:4339":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"4:10731:3007":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"12:928:3130":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:7048:3387":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:4573:42813":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"4:10298:4379":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:3452:1959":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:9873:43858":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"4:696:3240":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"4:11270:3375":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:4485:39721":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"11:54:3673":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:46739:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:10598:44076":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"12:353:4454":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:9004:43844":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"12:787:3131":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:11945:44079":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"4:1146:4460":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:2276:2370":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:1311:4219":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:3828:138":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:6691:3865":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"4:5510:3056":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:4308:39699":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"14:0:1809":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:3521:1973":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:8536:3102":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"4:1374:2610":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:8375:3023":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:10244:2712":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"12:466:59440":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"12:2253:3138":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:52678:2445":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:6433:3859":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:53364:2461":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"}},"external_crates":{"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":18}