{"root":"0:0:1958","crate_version":"1.4.0","includes_private":false,"index":{"1:13138:26302":{"id":"1:13138:26302","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12312:1799"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5597":{"id":"5:5597","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5598:30574","5:5599:3153","5:5602:30575","5:5605:30576","5:5613:30577","5:5614:30578","5:5615:3306","5:5616:27472","5:5617:27473"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13137:334":{"id":"1:13137:334","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13138:26302","`u8`":"4:12312:1799"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13185:26330":{"id":"1:13185:26330","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12817:3473","`DoubleEndedIterator`":"1:8204:129","prim@char":"4:12295:458","str::split":"1:13179:26327"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43388:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12838:3489","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13252:26236":{"id":"1:13252:26236","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13139:1963":{"id":"1:13139:1963","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41510:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10908:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10908:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13260:29878":{"id":"1:13260:29878","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4901:29878"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43687:3253","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13129:29854":{"id":"1:13129:29854","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13225:29870":{"id":"1:13225:29870","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13143:24887":{"id":"1:13143:24887","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10908:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10908:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13255:26240":{"id":"1:13255:26240","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:980:37164"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5614:30578":{"id":"5:5614:30578","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:296:2264","`String`":"5:7616:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:2264","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13157:22437":{"id":"1:13157:22437","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13158:22442"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43644:3502","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13244:29875":{"id":"1:13244:29875","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12817:3473"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12838:3489","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:1964":{"id":"0:29:1964","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"1:13158:22442":{"id":"1:13158:22442","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13157:22437"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43653:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13259:3232":{"id":"1:13259:3232","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4904:3232"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43678:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13194:26332":{"id":"1:13194:26332","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12817:3473","str::rsplitn":"1:13197:26334"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43474:3429","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5617:27473":{"id":"5:5617:27473","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13253:26237"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13159:28618":{"id":"1:13159:28618","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43624:3501","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13191:29862":{"id":"1:13191:29862","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12817:3473","str::split":"1:13179:26327","prim@char":"4:12295:458","str::split_terminator":"1:13188:29861"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43438:3504","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12838:3489","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13156:22698":{"id":"1:13156:22698","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43356:3293","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13155:21600":{"id":"1:13155:21600","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12295:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43346:3499","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13175:2444":{"id":"1:13175:2444","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41510:190","prim@char":"4:12295:458","self::pattern":"1:12817:3473"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12838:3489","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5605:30576":{"id":"5:5605:30576","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7616:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13232:25922":{"id":"1:13232:25922","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12817:3473"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13220:29867":{"id":"1:13220:29867","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13154:22443":{"id":"1:13154:22443","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12295:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43340:3500","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13253:26237":{"id":"1:13253:26237","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5598:30574":{"id":"5:5598:30574","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:2264","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:296:2264","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13251:26235":{"id":"1:13251:26235","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13145:24888":{"id":"1:13145:24888","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10908:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10908:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13249:26232":{"id":"1:13249:26232","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13247:29876":{"id":"1:13247:29876","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12778:135","`FromStr`":"1:12777:2984"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41621:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12777:2984","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12777:2984","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13222:29868":{"id":"1:13222:29868","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13226:29871":{"id":"1:13226:29871","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12817:3473"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12843:3488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13235:26340":{"id":"1:13235:26340","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12817:3473"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12838:3489","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13135:26229":{"id":"1:13135:26229","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12365:3493"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13162:24512":{"id":"1:13162:24512","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12817:3473"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13127:973":{"id":"1:13127:973","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12295:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13168:26339":{"id":"1:13168:26339","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12817:3473"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12838:3489","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13206:2165":{"id":"1:13206:2165","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12817:3473","`DoubleEndedIterator`":"1:8204:129","prim@char":"4:12295:458","str::rmatches":"1:13209:29863"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43574:3506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13224:29869":{"id":"1:13224:29869","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13238:29873":{"id":"1:13238:29873","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12817:3473"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12838:3489","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13254:26239":{"id":"1:13254:26239","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:980:37164"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13132:29856":{"id":"1:13132:29856","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"1:13130:29855"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13160:29860":{"id":"1:13160:29860","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43634:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13257:29877":{"id":"1:13257:29877","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4903:29877"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43669:3254","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13209:29863":{"id":"1:13209:29863","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12817:3473","`DoubleEndedIterator`":"1:8204:129","prim@char":"4:12295:458","str::matches":"1:13206:2165"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43592:3507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12838:3489","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13250:26233":{"id":"1:13250:26233","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39472:3202","Self::is_ascii":"1:13249:26232"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39472:3202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13256:26241":{"id":"1:13256:26241","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:980:37164"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5602:30575":{"id":"5:5602:30575","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7616:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5613:30577":{"id":"5:5613:30577","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7616:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13200:26336":{"id":"1:13200:26336","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13141:24886":{"id":"1:13141:24886","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41510:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10908:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10908:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13212:29864":{"id":"1:13212:29864","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12817:3473","`DoubleEndedIterator`":"1:8204:129","prim@char":"4:12295:458","str::rmatch_indices":"1:13215:29865"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43520:3508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13128:2445":{"id":"1:13128:2445","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:1958":{"id":"0:28:1958","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"1:13130:29855":{"id":"1:13130:29855","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13136:29857":{"id":"1:13136:29857","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13161:22445":{"id":"1:13161:22445","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43662:3510","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13149:26321":{"id":"1:13149:26321","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"1:13151:26325","str::split_at_mut":"1:13150:26322"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13165:26338":{"id":"1:13165:26338","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12817:3473"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13152:26326":{"id":"1:13152:26326","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13151:26325"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13171:2486":{"id":"1:13171:2486","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41510:190","prim@char":"4:12295:458","self::pattern":"1:12817:3473"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13151:26325":{"id":"1:13151:26325","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13152:26326"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13218:29866":{"id":"1:13218:29866","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13150:26322":{"id":"1:13150:26322","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"1:13149:26321","str::split_at_mut_checked":"1:13152:26326"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13182:22429":{"id":"1:13182:22429","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12817:3473"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12633:3440","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13241:29874":{"id":"1:13241:29874","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12817:3473"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13179:26327":{"id":"1:13179:26327","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12817:3473","`DoubleEndedIterator`":"1:8204:129","prim@char":"4:12295:458","str::split_whitespace":"1:13157:22437","str::rsplit":"1:13185:26330"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43370:3427","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1958":{"id":"0:0:1958","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:1964","0:31:1965","0:28:1958"],"is_stripped":false}}},"1:13197:26334":{"id":"1:13197:26334","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12295:458","str::splitn":"1:13194:26332","self::pattern":"1:12817:3473"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43492:3425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12838:3489","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13203:26337":{"id":"1:13203:26337","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41508:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12838:3489","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13215:29865":{"id":"1:13215:29865","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12817:3473","`DoubleEndedIterator`":"1:8204:129","prim@char":"4:12295:458","str::match_indices":"1:13212:29864"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43538:3509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12838:3489","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5599:3153":{"id":"5:5599:3153","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7616:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5615:3306":{"id":"5:5615:3306","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7616:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5616:27472":{"id":"5:5616:27472","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13252:26236"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:1965":{"id":"0:31:1965","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1964","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13148:29859":{"id":"1:13148:29859","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12301:1671","crate::ops::IndexMut":"1:3381:2357","str::slice_unchecked":"1:13147:29858"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13147:29858":{"id":"1:13147:29858","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12301:1671","str::slice_mut_unchecked":"1:13148:29859","crate::ops::Index":"1:39117:2356"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13229:29872":{"id":"1:13229:29872","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12817:3473"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13188:29861":{"id":"1:13188:29861","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12817:3473","str::split":"1:13179:26327","prim@char":"4:12295:458","`DoubleEndedIterator`":"1:8204:129","str::rsplit_terminator":"1:13191:29862"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43420:3505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12823:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13126":{"id":"1:13126","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13127:973","1:13128:2445","1:13129:29854","1:13130:29855","1:13132:29856","1:13135:26229","1:13136:29857","1:13137:334","1:13138:26302","1:13139:1963","1:13141:24886","1:13143:24887","1:13145:24888","1:13147:29858","1:13148:29859","1:13149:26321","1:13150:26322","1:13151:26325","1:13152:26326","1:13154:22443","1:13155:21600","1:13156:22698","1:13157:22437","1:13158:22442","1:13159:28618","1:13160:29860","1:13161:22445","1:13162:24512","1:13165:26338","1:13168:26339","1:13171:2486","1:13175:2444","1:13179:26327","1:13182:22429","1:13185:26330","1:13188:29861","1:13191:29862","1:13194:26332","1:13197:26334","1:13200:26336","1:13203:26337","1:13206:2165","1:13209:29863","1:13212:29864","1:13215:29865","1:13218:29866","1:13220:29867","1:13222:29868","1:13224:29869","1:13225:29870","1:13226:29871","1:13229:29872","1:13232:25922","1:13235:26340","1:13238:29873","1:13241:29874","1:13244:29875","1:13247:29876","1:13249:26232","1:13250:26233","1:13251:26235","1:13252:26236","1:13253:26237","1:13254:26239","1:13255:26240","1:13256:26241","1:13257:29877","1:13259:3232","1:13260:29878"],"negative":false,"synthetic":false,"blanket_impl":null}}}},"paths":{"6:497:9743":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"11:430:32192":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:4743:9137":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:8306:13960":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:586:9754":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:15266:21122":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:7330:9620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"4:3597:28119":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:6962:16731":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:12838:3489":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:6738:14503":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"6:5617:13785":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:5211:2306":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:8029:15298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:8175:16772":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:5565:13781":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"4:881:8972":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:3264:17013":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:13024:16884":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:11497:16938":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:4952:13715":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"4:4344:9171":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:517:9744":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:15116:21110":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"4:5381:202":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"1:1933:650":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"11:2369:15665":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:40209:3331":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"14:202:9303":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:22244:8748":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:11145:3440":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:10399:3293":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:11583:16965":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"4:10642:9110":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:12127:17019":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"4:7437:29136":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:11042:16895":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:7566:3292":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:43216:3437":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:23025:22365":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"6:5191:13738":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:5370:13760":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:3282:30669":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"4:2432:9050":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"4:12300:1637":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"1:43340:3500":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:39911:21988":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:2509:3172":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:2748:15767":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:22959:22136":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"16:2338:15748":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:2833:9071":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:13631:115":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:39121:2358":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:3559:2362":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:21493:21676":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:513:16851":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:45981:8635":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:11364:3430":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"4:6624:2107":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"16:6991:32393":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:35838:2347":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:150:15724":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:10317:16863":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:16138:21329":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:16235:21337":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"4:5269:203":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"4:1827:9009":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"16:4502:16308":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:7714:9322":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:6689:14497":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"6:5236:13743":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:6491:14437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:3024:2513":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"13:0:2188":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:5472:13771":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:578:9753":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:5361:13759":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"4:4271:9168":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:40521:3346":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:6519:14482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:1490:10637":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:721:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:5897:16686":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:10476:156":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:21991:3420":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:10908:238":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:4976:16437":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"4:11179:29068":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:1062:31237":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:6379:14409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:13738:20334":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:5400:13764":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:15734:21158":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:13473:19841":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"18:0:2198":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:12043:17014":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:11605:16990":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:12189:17095":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:5031:13725":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:40122:3288":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"4:8140:9066":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"16:2684:15764":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"4:850:2859":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:4891:13540":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:46459:8600":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:7412:10766":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:1098:16907":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"4:9658:137":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"16:7528:16744":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"4:919:8976":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:45351:8632":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:5376:13761":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"4:482:29567":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:15138:21112":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:22970:22079":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"17:11256:16929":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"4:6394:2887":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:46540:8607":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:6353:16701":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:45334:8626":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"0:0:1958":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"17:14463:20378":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:45898:8675":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"4:6726:2316":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:30473:3186":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:12443:17094":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:13986:20347":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"9:392:15542":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:2458:15754":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:23003:22168":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"4:10442:2897":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"5:1525:8972":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:7559:16747":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"11:1087:32191":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"4:6215:29565":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:6543:2864":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:40028:3252":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:40279:3347":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:11825:17031":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"4:9303:16738":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"5:3248:30674":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"4:4753:25993":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:15608:21149":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:3790:2860":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"4:5104:9204":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"6:4992:13721":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:45419:8679":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:0:543":{"crate_id":1,"path":["core"],"kind":"module"},"1:2050:21982":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:42504:3186":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"16:6665:16722":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:15010:21105":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:7593:9042":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:2768:15768":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:11547:16992":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"4:929:8978":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:14489:20380":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"4:8845:9228":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:6850:24419":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:14079:20354":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:4970:3246":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:6746:14504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:13455:25270":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:4255:3225":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"17:14855:21097":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"4:8499:3293":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"6:5352:13758":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"11:1066:15661":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:10720:33468":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:12843:3488":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:11510:16937":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:11016:16893":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:8301:16778":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"4:7831:16852":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:43438:3504":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:3171:2334":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:7590:16750":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:7061:16736":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"4:11717:2900":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"4:724:153":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:4436:31278":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:5756:16678":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:8247:13951":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:6620:16719":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:39949:3262":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:7629:9304":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:12353:17100":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:15092:21108":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:15039:21107":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:42942:3470":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:16249:21338":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"16:6927:16729":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:16032:19827":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"4:7881:29544":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:6821:14510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:14038:20351":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:4162:9142":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:45287:8625":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:22753:22346":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:16176:21332":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"5:824:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:7037:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:5598:13784":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:44138:130":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"11:687:2859":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:2864:143":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"4:8218:9104":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:5447:9297":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:41613:3363":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"17:14503:20381":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:5314:13753":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"4:8174:138":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:32045:3216":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:21564:9071":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:10705:21950":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"4:8462:9070":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"6:5122:13733":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:6560:16715":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:41552:2449":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"4:3248:29444":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"4:11205:9074":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:41561:2425":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"17:16093:21326":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"1:3565:2364":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:41270:3354":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:8197:15459":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:2808:15770":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:6849:16726":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:2667:133":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"11:2562:32187":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:7741:16758":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:43931:3532":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"14:187:15680":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:6900:14538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:5415:13765":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:6532:16713":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:39983:3255":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:41488:3360":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:5536:13778":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:40041:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"11:1603:15664":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:13292:19829":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:1189:31114":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:3207:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:6880:13615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"4:12294:1148":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"5:296:2264":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:5653:13790":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:12150:17017":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:403:16850":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"4:4100:9136":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:10468:152":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"4:3285:9112":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:6749:16723":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:12817:3473":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:42710:24423":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:6768:14507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:43176:3423":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:6855:21952":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:11865:17054":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"18:689:21369":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:39134:212":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:6657:14493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"4:8482:3330":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"1:2507:3171":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:13064:16836":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"18:726:21371":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:39926:3259":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:1653:10653":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"4:8524:9125":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:4800:13701":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:21680:9071":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:43945:3533":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"4:1064:8982":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:22332:24974":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:1970:1311":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:21435:21663":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:41527:172":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"5:1309:8981":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"15:0:2195":{"crate_id":15,"path":["addr2line"],"kind":"module"},"18:507:33475":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:10265:3391":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:46488:8603":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:45661:8640":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:45404:8673":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:21691:8616":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:5020:13724":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:5781:16680":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:6788:31645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:4237:3225":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:13211:19825":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"7:31:15512":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"11:2151:8982":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:40046:3289":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:2708:15765":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"4:6505:185":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"9:424:15543":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"9:178:15646":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:45742:22359":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:23477:235":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:5244:953":{"crate_id":1,"path":["core","iter"],"kind":"module"},"6:8012:15297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:5202:3295":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"4:4279:9169":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:8351:15496":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:4986:17124":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"4:4940:9147":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:1354:8983":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"4:9359:186":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:39279:2361":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"4:11187:3545":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"6:5146:13735":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:7539:16745":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"4:12308:868":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"1:3145:3214":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:43538:3509":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"4:5587:113":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"5:1575:8995":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:3352:141":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"4:8591:9126":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"4:5034:9195":{"crate_id":4,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"4:1603:8986":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:734:2987":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:2609:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:41448:3358":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:3633:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:6589:31237":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:11937:3187":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:12929:16881":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:7727:16757":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:1169:2850":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:1707:10659":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:10263:3390":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:13959:20345":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:3014:15777":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:43167:3424":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:7546:14923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:13497:19843":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:40313:3339":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:40178:3330":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"18:698:21370":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:3191:2355":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:43634:3503":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:5677:13793":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:46563:8608":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:3961:2449":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:21479:21670":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"11:364:2830":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:40142:3296":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"6:5320:13754":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:4737:2282":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:7356:2449":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:45809:22181":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:15582:21147":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"4:7945:8946":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:10044:16859":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:11743:17001":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:7339:14913":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:12422:17103":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:39995:3256":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"6:4909:13710":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"18:538:21378":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:8118:16769":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"4:9417:9074":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"1:39171:211":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:15521:21145":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:15701:21156":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:11661:16967":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:4897:13709":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:5445:13768":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:7584:14926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:39037:2367":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:5336:13756":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"11:856:2834":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:9671:16827":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:6032:3335":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:3152:3185":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"17:15356:21131":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:43574:3506":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"16:4802:16401":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:1153:31116":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:22373:8751":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:16259:19835":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:12823:3487":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:7522:8968":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:15376:21133":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:15078:16909":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:13344:19832":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:40300:3324":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"4:2283:3177":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"17:11853:17053":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:7083:31264":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:6542:14485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:6782:16724":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:5546:13779":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"4:904:8973":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:13649:2921":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"14:220:15682":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:12724:16875":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:13723:20333":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:13252:19827":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:45558:8668":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:2125:188":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:22815:24404":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:14356:20371":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:12365:3493":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:2834:2944":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:12485:17107":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:12695:17115":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:4613:2272":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"17:10905:16873":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"4:4048:9132":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:570:9752":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"4:11155:9241":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:45640:8634":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:39472:3202":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:0:2196":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:43662:3510":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"4:9255:8931":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:42957:22381":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"18:635:33489":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:1547:10644":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:8282:13956":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:5817:16682":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:4539:2103":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:30484:22066":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:40497:3344":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"4:11563:25963":{"crate_id":4,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"6:7366:9200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:46479:8602":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:669:30652":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:5039:13726":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"4:11869:28332":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"4:10285:28344":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:13015:16840":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"4:2448:9055":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"6:1686:10657":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:9807:16839":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"4:1810:674":{"crate_id":4,"path":["std","env"],"kind":"module"},"4:3842:9128":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:1485:10636":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:6940:32450":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:4787:13700":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:14414:20375":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:40072:3290":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:14868:21098":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:8577:9174":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:15569:21146":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:12328:17064":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:12584:16871":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"6:7314:10595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:7144:16737":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:40229:3333":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:6278:16697":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:11674:16997":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:1494:2449":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"4:9244:28287":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:8188:16773":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:15426:21139":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:15799:21163":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:42739:9223":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:2871:256":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"16:4587:16324":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:2478:15755":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:45824:8663":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:30201:2945":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"6:6678:14496":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:8259:13953":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:8669:22876":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:1535:10643":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:43653:3511":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:39960:3253":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:10269:3392":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"11:1676:32181":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:3630:2291":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:3718:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:22704:2985":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:5200:13739":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:5831:16683":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:42727:156":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:10622:3454":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"4:2678:21950":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:42521:136":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"17:12543:17113":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:3381:2357":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:7813:16762":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:4942:13714":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"4:8226:2860":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:5477:13772":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:12851:16877":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:15760:21160":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"11:2554:32184":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:46468:8601":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:45611:8628":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:4837:13704":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:13669:2923":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:45515:8700":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:11115:16903":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:5250:13745":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:3115:2287":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"16:5347:16670":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:22992:22188":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"17:10671:33466":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:6317:16699":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:10661:16868":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:10915:33470":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:5174:9159":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:40094:3274":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"16:2438:15753":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"11:1903:8984":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:33129:2341":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"4:11876:15705":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:2788:15769":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:7516:14921":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:11896:3439":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"6:6609:14488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"4:11635:28306":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:8300:13959":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:5225:13742":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:43277:2919":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:21425:3196":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:15720:21157":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:40261:3336":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"4:12267:8957":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"4:638:8950":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:39073:2366":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"5:5915:2864":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:42200:3389":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:11189:16906":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:44162:3546":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:44408:24418":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:41248:169":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"18:651:33475":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:10259:3388":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"5:1555:8976":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:41602:2429":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:6532:14484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:11102:3427":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"4:1575:2858":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:11341:16943":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:924:8990":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:2858:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"16:7098:32646":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"4:5709:9238":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"11:2304:8981":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:41669:2859":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"17:11688:16963":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:11075:16910":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"4:8030:8956":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"4:8565:3358":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:6098:16694":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:4824:13703":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"4:7963:8935":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"16:6504:16712":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:5219:13741":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:6588:16717":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:46514:8605":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:5006:16444":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:45869:8669":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"4:4241:29135":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:7379:32708":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:30854:3196":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"4:9665:9066":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"5:6946:9327":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:13877:20341":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:16269:19837":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"16:5307:16653":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:11295:3432":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:8622:148":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"4:940:2834":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"5:3025:31111":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:6650:14492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:12949:16882":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:6670:14495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:4307:2858":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"4:5925:2310":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"18:623:33478":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"4:558:2881":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"4:10920:127":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:14933:21101":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:4971:13718":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"4:8162:9064":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"17:11324:16957":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:3778:15791":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:39229:215":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:5400:16673":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:915:8975":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:21462:21674":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:2246:2912":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:6655:3348":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:11715:16999":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:15023:21106":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:8162:144":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:44092:3483":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"4:6794:2323":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"16:5107:16476":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"4:11574:26001":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"11:844:8978":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:6466:16709":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"4:10684:2898":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"6:5212:13740":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"4:1863:9019":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"17:13568:19848":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:6409:14474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"4:11056:29560":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:6844:3325":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:14131:20357":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"4:8145:9063":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:5859:3225":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"4:8196:8970":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"5:7616:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:7386:8992":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:6066:16692":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:4718:16386":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:15748:21159":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:41508:193":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"5:7376:2864":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:4:1230":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"17:15418:21138":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"4:8429:3302":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"6:5466:13770":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:10226:142":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"4:7944:9071":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"5:1828:8973":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:8631:3317":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:12671:17147":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"4:1888:2883":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"1:22846:3001":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:41330:22347":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:13606:19851":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:33247:2338":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:11227:16900":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:4856:16409":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:11142:16870":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:5403:31237":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:6763:14506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"11:2548:32185":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"4:8210:28355":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"18:643:33475":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:1526:10642":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:6752:31237":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:12107:16870":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:3303:8987":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"4:5522:9233":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"6:5083:13730":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:15151:21113":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:3110:246":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"4:9376:233":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"4:9372:3225":{"crate_id":4,"path":["std","sync","poison","Guard"],"kind":"struct"},"4:1976:762":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"6:5046:13727":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:10769:33471":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"4:4106:9137":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:31978:3211":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"6:4864:13705":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"4:4757:25997":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:10251:16861":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:7359:14915":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:12887:16879":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:45936:8629":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:7561:14924":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"4:3588:3265":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"17:15769:21161":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:15624:21151":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"11:837:8977":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"4:8299:28277":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"1:37769:2349":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:11915:17055":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:8202:16774":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"11:2403:2859":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:11634:16966":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:14994:21092":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:31971:2281":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:46593:8610":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:7452:14917":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:6811:14509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:4500:31278":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"4:9386:2318":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"17:14449:20377":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:9858:16854":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"15:327:15701":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:4072:2864":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"8:0:2189":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:32650:2332":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"5:7364:8991":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:2987:2884":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:7575:14925":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:15168:21114":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"4:923:8977":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"4:1825:9008":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:44104:3484":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"4:4708:9193":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"4:4154:9140":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:13235:19826":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:3331:2290":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:14189:20360":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"4:11652:26007":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:13173:17155":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"4:10157:22473":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:2606:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"4:8572:9173":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"4:4292:9170":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:46499:8604":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:13832:20338":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:41436:3357":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:3346:139":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"18:481:21374":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"4:9137:9255":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:2548:15758":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:8216:16775":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:8253:13952":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:4618:2273":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:538:9747":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:6574:16716":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:7549:16746":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"4:12315:1793":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"17:11702:16998":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"4:8518:9126":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:1426:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:12251:17068":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:2394:15751":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"4:11377:9043":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"10:36:32175":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:44284:163":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:5995:16689":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:6813:16725":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:31988:2259":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"18:754:21372":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:33070:2337":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:46223:8636":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:14372:20372":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:41544:2859":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"16:7052:16735":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:12556:3517":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:4916:13711":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"14:214:15681":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:13509:19844":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"4:3470:3307":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"17:15410:21137":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:2087:2860":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"18:765:21365":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:12969:16828":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:12175:17083":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:1516:8971":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:2867:257":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"6:1559:10645":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:46031:8647":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:23014:22130":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"18:613:33496":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:5588:13783":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:40191:2905":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:43687:3253":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:22460:8744":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"15:394:15708":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:13089:17152":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:10534:33465":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"4:415:184":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:43356:3293":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:43520:3508":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:5846:16684":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"11:1910:8985":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"4:2446:9054":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"16:5037:16452":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"11:1923:8987":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:43788:3527":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:45678:8646":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:45792:22342":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:4609:220":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:13116:17153":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"4:12314:1787":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"4:9497:2882":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:737:189":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"9:447:15541":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:8125:3319":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:3538:2360":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:41604:2522":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"4:5556:9235":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"15:306:15697":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"13:226:32198":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:8175:2263":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:597:16852":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:14246:20363":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"18:80:21350":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:13187:19824":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:4344:24292":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:5296:13751":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:7464:2449":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"4:12278:26022":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:13899:20342":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:12225:17070":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:21566:8615":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"4:9210:9254":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"5:6670:2449":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"4:1608:8987":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"18:706:3490":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"4:10264:9019":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:41677:2449":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"11:2469:8973":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"5:7436:29585":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:13972:20346":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:5845:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:44385:3580":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:7984:9698":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"4:1041:8981":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"4:12306:732":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"17:15814:21164":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:4641:16332":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:6505:14438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"4:7988:2898":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"17:11799:17051":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"4:1055:2840":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:42214:3390":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:46578:8609":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:42207:3388":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"4:4755:25995":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"16:6120:16695":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:12300:17099":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:7799:16761":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:14386:20373":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:5061:3225":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"4:12302:1759":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"17:15126:21111":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:6263:32368":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"4:10948:29065":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"4:860:2449":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"4:4863:9152":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"4:48:2101":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"1:40745:3309":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:559:9750":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:10284:16862":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"4:7841:28301":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:3739:31237":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"11:883:8980":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:13325:19831":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"9:482:15540":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:5955:3225":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:46268:8670":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:261:32702":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:15190:21116":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:6915:14539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:21584:8616":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:22715:22479":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:542:32547":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:41788:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:7570:16748":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:14560:20385":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:40721:2106":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"11:800:2864":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"11:328:32176":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"4:8016:8955":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:10457:137":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:16223:21336":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"6:1621:10650":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:6706:14499":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:43592:3507":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"4:6651:2321":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:6047:16691":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:7467:14919":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:11102:16904":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"4:8763:9224":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:39968:3233":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:37714:2348":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:46313:8642":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:13375:19834":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:6079:16693":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"0:31:1965":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"1:32836:2335":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:14788:21095":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"4:9129:2858":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:2612:15761":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:43287:3435":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:6433:16706":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:8271:13955":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"9:502:15544":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:31987:236":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:43268:3434":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:860:32691":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"16:4913:16420":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:4465:2292":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:2628:112":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"16:4771:16393":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:33789:2344":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:10261:3389":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:7709:3299":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"16:6634:16720":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"4:2039:197":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:1340:2840":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:11053:2858":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:13272:19828":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:41603:2428":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:2307:29614":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:3810:15800":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:11242:16928":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:44108:3485":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:13507:3570":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"4:10867:25932":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"5:7456:2449":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:10524:16866":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"4:641:8951":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:2704:201":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:41827:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:46525:8606":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:44339:3573":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:33188:2339":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:6636:14491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:15333:21129":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:8288:13957":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:1325:8982":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"4:5784:9247":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"4:10999:9243":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:6597:14487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:2739:9105":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:12832:3490":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:7108:31246":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:5266:13747":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"4:8818:9226":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"16:2636:15762":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:2854:15772":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:3925:15846":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"4:12318:1860":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"17:12863:16878":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:5802:16681":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:5134:13734":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"4:2700:9095":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:2755:29621":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:3329:15780":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:11621:16968":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:7321:2425":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"4:8201:8969":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"16:5686:16674":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"4:9121:9243":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"1:22115:8618":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:7823:16763":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:5112:13732":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:3659:2859":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:21689:8617":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"4:4822:9175":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:3156:2331":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"18:680:21368":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"11:1107:2842":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"14:31:15672":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"4:11621:25956":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:22306:9071":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:11184:3428":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:40219:3332":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"11:787:8972":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:12768:16832":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:41983:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"4:9180:9253":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"4:3380:9111":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:14298:20367":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:40009:3258":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:22200:8747":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"16:8136:16770":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:43329:3497":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"4:3022:136":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"6:5636:13788":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"5:5711:9325":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:15596:21148":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:8129:3318":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"4:1579:2449":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:22729:22080":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:42063:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:12433:16840":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:13753:20335":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:6621:14489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:15944:19825":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"11:2542:24508":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:15214:21119":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:22835:2986":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:10350:16864":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"4:6132:219":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:6948:16730":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:44096:3482":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:10267:205":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"6:6756:14505":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:4682:2280":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"4:12319:1370":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"17:16187:21333":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"11:2569:8967":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:39939:3261":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:7429:10764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:12777:2984":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"4:9108:9242":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:22937:22360":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"6:1639:10652":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:11524:16991":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:15:2166":{"crate_id":1,"path":["core","write"],"kind":"macro"},"16:2418:15752":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:5927:16687":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:5102:13731":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:6664:14494":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:7604:16751":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"4:6339:28340":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:46655:8612":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:6775:14508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"11:700:2449":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:7581:9041":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"4:10351:9245":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"16:8155:16771":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:5367:16671":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:22597:22467":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"4:5898:2309":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"18:589:24420":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:2493:651":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:1692:9160":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"11:490:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"4:11315:9044":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:3578:24260":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:3475:15781":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"18:659:21366":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:14147:20358":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:6031:2306":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:4766:2284":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:14271:20365":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:40169:3321":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:7348:14914":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:3027:29611":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:43867:3530":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:11166:16908":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:5143:423":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"17:12621:17117":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"9:0:2190":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:40270:3337":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:2936:15775":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"4:6723:2315":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"14:160:15672":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:5290:13750":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"4:12310:880":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"17:10419:16826":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"4:3242:28974":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:10252:119":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"16:2528:15757":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:13761:3577":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"4:2430:3160":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"11:1025:2840":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:13482:204":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:22334:3171":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"6:1585:10648":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:7355:16739":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"4:10959:9027":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"16:6872:16727":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:15222:21120":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:5390:13763":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:40714:3303":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:43966:3535":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:39299:3228":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"4:9168:9250":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:46421:8682":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:11293:16931":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:6562:14486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"4:12296:1821":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"16:8259:16777":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:2303:15719":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:12707:16874":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:281:31237":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"4:9364:2312":{"crate_id":4,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:33443:2342":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:43205:2918":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:11089:16905":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:5769:16679":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:10898:9071":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:41536:2858":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"17:15383:21134":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:15635:21152":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"4:946:8979":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:15324:21128":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:7639:9305":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:5722:16676":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:7910:16766":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"3:0:2187":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:3183:2353":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:16121:21328":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"4:8529:9123":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:45579:8674":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:39149:209":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:14325:20369":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:564:9751":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:4922:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:11222:3441":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"11:2536:32190":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:4940:16424":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:13797:20336":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:8341:15495":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:7389:10781":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:41302:3356":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:41470:3359":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:40736:3307":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:32044:2260":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:44116:3480":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:44369:179":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:22:794":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:43316:3498":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:4932:13713":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:5489:13774":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"16:6758:15691":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:8257:2262":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:5244:13744":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:12333:3417":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:16151:21330":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:14341:20370":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:9755:16823":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:2592:15760":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:4614:16328":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"11:434:32193":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:45454:8633":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:7857:16764":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:44298:226":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:14111:20356":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:13553:19847":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"4:9262:25920":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:11557:16993":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:13363:19833":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:8226:16776":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:1628:10651":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"4:11740:9128":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:10068:16838":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:11051:16920":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"4:952:8980":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"11:123:2823":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:4830:16406":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:6895:16728":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:15206:21118":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"4:9095:9241":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"17:13774:17056":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:11378:3426":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"4:12081:28080":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:12808:16835":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:25877:266":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:6480:16710":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:6335:16700":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:40755:3311":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:3805:2863":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:8692:9222":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"4:5572:9236":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"4:3020:225":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"9:238:9223":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:523:9745":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"18:531:21377":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:11567:16994":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:12597:17119":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:13844:20339":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"18:581:3196":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"4:12316:1775":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"1:3161:2336":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:13855:20340":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:3899:15843":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"4:11467:29553":{"crate_id":4,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"6:5344:13757":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"16:3614:15782":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"18:521:21373":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:33962:2346":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"4:10283:2896":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"4:8036:9026":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"4:4917:9153":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:43255:3436":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:13146:17154":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:4821:17118":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"11:1160:8983":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:3475:210":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:4379:3235":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:39890:3237":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:7446:14916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:7168:16738":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"4:1940:9037":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"17:11898:17030":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"4:9391:2319":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:12579:3514":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:5160:13736":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:30458:3126":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:4352:16227":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:9916:16856":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:33616:2343":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:5960:16688":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:39884:3233":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:4743:16388":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:11077:2859":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"18:670:21367":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"4:3606:9069":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"5:2287:29612":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:1699:10658":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"4:11541:28325":{"crate_id":4,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"17:3597:17036":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:1207:16915":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:3318:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:7881:3302":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:4885:13708":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"4:11045:29563":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:7428:16740":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"4:4861:9151":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:12595:3516":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"18:598:33493":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:12349:3419":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:11537:16958":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:4062:15960":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:40707:24246":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:12289:17063":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"4:12317:942":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"11:774:8971":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"4:10872:26074":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:11755:17002":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"4:1447:155":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:6494:16711":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"11:673:2858":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:6460:14479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:5002:13722":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:11405:16940":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"4:2287:9047":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"4:8740:9223":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"4:9195:9251":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:2524:2851":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:14516:20382":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"4:11884:15705":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:9910:22877":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:8313:177":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"4:2042:196":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:3548:253":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:12519:3515":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"5:3395:8973":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:15616:21150":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:43678:3233":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:3035:31110":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:7111:32582":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:6398:16703":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:43370:3427":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"17:0:2197":{"crate_id":17,"path":["object"],"kind":"module"},"1:45302:8661":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:44173:3547":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:14723:21093":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:7396:8997":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:15176:21115":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"4:3845:9127":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:11350:3425":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:11812:17009":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:6629:14490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:40323:3340":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:12792:16834":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:7420:2449":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:9399:161":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"17:14575:16840":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"4:2278:137":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"5:1724:31237":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:219:2848":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:30827:195":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"4:910:8974":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:12530:17114":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:32464:2333":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:5528:13777":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:5423:13766":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:42440:22367":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"4:9283:28300":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:2855:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"6:5502:13775":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:22948:22341":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"4:11062:29549":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:13485:19842":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:22418:9071":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:16105:21327":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"4:534:2878":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"4:8294:28311":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:45725:8702":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:9886:16855":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"18:96:21351":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"4:3616:9090":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"17:15301:21126":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:6146:3323":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"4:10425:113":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:11419:16870":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:12516:17123":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:12647:17112":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:2059:2909":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:4811:13702":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"9:330:15597":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:6026:16690":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:13946:20344":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"4:10639:9114":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:9984:16858":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:4496:2293":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:43997:3492":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:22665:24397":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"11:2231:15657":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"5:2195:8927":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:6156:3225":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"14:165:15673":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"4:1582:2864":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:37879:2351":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:46048:8696":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:4147:2859":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:5712:9239":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"6:4870:13706":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:40348:3342":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:40200:3322":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"4:7077:9258":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"4:12307:886":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"5:4102:31237":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"4:10901:9067":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:14587:20386":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"4:7288:29321":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"4:11857:9273":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"4:11580:9246":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:3842:15809":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:15473:21144":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"4:10982:26033":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:2698:194":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"6:5329:13755":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"6:7461:14918":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:13674:20332":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:13399:19836":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:5415:32564":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:44360:3572":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:15836:21166":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:11863:3438":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"4:2197:128":{"crate_id":4,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1:22926:22187":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"17:11153:16871":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:7509:16743":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:2838:15771":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"4:8512:3501":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"5:1463:2858":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:7888:16765":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"11:102:32189":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:43956:3534":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:31964:24617":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:22003:21668":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:14529:20383":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:11877:17010":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:8166:164":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"4:2504:2127":{"crate_id":4,"path":["std","io"],"kind":"module"},"7:78:15519":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:10185:16829":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:11595:16995":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:39900:3260":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:3243:8985":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"4:6849:232":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"4:5048:9196":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"0:29:1964":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"16:8313:136":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"4:9290:28304":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:45387:8667":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:12900:16880":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:5557:13780":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"4:9670:2895":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"4:3287:9113":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:10092:16860":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:6246:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:22681:22368":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"4:363:8945":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:44347:3574":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:40247:21563":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:13706:151":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:1680:10656":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:2572:15759":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"4:12295:458":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"2:234:225":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:39249:2359":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"4:7331:27562":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:14066:20353":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:22788:22180":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"11:2383:2858":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:8294:13958":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"15:288:15696":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:40507:3345":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"4:4499:9164":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"4:2458:9060":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"17:10155:16672":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"4:11240:161":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:15368:21132":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"4:4608:9175":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:9781:16853":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:10887:33467":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:22282:8749":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"11:875:8979":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:545:9748":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:7306:9791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:11063:16914":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:13538:19846":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:11313:16932":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:4332:24302":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:22737:22190":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:15992:21323":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:6442:16707":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"11:1142:15662":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:4267:3225":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:4468:16297":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:21481:21678":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:7487:2457":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:12238:17069":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"11:2124:8981":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:7633:32650":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:6698:14498":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:6441:14477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:7602:14927":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"18:515:21376":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:10511:3406":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:11128:16902":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:15646:21153":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:40084:3293":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"6:5382:13762":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:10439:16865":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:5742:16677":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"4:1073:8983":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:7769:16760":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"11:811:8973":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:15445:21141":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:10055:3404":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:43185:2916":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:6524:14483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:10137:16824":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:2234:16964":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:6648:16721":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:2950:136":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"17:14260:20364":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:37824:2350":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"4:2596:9102":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:4398:3236":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"16:7473:16741":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:3105:117":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"17:13922:20343":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"14:7:15672":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"5:1566:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:14977:21103":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:12264:17067":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:0:485":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"6:7537:14922":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"4:11801:9129":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:14876:21099":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:42221:3391":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:11730:17000":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:13412:19837":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"4:12298:1268":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"4:12262:28604":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:45272:8660":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"4:3947:9129":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:15678:21155":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:7618:16752":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:5630:13787":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:31957:16777":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"16:7711:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:4692:2281":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"4:12246:25769":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"4:2664:9103":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:13814:20337":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:1593:10649":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:2991:3207":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:4746:2283":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:30420:3157":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:46069:8630":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"4:3378:9110":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:3593:2289":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"4:10890:25967":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:39117:2356":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:42757:24268":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:2878:15773":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:1565:10646":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"11:1582:2846":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:46616:8611":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"13:109:32246":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:3241:2345":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"5:40:9004":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:43420:3505":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:43624:3501":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"4:8450:2886":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"4:8597:9166":{"crate_id":4,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:42961:3446":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:11467:16944":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:13999:20348":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"4:12311:861":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"1:43979:3491":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"4:7259:29556":{"crate_id":4,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:43116:24255":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:11788:17050":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:12056:17015":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:5515:13776":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:12508:17108":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:43752:3525":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"4:9316:25981":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"4:9435:9257":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:9296:2427":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"11:742:8976":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:43644:3502":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"11:1007:8981":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"4:8675:9208":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:3029:15778":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:45471:8639":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:2323:15747":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:42479:22206":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:6427:16705":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:41286:3355":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"5:1544:8975":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"4:3335:9114":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:5700:16675":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:43669:3254":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:11354:16942":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:3669:15783":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:15434:21140":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:42542:3398":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"5:5451:9298":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:6714:14500":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"16:6300:16698":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:4793:2285":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:14212:20361":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:12362:17101":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:42702:3409":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:12633:3440":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:10170:16673":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"4:5641:9237":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"5:7347:8993":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:15313:21127":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:31989:243":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:21464:21666":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:11773:17049":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:43492:3425":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:32076:114":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:12278:17098":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:12201:17096":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:2175:16979":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:7656:16754":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:14025:20350":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:2508:15756":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:1510:10640":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"4:837:2858":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:22915:22162":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"17:12388:17092":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:2861:162":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"17:15456:21142":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"4:8620:9200":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"4:6291:2921":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:3277:8984":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"4:9381:234":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:46442:8703":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:15400:21136":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:12299:333":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"1:30452:3158":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"11:1728:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:485:9741":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"9:53:15560":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"4:1597:8985":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:10877:16872":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:5014:13723":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"4:894:2864":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"11:351:32178":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"4:8051:9027":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:22432:8743":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"16:7085:32584":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:11392:16941":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:6606:16718":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:13526:19845":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:6478:14481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:6391:9259":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:40002:3257":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"6:5671:13792":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"4:6615:2313":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"4:12313:1781":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"17:15289:21125":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:38458:2352":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:13051:119":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:7537:8938":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:11764:17003":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"18:718:21363":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:46371:8697":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"4:6611:2106":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"4:12305:716":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"1:41686:195":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:4882:16412":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:10818:16871":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:3300:2365":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"5:3236:2858":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:646:8952":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"4:504:8927":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:14847:21096":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:2939:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"17:16198:21334":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"5:2205:29606":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:22465:8742":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:14235:20362":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:15281:21124":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:5665:13791":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:44084:3478":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"4:4819:9197":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:4924:13712":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"4:3500:3225":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"4:12320:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"1:42718:3408":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:10997:16892":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"11:2326:2840":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:10954:16890":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:7428:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:4356:109":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"16:6412:16704":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"4:10534:9240":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:44281:149":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"4:2280:9046":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"1:22387:3171":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"4:9231:2311":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:872:32702":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:10257:128":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"4:12301:1671":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"4:4630:9176":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:7306:32693":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:1723:10660":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"4:589:8947":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:16050:19828":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"4:12312:1799":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"6:465:9738":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:5181:13737":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"11:1917:8986":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"4:8304:9106":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"4:10911:138":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"4:12309:874":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"5:6052:2871":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"4:357:8944":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:43297:2920":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:10208:3265":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"5:941:2858":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:11336:3429":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:3031:31112":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:46146:8664":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:45433:8627":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"4:6116:2887":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"4:3427:9099":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:22867:9071":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:1940:3135":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:22113:9071":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:41621:225":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"16:2660:15763":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:8265:13954":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:2203:16939":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:8073:16767":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:2662:200":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:12076:17011":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:32074:3105":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"17:14752:21094":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"11:1566:15663":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:41592:2426":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:5999:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:40362:3343":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:22544:22454":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:39286:3212":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"17:11214:16901":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:9915:24495":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"14:40:19826":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"11:2443:2864":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:14912:21100":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"11:2352:8982":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:41944:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:3780:9124":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"11:1883:2858":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:10516:3407":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:44088:3481":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"4:8834:9227":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"1:41749:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:43894:3531":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:15197:21117":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:14091:20355":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:40238:3334":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"4:4042:9133":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"4:12293:405":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"17:11493:16951":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:22822:3000":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"4:9249:115":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:21962:9071":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"5:7605:9295":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"4:8505:3427":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"6:532:9746":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:3349:140":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:828:8988":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:21967:8622":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"16:7006:16733":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"4:6307:29550":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:45319:8666":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:3870:8973":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"11:1896:8973":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:31953:25587":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:41905:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"10:0:2191":{"crate_id":10,"path":["adler"],"kind":"module"},"1:9723:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:12557:16910":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"18:735:21364":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:256:32666":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:14599:20387":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:22320:8750":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"18:608:33509":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:39976:3254":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:43819:3529":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:2101:2863":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:39209:213":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:11026:16894":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"4:4140:9138":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:8625:3316":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:6976:16732":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:2374:15750":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"4:5891:2308":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:42749:24267":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"4:9336:25924":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:45771:21990":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:7406:29618":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:12213:17097":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:42495:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:40332:3341":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"4:9295:28315":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"4:3337:9115":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:40372:3327":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:15957:21322":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:13455:19840":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:3827:2864":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"4:4092:9135":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:5914:32592":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:12711:136":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"11:2140:2840":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"4:11646:26019":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:7132:32290":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:42450:3186":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:8006:15296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:4876:13707":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"4:10967:9237":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"4:3531:9068":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"4:1591:8984":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:45500:8694":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"4:868:8971":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"4:9078:9240":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"1:21447:21663":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"4:11222:25968":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"4:0:1663":{"crate_id":4,"path":["std"],"kind":"module"},"4:11780:9127":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"11:1051:8982":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:5075:16467":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:12371:16881":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"18:573:33475":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:14545:20384":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:11647:16996":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:15102:21109":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:11574:15657":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"10:44:15651":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:4560:16320":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"4:622:8948":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"11:0:2192":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:13785:17057":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"11:2423:2449":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:1517:10641":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:15249:21121":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:45366:8662":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:12399:17102":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:9737:16825":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"4:4150:9139":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:10982:16891":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"4:4425:9172":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"11:299:2826":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:41866:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:5164:21967":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:2234:29633":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:7497:16742":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:45529:8614":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"4:7968:8937":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"16:6456:16708":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:7755:16759":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:5277:13748":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:5064:13729":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:2036:3189":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:1496:10638":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:14402:20374":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:2998:15776":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:10720:21942":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"16:6160:15718":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:5260:13746":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:40291:3338":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"11:1887:2449":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:12089:17012":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:8317:13961":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:6543:16714":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:4466:3225":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:46400:8648":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"4:5223:28305":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:14436:20376":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:12030:17016":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"4:4263:9167":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:12408:17093":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"4:1969:9038":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"1:11257:3431":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:7397:32674":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:8093:16768":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:11269:16930":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:3342:2261":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:44100:3486":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:42102:2307":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:4979:13719":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:4985:13720":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:46010:8641":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:10828:33473":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:2902:15774":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:5052:13728":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:15058:21091":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:7592:3328":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:40057:3292":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:7682:28607":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"17:2037:16945":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:7593:3329":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:12342:17066":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:12318:16882":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:22650:22134":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:13424:19838":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"4:8616:9198":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:12824:16876":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:5436:13767":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:14475:20379":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:45596:8680":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"4:11607:25966":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:12478:17106":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:3646:2858":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:4959:13716":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:45486:8645":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:479:9740":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:1534:8974":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:10622:33464":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"4:5192:28305":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:12464:17105":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:45919:8681":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:8204:129":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:7698:8973":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:0:978":{"crate_id":6,"path":["libc"],"kind":"module"},"16:6231:16696":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:5643:13789":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:42467:22339":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"18:491:33488":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:16079:21325":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"6:1671:10655":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:12683:17116":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"4:8642:9150":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:13594:19850":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:41661:2858":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"6:6471:14480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:5283:13749":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:12572:16870":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"11:396:2832":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"4:1586:8973":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:13581:19849":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"4:9145:2449":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:7648:16753":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:867:32666":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:11367:16910":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"4:8190:127":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:12993:16883":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:40730:3305":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"4:10939:29062":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:6417:14475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:40112:3287":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:9938:16857":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:6721:14501":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:15778:21162":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:3473:17018":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"14:0:2194":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:9406:3487":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:5624:13786":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"4:8152:9067":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"6:1580:10647":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:1478:2859":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:43388:3431":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:7695:16756":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:12891:3519":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:44120:3545":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:5581:13782":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:12659:17111":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:14284:20366":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:1857:3225":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"6:6435:14476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"19:0:1247":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"7:0:1850":{"crate_id":7,"path":["unwind"],"kind":"module"},"11:1891:2864":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:6913:9325":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"4:5770:219":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"18:113:21352":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"4:4859:9148":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"4:5777:2887":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:22981:22356":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:3186:2354":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"4:1886:2882":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"1:9728:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:473:9739":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:1663:10654":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:6874:14537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:21513:8620":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"11:832:8974":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"4:5536:9234":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"17:11841:17052":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"11:710:8975":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:11443:16946":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:10271:3393":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"4:10636:9112":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:21572:8619":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:43773:3526":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:15390:21135":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:5407:1217":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:13046:16837":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:10710:16869":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:43802:3528":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:553:9749":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:6385:16702":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:4421:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:6802:15690":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"4:8135:9065":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"4:9084:198":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"4:10848:9199":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:45693:8695":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:12494:17071":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:7580:16749":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"4:8492:3344":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"17:10018:16831":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:43242:3320":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"4:8778:9225":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"5:868:8989":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:2355:15749":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:31915:3201":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"4:10877:9063":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:45710:8701":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:44112:3479":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:3196:15779":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:1107:2105":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"17:12454:17104":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:13437:19839":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:8328:13962":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:15655:21154":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:40763:3313":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:44288:218":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"5:3269:8986":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:5306:13752":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"4:7900:29551":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"18:563:21379":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:13387:19835":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:14051:20352":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:6936:9326":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"4:5025:9194":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:730:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"4:4078:9134":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"4:3549:2885":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"4:11168:9242":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:6342:32696":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:5483:13773":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:14177:20359":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"4:8583:9163":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:40149:3320":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:10688:21903":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:33306:2340":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:43346:3499":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"4:10930:2886":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:10218:16830":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:14311:20368":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:7657:24241":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:46342:8676":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:43474:3429":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:14012:20349":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:15342:21130":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:7485:14920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"4:6780:2322":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:3103:2288":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"17:15273:21123":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"9:357:15557":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:13308:19830":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:5863:16685":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:15931:19824":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:44306:206":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"6:491:9742":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"5:2112:8996":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:10612:16867":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:22773:22167":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:4424:16276":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:41414:22476":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:7686:16755":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"4:11270:26023":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"4:3245:29446":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"12:0:2193":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:16165:21331":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"16:5385:16672":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:13766:17058":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"4:5449:128":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"17:15463:21143":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:2728:15766":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:15822:21165":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:41710:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:43195:3433":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:42024:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:7553:9040":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:7941:2271":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"4:10577:29558":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"16:7014:16734":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:39189:214":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"4:9151:9252":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:22904:22135":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"6:4965:13717":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:14968:21102":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"4:6442:219":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:6410:9260":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"6:6729:14502":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"5:7511:8967":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:10573:33469":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:6447:14478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"0:28:1958":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"6:5457:13769":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:4531:16314":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:44396:3578":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"17:14986:21104":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:1503:10639":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:21511:9071":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:16069:21324":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"4:8438:9117":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"17:16212:21335":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"4:5970:2320":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:3553:145":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:437:15721":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:10759:16870":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"4:8828:2858":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}