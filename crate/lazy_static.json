{"root":"0:0:1593","crate_version":"1.4.0","includes_private":false,"index":{"1:11205:218":{"id":"1:11205:218","crate_id":1,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:11207:183","1:11208:1598","1:11209:52275","1:11210:52276","1:11211:52277","1:11212:757","1:11213:758"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:11196:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:6467:3054":{"id":"4:6467:3054","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6468:53987","4:6469:53988","4:6470:53989","4:6471:53990","4:6472:53991","4:6473:53992","4:6474:53993","4:6475:53994","4:6476:53995","4:6477:53996","4:6478:53997","4:6479:53998","4:6480:53999","4:6481:54000","4:6482:54001","4:6483:54002","4:6484:54003"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3177:233":{"id":"1:3177:233","crate_id":1,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3179:128","1:3180:1431"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13797:57769":{"id":"1:13797:57769","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3442:1960":{"id":"1:3442:1960","crate_id":1,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3444:183","1:3445:898"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13719:1598":{"id":"1:13719:1598","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:47810:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13829:54234":{"id":"1:13829:54234","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23049:2559":{"id":"1:23049:2559","crate_id":1,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23050:2334","1:23051:50541","1:23052:50909","1:23053:50910","1:23054:50911","1:23055:39435","1:23056:50913","1:23057:50914","1:23058:50915","1:23059:50916","1:23060:50917","1:23061:50918","1:23062:50919","1:23063:50920","1:23064:50921","1:23065:50922","1:23066:50606","1:23067:50923","1:23068:50924","1:23069:50925","1:23070:50926","1:23071:50542","1:23072:50543","1:23073:50544","1:23074:50545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23151:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13802:57772":{"id":"1:13802:57772","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2917:185":{"id":"1:2917:185","crate_id":1,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2919:608","1:2920:913"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3824:229":{"id":"1:3824:229","crate_id":1,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3825:183","1:3826:1986","1:3827:690","1:3828:375"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromResidual","id":"1:3829:138","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"1:3824:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3373:221":{"id":"1:3373:221","crate_id":1,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13792:57767":{"id":"1:13792:57767","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13332:2394","`DoubleEndedIterator`":"1:8717:121","prim@char":"4:15883:1753","str::match_indices":"1:13789:57766"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:49957:2764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13357:2397","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6498:228":{"id":"5:6498:228","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6499:1410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13801:57771":{"id":"1:13801:57771","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13725:52277":{"id":"1:13725:52277","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:9533:2055":{"id":"1:9533:2055","crate_id":1,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13710:57756":{"id":"1:13710:57756","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3518:1975":{"id":"1:3518:1975","crate_id":1,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3520:358"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2963:186":{"id":"1:2963:186","crate_id":1,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2965:1004","1:2966:832","1:2967:797","1:2968:716","1:2969:700"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2917:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13712:57757":{"id":"1:13712:57757","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13710:57756"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3372:222":{"id":"1:3372:222","crate_id":1,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4410:3005":{"id":"4:4410:3005","crate_id":4,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4411:2896","4:4412:54935","4:4414:54936","4:4415:54937","4:4416:3006","4:4417:54938","4:4418:54368","4:4420:54939","4:4421:2103","4:4422:3145","4:4423:2085","4:4425:2097"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23138:2605":{"id":"1:23138:2605","crate_id":1,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23139:50541","1:23140:1238","1:23141:1239","1:23142:50542","1:23143:50543","1:23144:50544","1:23145:50545","1:23146:50546","1:23147:50547","1:23148:50548"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23151:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:6219:2985":{"id":"4:6219:2985","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6220:3343","4:6221:3344","4:6222:54304","4:6223:54424","4:6225:54428","4:6227:54425","4:6228:54426","4:6230:54427"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10416:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13721:52275":{"id":"1:13721:52275","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:47810:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13357:2397":{"id":"1:13357:2397","crate_id":1,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13359:2067","1:13360:50874","1:13361:50875"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"1:13351:2396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3526:1977":{"id":"1:3526:1977","crate_id":1,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3528:363"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8742:1884":{"id":"1:8742:1884","crate_id":1,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8743:798","1:8744:2073"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8874:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13789:57766":{"id":"1:13789:57766","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"1:8717:121","self::pattern":"1:13332:2394","str::rmatch_indices":"1:13792:57767","prim@char":"4:15883:1753"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:49939:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5431:3088":{"id":"4:5431:3088","crate_id":4,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5432:4105","4:5433:54055"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10416:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8717:121":{"id":"1:8717:121","crate_id":1,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8718:2067","1:8719:2068","1:8720:2069","1:8721:2070","1:8725:2071","1:8728:2072"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8874:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10580:191":{"id":"1:10580:191","crate_id":1,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10581:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3437:1963":{"id":"1:3437:1963","crate_id":1,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3439:183","1:3440:1368"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6183:58417":{"id":"5:6183:58417","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13707:798":{"id":"1:13707:798","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:15883:1753"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3432:1958":{"id":"1:3432:1958","crate_id":1,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3434:183","1:3435:270"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13715:54055":{"id":"1:13715:54055","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12796:2924"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8636:2480":{"id":"1:8636:2480","crate_id":1,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8638:2131"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13727:3142":{"id":"1:13727:3142","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"1:3672:1980","str::slice_mut_unchecked":"1:13728:57759","`str`":"4:15889:1758"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:6171:58416":{"id":"5:6171:58416","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3907:1991":{"id":"1:3907:1991","crate_id":1,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13708:2073":{"id":"1:13708:2073","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:4752:3069":{"id":"4:4752:3069","crate_id":4,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4753:2648","4:4754:55138"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3587:117":{"id":"1:3587:117","crate_id":1,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3588:226","1:3589:548"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3617:132":{"id":"1:3617:132","crate_id":1,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3619:383"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3620:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:14057:139":{"id":"1:14057:139","crate_id":1,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:14058:183","1:14059:1020"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13833:57779":{"id":"1:13833:57779","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5443:57779"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:50106:2775","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:38:1593":{"id":"0:38:1593","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"},"1:8197:2347":{"id":"1:8197:2347","crate_id":1,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8198:52701","1:8199:52702","1:8200:52699","1:8201:52695","1:8202:52703","1:8203:52700","1:8204:52698"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2963:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3672:1980":{"id":"1:3672:1980","crate_id":1,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3674:183","1:3675:757"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3174:136":{"id":"1:3174:136","crate_id":1,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3176:685"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6576:2985":{"id":"4:6576:2985","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6577:54305"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10416:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3611:1883":{"id":"1:3611:1883","crate_id":1,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3612:583"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13826:2968":{"id":"1:13826:2968","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13830:57778":{"id":"1:13830:57778","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5445:57778"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:50088:2773","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/inline_lazy.rs","begin":[16,0],"end":[16,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"self::std::sync::ONCE_INIT","name":"ONCE_INIT","id":"4:8722:1727","glob":false}},"1:4146:2351":{"id":"1:4146:2351","crate_id":1,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4147:50733"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3475:1965":{"id":"1:3475:1965","crate_id":1,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3477:564"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5497:3052":{"id":"4:5497:3052","crate_id":4,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5498:56834","4:5499:56836","4:5500:56835","4:5501:56837"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3654:1989":{"id":"1:3654:1989","crate_id":1,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3656:242","1:3657:208","1:3658:52518"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3374:107":{"id":"1:3374:107","crate_id":1,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3453:1962":{"id":"1:3453:1962","crate_id":1,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3455:183","1:3456:1110"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13815:57775":{"id":"1:13815:57775","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:13332:2394","prim@char":"4:15883:1753"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13357:2397","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13765:57761":{"id":"1:13765:57761","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::rsplit_terminator":"1:13768:57762","str::split":"1:13756:55234","`DoubleEndedIterator`":"1:8717:121","self::pattern":"1:13332:2394","prim@char":"4:15883:1753"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:49839:2759","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:41:1600":{"id":"0:41:1600","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["lazy",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:39:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:39:1599":{"id":"0:39:1599","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:0:1593":{"id":"0:0:1593","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:39:1599","0:41:1600","0:38:1593"],"is_stripped":false}},"4:5425:3086":{"id":"4:5425:3086","crate_id":4,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5426:54096","4:5427:3474"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10416:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10576:2286":{"id":"1:10576:2286","crate_id":1,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10577:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:14456:142":{"id":"1:14456:142","crate_id":1,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14457:283","1:14458:523","1:14459:286","1:14460:1087"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3812:1984":{"id":"1:3812:1984","crate_id":1,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3743:1983","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13818:57776":{"id":"1:13818:57776","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:13332:2394","prim@char":"4:15883:1753"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3506:1973":{"id":"1:3506:1973","crate_id":1,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3508:183","1:3509:1244"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13786:57765":{"id":"1:13786:57765","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"1:13783:1780","self::pattern":"1:13332:2394","prim@char":"4:15883:1753","`DoubleEndedIterator`":"1:8717:121"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:50011:2767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13357:2397","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:20:1728":{"id":"0:20:1728","crate_id":0,"name":"Lazy","span":{"filename":"src/inline_lazy.rs","begin":[19,0],"end":[19,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null,null]},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3376:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"1:9154:2344":{"id":"1:9154:2344","crate_id":1,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8874:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5910:3383":{"id":"5:5910:3383","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5912:183","5:5913:14431"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5553:3055":{"id":"4:5553:3055","crate_id":4,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5554:54078","4:5555:54079","4:5556:54080","4:5557:54081"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13737:57760":{"id":"1:13737:57760","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:50053:2769","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4896:2484":{"id":"1:4896:2484","crate_id":1,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4897:2077","1:4898:52179","1:4899:2080"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13824:2616":{"id":"1:13824:2616","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:13272:127","`FromStr`":"1:13271:2602"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47933:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"1:13271:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13271:2602","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3743:1983":{"id":"1:3743:1983","crate_id":1,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3745:51757","1:3746:51758","1:3747:51759"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"4:5567:3057":{"id":"4:5567:3057","crate_id":4,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5568:54541"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10416:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10570:120":{"id":"1:10570:120","crate_id":1,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10571:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2884:105":{"id":"1:2884:105","crate_id":1,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2885:414","1:2886:416"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3171:150":{"id":"1:3171:150","crate_id":1,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3173:2066"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10811:147":{"id":"1:10811:147","crate_id":1,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10812:656","1:10813:1781","1:10814:51102","1:10815:51103","1:10816:51104","1:10817:51105","1:10818:51106","1:10819:51107","1:10820:51108","1:10821:51109","1:10822:51110","1:10823:51111","1:10824:51112","1:10825:51113","1:10826:51114","1:10827:1549"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2859:97":{"id":"1:2859:97","crate_id":1,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2861:1742"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3501:1971":{"id":"1:3501:1971","crate_id":1,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3503:183","1:3504:362"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10513:2279":{"id":"1:10513:2279","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10514:1549","1:10515:52658","1:10517:52659"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10574:2285":{"id":"1:10574:2285","crate_id":1,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10575:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:9143:3099":{"id":"4:9143:3099","crate_id":4,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:9144:54060","4:9145:54061","4:9146:54062","4:9147:54063","4:9148:54064","4:9149:28785","4:9150:54059"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10416:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13783:1780":{"id":"1:13783:1780","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:13332:2394","`DoubleEndedIterator`":"1:8717:121","str::matches":"1:13783:1780","prim@char":"4:15883:1753"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:49993:2766","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13731:2793":{"id":"1:13731:2793","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:15883:1753"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:49759:2753","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13748:2114":{"id":"1:13748:2114","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:47810:176","prim@char":"4:15883:1753","self::pattern":"1:13332:2394"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6647:2975":{"id":"4:6647:2975","crate_id":4,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6648:55102"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3496:1970":{"id":"1:3496:1970","crate_id":1,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3498:183","1:3499:359"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13717:310":{"id":"1:13717:310","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"4:15900:1767","str::as_mut_ptr":"1:13718:55207"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3835:1986":{"id":"1:3835:1986","crate_id":1,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3837:50652"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3829:138":{"id":"1:3829:138","crate_id":1,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3831:691"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"1:3824:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6184:58418":{"id":"5:6184:58418","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8472:220","`Box<str>`":"5:444:1886"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:1886","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:3387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9534:2054":{"id":"1:9534:2054","crate_id":1,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13777:57763":{"id":"1:13777:57763","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:844:227":{"id":"5:844:227","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:845:2140","5:846:2141","5:847:2142"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6165:2895":{"id":"5:6165:2895","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10563:110":{"id":"1:10563:110","crate_id":1,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10564:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13718:55207":{"id":"1:13718:55207","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:15900:1767"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3459:1961":{"id":"1:3459:1961","crate_id":1,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3460:183","1:3461:919"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3168:74":{"id":"1:3168:74","crate_id":1,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3170:2065"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"4:6745:2969":{"id":"4:6745:2969","crate_id":4,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6746:55128"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3467:1968":{"id":"1:3467:1968","crate_id":1,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3469:1369"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6649:2976":{"id":"4:6649:2976","crate_id":4,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6650:56879"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3376:224":{"id":"1:3376:224","crate_id":1,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6241:3092":{"id":"4:6241:3092","crate_id":4,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6242:57014","4:6243:36546","4:6244:57015","4:6245:57016","4:6246:57017","4:6247:57018"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10416:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3165:75":{"id":"1:3165:75","crate_id":1,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3167:311"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13832:3068":{"id":"1:13832:3068","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5446:3068"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:50097:2774","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13771:55239":{"id":"1:13771:55239","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"1:13332:2394","prim@char":"4:15883:1753","str::rsplitn":"1:13774:55241"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:49893:2732","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3484:1972":{"id":"1:3484:1972","crate_id":1,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3485:183","1:3486:958"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4492:3011":{"id":"4:4492:3011","crate_id":4,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4493:57049","4:4494:57050","4:4495:57052","4:4497:3010","4:4498:57051","4:4500:55234","4:4501:3731"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"4:4410:3005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3491:1969":{"id":"1:3491:1969","crate_id":1,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3493:183","1:3494:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13732:2423":{"id":"1:13732:2423","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:15883:1753"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:49765:2754","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3479:1967":{"id":"1:3479:1967","crate_id":1,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3481:1111"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3181:232":{"id":"1:3181:232","crate_id":1,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3183:128","1:3184:1430"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10846:2472":{"id":"1:10846:2472","crate_id":1,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10847:147","1:10848:13708","1:10849:52408"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3463:1964":{"id":"1:3463:1964","crate_id":1,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3465:271"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6187:54231":{"id":"5:6187:54231","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13829:54234"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13729:55226":{"id":"1:13729:55226","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:13730:55227"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13271:2602":{"id":"1:13271:2602","crate_id":1,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13272:127","1:13273:50752"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6841:2988":{"id":"4:6841:2988","crate_id":4,"name":"TcpStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6842:54549","4:6843:54550"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10416:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13706":{"id":"1:13706","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:12785:1353","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:13707:798","1:13708:2073","1:13709:57755","1:13710:57756","1:13712:57757","1:13715:54055","1:13716:57758","1:13717:310","1:13718:55207","1:13719:1598","1:13721:52275","1:13723:52276","1:13725:52277","1:13727:3142","1:13728:57759","1:13729:55226","1:13730:55227","1:13731:2793","1:13732:2423","1:13733:3145","1:13734:14307","1:13735:14345","1:13736:3731","1:13737:57760","1:13738:14336","1:13739:51759","1:13742:55243","1:13745:55244","1:13748:2114","1:13752:2072","1:13756:55234","1:13759:13917","1:13762:55237","1:13765:57761","1:13768:57762","1:13771:55239","1:13774:55241","1:13777:57763","1:13780:57764","1:13783:1780","1:13786:57765","1:13789:57766","1:13792:57767","1:13795:57768","1:13797:57769","1:13799:57770","1:13801:57771","1:13802:57772","1:13803:57773","1:13806:57774","1:13809:33667","1:13812:55245","1:13815:57775","1:13818:57776","1:13821:57777","1:13824:2616","1:13826:2968","1:13827:54232","1:13828:54233","1:13829:54234","1:13830:57778","1:13832:3068","1:13833:57779"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3614:131":{"id":"1:3614:131","crate_id":1,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3616:382"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3617:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3522:1976":{"id":"1:3522:1976","crate_id":1,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3524:360"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13733:3145":{"id":"1:13733:3145","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:49775:2755","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9161:2343":{"id":"1:9161:2343","crate_id":1,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Step","id":"1:8197:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3272:128":{"id":"1:3272:128","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3273:2853","1:3275:51432","1:3276:51433","1:3277:50733"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10563:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"1:10570:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3676:1981":{"id":"1:3676:1981","crate_id":1,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3678:758"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Index","id":"1:3672:1980","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6185:3033":{"id":"5:6185:3033","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4095:68":{"id":"1:4095:68","crate_id":1,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4096:1443"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"1:23768:28399":{"id":"1:23768:28399","crate_id":1,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23769:50925","1:23770:50924","1:23771:50926"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialOrd","id":"1:23763:2337","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13812:55245":{"id":"1:13812:55245","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"1:13332:2394","prim@char":"4:15883:1753"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13357:2397","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10578:2287":{"id":"1:10578:2287","crate_id":1,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10579:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13828:54233":{"id":"1:13828:54233","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3535:1979":{"id":"1:3535:1979","crate_id":1,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3537:1248"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13803:57773":{"id":"1:13803:57773","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:15883:1753","self::pattern":"1:13332:2394"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13362:2398","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23435:2489":{"id":"1:23435:2489","crate_id":1,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdElement","id":"1:24072:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23426:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:5575:3059":{"id":"4:5575:3059","crate_id":4,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5576:54176"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:14072:151":{"id":"1:14072:151","crate_id":1,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:14073:183","1:14074:151","1:14075:772"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6339:3094":{"id":"4:6339:3094","crate_id":4,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6340:57177","4:6341:57178"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6168:58415":{"id":"5:6168:58415","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3103:2369":{"id":"1:3103:2369","crate_id":1,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:3102:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3530:1978":{"id":"1:3530:1978","crate_id":1,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3532:1245"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3471:1966":{"id":"1:3471:1966","crate_id":1,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3473:899"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3369:1881":{"id":"1:3369:1881","crate_id":1,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2862:98":{"id":"1:2862:98","crate_id":1,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2864:50531"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:23387:28380":{"id":"1:23387:28380","crate_id":1,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23388:51001","1:23389:53956","1:23390:53957"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:23380:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8673:152":{"id":"1:8673:152","crate_id":1,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8674:2077","1:8675:2078","1:8676:773"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10584:2288":{"id":"1:10584:2288","crate_id":1,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10585:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5505:3051":{"id":"4:5505:3051","crate_id":4,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5506:54176","4:5507:54263","4:5508:54264"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10572:2284":{"id":"1:10572:2284","crate_id":1,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10573:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4467:2279":{"id":"4:4467:2279","crate_id":4,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4468:1781","4:4469:56890","4:4471:56891","4:4472:3654","4:4473:56892","4:4474:56893","4:4475:52659","4:4484:2103"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6164:58414":{"id":"5:6164:58414","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:1886","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:3387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:1886","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:3387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5563:3056":{"id":"4:5563:3056","crate_id":4,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5564:54636"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8874:158":{"id":"1:8874:158","crate_id":1,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8875:2077","1:8876:928","1:8877:2079","1:8880:2080","1:8881:500","1:8883:2081","1:8886:2082","1:8887:2083","1:8888:2084","1:8889:2085","1:8891:2086","1:8893:2087","1:8894:2088","1:8896:847","1:8899:2089","1:8906:2090","1:8908:2091","1:8911:2092","1:8912:2093","1:8913:2094","1:8915:2095","1:8917:2096","1:8920:1321","1:8921:2097","1:8922:2098","1:8926:2099","1:8929:2100","1:8930:2101","1:8931:2102","1:8933:2103","1:8934:1891","1:8936:2104","1:8939:2105","1:8941:2106","1:8951:2107","1:8966:2108","1:8968:2109","1:8972:2110","1:8981:2111","1:8984:2112","1:8986:2113","1:8989:282","1:8996:300","1:9003:2114","1:9010:2115","1:9019:2116","1:9029:1021","1:9036:2117","1:9043:2118","1:9044:2119","1:9045:2120","1:9057:2121","1:9064:2122","1:9076:2123","1:9083:2124","1:9084:2125","1:9089:2126","1:9092:2127","1:9095:2128","1:9096:2129","1:9098:2130","1:9100:2131","1:9102:421","1:9105:2132","1:9108:1004","1:9111:2133","1:9114:608","1:9117:2134","1:9120:913","1:9122:832","1:9124:797","1:9126:716","1:9128:700","1:9130:2135","1:9131:2136","1:9139:2137"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2922:125":{"id":"1:2922:125","crate_id":1,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2917:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3512:1974":{"id":"1:3512:1974","crate_id":1,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3514:183","1:3515:1247"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:14540:2554":{"id":"1:14540:2554","crate_id":1,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14541:52461","1:14542:52462","1:14543:52463","1:14544:52464","1:14545:52465","1:14546:52466","1:14547:2103"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8632:2478":{"id":"1:8632:2478","crate_id":1,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8634:2130"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13342:2393":{"id":"1:13342:2393","crate_id":1,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13344:2396","1:13345:51670","1:13346:51675","1:13347:51671","1:13348:51673","1:13349:51672","1:13350:51674"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5513:3053":{"id":"4:5513:3053","crate_id":4,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5514:54176","4:5515:54216"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13362:2398":{"id":"1:13362:2398","crate_id":1,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13357:2397","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:7602:3182":{"id":"4:7602:3182","crate_id":4,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:7603:54348"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13809:33667":{"id":"1:13809:33667","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:15883:1753","self::pattern":"1:13332:2394"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23175:2560":{"id":"1:23175:2560","crate_id":1,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23176:2334","1:23177:1260","1:23178:1285"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6645:2974":{"id":"4:6645:2974","crate_id":4,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6646:54316"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23238:2338":{"id":"1:23238:2338","crate_id":1,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:23228:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3870:1911":{"id":"1:3870:1911","crate_id":1,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:2953:179":{"id":"1:2953:179","crate_id":1,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2954:421","1:2955:2118","1:2956:2119","1:2957:2139"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2922:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2963:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13806:57774":{"id":"1:13806:57774","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:15883:1753","self::pattern":"1:13332:2394"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13762:55237":{"id":"1:13762:55237","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"1:13756:55234","prim@char":"4:15883:1753","`DoubleEndedIterator`":"1:8717:121","self::pattern":"1:13332:2394"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:49807:2729","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13357:2397","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6163":{"id":"5:6163","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5976:1353","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6164:58414","5:6165:2895","5:6168:58415","5:6171:58416","5:6183:58417","5:6184:58418","5:6185:3033","5:6186:54230","5:6187:54231"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13821:57777":{"id":"1:13821:57777","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:13332:2394","prim@char":"4:15883:1753"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13357:2397","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13736:3731":{"id":"1:13736:3731","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:50043:2768","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13351:2396":{"id":"1:13351:2396","crate_id":1,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13353:2416","1:13354:928","1:13355:52593","1:13356:52594"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13734:14307":{"id":"1:13734:14307","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:13735:14345"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:50063:2770","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13742:55243":{"id":"1:13742:55243","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:15883:1753","self::pattern":"1:13332:2394"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13756:55234":{"id":"1:13756:55234","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"`DoubleEndedIterator`":"1:8717:121","self::pattern":"1:13332:2394","prim@char":"4:15883:1753","str::split_whitespace":"1:13734:14307","str::rsplit":"1:13762:55237"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:49789:2725","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13799:57770":{"id":"1:13799:57770","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13730:55227":{"id":"1:13730:55227","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13729:55226"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13728:57759":{"id":"1:13728:57759","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"1:3676:1981","str::slice_unchecked":"1:13727:3142","`str`":"4:15889:1758"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"4:5519:3054":{"id":"4:5519:3054","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5520:54635","4:5521:54636","4:5522:54176","4:5523:54637","4:5524:3343","4:5525:3344","4:5526:54638","4:5527:1317","4:5528:54639","4:5529:54640","4:5530:54641","4:5531:54642","4:5532:54643","4:5533:54644","4:5534:54645","4:5535:54646"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3364:215":{"id":"1:3364:215","crate_id":1,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3447:1959":{"id":"1:3447:1959","crate_id":1,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3449:183","1:3450:563"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:24072:2336":{"id":"1:24072:2336","crate_id":1,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:24073:2334"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:24068:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"1:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13709:57755":{"id":"1:13709:57755","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13827:54232":{"id":"1:13827:54232","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13774:55241":{"id":"1:13774:55241","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:15883:1753","self::pattern":"1:13332:2394","str::splitn":"1:13771:55239"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:49911:2733","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13357:2397","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13735:14345":{"id":"1:13735:14345","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:13734:14307"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:50072:2771","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13739:51759":{"id":"1:13739:51759","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:15883:1753","self::pattern":"1:13332:2394"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12772:2961":{"id":"1:12772:2961","crate_id":1,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12773:2077","1:12774:52404"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13716:57758":{"id":"1:13716:57758","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:23763:2337":{"id":"1:23763:2337","crate_id":1,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23764:1283","1:23765:1282","1:23766:1280","1:23767:1279"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialEq","id":"1:23175:2560","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3405:1882":{"id":"1:3405:1882","crate_id":1,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13738:14336":{"id":"1:13738:14336","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:50081:2772","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:1031:3066":{"id":"4:1031:3066","crate_id":4,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:1032:2140","4:1033:2968","4:1034:54230","4:1035:54231","4:1036:54232","4:1037:54233","4:1038:54234"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13759:13917":{"id":"1:13759:13917","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"1:13332:2394","prim@char":"4:15883:1753"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:13124:2726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10582:2277":{"id":"1:10582:2277","crate_id":1,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10583:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8669:137":{"id":"1:8669:137","crate_id":1,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8671:688"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23102:2329":{"id":"1:23102:2329","crate_id":1,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23103:2334","1:23104:50541","1:23105:1238","1:23106:1239","1:23107:39435","1:23108:50602","1:23109:50603","1:23110:50604","1:23111:50605","1:23112:50606","1:23113:50542","1:23114:50543","1:23115:50544","1:23116:50545","1:23117:50546","1:23118:50547","1:23119:50548"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23151:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13780:57764":{"id":"1:13780:57764","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13357:2397","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:4485:2990":{"id":"4:4485:2990","crate_id":4,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4486:56743","4:4487:36396","4:4488:56744","4:4489:56745"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9157:2345":{"id":"1:9157:2345","crate_id":1,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8874:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3248:116":{"id":"1:3248:116","crate_id":1,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3249:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8682:1885":{"id":"1:8682:1885","crate_id":1,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8684:2074","1:8686:2075","1:8687:2076"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13768:57762":{"id":"1:13768:57762","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"1:13765:57761","prim@char":"4:15883:1753","str::split":"1:13756:55234","self::pattern":"1:13332:2394"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:49857:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13357:2397","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6573:2983":{"id":"4:6573:2983","crate_id":4,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6574:54282","4:6575:54570"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10416:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13795:57768":{"id":"1:13795:57768","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5906:3381":{"id":"5:5906:3381","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5908:183","5:5909:438"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3369:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3600:1912":{"id":"1:3600:1912","crate_id":1,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3601:550"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"1:3587:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13752:2072":{"id":"1:13752:2072","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"1:13332:2394","`None`":"1:47810:176","prim@char":"4:15883:1753"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13357:2397","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6186:54230":{"id":"5:6186:54230","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13828:54233"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13723:52276":{"id":"1:13723:52276","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:10801:143":{"id":"1:10801:143","crate_id":1,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10802:718","1:10804:51711"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3620:133":{"id":"1:3620:133","crate_id":1,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3622:183","1:3623:384"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13745:55244":{"id":"1:13745:55244","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"1:13332:2394","prim@char":"4:15883:1753"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13342:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13357:2397","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"1:46692:2774":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:12015:48658":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:7358:4334":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"4:6745:2969":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:50504:2781":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"17:12383:48745":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"9:1020:3617":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:1537:37557":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:53730:19825":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:13332:2394":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"5:69:3443":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:13440:49885":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:7754:3947":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:46363:2454":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:1558:37560":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:5668:3773":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:49113:51509":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"4:2917:3006":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"4:1592:3159":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:12716:48834":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:51468:2500":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"9:963:3615":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:10913:44161":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:5176:43086":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:4425:39720":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:13515:49895":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:521:36668":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"4:4829:3199":{"crate_id":4,"path":["std","net","ip","display_buffer","IpDisplayBuffer"],"kind":"struct"},"17:9131:43854":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:47849:2648":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"12:2419:3128":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:13404:49880":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"4:6576:2985":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:11810:44797":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"4:8446:1930":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:571:36674":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:50081:2772":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"4:11134:54210":{"crate_id":4,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"1:23232:2333":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:10253:4121":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:607:36678":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:11937:44087":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:11212:4189":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:24506:5092":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:13352:49533":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:1727:37576":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"12:869:3121":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"12:114:59444":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"12:1238:3684":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:10115:4213":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"4:15315:35110":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"16:7741:3946":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:11922:48550":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:10937:44163":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:5405:40337":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"8:0:1807":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:6640:2573":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:8472:220":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:46721:2945":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"17:11102:43869":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"4:3381:4356":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:10523:135":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:14:1781":{"crate_id":1,"path":["core","write"],"kind":"macro"},"12:466:59443":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:11640:44601":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:13975:50036":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"4:14460:3008":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:13953:50000":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:52023:2491":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:3478:4050":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"14:250:42158":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"4:2359:31234":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"17:10435:4128":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:14183:14435":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:6954:39863":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:48575:2284":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"15:269:3708":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:25151:2814":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:2512:4197":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"4:5708:3369":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:6688:41124":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"11:46:59442":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"6:4055:39681":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:3103:2369":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:542:3800":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:6286:3701":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"4:10902:3039":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"6:6205:40757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:39148:2349":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"4:9512:3316":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"4:11250:3373":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"4:13413:4467":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:46211:197":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"4:11905:54377":{"crate_id":4,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"4:1460:3153":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:53794:19829":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:10851:2474":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:321:207":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:23387:28380":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"4:5730:3371":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:49657:2742":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:11710:2735":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:3106:57234":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:23426:2332":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"4:11501:2648":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"1:32988:2471":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"4:9558:4374":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"16:3177:4045":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:53675:19820":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:6949:4087":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"4:14061:3028":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:4975:42909":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"18:801:4229":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:25520:2631":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:21:676":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"4:11238:3071":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:3526:1977":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:46894:2563":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:50520:2789":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:11547:44560":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:11335:4143":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:7659:3945":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:7768:3875":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:3501:1971":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:50349:2409":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"4:11022:3072":{"crate_id":4,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"4:14379:2986":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"6:5478:40343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:11142:43871":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:13817:49958":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"4:5505:3051":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:10503:4173":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:13938:49995":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"4:12072:1934":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:3171:150":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:24415:5072":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:3907:39667":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:10660:44084":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:5910:3383":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:50777:2556":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"4:10695:119":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:11434:2725":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"4:15886:1755":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"4:5759:3375":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"14:194:42151":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:12195:2747":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"4:15883:1753":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"16:3461:4051":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"5:1547:3161":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:4532:39732":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"12:2059:3124":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:5204:40322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:3877:39664":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:1533:3159":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"4:5151:3320":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:11603:44598":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"4:15907:1774":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:51500:2533":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:5419:40338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"7:0:1496":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:11085:4191":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:4665:4337":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"17:12183:48731":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:8022:2437":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:10068:4156":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:3168:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"16:7131:3940":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:47033:2580":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:2396:3511":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:3265:4049":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"5:1684:2078":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"4:11264:3322":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"12:750:2648":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:10304:4162":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:2314:4199":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:12262:48737":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"4:15900:1767":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"4:4485:2990":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"17:12093:48667":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:13345:49521":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"18:645:4241":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:6943:39862":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:0:803":{"crate_id":6,"path":["libc"],"kind":"module"},"17:13147:49359":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:10198:43933":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:13840:49961":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:5582:40373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:6097:37500":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:10039:43922":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:23974:51079":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:1712:37574":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:11653:44602":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:10147:43937":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:6967:41309":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"4:1578:3158":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:11130:43870":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:3522:1976":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:5443:3762":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:52167:51939":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:6114:40751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:47286:11438":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"12:2392:59452":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:9004:43850":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"12:2412:59450":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:22900:51664":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"18:754:60340":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:601:36677":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:46231:200":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:5426:40339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"9:686:3548":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:53695:19822":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:9958:60308":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:10586:44081":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:6900:52348":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:46934:2568":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:56625:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4256:39701":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:49689:2745":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"4:13783:3176":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:2959:4041":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"4:70:1507":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"16:5348:3754":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:11907:48549":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"4:4146:3309":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:48278:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:53715:19824":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:11591:44563":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:1764:37579":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:2859:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"17:11742:44778":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"4:3459:3020":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:10988:44137":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:10578:2287":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:56612:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4005:39675":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:1912:37714":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:51901:2514":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"4:11449:3212":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"5:4694:240":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:1236:43936":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:7868:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"4:14886:57044":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:6012:3866":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"4:4351:3036":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"5:8420:2840":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12360:48744":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"4:4143:3308":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:7051:3933":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:11701:44660":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"4:1610:3161":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:4467:42761":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"4:5553:3055":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:6339:3094":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:4362:39712":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:14057:139":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"17:10422:43978":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"18:790:4228":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"4:2510:3275":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"4:12565:3279":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:49765:2754":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:10082:4210":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:9466:43859":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:626:36681":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"4:8732:2271":{"crate_id":4,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"1:46171:198":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:5078:1723":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:3506:1973":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:13549:49899":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:5152:1897":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:50512:2786":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:10464:4168":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"13:121:42105":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:4351:42741":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"4:15065:3143":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:4903:42885":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:23238:2338":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"4:10417:3240":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:13293:49517":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"4:14647:54175":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:6310:3920":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:6562:3121":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:3366:4055":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:52725:2492":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:6159:3871":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:53684:19821":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:5948:4037":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:24527:2828":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:6130:3915":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:11282:43874":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"4:14801:4385":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"4:1477:3155":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"4:9427:4465":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"1:3373:221":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:47105:2587":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"9:0:1808":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:47302:11440":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:47024:2579":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:13094:49353":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:2754:3789":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:13721:49914":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:48871:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"17:13785:49954":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:10610:44083":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"4:15906:1773":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"16:7471:3865":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:10291:4159":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"4:12567:4381":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"5:4036:4334":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:6050:3912":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"4:11518:3216":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:3103:4054":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:5298:1906":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:48026:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:0:493":{"crate_id":1,"path":["core"],"kind":"module"},"1:46594:10754":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:2284:3420":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:612:36679":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"4:12106:3233":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"6:1606:37565":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:46735:2947":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"4:4256:3026":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:10638:3098":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"16:7637:3944":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:23380:2332":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:50285:2407":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"4:10914:3035":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"17:13257:49451":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:22881:51665":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:3825:2648":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:5398:40336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:5278:1905":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"17:13138:49358":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:10874:44053":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:1760:3507":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:5321:1907":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"4:3801:207":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"12:2253:3158":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:10572:2284":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:24920:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:53223:2504":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:12557:48757":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:3743:42277":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"4:7436:3171":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"16:6931:4086":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:24513:2881":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:1719:3150":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"4:4180:3029":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:50088:2773":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:8466:57235":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"9:692:3550":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"16:4628:42826":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:6135:40754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:52875:2516":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"13:233:59453":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:5301:40330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:13215:49407":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:11068:4146":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"4:9526:3317":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:48001:180":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:3382:1909":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:50561:2860":{"crate_id":1,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"1:46698:2944":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"16:6331:3700":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"12:432:3686":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:5224:1903":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"5:8308:2078":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:4660:42834":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:3829:138":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:6027:40750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:46754:2646":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"4:2914:2896":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"1:5706:11151":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:51853:2529":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:50237:2406":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:9259:42230":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"4:10534:31241":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"1:56651:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:8449:3473":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:6490:3925":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:6153:40755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:4454:39724":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"4:15901:1768":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"10:0:1809":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:11409:44274":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:3841:1988":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:5240:40326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:3587:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:5149:40276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"4:1431:3121":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"11:0:1810":{"crate_id":11,"path":["adler"],"kind":"module"},"17:9883:60319":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:5698:3777":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"4:7834:3266":{"crate_id":4,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"16:5516:3766":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"4:15633:4386":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:13016:49297":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:10949:44140":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:47907:2052":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:2733:3790":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:5998:3851":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:39144:3518":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:23962:2335":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"4:14067:3026":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"4:10303:4379":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"4:14417:54182":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:3051:4100":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:8717:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"4:15894:1761":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"4:11966:3110":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"4:15170:3078":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"4:15896:1763":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"17:0:1815":{"crate_id":17,"path":["object"],"kind":"module"},"16:6433:3923":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:3494:42233":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:7826:2453":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:11234:4187":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"18:661:4242":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:10775:44052":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:3770:42280":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:10340:4200":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:50573:2861":{"crate_id":1,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"17:10407:4195":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"4:13744:3174":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:51552:2525":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:52120:52064":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:3402:3792":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"18:885:4236":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:5649:3772":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:4316:42730":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:10266:4156":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:13281:49515":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:47064:2583":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:6141:3916":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"4:15897:1764":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"16:5530:3767":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:47976:2648":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"4:13928:4382":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:1634:37568":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:10622:44050":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:14456:142":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"14:56:44276":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"4:1489:3157":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"9:157:3567":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"16:5639:3770":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"4:15377:3712":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"4:1105:30271":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:11579:44562":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:12634:48823":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:9326:4163":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:7025:3797":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:46603:2641":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:5488:40344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"12:787:3151":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:4402:39717":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:3442:1960":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:13612:49911":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:4765:4339":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:13899:49992":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:11385:2648":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"4:1261:144":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:5887:3785":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"4:7782:4358":{"crate_id":4,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"6:6243:40760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"4:5278:3328":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:3432:1958":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"4:14394:54211":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:39108:2368":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:49142:3210":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"4:11292:33389":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:3835:1986":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:9154:2344":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"4:6924:33391":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"17:11314:4164":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"4:14634:3089":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:13595:49909":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:50312:2408":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:4061:39682":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"4:8195:3210":{"crate_id":4,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"6:3966:39671":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:1526:37555":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"4:2481:3274":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"1:24423:5090":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:5247:40327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:49857:2760":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:7063:3934":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:46773:2839":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:13507:49894":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"4:5513:3053":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"7:38:41402":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:13073:2762":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:3743:1983":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:10576:2286":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:9275:42229":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:23768:28399":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:2277:2376":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:13050:2761":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"4:11854:3177":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"1:1479:1725":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"1:49789:2725":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"6:1576:37562":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"4:12014:3113":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:1256:57185":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:11882:3179":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"17:11354:4142":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:56638:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:1146:4458":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:56664:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:12431:48748":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:46963:2571":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"4:1418:3149":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"12:1703:3696":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:3297:4102":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"18:611:4239":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:4379:39714":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:10015:43920":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:2263:2372":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:4716:42842":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"4:3284:3017":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"4:12067:164":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:8226:2078":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"12:2036:2078":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:48893:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:49759:2753":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"6:586:36675":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"4:14142:2273":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:12196:48732":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:5331:40332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:3617:132":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"18:712:2384":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"4:1088:3276":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:3376:224":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:3405:1882":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:50508:2784":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:6896:39855":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:13323:49519":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"4:12087:3119":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:5147:1896":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"4:6647:2975":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:51708:51978":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:9706:43861":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:46903:2565":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:3484:1972":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:3447:1959":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"17:13155:49401":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:12892:49294":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:8874:158":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:47984:2649":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:5034:1915":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:8632:2478":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:3437:1963":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:2266:4336":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:7369:3870":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"4:5738:3372":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:12417:48747":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"4:10986:2725":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"18:678:143":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:4048:39680":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:9361:43856":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"4:8217:3480":{"crate_id":4,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"4:10963:2565":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"6:6908:39857":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:46801:2841":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"4:4383:2997":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"6:157:36356":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"4:1397:2078":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:6671:41123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"18:694:4244":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"4:7484:3174":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"1:24364:5047":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:9796:60318":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:4485:39727":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:10718:53975":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:5753:784":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:52455:2530":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:9676:60316":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"5:6759:1928":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:1673:2649":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:9157:2345":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"4:15053:3138":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:9396:43857":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:49587:2738":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:3496:1970":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"4:10527:3162":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:50417:2849":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:161:36357":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:4509:39729":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"4:15071:3144":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:1311:4217":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"4:10794:3194":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"1:3600:1912":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:10584:2288":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:49644:2564":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:13421:49881":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:5274:40305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:46097:1992":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:5186:40321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:9587:60320":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"5:4372:2649":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:49121:2475":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:3402:3124":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:10476:4172":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:49670:2743":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:593:36676":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:12070:48666":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:24821:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"4:11314:2972":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"12:815:3152":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"4:1387:2649":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:4146:2351":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"17:13873:49985":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:7753:3449":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:51631:2501":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"4:9563:4375":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"5:2376:3529":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"4:14894:3233":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"4:11196:3323":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:9291:43838":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"4:11105:3198":{"crate_id":4,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"9:603:41632":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"4:10930:3008":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"17:10643:44065":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:9534:2054":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:11890:48548":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:3364:215":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"17:2543:4167":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:3467:1968":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:24953:2678":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:4346:39710":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:49352:2966":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:8566:3444":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:51356:51975":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:4392:39716":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:37952:2384":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"16:5289:3867":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:7110:3938":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:7721:3880":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:513:36667":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:3993:39674":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"4:13394:31246":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:7415:3888":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:51671:52058":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"4:11154:3362":{"crate_id":4,"path":["std","net","parser","AddrKind"],"kind":"enum"},"17:9873:43864":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"4:10999:3071":{"crate_id":4,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"4:13245:3335":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:47084:2585":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:12957:49296":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:5374:3756":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"4:4752:3069":{"crate_id":4,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"17:10166:43935":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:13917:49994":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"18:621:60325":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:50524:2787":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"12:1203:3683":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"4:6841:2988":{"crate_id":4,"path":["std","os","net","tcp","TcpStreamExt"],"kind":"trait"},"17:10394:4196":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:7238:3887":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:23435:2489":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:2328:3512":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:5260:40304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:12482:48752":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"4:10554:3518":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"17:10545:44079":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"4:7599:3180":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"6:4287:39703":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"12:856:3149":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"5:7477:2078":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:48110:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"9:927:41521":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:444:1886":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:24332:2623":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"12:2398:51001":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:12469:48751":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:6518:3883":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:4381:42747":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"18:849:4233":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:565:36673":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:23151:2332":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"18:866:4235":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"4:2326:604":{"crate_id":4,"path":["std","env"],"kind":"module"},"17:13539:49898":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:7139:188":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"17:10962:44139":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"4:15849:54402":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:5210:40323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:1740:37577":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:50097:2774":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"4:8777:1941":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:46336:2352":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:3459:1961":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:11002:44164":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:3441:3418":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"12:880:3122":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:13408:2401":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:10925:44162":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:46848:4389":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:3370:1910":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"9:234:3575":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:46972:51909":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:1502:3158":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:5257:42230":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:3392:2390":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"4:15903:1770":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"4:6723:2973":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:13377:49878":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:7100:3937":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:12921:49295":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:5273:42229":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:14795:4384":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:49160:51074":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:12455:48750":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:13351:2396":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"4:10942:3009":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"16:3007:4042":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:22879:51667":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:6089:3913":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:23228:2332":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:2884:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:48826:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"6:6214:40758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"4:6100:3340":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:13167:49403":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:6856:41283":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"4:2130:3122":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"4:8939:1939":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"4:2422:4461":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"12:1784:4332":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"4:15339:54190":{"crate_id":4,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:12527:48755":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:7159:2576":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:24169:2808":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:11615:44599":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:5269:1904":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:4573:42819":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:6173:3917":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:32640:52045":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"18:668:4243":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:46415:2656":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"4:15889:1758":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"16:6482:4072":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:49911:2733":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"12:2045:3122":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:6034:33389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"4:10428:54125":{"crate_id":4,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"12:472:59445":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:3462:3126":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:853:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:3672:1980":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"16:5745:3779":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:46187:196":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:49747:2604":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:53809:19830":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:5941:3911":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"12:2280:3160":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"18:152:50357":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:53832:19831":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:6907:3931":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:5303:3752":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"4:1405:3148":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:4142:39692":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:47857:2649":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"6:4208:39697":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:6851:2997":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:48945:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"5:1296:3510":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"4:9143:3099":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:12302:48739":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:4896:2484":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:6980:3932":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:13029:49349":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:6342:3921":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:6643:4076":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:10811:147":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"5:1701:3148":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:51400:2532":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:6931:39860":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:5721:3778":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"14:11:42150":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:5412:3760":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:5498:3765":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:23175:2560":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"4:2651:182":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"4:5519:3054":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"4:12228:4460":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"4:11998:3112":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"12:183:3689":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"0:39:1599":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"1:46986:2572":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:23291:2334":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:9836:60315":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:6035:3906":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:4446:39723":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:50532:2782":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:6557:3927":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"12:2066:3125":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"18:857:4234":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:3981:39673":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:48194:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:4509:2648":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"4:2152:3126":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"12:952:3155":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"4:8610:163":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:8279:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"4:14665:3179":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:9756:60317":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"4:14404:3064":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:4161:2350":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"4:0:1344":{"crate_id":4,"path":["std"],"kind":"module"},"17:10187:43934":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:10899:44152":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:8389:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"4:11836:3175":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"1:50516:2785":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:11516:2727":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:13584:49903":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:580:32399":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"4:11952:3107":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:50063:2770":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:52537:2515":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:9160:4188":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:5727:2599":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:23138:2605":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:6080:37497":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:547:3774":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:10566:110":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"18:637:60324":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:46878:2564":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:681:43847":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:46954:2570":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:4148:39693":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:5362:3755":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:7121:3939":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:5388:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"15:248:3704":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:5902:3909":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"4:2654:181":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:7079:3935":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"4:13859:3175":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:1751:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:10445:43979":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:4689:42839":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:5488:2997":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:8549:3122":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"5:8271:2078":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"9:722:3551":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"17:13361:49850":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:4067:39683":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:52379:2523":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:6937:39861":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:618:36680":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:5366:40333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:10799:3022":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:11985:48558":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"4:7739:4463":{"crate_id":4,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"4:14453:119":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:23049:2559":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"6:4464:39725":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:3905:4334":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:12700:48833":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:46253:199":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:47004:2575":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:4998:1914":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:3853:2461":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:6407:3922":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:4495:42765":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:2862:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"15:0:1813":{"crate_id":15,"path":["addr2line"],"kind":"module"},"4:3755:3196":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:1567:37561":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:10516:43981":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"4:5154:3321":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"12:843:3148":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:8849:4185":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:4095:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:11205:218":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:6914:39858":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"4:7602:3182":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"16:6691:3929":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:8314:2078":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:51977:2506":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:10104:4212":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:1748:37578":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:8232:3466":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:2361:31235":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"17:9033:43851":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:8742:1884":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:7200:3886":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:12620:48822":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:3933:39669":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:47992:2078":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"17:13495:49891":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"4:11912:54177":{"crate_id":4,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"16:4775:42853":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:13271:49453":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:981:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:10048:43938":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:3987:39520":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:46785:2840":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5998:36548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"18:782:60324":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:11494:44492":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:12607:48821":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:6775:3399":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:4127:39690":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"4:15905:1772":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:52045:2494":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:47095:2586":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:50765:2558":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:4783:2997":{"crate_id":1,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"16:5460:3763":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:3114:57338":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:9183:4145":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:37928:180":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:3614:131":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:12406:48746":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:634:36682":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:4840:42870":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:4270:3341":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:52425:2527":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"4:2141:3124":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"4:7422:3170":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:11409:2649":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:32626:2663":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:1626:37567":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:13747:49950":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"4:2911:3280":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"1:48404:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:1909:4334":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:5547:39580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:51690:2490":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:2502:2485":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"4:11341:33392":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:12282:48738":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:13073:49352":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:1694:37572":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:3428:3125":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:7208:3943":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:533:36670":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:4416:39719":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:10563:110":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"4:10921:3037":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"18:774:60324":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"4:10468:2273":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"4:853:3243":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:3369:1881":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"6:4088:39686":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:11627:2730":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:13331:49520":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:13557:49900":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"12:2072:3126":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"18:829:4232":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"4:10648:3064":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:13196:49405":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:7551:4334":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:24854:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"4:11288:2984":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"4:11048:3075":{"crate_id":4,"path":["std","net","ip","IpAddr"],"kind":"enum"},"5:1152:4334":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"4:1031:3066":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:12250:48736":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:4296:39704":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"4:3058:3288":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"4:4476:55175":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:3883:39665":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:4271:42709":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"4:14912:54114":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:5288:40328":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:984:3464":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:13774:49953":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"4:15023:3136":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:9533:2055":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:10530:44078":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:49356:2965":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:51653:2505":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:5293:40329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:3838:2649":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"4:5978:3339":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:5567:40372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:52661:2507":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:3960:39670":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:3221:4047":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"9:41:3600":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:3181:232":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"4:1374:2648":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:13306:49518":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:299:60309":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:50692:192":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:49578:2737":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:1055:3465":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:13124:2726":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:7702:3878":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:32692:52067":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"17:9087:43853":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:12143:48728":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:12442:48749":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:50053:2769":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"4:5575:3059":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:11474:44491":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:51376:51979":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:3199:4046":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"4:1441:3122":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:48841:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"16:7684:3879":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"4:10973:2586":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"6:1669:37570":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:8929:43849":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:11196:2332":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:48362:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:12772:2961":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:46925:2567":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"4:10993:2768":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"9:809:3210":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"5:8249:3467":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"12:559:144":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"4:8860:1936":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:527:36669":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:49105:2476":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:3907:1991":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"4:15898:1765":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"1:3165:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"6:6129:40753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:4581:3494":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"6:4516:39730":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:13735:49915":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:7141:3941":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:13755:49951":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"14:189:42150":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:10570:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"12:933:3153":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:6979:41310":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:12003:48602":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:7090:3936":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:10245:2711":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:7169:3884":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:47874:2051":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"12:1147:3160":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:3029:4043":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:12026:48659":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:9988:43919":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:46356:2453":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"12:2404:59449":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:6057:37523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:5214:1902":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"4:10517:3130":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"4:11245:3370":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:1626:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:3908:42394":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"18:896:4237":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"4:6479:53998":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:9826:4171":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:8483:3392":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:11563:44561":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:11725:44770":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:5396:3757":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:12543:48756":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:11754:44779":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"4:15888:1757":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"6:4332:39708":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"18:0:1816":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:4474:39726":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:1621:37566":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:4277:39702":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:14359:2486":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"5:3395:2648":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:3042:2371":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"1:51570:52061":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"4:6219:2985":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"4:7939:3266":{"crate_id":4,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"6:1600:37564":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:10028:43921":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:11013:43867":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:2188:7598":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:14960:54186":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:8361:3128":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:12646:48824":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:11668:2732":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:47320:11441":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:4008:44054":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:2981:4052":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:7731:3448":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:49957:2764":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"4:13761:4468":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:5447:40342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:2843:3514":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:7281:3873":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:25085:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:4434:39721":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:1740:3152":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"4:15902:1769":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"17:10390:4170":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:51947:2502":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"4:1483:3156":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"4:14429:3281":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"4:14399:54183":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:10136:43864":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:4198:42660":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:12573:48758":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"18:811:4230":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:24400:2619":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"4:11270:3342":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:4538:39733":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:11031:43868":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"4:1456:3152":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:3155:4044":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:12209:48733":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:11956:44086":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:1710:3149":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:49130:147":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:24539:2827":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:4321:39707":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:13961:50002":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:13463:49887":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"4:14470:57047":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"4:10703:3301":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:52301:2535":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:7960:4354":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:4110:39688":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:11256:43837":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"4:2909:129":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"12:1256:3161":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"19:0:1000":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:46667:2775":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"18:704:60324":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:3372:222":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"4:10643:3279":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"4:13481:3228":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:4116:39689":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"4:15854:30275":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:47074:2584":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:3814:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:11671:44603":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"15:230:3703":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:10801:4140":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:47808:178":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"4:7314:120":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:11554:2728":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"4:11034:3073":{"crate_id":4,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"17:11713:44769":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:4489:2078":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:50536:2783":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:50735:2797":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"4:15890:1759":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"1:57952:52066":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"17:13180:49404":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:11305:43875":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:10582:2277":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:23437:2334":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:8636:2480":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:10788:44051":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:48320:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:1729:3151":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:53535:2493":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:12157:48729":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:46728:2946":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"17:10318:4171":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:3743:4137":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:6595:3882":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"4:5636:3366":{"crate_id":4,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"4:15232:3321":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:12770:48901":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"4:11256:3333":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"4:6241:3092":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:2391:1913":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:6250:40761":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:13794:49957":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"4:3070:3294":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"16:3077:4101":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:24348:51510":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:2937:4063":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"18:739:60341":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"18:766:60326":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:53704:19823":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:13271:2602":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:7935:4348":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:5216:40324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"9:1075:3618":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:3812:1984":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:47015:2578":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:13573:49902":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:10814:4141":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:46995:2577":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"4:14968:3186":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:14072:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:6717:2574":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"4:1113:30274":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:6277:3919":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"4:12053:1933":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:6858:4083":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:777:57248":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:4315:39706":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:6026:3864":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:50540:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:8669:137":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"4:12558:129":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"4:2119:2648":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:5178:40320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:4:985":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"4:7093:54365":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:7207:4348":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"16:5238:42232":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"12:1183:3682":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:50674:203":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:7936:2086":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"4:2135:3123":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:12237:48735":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"4:13607:3184":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"4:8096:3266":{"crate_id":4,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"16:3521:42234":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"4:1108:30273":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:47840:2077":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:2917:185":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"4:14779:4383":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"4:7456:3172":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"6:6229:40759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"4:9394:4372":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"4:14064:3030":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:9746:43862":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:10438:3248":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"1:53619:2531":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:49152:51075":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:13013:2758":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:46916:2566":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"4:7734:3265":{"crate_id":4,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"1:50397:2848":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"4:10228:54371":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"4:4178:3028":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:49569:2736":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:11968:48555":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"14:216:42159":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"4:11944:2648":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:10801:143":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:2213:1057":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:12228:2748":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:47052:2582":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:8241:3121":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"12:1666:3694":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:1704:37573":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:2922:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:10223:4126":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:4308:4334":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:7312:3121":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"4:11491:3213":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"17:12687:48827":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:24068:2332":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"4:15192:3320":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:3491:1969":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:22847:51081":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:56599:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9646:60311":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:46615:2642":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:9539:4186":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"4:6649:2976":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:8406:3471":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:4356:39711":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"12:2269:3159":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:11589:2729":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:545:36672":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:13452:49886":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"12:2040:3121":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"4:4428:3007":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:53741:19826":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:844:227":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:24986:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:4038:39679":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"0:38:1593":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"17:10598:44082":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"9:996:3616":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"4:8281:204":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:47331:11443":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"4:997:3097":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:12512:48754":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"4:9653:4376":{"crate_id":4,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"5:5861:4334":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:4081:39685":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:8197:2347":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"4:11894:54356":{"crate_id":4,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"17:13522:49896":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"4:859:3244":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"4:8646:54359":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"16:7782:3876":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:6739:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"9:469:41527":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:50384:2412":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:6504:3926":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:3463:1964":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:15881:1751":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"0:41:1600":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"6:5229:40325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:10489:43980":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:9920:43865":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:47933:207":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:28330:2483":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:607:43846":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"9:27:3599":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"4:10711:3019":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:6468:3924":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:4386:39715":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:6340:3448":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:3535:1979":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:49839:2759":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:2813:4057":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:2005:3122":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"4:11432:3211":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:11514:44552":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:48832:134":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"6:3972:39672":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:50011:2767":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:12796:2924":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"4:12125:3234":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:22902:51662":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:13472:49888":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"4:7470:3173":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"4:14862:3177":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:46714:2773":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:3366:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"4:11359:3200":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"1:47865:2078":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"17:11689:44659":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:3479:1967":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:4135:39691":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:8902:43848":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"5:8287:3391":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:88:36290":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:10211:43939":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"4:1601:3160":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"18:744:60330":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"4:5425:3086":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:3374:107":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"6:4410:39718":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:24788:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"4:1452:3151":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:3518:1975":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"4:4410:3005":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"4:6481:54000":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"12:895:3673":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"6:1680:37571":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"4:14874:3178":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:49607:2740":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:12758:48898":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:4028:39678":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:32446:2876":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"12:971:3156":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:51999:2509":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:13565:49901":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:3174:136":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"16:7355:3869":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:6268:40762":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:23763:2337":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:13560:110":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:1588:37563":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:12117:48726":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:46370:1903":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"1:46768:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:50169:2395":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:11769:44782":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:53779:19828":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:2286:2377":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"4:8000:4358":{"crate_id":4,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:3960:3481":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:2044:2997":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:4098:39687":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:25052:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"4:11088:3077":{"crate_id":4,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"1:14107:52169":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:10093:4211":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:32792:52044":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:24311:5059":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"16:2883:4058":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:13357:2397":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"4:5746:3374":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:8673:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:13089:2765":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:6902:39856":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:13887:49991":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:4439:42757":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:8217:3387":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:4012:39676":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"4:6645:2974":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"4:2420:4460":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"4:10416:2332":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"1:8682:1885":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"4:15893:1760":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"9:749:3552":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"16:5427:3761":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:13362:2398":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:50191:2399":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:0:436":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"17:9636:43860":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"4:8295:3109":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:14253:52170":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:14148:189":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:24461:5082":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:46588:2774":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:10580:191":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"16:4803:42857":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"14:244:42152":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"12:1121:3159":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:4942:42900":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"4:10496:30269":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"0:0:1593":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"1:52691:2510":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:1551:37559":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"4:14437:130":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:10127:4171":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:5455:59245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:3870:1911":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:6099:3914":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:12585:48772":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"18:651:4238":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:294:60314":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"3:0:1803":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"5:8257:57242":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:4373:39713":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"4:10217:43847":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:12222:48734":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:4853:2434":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:50043:2768":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"4:11890:54171":{"crate_id":4,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"1:47115:2439":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:22834:2384":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:11797:44784":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:51601:2513":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:48068:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:13481:49889":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:9786:43863":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:46944:2569":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"4:4492:3011":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"17:13233:49448":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"12:764:2649":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:50363:2410":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"4:6573:2983":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:23102:2329":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:49893:2732":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:9240:4122":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:32592:2835":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:47043:2581":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:5982:37496":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"4:8288:3108":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:14420:203":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"1:46329:1985":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"4:15899:1766":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"6:6016:40749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:52198:52062":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:53756:19827":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:0:1814":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:1662:37569":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"14:47:42150":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"4:15324:54110":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"6:5390:40335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"4:10665:3065":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"16:5869:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"4:15253:3328":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:51446:2512":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"4:6467:3054":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"4:11409:3210":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"1:25019:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:5439:40341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:46275:201":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:9535:2053":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:25118:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:49679:2744":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:4242:39700":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:10558:44080":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"4:3060:3289":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"4:8974:54359":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"16:5566:3768":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:4493:39728":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:11168:43872":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"12:0:1811":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:47925:190":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:50727:2796":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:48929:2283":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"5:3436:3123":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"4:15884:1754":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"17:4157:4150":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"4:8497:1932":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:8433:53929":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:49618:2741":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:3512:1974":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:4865:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"17:10831:4171":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:53411:2508":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:10250:2712":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:5217:3794":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:53657:2496":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:5529:2940":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:48859:108":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"5:8494:3393":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"4:7539:3176":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"4:1991:146":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:13037:49351":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:2839:4038":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"4:7248:187":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"17:13660:49912":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:4440:39722":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:10039:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:6643:36626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:8376:3035":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:49597:2739":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:10851:44055":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:2619:3515":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:7295:3874":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"4:9439:4466":{"crate_id":4,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"6:6120:40752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:9161:2343":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:9930:60310":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"4:8715:1726":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"4:783:4376":{"crate_id":4,"path":["std","thread","local","fast","Key"],"kind":"struct"},"4:5860:3330":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:50220:2405":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:48808:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"17:510:43845":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"12:777:2078":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"9:1056:3610":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:5143:1895":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:3272:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:10574:2285":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"12:353:4452":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:2772:4064":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:3475:1965":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:46858:11152":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"17:13708:49913":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:4281:3121":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"4:10550:31248":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:24072:2336":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"18:169:50358":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:3314:3787":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:6630:4075":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:1663:2648":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:48589:2287":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:6717:3930":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:50106:2775":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:12731:48835":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"12:979:3157":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:3110:57337":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:1518:3160":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"4:15882:1752":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"5:5948:4343":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"1:50684:4472":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:11433:44275":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:8436:3472":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:4871:42877":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"12:2052:3123":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:1721:37575":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"4:10719:3021":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:4020:39677":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:672:36711":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"4:11985:3111":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:49775:2755":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:12077:213":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:9716:60321":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:10058:4216":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:3129:4053":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:5962:4346":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"1:3620:133":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:13247:49450":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"12:2032:2648":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:4841:2433":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:6075:3868":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:9206:43855":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:50748:159":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:56242:2465":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:4340:39709":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"12:940:3154":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:3896:39666":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:11822:44798":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"14:0:1812":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:5326:3753":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:4743:42845":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:3453:1962":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"4:9267:56741":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:4411:42753":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"5:1276:3509":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"4:8453:1931":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:13428:49884":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"4:11201:3324":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"17:9561:4165":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"4:11177:3363":{"crate_id":4,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"16:3243:4048":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:46675:2943":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:46631:2644":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"13:0:1806":{"crate_id":13,"path":["std_detect"],"kind":"module"},"4:3803:128":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"4:15908:1775":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"16:6679:4079":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:3576:42235":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"9:776:3597":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:12348:48743":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"4:10789:3193":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:4075:39684":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:6007:40748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:5311:40331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:11628:44600":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"4:9434:4373":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"1:49733:2844":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:11784:44783":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:12496:48753":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:3340:3788":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:24477:5093":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:50206:2402":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:53581:2511":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"4:4467:2279":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"4:1466:3154":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"4:8863:1937":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:3676:1981":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:11381:44266":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:50528:2788":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:14540:2554":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"6:4218:39698":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"4:7062:54365":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:720:51974":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:12746:43875":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:3824:229":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:49993:2766":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"6:5378:40334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"4:10980:2755":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"4:10655:3281":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"4:15388:3712":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"4:2397:31246":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"6:6925:39859":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:8127:2607":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:12170:48730":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"4:3044:3284":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:4160:39694":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:6381:3881":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:12328:4395":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"17:10571:4149":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:48236:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"4:15038:3137":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:5605:3769":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:48568:2285":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"4:15895:1762":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"4:4036:3038":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:24388:2618":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"4:5431:3088":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:51801:2522":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:10846:2472":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:3686:42244":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:2963:186":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:6665:41122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:1733:3334":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:11181:43873":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:5855:3783":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"4:5563:3056":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"11:54:3671":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"4:8545:1940":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"4:5497:3052":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:8373:3165":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:7379:3890":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:5959:3796":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"9:900:41555":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:53081:2536":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:53333:2524":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:39184:2391":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"14:231:3395":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:6604:3928":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"12:399:3687":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:12048:48660":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"4:12082:214":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:3104:2140":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"4:2123:2078":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:13369:49851":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:32632:2866":{"crate_id":1,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"5:383:3478":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:3105:57340":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:49699:2746":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:49807:2729":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:3471:1966":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:8954:4147":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:10034:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:7264:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:6533:4070":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:9579:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:24440:5091":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"12:1682:3695":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"12:928:3150":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:12660:48825":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:1544:37558":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"4:2147:3125":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:5923:3910":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:52221:52056":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"12:162:3685":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"4:11842:183":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"16:7449:3877":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:9431:43858":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:10975:44138":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:4308:39705":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"4:4217:3030":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:24240:2811":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"4:696:3239":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"18:820:4231":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:7048:3378":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"4:4140:3307":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:47311:3036":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:48152:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"4:10278:4377":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"12:379:3688":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:11530:44553":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:4198:39696":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:7792:3904":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:52069:2495":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:6549:3885":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:51422:2520":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:49939:2763":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:6656:4077":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:4017:3122":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"16:6873:2051":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:48582:2286":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:11945:44085":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:5685:3776":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:10513:2279":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:12596:54369":{"crate_id":4,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"6:6184:40756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:11682:2733":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:4709:4339":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:12130:48727":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"4:973:3266":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:3530:1978":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:46645:2948":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:51530:2521":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:2861:4039":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:10240:4118":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:57973:52065":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"16:2905:4040":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"18:837:2396":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:2792:3791":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"5:6498:228":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:7891:239":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"4:1447:3150":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"4:2126:3121":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:52615:2503":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:3102:2332":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:9655:2393":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:7247:3901":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:13342:2393":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:3654:1989":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:56677:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:12318:48740":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"4:14931:3119":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:9948:43866":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:4230:39699":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"4:14630:31248":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"4:8722:1727":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"6:3920:39668":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:50374:2411":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"4:15865:54102":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:4179:39695":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:7323:3889":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"4:3405:3013":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"4:10511:30272":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:5541:40371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:5974:36589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:46124:1990":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:13129:49357":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"4:8187:3266":{"crate_id":4,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"6:539:36671":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:3177:233":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:22862:51081":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:8449:1894":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:2953:179":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"4:15887:1756":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"4:12030:3114":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:11457:44276":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"4:11868:3178":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:46655:2949":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:2484:43967":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:4526:39731":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:14369:2798":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:48446:1929":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:7155:3942":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:5784:3780":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:7184:4088":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:47293:1726":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"7:85:41409":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"4:15904:1771":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"4:4258:3027":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:9517:2755":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:4599:42821":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:47916:2143":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"4:10443:3264":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"4:11960:2078":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:46297:1982":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:11696:2734":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"4:5567:3057":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:13859:49967":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"12:1162:3681":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:12674:48826":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:49518:2731":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"4:11071:3076":{"crate_id":4,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"5:3407:3417":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:3554:3122":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"16:6190:3918":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:11477:2726":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"4:10678:130":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:3611:1883":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:10455:4169":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:3248:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"16:7309:3872":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:2181:583":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"4:11507:3215":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"17:10364:4198":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"4:6477:53996":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"18:729:60334":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:2765:584":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:13529:49897":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:13763:49952":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:6060:3907":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:5906:3381":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:9064:43852":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:53871:19832":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:3948:3021":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:13908:49993":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:50072:2771":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"4:11190:3322":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:51755:2534":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:1531:37556":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:1072:2648":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"12:1103:3158":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:53473:2528":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"4:3371:3018":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"4:4219:3031":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"18:136:50356":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:13602:49910":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:11017:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"12:1881:146":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:5433:40340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:24887:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:51831:2526":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:5609:1928":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"}},"external_crates":{"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":21}