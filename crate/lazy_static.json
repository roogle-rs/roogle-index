{"root":"0:0:2334","crate_version":"1.4.0","includes_private":false,"index":{"1:13370:30654":{"id":"1:13370:30654","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2334":{"id":"0:0:2334","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:2340","0:31:2341","0:28:2334"],"is_stripped":false}}},"5:5697:3541":{"id":"5:5697:3541","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13310:23162":{"id":"1:13310:23162","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12363:476","self::pattern":"1:12960:3864"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13377:30658":{"id":"1:13377:30658","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12363:476","self::pattern":"1:12960:3864"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13339:30648":{"id":"1:13339:30648","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12960:3864","str::split":"1:13327:27746","prim@char":"4:12363:476","str::split_terminator":"1:13336:30647"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44111:3895","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:3880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5703:31361":{"id":"5:5703:31361","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5695":{"id":"5:5695","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5696:31359","5:5697:3541","5:5700:31360","5:5703:31361","5:5711:31362","5:5712:31363","5:5713:3702","5:5714:26364","5:5715:26365"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13360:30650":{"id":"1:13360:30650","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12960:3864","`DoubleEndedIterator`":"1:8329:130","prim@char":"4:12363:476","str::rmatch_indices":"1:13363:30651"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44193:3899","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13287:21876":{"id":"1:13287:21876","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:2340":{"id":"0:29:2340","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"1:13345:27753":{"id":"1:13345:27753","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12363:476","str::splitn":"1:13342:27751","self::pattern":"1:12960:3864"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44165:3816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:3880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13357:30649":{"id":"1:13357:30649","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12960:3864","`DoubleEndedIterator`":"1:8329:130","prim@char":"4:12363:476","str::matches":"1:13354:2545"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44265:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:3880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:2341":{"id":"0:31:2341","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:2340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13327:27746":{"id":"1:13327:27746","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12960:3864","`DoubleEndedIterator`":"1:8329:130","prim@char":"4:12363:476","str::split_whitespace":"1:13301:22915","str::rsplit":"1:13333:27749"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44043:3818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13400:26367":{"id":"1:13400:26367","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13404:27673":{"id":"1:13404:27673","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1061:36962"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13386:30659":{"id":"1:13386:30659","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12363:476","self::pattern":"1:12960:3864"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:3880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5696:31359":{"id":"5:5696:31359","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:2648","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:306:2648","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13402:27671":{"id":"1:13402:27671","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1061:36962"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13295:27744":{"id":"1:13295:27744","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13296:27745"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13308:30646":{"id":"1:13308:30646","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44307:3894","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5700:31360":{"id":"5:5700:31360","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5714:26364":{"id":"5:5714:26364","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13400:26367"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13405:30663":{"id":"1:13405:30663","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5013:30663"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44342:3647","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13296:27745":{"id":"1:13296:27745","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13295:27744"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13298:22869":{"id":"1:13298:22869","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12363:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44013:3891","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13403:27672":{"id":"1:13403:27672","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1061:36962"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13280:30643":{"id":"1:13280:30643","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13279:27665":{"id":"1:13279:27665","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12507:3884"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13289:21877":{"id":"1:13289:21877","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13283:2339":{"id":"1:13283:2339","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42184:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13309:22871":{"id":"1:13309:22871","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44335:3901","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13274:30641":{"id":"1:13274:30641","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13313:27271":{"id":"1:13313:27271","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"4:12363:476","self::pattern":"1:12960:3864"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13336:30647":{"id":"1:13336:30647","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12960:3864","str::split":"1:13327:27746","prim@char":"4:12363:476","`DoubleEndedIterator`":"1:8329:130","str::rsplit_terminator":"1:13339:30648"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44093:3896","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5712:31363":{"id":"5:5712:31363","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:306:2648","`String`":"5:7754:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:2648","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13351:27756":{"id":"1:13351:27756","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:3880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13401:26368":{"id":"1:13401:26368","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13294:27741":{"id":"1:13294:27741","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13293:27740","str::split_at_mut_checked":"1:13296:27745"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13348:27755":{"id":"1:13348:27755","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13323:2833":{"id":"1:13323:2833","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42184:191","prim@char":"4:12363:476","self::pattern":"1:12960:3864"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:3880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13389:30660":{"id":"1:13389:30660","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12363:476","self::pattern":"1:12960:3864"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13273:30640":{"id":"1:13273:30640","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5715:26365":{"id":"5:5715:26365","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13401:26368"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13271:1006":{"id":"1:13271:1006","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12363:476"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13342:27751":{"id":"1:13342:27751","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12363:476","self::pattern":"1:12960:3864","str::rsplitn":"1:13345:27753"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44147:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13408:3625":{"id":"1:13408:3625","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5014:3625"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44351:3626","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13368:30653":{"id":"1:13368:30653","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13291:30644":{"id":"1:13291:30644","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12369:1735","str::slice_mut_unchecked":"1:13292:30645","crate::ops::Index":"1:39728:2741"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13366:30652":{"id":"1:13366:30652","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13398:27668":{"id":"1:13398:27668","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40083:3595","Self::is_ascii":"1:13397:26362"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40083:3595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13333:27749":{"id":"1:13333:27749","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12960:3864","`DoubleEndedIterator`":"1:8329:130","prim@char":"4:12363:476","str::split":"1:13327:27746"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44061:3822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:3880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13300:22383":{"id":"1:13300:22383","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44029:3689","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13354:2545":{"id":"1:13354:2545","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12960:3864","`DoubleEndedIterator`":"1:8329:130","prim@char":"4:12363:476","str::rmatches":"1:13357:30649"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44247:3897","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13397:26362":{"id":"1:13397:26362","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13392:30661":{"id":"1:13392:30661","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12363:476","self::pattern":"1:12960:3864"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:3880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13299:22944":{"id":"1:13299:22944","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12363:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44019:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13306:29658":{"id":"1:13306:29658","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44297:3892","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13276:30642":{"id":"1:13276:30642","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13274:30641"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:2334":{"id":"0:28:2334","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"1:13281:336":{"id":"1:13281:336","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13282:27721","`u8`":"4:12382:1865"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13316:27273":{"id":"1:13316:27273","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12363:476","self::pattern":"1:12960:3864"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:3880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13373:30656":{"id":"1:13373:30656","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5711:31362":{"id":"5:5711:31362","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13285:21875":{"id":"1:13285:21875","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42184:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13270":{"id":"1:13270","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13271:1006","1:13272:2834","1:13273:30640","1:13274:30641","1:13276:30642","1:13279:27665","1:13280:30643","1:13281:336","1:13282:27721","1:13283:2339","1:13285:21875","1:13287:21876","1:13289:21877","1:13291:30644","1:13292:30645","1:13293:27740","1:13294:27741","1:13295:27744","1:13296:27745","1:13298:22869","1:13299:22944","1:13300:22383","1:13301:22915","1:13303:22833","1:13306:29658","1:13308:30646","1:13309:22871","1:13310:23162","1:13313:27271","1:13316:27273","1:13319:2875","1:13323:2833","1:13327:27746","1:13330:22905","1:13333:27749","1:13336:30647","1:13339:30648","1:13342:27751","1:13345:27753","1:13348:27755","1:13351:27756","1:13354:2545","1:13357:30649","1:13360:30650","1:13363:30651","1:13366:30652","1:13368:30653","1:13370:30654","1:13372:30655","1:13373:30656","1:13374:30657","1:13377:30658","1:13380:26572","1:13383:27757","1:13386:30659","1:13389:30660","1:13392:30661","1:13395:30662","1:13397:26362","1:13398:27668","1:13399:26366","1:13400:26367","1:13401:26368","1:13402:27671","1:13403:27672","1:13404:27673","1:13405:30663","1:13408:3625","1:13409:30664"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13363:30651":{"id":"1:13363:30651","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12960:3864","`DoubleEndedIterator`":"1:8329:130","prim@char":"4:12363:476","str::match_indices":"1:13360:30650"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44211:3900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:3880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13282:27721":{"id":"1:13282:27721","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12382:1865"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13293:27740":{"id":"1:13293:27740","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13295:27744","str::split_at_mut":"1:13294:27741"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13399:26366":{"id":"1:13399:26366","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13272:2834":{"id":"1:13272:2834","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13374:30657":{"id":"1:13374:30657","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12363:476","self::pattern":"1:12960:3864"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12986:3879","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5713:3702":{"id":"5:5713:3702","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13292:30645":{"id":"1:13292:30645","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12369:1735","crate::ops::IndexMut":"1:3485:2742","str::slice_unchecked":"1:13291:30644"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13330:22905":{"id":"1:13330:22905","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12363:476","self::pattern":"1:12960:3864"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12775:3831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13301:22915":{"id":"1:13301:22915","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13303:22833"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44317:3893","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13380:26572":{"id":"1:13380:26572","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12363:476","self::pattern":"1:12960:3864"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13319:2875":{"id":"1:13319:2875","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42184:191","prim@char":"4:12363:476","self::pattern":"1:12960:3864"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13409:30664":{"id":"1:13409:30664","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5011:30664"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44360:3646","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13372:30655":{"id":"1:13372:30655","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13383:27757":{"id":"1:13383:27757","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12363:476","self::pattern":"1:12960:3864"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:3880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13395:30662":{"id":"1:13395:30662","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12921:137","`FromStr`":"1:12920:3372"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42315:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12920:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12920:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13303:22833":{"id":"1:13303:22833","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13301:22915"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44326:3902","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"4:2748:9489":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"4:6928:233":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:40614:3648":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:5318:16837":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:4712:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"4:3907:9523":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:10564:17259":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"4:12374:745":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"1:11440:3823":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:2150:3296":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"11:2301:9374":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"16:7358:17134":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:10605:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"4:2008:9431":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"5:5545:9692":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:7316:10993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:42478:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:5593:14184":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:8058:17157":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"9:53:15958":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"11:2539:25856":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:33157:2717":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"6:6638:14889":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"14:202:9698":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:21950:9008":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:2964:258":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"6:8290:14358":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:5449:16876":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:40599:3626":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:4241:16243":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"4:10718:9509":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:2227:17365":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"4:3614:3272":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:1597:11050":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:4061:2838":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:1533:3245":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:3288:2740":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:45925:9024":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:5230:14143":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:40816:3692":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:44959:3973":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:15475:21529":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"4:8545:3892":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"17:15573:21534":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:46103:9006":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:10534:17072":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:15931:21561":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:44165:3816":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"4:3681:9484":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"4:7990:9339":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:4914:14111":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:5670:14192":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:5482:14173":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:12475:3809":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:3141:16176":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"14:187:16078":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:16775:21763":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"4:4327:9562":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:14405:20768":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"4:6041:2705":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:13601:22332":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"1:46045:9031":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"11:2551:32740":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:5007:14123":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"18:589:22826":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:3654:147":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:22221:9464":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:13014:17547":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"6:6748:14902":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"6:8319:14362":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:11065:17271":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:10141:17246":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:8711:17182":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:43989:3889":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:12966:3878":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:15864:21555":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:7414:11167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:6696:17101":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:12816:17289":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"4:9347:26441":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"4:8091:9420":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:6731:17103":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:5006:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:41404:3701":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:1424:9376":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:11539:17330":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:5709:17071":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"4:10224:22720":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:47168:8996":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:5603:14185":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:44061:3822":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:21842:9008":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:16323:21589":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:22701:9135":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:14859:20796":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"11:1893:9366":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"4:8056:9348":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:12524:17438":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:5562:14181":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:6521:14880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:11402:3822":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:15973:21566":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:14640:20783":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:3258:2721":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:5165:14137":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"4:8076:9419":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"11:1564:16061":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:1551:11045":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"18:718:21789":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"8:0:2570":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:42226:2838":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"6:5288:14150":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:12280:17474":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:5107:14132":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:6437:14874":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"4:10350:3283":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:38490:2736":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:6731:14900":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:14902:20799":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"4:11882:9524":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:12625:17441":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:40903:3725":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:16026:21572":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:40531:3653":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:13028:17538":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"5:2157:3247":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:7602:2838":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:12008:3829":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:43228:3790":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"17:16283:21586":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:40758:3689":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"4:1625:9366":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"4:4696:9571":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"4:10982:26695":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"4:6686:2698":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:10402:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:39800:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:7341:15311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:6700:14896":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"5:7731:9435":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:30827:22687":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"4:4107:9528":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:11509:3821":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:3889:16182":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"4:8596:3750":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:5570:14182":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:32945:2718":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:22734:9134":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"11:0:2573":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"4:133:2479":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"1:14024:3970":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"6:6765:14904":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:41381:22926":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"4:8247:26997":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"5:7544:30137":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:1569:11047":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:3352:30357":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:15315:21523":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:4716:2656":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"4:8865:9622":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"4:9286:9324":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"4:5783:9634":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"4:5170:9599":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"11:2121:9374":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"14:160:16070":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:6016:3251":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"4:11821:9523":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:7192:17128":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:7350:15312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:42363:3246":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"11:1140:16060":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:0:568":{"crate_id":1,"path":["core"],"kind":"module"},"1:6961:3720":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:15679:21539":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:10630:17261":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"4:1647:9380":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:12176:17419":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:16132:21575":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:12605:17273":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"4:4408:9566":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:15160:20816":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:46316:22614":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"4:8010:9330":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"1:4455:110":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"16:7980:17152":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:10938:33980":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"4:11312:26536":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:3441:16178":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:12960:3864":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"5:7216:30393":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:10928:17269":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:2966:16170":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:2840:16164":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:7471:17140":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:5976:3618":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:6967:22842":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:2968:257":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"16:7807:33193":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:10167:17247":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:44446:3917":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:12711:17521":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:2931:9464":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:4896:13941":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:6544:14883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:4890:14109":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:5139:14135":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"11:2400:3246":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:15641:17329":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"11:740:9369":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:5809:9720":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"4:2548:2505":{"crate_id":4,"path":["std","io"],"kind":"module"},"16:7337:17133":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:43628:3861":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"4:8255:9499":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:40542:22557":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:14963:20803":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:10778:17265":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"16:4152:16200":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:532:10144":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:4851:2667":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"4:3307:27020":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"4:11861:9522":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"4:384:9338":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:2415:16116":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:8008:15694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:23043:22507":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:3456:143":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:2570:16152":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:7776:22495":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:6659:14891":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"4:8771:9618":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"1:3036:124":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"4:11024:26566":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:46252:9038":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:7524:9385":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:4829:14104":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:7067:9721":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:14284:20762":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"11:873:9372":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"4:8468:3698":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"4:8202:9457":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:10400:3783":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:1794:30362":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:3048:16173":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:6028:17074":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:44342:3647":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"4:9226:9646":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:12028:17414":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:4929:16724":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:553:10147":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:16728:21759":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"6:5088:14131":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:44639:3926":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:3703:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"4:1618:2838":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:6443:14875":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:5255:14146":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:23262:22730":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:42404:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:8291:165":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:10392:129":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:46345:22695":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"18:659:21792":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:4947:14115":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:6123:17080":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:2797:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:22729:9136":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"6:491:10140":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:5417:16867":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:479:10138":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:40501:3630":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:6526:14881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:10729:17264":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"4:1925:3269":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"1:44676:3936":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"5:5309:2691":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:22974:3373":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:22226:9014":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:14346:17481":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:44868:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"5:3094:2899":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"11:685:3246":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:15586:21535":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"4:1094:3227":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:44629:3925":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:16332:21590":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:16520:21750":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"4:7885:26634":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"4:12370:1825":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"17:16714:21758":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"5:3097:30108":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:42702:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"4:6857:2707":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"16:903:33179":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:15286:21522":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:43169:22859":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"4:9709:139":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"4:6722:2706":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"0:31:2341":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"4:12368:1701":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"1:12920:3372":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"4:5291:27126":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:13912:3308":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"4:2329:9440":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"18:538:21804":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:8528:17173":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:7044:17124":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"4:9412:235":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:5387:14163":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:7649:9360":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:11733:17350":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"4:4674:9570":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:22867:22906":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:41960:3747":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"4:3533:3703":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"1:42776:2692":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:43153:22851":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:2900:16167":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:40883:3724":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:5501:30362":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:7949:17149":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"18:698:21796":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"11:328:32747":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:46555:9027":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:1625:11051":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"4:8673:9545":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:3720:17440":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:30801:3514":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:43868:3824":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:10418:17255":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:44540:3921":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"4:4305:29168":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:6884:30362":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"4:9716:9459":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:10274:17250":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:32415:2641":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"4:9115:199":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"9:500:15942":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:13758:3961":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"4:8347:9501":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:896:33180":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"4:9407:234":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"11:1601:16062":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:0:1011":{"crate_id":6,"path":["libc"],"kind":"module"},"4:9390:187":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"4:12385:1859":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"16:3110:16174":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:14845:20795":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:10353:144":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"4:12388:1927":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"4:3304:26992":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:39840:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:39860:2744":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"4:8651:9595":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:43114:22841":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:3987:16183":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"17:14997:20805":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:1223:31441":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:40653:3649":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"17:13266:17279":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:8626:17179":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:42004:22087":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"4:5642:9631":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"17:13933:20261":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:12583:17434":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:6421:17093":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"4:597:3268":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:12798:17523":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:44335:3901":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"4:10715:9507":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:40974:3719":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:6462:14877":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:3875:3250":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:11264:26518":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"4:12384:1853":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"4:6803:2701":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"4:12314:26685":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:13491:17290":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"4:5626:9630":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"1:13932:3310":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:13196:120":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:43636:3837":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:23185:22700":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"4:9126:9636":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"4:11086:27206":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:14821:20793":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:4810:16697":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:13983:20265":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:472:17240":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:7462:17139":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"4:2474:3548":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"1:22605:24049":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:819:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"13:110:32768":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:12962:17529":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:13570:17294":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:13719:17579":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:2803:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"4:11716:26618":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:10549:17073":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:2506:16149":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:13641:3728":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1:3212:2671":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"17:13890:20258":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:2640:16155":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:5635:14188":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:10862:23241":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:43141:22857":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"4:2490:9447":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"16:7521:32940":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:3253:2716":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:33369:2720":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:13222:17278":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:5586:14183":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:40702:3645":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:14652:20784":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:15852:21554":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:12044:17385":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:8437:178":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:583:17241":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"4:5006:9542":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:12776:17522":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"11:364:3217":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:22951:22074":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:43941:3825":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:23174:22503":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:12762:17491":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"4:4929:9547":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:46235:9032":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:5946:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:13958:20263":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:42515:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:12056:17415":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:2932:3355":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:11971:17357":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:5113:16793":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:6159:17082":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"11:123:3210":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"18:670:21793":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"4:12378:900":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"16:2748:16160":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:7548:15321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:2077:1368":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"17:12066:17410":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:13157:17535":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:12163:17418":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:5334:14156":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"4:10973:3273":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:32473:2642":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"17:15731:21543":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"4:11511:27197":{"crate_id":4,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"16:8546:17174":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:38380:2734":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:6843:17110":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:2450:16146":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:12371:17432":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:13592:17295":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"4:3490:9492":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:44729:3938":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:5198:16809":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:7999:3698":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:16494:20250":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:30816:3574":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:6449:14876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:16761:21762":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:12260:17473":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"6:5477:14172":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:559:10148":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:4:1266":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"4:8515:3723":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"17:15036:20808":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:7604:15325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"4:4774:9588":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:5277:25682":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:1589:11049":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:6794:17106":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"6:5127:14134":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:44604:3923":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"9:445:15939":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:16507:20251":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"6:5541:14179":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:3639:2745":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:21824:9007":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"4:4227:9537":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:7838:17144":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:15963:21565":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:3729:3246":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:6652:14890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:2467:16147":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:44019:3890":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:15905:21559":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:6823:14908":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"4:4983:9548":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:38435:2735":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:15689:21540":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:47011:9068":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:8165:17163":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"14:31:16070":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:42626:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:11950:27115":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"4:12381:893":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"17:14084:20272":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:32391:22470":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"18:643:34015":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:8298:17169":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:2171:3250":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:6573:17096":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:11481:3820":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:23137:9464":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"4:991:9373":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"4:11938:9668":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"14:214:16079":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"11:2323:3227":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"5:7168:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:5357:986":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:42235:2811":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:43182:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:14807:20792":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:13181:17540":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:11998:17378":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:3126:16175":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:5648:14190":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:10394:17254":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"4:763:154":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:2182:9389":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:21737:22957":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:11579:17323":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"4:8557:9520":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:13635:17576":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:7391:11182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:12775:3831":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:3277:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:40607:3647":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:1395:9375":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:14019:20267":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"4:2476:9443":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"4:4885:9592":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:7259:17130":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:12018:17413":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:44567:3922":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"4:8180:9459":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"4:9334:17142":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:8330:14363":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"5:4569:3618":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"5:1645:9388":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:14933:20801":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"4:3344:9507":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"4:5855:9642":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"15:288:16094":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"4:3910:9522":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:8636:17180":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:7919:17147":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:16209:21582":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:545:10146":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:4902:14110":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:8300:2647":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:4267:16246":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:13757:20251":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"4:8876:9623":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:3444:2643":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:3465:9366":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:7731:2811":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"4:11688:26549":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:13070:17273":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"4:968:9371":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:2766:135":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:16159:21577":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"11:430:32758":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:12363:476":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"17:14055:20270":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:12931:17292":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:523:10143":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:44360:3646":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:8031:15696":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:5520:14177":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"5:4217:3246":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:15876:21556":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:485:10139":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:23085:22902":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:10516:17258":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:1667:11055":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:3860:3247":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:42266:2812":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:5488:14174":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:2143:3578":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"16:2435:16145":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:4904:2669":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:2591:677":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:7711:3661":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:42895:3783":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:8302:14360":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"18:754:21798":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:6625:33177":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"11:2466:9366":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:40921:22795":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:15836:21552":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:11630:17328":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:3347:9377":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:8121:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"4:12149:27200":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:7704:3688":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:7743:9690":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:10332:17252":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:16701:21757":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:39782:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"4:4335:9563":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"4:1902:9412":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"4:12389:1430":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"16:6852:17111":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:6205:17085":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"4:6682:2484":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"4:7358:26624":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"15:0:2576":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:46366:22509":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:11527:17334":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"4:12376:740":{"crate_id":4,"path":["std","f128"],"kind":"primitive"},"1:12721:3905":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"18:113:21779":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:4997:14122":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:2486:16148":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"4:979:3221":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:8598:17177":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:4172:30362":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:7448:15314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:2590:16153":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:8267:14355":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:12335:17476":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:1496:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"18:481:21800":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"11:1049:9375":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:8669:17181":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"4:11229:3936":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:11805:17363":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:1625:9369":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:4873:2668":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:6631:14888":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:16385:21594":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"4:10509:3284":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:10764:3845":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:578:10151":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:46643:22516":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"17:11788:17377":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:8308:14361":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"4:5091:9589":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"11:299:3213":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:10031:17243":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:23092:3388":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:7767:9699":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:6502:16115":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:14416:20769":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"7:32:15910":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"4:4819:26589":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:2961:145":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"6:5057:14129":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"4:5712:9632":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"5:6132:2691":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:7212:16088":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:6890:17114":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:4970:14118":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:1563:11046":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:7765:17143":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:13193:17539":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"5:6100:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:1494:11038":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:5224:14142":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:16656:21754":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"4:12382:1865":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:22517:9140":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"5:938:9382":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"10:0:2572":{"crate_id":10,"path":["adler"],"kind":"module"},"5:894:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:7883:17145":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:5265:14147":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"4:10924:9456":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:13554:17300":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"17:11902:17366":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:44351:3626":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:11818:17362":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:1690:11058":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:1711:11060":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:15939:21562":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:10977:33987":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:5348:16844":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:42371:2838":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"4:9109:9635":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"17:506:16118":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"4:11981:27186":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"1:44093:3896":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"4:1630:9377":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:11475:17312":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"4:4165:9531":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:3485:2742":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"11:1900:9377":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:44297:3892":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:3338:2730":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"4:5780:9633":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"17:15714:21542":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"11:1907:9378":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:4984:14120":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"4:11221:26693":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:1643:11053":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:11198:3245":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:6507:14839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:11448:17309":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:6064:17076":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:47128:8992":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:14327:17482":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:21822:9464":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:44943:180":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:12736:17493":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:16145:21576":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:11114:17272":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:4785:2664":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:12108:17416":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:12860:17525":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:12840:17490":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"4:8070:9349":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:4497:3629":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"4:4809:9532":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:2437:17384":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:44317:3893":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:42874:3781":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"4:5337:204":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"1:46937:9062":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:473:10137":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:43840:3815":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"4:11009:9632":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:3283:2739":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"6:6419:14873":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:10648:3798":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:10179:3796":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:46982:9034":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:6680:17100":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"17:11432:17308":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:13970:20264":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:39760:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:3415:125":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:11553:17325":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:2594:3238":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"4:3346:9508":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:6411:14872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:3268:2719":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:13871:20257":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:22935:22025":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:15549:21533":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:8296:14359":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:8209:17165":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:6917:14937":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"4:8859:3245":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"6:5271:14148":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:3587:16179":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"17:11401:17306":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:42088:22723":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:3433:2675":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"5:798:119":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:13537:17292":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:15540:21532":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"14:165:16071":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:4431:22739":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"4:12373:742":{"crate_id":4,"path":["std","f16"],"kind":"primitive"},"4:6362:3308":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:14299:20763":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"16:6098:17078":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:7716:33158":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:2704:16158":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:6902:14936":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"4:9182:9647":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"4:4821:26591":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:41429:3707":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:3095:31437":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:47232:9000":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"4:4215:9534":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"4:11197:9636":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:44838:22336":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"4:8608:9569":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:14612:20781":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:994:9383":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:1507:11040":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:2550:16151":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"4:9551:3269":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"4:10954:140":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:45893:9058":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:6337:17089":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:4478:3628":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:22814:22853":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"18:491:34016":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"4:3069:226":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"6:538:10145":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"0:28:2334":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"1:46089:9092":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"4:10761:3285":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:6263:3718":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"13:0:2569":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:11291:33960":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:3014:16172":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"4:920:9365":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:1684:11057":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"4:6187:3274":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:13205:17277":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:517:10142":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:12035:16055":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"4:11798:3287":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"4:8495:9463":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:10387:120":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"5:221:3235":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:5301:14152":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:11606:17273":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"4:2502:9453":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"17:12409:17479":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:42380:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:12249:17472":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"4:907:9364":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"4:4888:9570":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:5019:14124":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:4766:16676":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:7508:33224":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"4:9139:9637":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:15090:20812":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:13119:17541":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:6691:14895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:15050:20809":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"4:8342:27088":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"1:42552:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:2275:30197":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:8014:15695":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:1239:3237":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:7789:33167":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"4:11702:26556":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:12699:17520":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:15077:20811":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:12122:17387":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:12826:17488":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:13006:17532":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:0:2577":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:43207:138":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"4:4143:9529":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"18:613:34022":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:14599:20780":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:34054:2727":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:6173:17083":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"4:5848:3274":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"4:11104:27208":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:43915:3715":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"9:390:15940":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:14917:20800":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:13515:17291":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:46493:9073":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:39820:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"4:10418:9640":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"4:12380:912":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"1:41046:3722":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"11:842:9371":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:7986:10096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:14099:20273":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"11:1884:2838":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:9416:2813":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:47194:8998":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:13909:20259":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:4694:16627":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:12347:17477":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:13041:17537":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"4:11682:9641":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:12869:17288":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:16218:21583":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:40935:3728":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:44843:151":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"4:11964:16103":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:23295:22497":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"4:10352:27168":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"6:5319:14154":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:2860:16165":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:11678:17321":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:11720:17349":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:5742:17073":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:2217:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:5549:9693":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:3695:16180":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:14692:20786":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:23196:22602":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"17:10696:17263":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:43950:3306":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:6408:17092":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"5:40:9397":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:8755:3712":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"4:8603:9568":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:42589:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:6269:17087":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:4881:14108":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"4:11733:26403":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:39069:2737":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:1584:11048":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:22248:3812":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"18:689:21795":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:40893:134":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:7675:9332":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:11309:17276":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:9848:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:5084:3639":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"4:1486:156":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:43443:21994":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:44670:3883":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:14127:20275":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:47111:9095":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"4:8794:9619":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"4:12335:9350":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:47137:8993":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:21830:9011":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:10335:3658":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"18:573:34015":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"4:9211:9648":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:45876:9053":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:3207:247":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"6:4816:14103":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:4443:22488":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:7907:17146":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:3105:30109":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:6749:17104":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"4:9176:2838":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:7719:9434":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"14:0:2575":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:3809:30362":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:12570:17433":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"4:4113:9527":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:6564:14884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:14140:20276":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:3047:138":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"6:7518:15319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:3088:3600":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"16:6084:17077":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:3679:23066":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:22999:22835":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:6368:17090":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"4:12386:1841":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"16:546:32810":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"4:9275:27094":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"4:9466:9652":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"9:236:9618":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"5:7558:2838":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"14:220:16080":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:10296:17251":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:46074:9086":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:22381:9010":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:7016:17122":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:1675:11056":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:5325:14155":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:22579:9464":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"5:2377:30174":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:735:30242":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"4:9422:2704":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:7710:3660":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"18:623:34005":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:11653:17326":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"4:11676:26550":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:46299:9094":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:2772:16161":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:1132:30362":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"11:1920:9380":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:8585:17176":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"4:3653:3658":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"11:809:9366":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"18:735:21790":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:41036:3735":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:2705:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"17:12095:17386":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:10830:24012":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:6480:14879":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:46153:9066":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"4:10644:27191":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:45978:9065":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:5551:14180":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:0:2578":{"crate_id":17,"path":["object"],"kind":"module"},"17:14358:20765":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"4:12366:1324":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"6:1514:11041":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:13095:17543":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"11:671:3245":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"4:1864:9401":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"6:5295:14151":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:10404:3784":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:46170:9072":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:14507:20773":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:10663:17262":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:1530:11043":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:4582:30375":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"18:515:21802":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:317:33179":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"4:4205:9533":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:15981:21567":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"4:958:9369":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:1614:9368":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:3339:9379":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:8267:17168":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:6738:33173":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:13921:20260":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:16341:21591":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:10784:33988":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"1:6072:3618":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:8565:17175":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:7469:15317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"4:7476:29169":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:8105:17160":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:3397:2750":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:6813:14907":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:5357:14159":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:7605:2846":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:2796:16162":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:14832:20794":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"18:635:34007":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:8179:17164":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"11:351:32749":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:13471:17289":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"4:5969:2694":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"4:3442:9506":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"4:1979:9430":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"17:11706:17348":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:2825:30183":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:16179:21579":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:13733:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:15531:21531":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:46584:9033":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"4:3301:30028":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:3660:2747":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:22687:9464":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"16:5060:16786":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:44850:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"4:680:9344":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:8028:17156":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:43124:3574":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"11:2440:3251":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"16:6866:17112":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:40591:3646":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:40823:3715":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:16832:20263":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:10039:22035":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:7401:33003":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"9:176:16044":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"4:2078:198":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"4:7401:27193":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:14152:20277":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:5249:14145":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:12723:17494":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:7542:33206":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:11831:17330":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:14773:20790":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"4:3399:9510":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:5349:14158":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"5:1564:2838":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:6534:14882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:7372:17135":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:1586:9364":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"4:6378:27213":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"4:1866:9402":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"5:6668:3251":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"4:8723:9617":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"17:16008:21570":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"11:1064:16059":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"18:531:21803":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"9:355:15955":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"11:830:9367":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:11503:17313":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"4:6513:220":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:1636:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:570:10150":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:46214:9026":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:6239:17086":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:15655:21537":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"4:9738:128":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"16:6302:17088":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"4:378:9337":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:23105:3374":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:40495:3626":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"11:2349:9375":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:44982:22950":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:10597:17260":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:6672:14893":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:5727:17072":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:2338:3300":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:45940:9054":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"4:11247:9467":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:22473:9139":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"4:4171:9532":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:15769:21547":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:44002:3888":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:7058:17125":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:12319:17453":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:5117:14133":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:45993:9071":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:11926:17364":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:7305:17132":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:5395:14164":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:8249:14352":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:46472:9067":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:4842:14105":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:15121:20814":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"4:2325:3565":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"17:11016:17270":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:8382:2646":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:21739:22955":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:41437:3709":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:4563:2677":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:15785:21549":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"4:3563:3618":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"4:8185:9456":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"11:2148:9375":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"4:4489:9567":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:12992:17495":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"4:505:27202":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:3313:9378":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:7691:9433":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:21683:3589":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:32414:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"4:11421:9436":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"4:9199:9645":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:13349:17283":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:7463:15316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:7454:15315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:306:2648":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:4937:14114":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4869:14106":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:16198:21581":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:32503:3494":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"6:5507:14176":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"16:5282:16824":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:23058:22620":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:12986:3879":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:13209:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:2378:17399":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:6153:3258":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"4:4356:9565":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:11878:17273":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:11173:33974":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:12981:3880":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:2761:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:42144:3751":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:7539:15320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:40953:3739":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"4:532:9319":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"18:507:34015":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:4594:2678":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:45861:9017":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:3731:2676":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:43789:24182":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:43435:22097":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:8243:3714":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"18:706:3881":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:34227:2728":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:6772:3740":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:26147:267":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"4:7156:9653":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:8793:23078":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:5381:14162":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:12507:3884":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:8353:15894":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:47324:9004":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:5641:14189":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"4:4012:9524":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:6588:17097":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"6:4957:14116":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:44901:3966":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:2880:16166":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:8096:17159":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"11:2545:32741":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:47285:9003":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:5315:3691":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"18:581:3589":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:6714:30362":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:21751:22966":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"6:4964:14117":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:42355:3245":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"17:11958:17358":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"4:11001:9420":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:15064:20810":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:43413:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:1220:17327":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:40570:3654":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"4:8628:9561":{"crate_id":4,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"4:2787:9500":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:5471:14171":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:8247:3713":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:8137:17161":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"4:899:2838":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:46605:9039":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:44147:3820":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:2920:16168":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:6256:32880":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:1539:11044":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:13055:17330":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"5:1379:9374":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"4:2712:9498":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:12008:17412":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"4:8647:9593":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:11592:17322":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:14393:20767":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:2141:3577":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"4:9395:2697":{"crate_id":4,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:41195:3738":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:14560:20777":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:4844:16708":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:12787:17487":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:22920:22056":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:6914:17116":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:3428:2674":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:7075:17126":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"11:708:9368":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:3649:254":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:46443:9061":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"15:394:16106":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:46622:9088":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:10823:17267":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:6904:17115":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:1632:11052":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"7:0:1917":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:31201:3589":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"5:898:9381":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:10097:17244":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:11232:17312":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:8320:17170":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"4:12364:1887":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"17:12920:17527":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:6882:14016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:16642:21753":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"4:3845:9519":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:11985:17411":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:11495:3816":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"4:9168:9650":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:1500:11039":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"4:12346:26543":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:1964:3618":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:11777:17352":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"16:6942:17117":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:40786:3683":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:7514:3251":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"4:12379:906":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"6:8199:15857":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:2958:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:40746:3686":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:5172:16806":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:11222:17274":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:40987:3731":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:13169:17571":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:15136:17292":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"11:1085:32738":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:6381:14810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"4:2081:197":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:43849:3814":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:4355:3618":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:6149:3727":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:7827:3695":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"16:6837:17109":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"14:40:20252":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:46717:22609":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"4:9448:9467":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"17:14335:17480":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:16632:21752":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"4:8706:9603":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:5658:14191":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"5:3306:3245":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:44461:3918":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"4:1849:701":{"crate_id":4,"path":["std","env"],"kind":"module"},"4:943:9366":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"18:608:34019":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:11757:17351":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"4:9152:9638":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"17:12234:17471":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:2724:16159":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"4:8214:140":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:43858:3303":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:15887:21557":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:15896:21558":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:7485:9386":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:23747:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:6042:17075":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"4:9321:27090":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:44970:3971":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"17:12906:17517":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:10653:3799":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:23207:22510":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"4:9293:26576":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:7566:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:15829:21551":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"4:10721:9505":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:16812:21766":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:16241:21584":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:21771:9012":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:6188:17084":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:22658:3559":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"11:1914:9379":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"4:1080:9374":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:6440:17094":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:44013:3891":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:4642:2481":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:12886:17516":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:3666:2749":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:5036:14126":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:21948:9009":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:5241:14144":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:32380:23705":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:46738:9022":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:40687:3650":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"17:16019:21571":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:5441:14168":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:13889:116":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"4:10935:26562":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:21693:22952":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"16:155:16121":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:39648:2752":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:14114:20274":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"4:9262:2696":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:12359:17478":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:15812:21550":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:34400:2729":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:4184:16209":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"4:11727:26505":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"18:96:21778":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:22985:22702":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"4:677:9343":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"11:1105:3229":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:4976:14119":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"4:8337:27118":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"4:12362:1184":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"11:2559:32742":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:6516:9654":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:7502:9384":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:22607:3559":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"16:7554:17141":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:44307:3894":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:4721:2657":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"4:8809:9620":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"17:11281:17275":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:4805:14102":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:7577:15323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"4:10492:114":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:23284:22613":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"17:13451:17288":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"4:8562:9518":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"4:5841:220":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"4:7875:17242":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:16822:20261":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:44043:3818":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"17:10487:17257":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"5:789:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:44111:3895":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"4:6576:186":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:12293:17431":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:39890:2746":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:40944:3729":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:23240:22716":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"4:4157:9530":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:41181:3737":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"18:765:21791":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:46892:9028":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:15997:21569":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"4:10990:26698":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:1548:3246":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:46060:9037":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"18:521:21799":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:5151:14136":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:8280:146":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:42276:2815":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"4:573:3265":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"16:7959:17150":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:6708:14897":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:13692:17578":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:12225:17423":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"5:7241:30381":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:6876:14935":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:2357:30194":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:44652:3882":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:32405:3604":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:42307:3755":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"6:7487:15318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:14269:20761":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:2040:676":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"17:16595:20253":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"6:6599:14885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:11465:17311":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"4:2726:24039":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:11026:33981":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:5405:14165":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:44326:3902":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:31174:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"18:598:34014":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:6713:17102":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:23251:22697":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"5:4307:3618":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"18:651:34015":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:39745:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:43928:3827":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"4:1614:3245":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:13798:20253":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:40997:3732":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:40843:3716":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:22379:9464":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:11051:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"11:2420:2838":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:5044:14127":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:5224:16812":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:7574:30111":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:12550:17437":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:10613:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:42315:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"17:10442:17256":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:9853:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"4:10914:26507":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"11:698:2838":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:44029:3689":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:39732:2743":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:13398:17286":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:44193:3899":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:12687:17519":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:5114:9591":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13082:17274":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"4:8622:9521":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"4:8234:9363":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"11:2566:9360":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:40865:3292":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:12204:17421":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:41171:3736":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:2304:30202":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:6623:14887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:1898:9366":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:2530:16150":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:11566:17324":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"4:9280:116":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:9527:3878":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:2952:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"4:9417:2703":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"4:11041:9638":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:41976:3748":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:12749:17492":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"11:1005:9374":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"4:5260:27126":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:46267:9087":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:11358:17304":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"4:6800:2700":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:14672:20785":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:6770:14905":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:44492:3920":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"0:0:2334":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"17:15106:20813":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:7852:9717":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:8223:17166":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:12661:3906":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:13290:17280":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:3834:16181":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"15:327:16099":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:33842:2723":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:5131:17542":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:43190:3574":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"17:11851:17361":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:40720:3685":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:11617:17274":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"4:11957:16103":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:15777:21548":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"4:685:9345":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:46688:22705":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"1:44922:24176":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"5:1595:9365":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:5420:14166":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:40715:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:32338:3594":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:3249:3573":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"16:4873:16714":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"11:1674:32752":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"4:12383:1847":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"1:22555:9141":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"11:102:32745":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:12216:17422":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:42881:3780":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:1696:9555":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"4:10601:9635":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:33641:2722":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:985:9372":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"4:6410:27091":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"4:6871:2708":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"17:10368:17253":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:10843:17268":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:15621:21520":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:5069:14130":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:8000:17154":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:6535:9655":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"5:1259:31442":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:2265:9319":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:32416:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:40580:3655":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:8343:15893":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:6777:14906":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:5494:14175":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:8261:14354":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:6666:14892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:5379:16852":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:497:10141":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:14975:20804":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"4:2642:9497":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:40912:3726":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:45961:9059":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:2727:113":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:41395:2484":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:13854:20256":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:15410:21525":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:7578:17142":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:5144:16801":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:15701:21541":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:33708:2726":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:15739:21544":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:44846:164":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:44718:3937":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:6998:17121":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"4:628:9340":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"4:3071:138":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"18:0:2579":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:40768:3670":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:39910:3621":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"4:8005:9328":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"17:14627:20782":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:6658:17099":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:10861:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"4:10919:26452":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"4:954:9368":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:23218:22699":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:13969:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:16399:21595":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:11421:17307":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"4:11665:9618":{"crate_id":4,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"6:5311:14153":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:8284:14357":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:7563:15322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:3280:2738":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:15148:20815":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:12082:17388":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:13706:22278":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:13818:20254":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:14886:20798":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:5676:14193":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:5217:14141":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:6953:17118":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"11:1023:3227":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:10218:17248":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:5450:14169":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"5:3373:9380":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:15439:21528":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"4:12387:975":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"11:2533:32744":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:23023:22714":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:14438:20770":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"9:422:15941":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:46284:9093":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:3450:141":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"16:8723:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:15602:21536":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:5428:14167":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:5179:9554":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:11457:17310":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"1:44211:3900":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:11041:9464":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:5282:14149":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:5757:33138":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:10246:17249":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:12673:17507":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"4:2239:129":{"crate_id":4,"path":["std","ffi","os_str","Display"],"kind":"struct"},"4:2015:792":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"6:5533:14178":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"11:785:9365":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"5:4506:30375":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:46398:9055":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:12149:17383":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:16264:21585":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:11523:3817":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:16297:21587":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:6640:17098":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"5:4491:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:14947:20802":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:13145:17536":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:16798:21765":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"4:12375:761":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"6:6723:14899":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:22260:22960":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"11:2366:16063":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:15844:21553":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:43878:3305":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:7938:17148":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:42218:3246":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:3202:118":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"4:8532:3689":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"16:5649:17053":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:7168:16089":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"11:396:3219":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:5205:14140":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:7990:17153":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:11290:3831":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:6808:17107":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:5085:16788":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"11:2380:3245":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"16:5255:16820":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:8749:3659":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:7350:33132":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:34573:2731":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:10406:3785":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:44909:3967":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:7495:33222":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:43396:22227":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:5412:1253":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:13618:3963":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"4:8228:128":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:8014:17155":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"4:661:9341":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:14220:20760":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:6493:14838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:7368:9595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"4:5519:129":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:1833:3492":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"1:45846:9052":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"4:4925:9543":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:5256:438":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"11:1158:9376":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"10:36:32736":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:6144:17081":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:43889:3828":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:42663:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:3308:16177":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:40852:3723":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:12698:3908":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"4:12367:335":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"1:44618:3924":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:7159:17127":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:11163:17273":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:16750:21761":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"4:876:3245":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:6462:17095":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"4:8538:3818":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"4:5606:9629":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"11:2228:16055":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:47183:8997":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:15665:21538":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:11515:17340":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:15760:21546":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:10847:24039":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"4:8175:9458":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"17:15946:21563":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:40731:3688":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:40083:3595":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:33909:2725":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"4:2322:9439":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"9:328:15995":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:7594:2838":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:44425:3916":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:42162:3752":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:4404:16360":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:16187:21580":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:41006:3733":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:3576:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:13547:17293":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"1:44860:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"4:3440:9505":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"9:480:15938":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:42210:3245":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"17:14072:20271":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:7308:10189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:5366:14160":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:47090:9074":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:42888:3782":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:15557:21521":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:1339:17335":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:44247:3897":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:2708:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:14750:20789":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:15010:20806":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"4:10944:9460":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:3694:2673":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:16684:21756":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:40796:3684":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"16:6389:17091":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"11:1888:3251":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:16739:21760":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"4:9241:9649":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"4:7723:27089":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"5:3101:30107":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"4:5451:203":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"17:14043:20269":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:6611:14886":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:13781:20252":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"4:10895:9594":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"16:6970:17119":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:3854:17458":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"12:0:2574":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"4:8551:9521":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:5150:3618":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:12851:17524":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"4:1112:9376":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:5629:14187":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:1191:2483":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"16:7424:17138":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:15431:21527":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:7989:9464":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"1:32474:3609":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"11:798:3251":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:15:2546":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:47262:9002":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"9:0:2571":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"4:1642:9379":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:38325:2733":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:12648:17439":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:2607:3560":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"1:43425:9618":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"4:8486:3273":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"5:4337:3618":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"4:2320:139":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"4:6203:220":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:22:824":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"4:11098:27201":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"4:6286:27195":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:15418:21526":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:44265:3898":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:6984:17120":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:12952:17528":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:10334:226":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"16:7416:17137":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:12897:17526":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:41944:3746":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:6795:2838":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:42277:2814":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:4902:16720":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"4:1636:9378":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:47157:8995":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:42739:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"4:8239:9362":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"16:7386:17136":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"4:10331:9412":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:14573:20778":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:8066:17158":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:14533:20775":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:14483:20772":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:5462:14170":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:5622:14186":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:14872:20797":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:7754:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:46132:9060":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:16311:21588":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:586:10152":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:816:3375":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"4:12390:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"16:6876:17113":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:1703:11059":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:15953:21564":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:43960:3826":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:22593:9142":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:42441:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:2620:16154":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"3:0:2568":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"16:8151:17162":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"4:8477:9512":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"1:36449:2732":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:7361:15313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:6473:14878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:3940:9366":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:7223:17129":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:2047:3524":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:41388:3699":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:8746:150":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:6111:17079":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:13361:17284":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"4:437:185":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:4929:14113":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:10398:3782":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:12976:17530":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"4:8525:3736":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"1:21720:22963":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"0:29:2340":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"1:6972:22866":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"4:12377:918":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"6:1727:11061":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:11864:17360":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:10803:3689":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:14586:20779":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:564:10149":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:4536:3618":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"4:889:3246":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:46007:9019":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"5:1011:3245":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"11:434:32754":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:40874:3717":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:39728:2741":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"17:12392:17452":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"4:5592:9628":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"16:8503:17172":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"4:4219:9535":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:14708:20787":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:7494:2838":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:4142:3251":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:12135:17417":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:46028:9025":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:5305:17548":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:42201:173":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"13:229:32759":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:11247:3818":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:41419:3705":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"7:79:15917":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"4:10961:26501":{"crate_id":4,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"5:7043:9720":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:12537:17436":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:30795:3546":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:40557:3652":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:42110:3749":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:4792:14101":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"4:933:3251":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:2820:16163":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:8233:17167":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:10396:3781":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"17:14738:20788":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:6758:14903":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:21705:22952":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"4:8849:9621":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"1:4842:2666":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:10115:17245":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:42182:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:23007:22706":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"4:1621:3251":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:16171:21578":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:3200:2672":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"16:2660:16156":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:16668:21755":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:45908:9018":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:13610:17296":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:14796:20791":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"4:2492:9448":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:33775:2724":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:40965:3730":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:8059:2655":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"4:6695:2485":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"1:39897:3605":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:39684:2751":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:2406:17359":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:0:510":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"16:6608:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:7332:10018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:21938:9464":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:6740:14901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:42298:2909":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"4:0:1727":{"crate_id":4,"path":["std"],"kind":"module"},"5:1604:9367":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:4921:14112":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"11:854:3221":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11691:17320":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"4:11356:9437":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"5:6258:3618":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:14001:20266":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"4:1927:3270":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"1:41410:3703":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:12079:3575":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"19:0:1301":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:11222:3246":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:12975:3881":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:4990:14121":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"4:7930:27188":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:46383:22511":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:47069:9040":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:10394:3780":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:46510:9021":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:3928:3251":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:32384:17181":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:47040:9089":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:22644:9143":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:7030:17123":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:12306:17475":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"1:12041:3830":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"4:8192:9460":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"5:3318:30347":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:6680:14894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"4:5658:114":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"1:32398:2665":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"16:4956:16728":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"4:8614:9558":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:7836:9366":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:3453:142":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"4:4563:9559":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:5186:14138":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"18:563:21805":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"4:962:9370":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:11386:17305":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:47247:9001":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"4:9160:3245":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:21722:22958":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:41922:170":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:14460:20771":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:1521:11042":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:16613:20254":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"10:44:16049":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:42122:3750":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:4120:16191":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:5682:14194":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:14520:20774":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"4:12330:27081":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:15753:21545":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"4:9314:27156":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:16036:21573":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:13838:20255":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:21769:9464":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:5196:14139":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:5051:14128":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:5375:14161":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"4:8263:3247":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:3821:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:11367:3832":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:44694:131":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:40694:3651":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"6:6716:14898":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:13306:17281":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"4:12361:420":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"17:14375:20766":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"11:1880:3245":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:8483:17171":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"4:5996:2695":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:13034:3910":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:908:33143":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"6:8255:14353":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"18:680:21794":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:12983:17531":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:46185:9020":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:5025:14125":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:2950:16169":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"4:5100:9590":{"crate_id":4,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"6:1657:11054":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:6822:17108":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:30537:3356":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:13662:17577":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:16377:21593":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"11:1580:3233":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"11:881:9373":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:30763:3545":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"4:11210:9637":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:14312:20764":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"17:11952:17371":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:23273:22553":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"6:5341:14157":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"16:8612:17178":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:8043:32872":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:12491:3811":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"4:949:9367":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:11124:33953":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:43388:3801":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:16786:21764":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:2955:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:23116:3389":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"5:3716:3245":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:15351:21524":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:12191:17420":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:7431:11165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:15989:21568":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:7777:9700":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:291:30362":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:47148:8994":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:1489:11037":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:7534:9390":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:13945:20262":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:7660:9361":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:46815:9056":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:16084:21574":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:6781:17105":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"11:772:9364":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:3242:3607":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"4:3397:9509":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:4795:2665":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"17:16362:21592":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"18:726:21797":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"4:4823:26593":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:2605:3559":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"18:80:21777":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:14031:20268":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"4:1103:9375":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:10034:23079":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:12941:17518":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:2990:16171":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"4:9721:3282":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"4:3671:9462":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"4:6465:3274":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"4:9367:26573":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:7969:17151":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:667:17242":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:13427:17287":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"17:15919:21560":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"4:3662:26612":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"4:4343:9564":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:32505:115":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:14547:20776":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:13385:17285":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:44933:3965":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:43970:3307":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:4377:3245":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:7586:15324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:15024:20807":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:15496:21530":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:43404:3800":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:13733:20250":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:47209:8999":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:12737:3907":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:465:10136":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"4:9326:27101":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:4875:14107":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"4:5962:2693":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:11075:33986":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:10793:17266":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"16:2684:16157":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"4:3596:9461":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"1:8329:130":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"4:3036:3271":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:23229:22612":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"4:7329:27209":{"crate_id":4,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"11:835:9370":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:322:33143":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"4:9430:162":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"14:7:16070":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:8273:14356":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:44475:3919":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"4:9403:3618":{"crate_id":4,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:11319:33993":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:1410:3227":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"4:12369:1735":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"16:5689:17070":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"11:2137:3227":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"4:11282:162":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"6:6790:32618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:16555:21751":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"5:7077:9722":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:11329:3819":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"4:8028:3285":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"16:7282:17131":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:13322:17282":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:41022:3734":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"15:306:16095":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"4:4927:9546":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:4983:16732":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:3503:17435":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":30}