{"root":"0:0:2590","crate_version":"2.1.0","includes_private":false,"index":{"0:73-0:13:2418":{"id":"0:73-0:13:2418","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,22]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"global_rng","name":"global_rng","id":"0:13:2418","glob":true}}},"1:3091:1852":{"id":"1:3091:1852","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42667:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3077-0:153:2420":{"id":"b:1:3077-0:153:2420","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3080:3196"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[134,0],"end":[139,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:75:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:139:1889":{"id":"0:139:1889","crate_id":0,"name":"u64","span":{"filename":"src/global_rng.rs","begin":[160,0],"end":[160,61]},"visibility":"public","docs":"Generates a random `u64` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u64>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2590":{"id":"0:0:2590","crate_id":0,"name":"fastrand","span":{"filename":"src/lib.rs","begin":[1,0],"end":[696,1]},"visibility":"public","docs":"A simple and fast random number generator.\n\nThe implementation uses [Wyrand](https://github.com/wangyi-fudan/wyhash), a simple and fast\ngenerator but **not** cryptographically secure.\n\n# Examples\n\nFlip a coin:\n\n```\nif fastrand::bool() {\n    println!(\"heads\");\n} else {\n    println!(\"tails\");\n}\n```\n\nGenerate a random `i32`:\n\n```\nlet num = fastrand::i32(..);\n```\n\nChoose a random element in an array:\n\n```\nlet v = vec![1, 2, 3, 4, 5];\nlet i = fastrand::usize(..v.len());\nlet elem = v[i];\n```\n\nSample values from an array with `O(n)` complexity (`n` is the length of array):\n\n```\nfastrand::choose_multiple(vec![1, 4, 5].iter(), 2);\nfastrand::choose_multiple(0..20, 12);\n```\n\n\nShuffle an array:\n\n```\nlet mut v = vec![1, 2, 3, 4, 5];\nfastrand::shuffle(&mut v);\n```\n\nGenerate a random [`Vec`] or [`String`]:\n\n```\nuse std::iter::repeat_with;\n\nlet v: Vec<i32> = repeat_with(|| fastrand::i32(..)).take(10).collect();\nlet s: String = repeat_with(fastrand::alphanumeric).take(10).collect();\n```\n\nTo get reproducible results on every run, initialize the generator with a seed:\n\n```\n// Pick an arbitrary number as seed.\nfastrand::seed(7);\n\n// Now this prints the same number on every run:\nprintln!(\"{}\", fastrand::u32(..));\n```\n\nTo be more efficient, create a new [`Rng`] instance instead of using the thread-local\ngenerator:\n\n```\nuse std::iter::repeat_with;\n\nlet mut rng = fastrand::Rng::new();\nlet mut bytes: Vec<u8> = repeat_with(|| rng.u8(..)).take(10_000).collect();\n```\n\nThis crate aims to expose a core set of useful randomness primitives. For more niche algorithms,\nconsider using the [`fastrand-contrib`] crate alongside this one.\n\n# Features\n\n- `std` (enabled by default): Enables the `std` library. This is required for the global\n  generator and global entropy. Without this feature, [`Rng`] can only be instantiated using\n  the [`with_seed`](Rng::with_seed) method.\n- `js`: Assumes that WebAssembly targets are being run in a JavaScript environment. See the\n  [WebAssembly Notes](#webassembly-notes) section for more information.\n\n# WebAssembly Notes\n\nFor non-WASI WASM targets, there is additional sublety to consider when utilizing the global RNG.\nBy default, `std` targets will use entropy sources in the standard library to seed the global RNG.\nHowever, these sources are not available by default on WASM targets outside of WASI.\n\nIf the `js` feature is enabled, this crate will assume that it is running in a JavaScript\nenvironment. At this point, the [`getrandom`] crate will be used in order to access the available\nentropy sources and seed the global RNG. If the `js` feature is not enabled, the global RNG will\nuse a predefined seed.\n\n[`fastrand-contrib`]: https://crates.io/crates/fastrand-contrib\n[`getrandom`]: https://crates.io/crates/getrandom","links":{"`Rng`":"0:153:2420","Rng::with_seed":"0:90:2422","`Vec`":"4:7215:278"},"attrs":["#![no_std]","#![forbid(unsafe_code)]","#![warn(missing_docs, missing_debug_implementations, rust_2018_idioms)]","#![doc(html_favicon_url =\n\"https://raw.githubusercontent.com/smol-rs/smol/master/assets/images/logo_fullsize_transparent.png\")]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/smol-rs/smol/master/assets/images/logo_fullsize_transparent.png\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:153:2420","0:73-0:13:2418"],"is_stripped":false}}},"1:13647:350":{"id":"1:13647:350","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13648:30070","`u8`":"5:12470:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13661:30075":{"id":"1:13661:30075","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13662:30076"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:2525":{"id":"0:63:2525","crate_id":0,"name":"choose_multiple","span":{"filename":"src/global_rng.rs","begin":[179,0],"end":[181,1]},"visibility":"public","docs":"Collects `amount` values at random from the iterator into a vector.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["source",{"generic":"T"}],["amount",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"std::vec::Vec","id":"4:7215:278","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"","id":"1:8584:189","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:2547":{"id":"0:102:2547","crate_id":0,"name":"lowercase","span":{"filename":"src/lib.rs","begin":[486,4],"end":[489,5]},"visibility":"public","docs":"Generates a random `char` in range a-z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2806:25470":{"id":"1:2806:25470","crate_id":1,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"4:5730:30833":{"id":"4:5730:30833","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2502":{"id":"0:44:2502","crate_id":0,"name":"alphanumeric","span":{"filename":"src/global_rng.rs","begin":[96,0],"end":[98,1]},"visibility":"public","docs":"Generates a random `char` in ranges a-z, A-Z and 0-9.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:143:1871":{"id":"0:143:1871","crate_id":0,"name":"u128","span":{"filename":"src/global_rng.rs","begin":[162,0],"end":[162,63]},"visibility":"public","docs":"Generates a random `u128` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u128>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2774:2753":{"id":"1:2774:2753","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3095:149":{"id":"1:3095:149","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32692:2833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,16],"end":[131,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2854:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:149:993":{"id":"0:149:993","crate_id":0,"name":"isize","span":{"filename":"src/global_rng.rs","begin":[165,0],"end":[165,65]},"visibility":"public","docs":"Generates a random `isize` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"isize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"isize"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<isize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"isize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13681:3237":{"id":"1:13681:3237","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42537:202","prim@char":"5:12451:490","self::pattern":"1:13326:8636"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:763":{"id":"0:59:763","crate_id":0,"name":"f32","span":{"filename":"src/global_rng.rs","begin":[169,0],"end":[171,1]},"visibility":"public","docs":"Generates a random `f32` in range `0..1`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:113:490":{"id":"0:113:490","crate_id":0,"name":"char","span":{"filename":"src/lib.rs","begin":[642,4],"end":[695,5]},"visibility":"public","docs":"Generates a random `char` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<char>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13760:30107":{"id":"1:13760:30107","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40436:8511","Self::is_ascii":"1:13759:30106"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40436:8511","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13763:30110":{"id":"1:13763:30110","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13710:30088":{"id":"1:13710:30088","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13769:8533":{"id":"1:13769:8533","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5150:8533"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44713:3359","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13638:2573":{"id":"1:13638:2573","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:2497":{"id":"0:42:2497","crate_id":0,"name":"alphabetic","span":{"filename":"src/global_rng.rs","begin":[90,0],"end":[92,1]},"visibility":"public","docs":"Generates a random `char` in ranges a-z and A-Z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:158":{"id":"0:158","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,16],"end":[131,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32770:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:185:1957":{"id":"0:185:1957","crate_id":0,"name":"usize","span":{"filename":"src/lib.rs","begin":[615,4],"end":[621,5]},"visibility":"public","docs":"Generates a random `usize` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<usize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13662:30076":{"id":"1:13662:30076","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13661:30075"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:173:993":{"id":"0:173:993","crate_id":0,"name":"isize","span":{"filename":"src/lib.rs","begin":[476,4],"end":[482,5]},"visibility":"public","docs":"Generates a random `isize` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"isize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"isize"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<isize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"isize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:141:930":{"id":"0:141:930","crate_id":0,"name":"i64","span":{"filename":"src/global_rng.rs","begin":[161,0],"end":[161,61]},"visibility":"public","docs":"Generates a random `i64` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i64>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:2500":{"id":"0:106:2500","crate_id":0,"name":"choice","span":{"filename":"src/lib.rs","begin":[509,4],"end":[524,5]},"visibility":"public","docs":"Choose an item from an iterator at random.\n\nThis function may have an unexpected result if the `len()` property of the\niterator does not match the actual number of items in the iterator. If\nthe iterator is empty, this returns `None`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8438:176","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8438:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8438:176","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8529:2558","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3087-0:153:2420":{"id":"b:1:3087-0:153:2420","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:179:1883":{"id":"0:179:1883","crate_id":0,"name":"u32","span":{"filename":"src/lib.rs","begin":[574,4],"end":[580,5]},"visibility":"public","docs":"Generates a random `u32` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u32>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:110:2564":{"id":"0:110:2564","crate_id":0,"name":"fill","span":{"filename":"src/lib.rs","begin":[536,4],"end":[556,5]},"visibility":"public","docs":"Fill a byte slice with random data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["slice",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13725:30092":{"id":"1:13725:30092","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13326:8636","`DoubleEndedIterator`":"1:8476:133","prim@char":"5:12451:490","str::match_indices":"1:13722:30091"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44573:6521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13347:8642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13666:5977":{"id":"1:13666:5977","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44391:4009","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13767:30114":{"id":"1:13767:30114","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5149:30114"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44704:3360","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:1877":{"id":"0:131:1877","crate_id":0,"name":"u16","span":{"filename":"src/global_rng.rs","begin":[156,0],"end":[156,61]},"visibility":"public","docs":"Generates a random `u16` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:2502":{"id":"0:94:2502","crate_id":0,"name":"alphanumeric","span":{"filename":"src/lib.rs","begin":[335,4],"end":[338,5]},"visibility":"public","docs":"Generates a random `char` in ranges a-z, A-Z and 0-9.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2772-0:153:2420":{"id":"b:1:2772-0:153:2420","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:2753"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:183:1871":{"id":"0:183:1871","crate_id":0,"name":"u128","span":{"filename":"src/lib.rs","begin":[590,4],"end":[596,5]},"visibility":"public","docs":"Generates a random `u128` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u128>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13665:6535":{"id":"1:13665:6535","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"5:12451:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44381:6516","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111:2581":{"id":"0:111:2581","crate_id":0,"name":"uppercase","span":{"filename":"src/lib.rs","begin":[633,4],"end":[636,5]},"visibility":"public","docs":"Generates a random `char` in range A-Z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3300:260-0:153:2420":{"id":"a:1:3300:260-0:153:2420","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"4:5738:30834":{"id":"4:5738:30834","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"4:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:722":{"id":"0:160:722","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[131,16],"end":[131,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Rng","id":"0:153:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5740:8522":{"id":"4:5740:8522","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:157:827":{"id":"0:157:827","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[131,9],"end":[131,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10519:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10500:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22:1208":{"id":"0:22:1208","crate_id":0,"name":"new","span":{"filename":"src/global_rng.rs","begin":[25,4],"end":[27,5]},"visibility":"public","docs":"Creates a new random number generator.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Rng","id":"0:153:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:779":{"id":"0:61:779","crate_id":0,"name":"f64","span":{"filename":"src/global_rng.rs","begin":[174,0],"end":[176,1]},"visibility":"public","docs":"Generates a random `f64` in range `0..1`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99:779":{"id":"0:99:779","crate_id":0,"name":"f64","span":{"filename":"src/lib.rs","begin":[375,4],"end":[379,5]},"visibility":"public","docs":"Generates a random `f64` in range `0..1`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2775-0:153:2420":{"id":"b:1:2775-0:153:2420","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2777:25465"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13660:30074":{"id":"1:13660:30074","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13659:30073","str::split_at_mut_checked":"1:13662:30076"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:434":{"id":"0:96:434","crate_id":0,"name":"bool","span":{"filename":"src/lib.rs","begin":[342,4],"end":[344,5]},"visibility":"public","docs":"Generates a random `bool`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137:924":{"id":"0:137:924","crate_id":0,"name":"i32","span":{"filename":"src/global_rng.rs","begin":[159,0],"end":[159,61]},"visibility":"public","docs":"Generates a random `i32` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i32>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:171:911":{"id":"0:171:911","crate_id":0,"name":"i128","span":{"filename":"src/lib.rs","begin":[451,4],"end":[457,5]},"visibility":"public","docs":"Generates a random `i128` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i128"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i128>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13653:28029":{"id":"1:13653:28029","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:763":{"id":"0:98:763","crate_id":0,"name":"f32","span":{"filename":"src/lib.rs","begin":[368,4],"end":[372,5]},"visibility":"public","docs":"Generates a random `f32` in range `0..1`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13658:30072":{"id":"1:13658:30072","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"5:12457:1765","crate::ops::IndexMut":"1:3605:2870","str::slice_unchecked":"1:13657:30071"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13667:25558":{"id":"1:13667:25558","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13668:25646"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44679:6525","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:2551":{"id":"0:105:2551","crate_id":0,"name":"get_seed","span":{"filename":"src/lib.rs","begin":[499,4],"end":[501,5]},"visibility":"public","docs":"Gives back **current** seed that is being held by this generator.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13716:2797":{"id":"1:13716:2797","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:13326:8636","`DoubleEndedIterator`":"1:8476:133","prim@char":"5:12451:490","str::rmatches":"1:13719:30090"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44609:6522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13764:30111":{"id":"1:13764:30111","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1126:37661"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13770:30115":{"id":"1:13770:30115","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5147:30115"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44722:3358","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5723:30831":{"id":"4:5723:30831","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:297:2908","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"4:297:2908","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:2508":{"id":"0:97:2508","crate_id":0,"name":"digit","span":{"filename":"src/lib.rs","begin":[352,4],"end":[365,5]},"visibility":"public","docs":"Generates a random digit in the given `base`.\n\nDigits are represented by `char`s in ranges 0-9 and a-z.\n\nPanics if the base is zero or greater than 36.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["base",{"primitive":"u32"}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3096:1850":{"id":"1:3096:1850","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42667:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13:2418":{"id":"0:13:2418","crate_id":0,"name":"global_rng","span":{"filename":"src/global_rng.rs","begin":[1,0],"end":[218,1]},"visibility":"crate","docs":"A global, thread-local random number generator.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:36:2478","0:38:2551","0:40:434","0:42:2497","0:44:2502","0:46:2547","0:48:2581","0:50:2500","0:53:2508","0:55:2561","0:127:1895","0:129:936","0:131:1877","0:133:918","0:135:1883","0:137:924","0:139:1889","0:141:930","0:143:1871","0:145:911","0:147:1957","0:149:993","0:151:490","0:59:763","0:61:779","0:63:2525"],"is_stripped":true}}},"0:104:2478":{"id":"0:104:2478","crate_id":0,"name":"seed","span":{"filename":"src/lib.rs","begin":[493,4],"end":[495,5]},"visibility":"public","docs":"Initializes this generator with the given seed.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["seed",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:784-0:153:2420":{"id":"b:4:784-0:153:2420","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:786:6144","4:787:25471","4:788:25472"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32827:3114-0:153:2420":{"id":"a:1:32827:3114-0:153:2420","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32827:3114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:36:2478":{"id":"0:36:2478","crate_id":0,"name":"seed","span":{"filename":"src/global_rng.rs","begin":[72,0],"end":[74,1]},"visibility":"public","docs":"Initializes the thread-local generator with the given seed.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["seed",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13637:1024":{"id":"1:13637:1024","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"5:12451:490"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13670:30079":{"id":"1:13670:30079","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44669:6524","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13678:30081":{"id":"1:13678:30081","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"5:12451:490","self::pattern":"1:13326:8636"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13347:8642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:165:918":{"id":"0:165:918","crate_id":0,"name":"i16","span":{"filename":"src/lib.rs","begin":[427,4],"end":[433,5]},"visibility":"public","docs":"Generates a random `i16` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i16"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13704:30086":{"id":"1:13704:30086","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"5:12451:490","self::pattern":"1:13326:8636","str::rsplitn":"1:13707:30087"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44509:6369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13735:30097":{"id":"1:13735:30097","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13757:30105":{"id":"1:13757:30105","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:13287:148","`FromStr`":"1:13286:8321"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42667:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:13286:8321","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13286:8321","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92:2497":{"id":"0:92:2497","crate_id":0,"name":"alphabetic","span":{"filename":"src/lib.rs","begin":[328,4],"end":[331,5]},"visibility":"public","docs":"Generates a random `char` in ranges a-z and A-Z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3945:1865":{"id":"1:3945:1865","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:40252:6182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133:918":{"id":"0:133:918","crate_id":0,"name":"i16","span":{"filename":"src/global_rng.rs","begin":[157,0],"end":[157,61]},"visibility":"public","docs":"Generates a random `i16` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i16"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169:930":{"id":"0:169:930","crate_id":0,"name":"i64","span":{"filename":"src/lib.rs","begin":[443,4],"end":[449,5]},"visibility":"public","docs":"Generates a random `i64` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i64>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13636":{"id":"1:13636","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13637:1024","1:13638:2573","1:13639:30065","1:13640:30066","1:13642:30067","1:13645:30068","1:13646:30069","1:13647:350","1:13648:30070","1:13649:3106","1:13651:2537","1:13653:28029","1:13655:28030","1:13657:30071","1:13658:30072","1:13659:30073","1:13660:30074","1:13661:30075","1:13662:30076","1:13664:6385","1:13665:6535","1:13666:5977","1:13667:25558","1:13668:25646","1:13669:30078","1:13670:30079","1:13671:25641","1:13672:3193","1:13675:30080","1:13678:30081","1:13681:3237","1:13685:3202","1:13689:30082","1:13692:25637","1:13695:30083","1:13698:30084","1:13701:30085","1:13704:30086","1:13707:30087","1:13710:30088","1:13713:30089","1:13716:2797","1:13719:30090","1:13722:30091","1:13725:30092","1:13728:30093","1:13730:30094","1:13732:30095","1:13734:30096","1:13735:30097","1:13736:30098","1:13739:30099","1:13742:30100","1:13745:30101","1:13748:30102","1:13751:30103","1:13754:30104","1:13757:30105","1:13759:30106","1:13760:30107","1:13761:30108","1:13762:30109","1:13763:30110","1:13764:30111","1:13765:30112","1:13766:30113","1:13767:30114","1:13769:8533","1:13770:30115"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:175:1895":{"id":"0:175:1895","crate_id":0,"name":"u8","span":{"filename":"src/lib.rs","begin":[558,4],"end":[564,5]},"visibility":"public","docs":"Generates a random `u8` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u8>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5727:30832":{"id":"4:5727:30832","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:156":{"id":"0:156","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,9],"end":[131,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10555:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:157:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3092-0:153:2420":{"id":"b:1:3092-0:153:2420","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13646:30069":{"id":"1:13646:30069","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:40:434":{"id":"0:40:434","crate_id":0,"name":"bool","span":{"filename":"src/global_rng.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"Generates a random `bool`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/global_rng.rs","begin":[12,0],"end":[20,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3129:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Rng","id":"0:153:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:20:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:151:490":{"id":"0:151:490","crate_id":0,"name":"char","span":{"filename":"src/global_rng.rs","begin":[166,0],"end":[166,63]},"visibility":"public","docs":"Generates a random `char` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<char>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13642:30067":{"id":"1:13642:30067","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13640:30066"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13745:30101":{"id":"1:13745:30101","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:12451:490","self::pattern":"1:13326:8636"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13347:8642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13736:30098":{"id":"1:13736:30098","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"5:12451:490","self::pattern":"1:13326:8636"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13352:8641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:2525":{"id":"0:100:2525","crate_id":0,"name":"choose_multiple","span":{"filename":"src/lib.rs","begin":[390,4],"end":[417,5]},"visibility":"public","docs":"Collects `amount` values at random from the iterator into a vector.\n\nThe length of the returned vector equals `amount` unless the iterator\ncontains insufficient elements, in which case it equals the number of\nelements available.\n\nComplexity is `O(n)` where `n` is the length of the iterator.","links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"generic":"T"}],["amount",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Vec","id":"4:7215:278","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"","id":"1:8584:189","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161":{"id":"0:161","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,27],"end":[131,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3081-0:153:2420":{"id":"b:1:3081-0:153:2420","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:90:2422":{"id":"0:90:2422","crate_id":0,"name":"with_seed","span":{"filename":"src/lib.rs","begin":[293,4],"end":[295,5]},"visibility":"public","docs":"Creates a new random number generator with the initial seed.","links":{},"attrs":["#[inline]","#[must_use =\n\"this creates a new instance of `Rng`; if you want to initialize the thread-local generator, use `fastrand::seed()` instead\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["seed",{"primitive":"u64"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3943-0:153:2420":{"id":"b:1:3943-0:153:2420","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13759:30106":{"id":"1:13759:30106","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5724:2725":{"id":"4:5724:2725","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129:936":{"id":"0:129:936","crate_id":0,"name":"i8","span":{"filename":"src/global_rng.rs","begin":[155,0],"end":[155,59]},"visibility":"public","docs":"Generates a random `i8` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i8"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i8>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13675:30080":{"id":"1:13675:30080","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"5:12451:490","self::pattern":"1:13326:8636"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13748:30102":{"id":"1:13748:30102","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:12451:490","self::pattern":"1:13326:8636"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13347:8642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5741:30836":{"id":"4:5741:30836","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13762:30109"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13698:30084":{"id":"1:13698:30084","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:13326:8636","str::split":"1:13689:30082","prim@char":"5:12451:490","`DoubleEndedIterator`":"1:8476:133","str::rsplit_terminator":"1:13701:30085"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44455:6518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13707:30087":{"id":"1:13707:30087","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"5:12451:490","str::splitn":"1:13704:30086","self::pattern":"1:13326:8636"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44527:6370","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13347:8642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13728:30093":{"id":"1:13728:30093","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13766:30113":{"id":"1:13766:30113","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1126:37661"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13645:30068":{"id":"1:13645:30068","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12873:8643"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13739:30099":{"id":"1:13739:30099","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:12451:490","self::pattern":"1:13326:8636"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5739:30835":{"id":"4:5739:30835","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"4:297:2908","`String`":"4:7802:256"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:297:2908","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"4:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13672:3193":{"id":"1:13672:3193","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"5:12451:490","self::pattern":"1:13326:8636"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13671:25641":{"id":"1:13671:25641","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44697:6384","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[289,0],"end":[696,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Rng","id":"0:153:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:90:2422","0:91:2495","0:92:2497","0:94:2502","0:96:434","0:97:2508","0:98:763","0:99:779","0:100:2525","0:163:936","0:165:918","0:167:924","0:169:930","0:171:911","0:173:993","0:102:2547","0:104:2478","0:105:2551","0:106:2500","0:108:2561","0:110:2564","0:175:1895","0:177:1877","0:179:1883","0:181:1889","0:183:1871","0:185:1957","0:111:2581","0:113:490"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13751:30103":{"id":"1:13751:30103","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:12451:490","self::pattern":"1:13326:8636"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50:2500":{"id":"0:50:2500","crate_id":0,"name":"choice","span":{"filename":"src/global_rng.rs","begin":[118,0],"end":[124,1]},"visibility":"public","docs":"Choose an item from an iterator at random.\n\nThis function may have an unexpected result if the `len()` property of the\niterator does not match the actual number of items in the iterator. If\nthe iterator is empty, this returns `None`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8438:176","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8438:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8438:176","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8529:2558","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13639:30065":{"id":"1:13639:30065","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13754:30104":{"id":"1:13754:30104","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:12451:490","self::pattern":"1:13326:8636"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13347:8642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:2551":{"id":"0:38:2551","crate_id":0,"name":"get_seed","span":{"filename":"src/global_rng.rs","begin":[78,0],"end":[80,1]},"visibility":"public","docs":"Gives back **current** seed that is being held by the thread-local generator.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3090:149":{"id":"1:3090:149","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"1:13640:30066":{"id":"1:13640:30066","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3080:3196":{"id":"1:3080:3196","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:3054:156"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:494":{"id":"0:75:494","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[136,4],"end":[138,5]},"visibility":"default","docs":"Clones the generator by creating a new generator with the same seed.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Rng","id":"0:153:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13651:2537":{"id":"1:13651:2537","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42537:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13734:30096":{"id":"1:13734:30096","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2804-0:153:2420":{"id":"b:1:2804-0:153:2420","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:8510","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2806:25470"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13648:30070":{"id":"1:13648:30070","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"5:12470:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13765:30112":{"id":"1:13765:30112","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1126:37661"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135:1883":{"id":"0:135:1883","crate_id":0,"name":"u32","span":{"filename":"src/global_rng.rs","begin":[158,0],"end":[158,61]},"visibility":"public","docs":"Generates a random `u32` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u32>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:147:1957":{"id":"0:147:1957","crate_id":0,"name":"usize","span":{"filename":"src/global_rng.rs","begin":[164,0],"end":[164,65]},"visibility":"public","docs":"Generates a random `usize` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<usize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13742:30100":{"id":"1:13742:30100","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:12451:490","self::pattern":"1:13326:8636"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13657:30071":{"id":"1:13657:30071","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"5:12457:1765","str::slice_mut_unchecked":"1:13658:30072","crate::ops::Index":"1:40083:2869"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13689:30082":{"id":"1:13689:30082","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:13326:8636","`DoubleEndedIterator`":"1:8476:133","prim@char":"5:12451:490","str::split_whitespace":"1:13667:25558","str::rsplit":"1:13695:30083"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44405:6048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13701:30085":{"id":"1:13701:30085","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:13326:8636","str::split":"1:13689:30082","prim@char":"5:12451:490","str::split_terminator":"1:13698:30084"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44473:6519","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13347:8642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13730:30094":{"id":"1:13730:30094","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13762:30109":{"id":"1:13762:30109","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42629:3140-0:153:2420":{"id":"a:1:42629:3140-0:153:2420","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42629:3140","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"4:787:25471":{"id":"4:787:25471","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163:936":{"id":"0:163:936","crate_id":0,"name":"i8","span":{"filename":"src/lib.rs","begin":[419,4],"end":[425,5]},"visibility":"public","docs":"Generates a random `i8` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i8"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i8>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13669:30078":{"id":"1:13669:30078","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44659:6051","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13722:30091":{"id":"1:13722:30091","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:13326:8636","`DoubleEndedIterator`":"1:8476:133","prim@char":"5:12451:490","str::rmatch_indices":"1:13725:30092"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44555:6520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:2561":{"id":"0:55:2561","crate_id":0,"name":"shuffle","span":{"filename":"src/global_rng.rs","begin":[138,0],"end":[140,1]},"visibility":"public","docs":"Shuffles a slice randomly.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13685:3202":{"id":"1:13685:3202","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42537:202","prim@char":"5:12451:490","self::pattern":"1:13326:8636"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13347:8642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13668:25646":{"id":"1:13668:25646","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13667:25558"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44688:6526","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13649:3106":{"id":"1:13649:3106","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42537:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:2581":{"id":"0:48:2581","crate_id":0,"name":"uppercase","span":{"filename":"src/global_rng.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Generates a random `char` in range A-Z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:181:1889":{"id":"0:181:1889","crate_id":0,"name":"u64","span":{"filename":"src/lib.rs","begin":[582,4],"end":[588,5]},"visibility":"public","docs":"Generates a random `u64` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u64>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:2561":{"id":"0:108:2561","crate_id":0,"name":"shuffle","span":{"filename":"src/lib.rs","begin":[528,4],"end":[532,5]},"visibility":"public","docs":"Shuffles a slice randomly.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["slice",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:788:25472":{"id":"4:788:25472","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5742:30837":{"id":"4:5742:30837","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13763:30110"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21":{"id":"0:21","crate_id":0,"name":null,"span":{"filename":"src/global_rng.rs","begin":[22,0],"end":[28,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Rng","id":"0:153:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:22:1208"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3335:3307-0:153:2420":{"id":"a:1:3335:3307-0:153:2420","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:3307","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:167:924":{"id":"0:167:924","crate_id":0,"name":"i32","span":{"filename":"src/lib.rs","begin":[435,4],"end":[441,5]},"visibility":"public","docs":"Generates a random `i32` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i32>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13664:6385":{"id":"1:13664:6385","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"5:12451:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44375:6377","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13761:30108":{"id":"1:13761:30108","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13655:28030":{"id":"1:13655:28030","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13695:30083":{"id":"1:13695:30083","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:13326:8636","`DoubleEndedIterator`":"1:8476:133","prim@char":"5:12451:490","str::split":"1:13689:30082"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44423:6367","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13347:8642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:145:911":{"id":"0:145:911","crate_id":0,"name":"i128","span":{"filename":"src/global_rng.rs","begin":[163,0],"end":[163,63]},"visibility":"public","docs":"Generates a random `i128` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i128"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i128>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:1895":{"id":"0:127:1895","crate_id":0,"name":"u8","span":{"filename":"src/global_rng.rs","begin":[154,0],"end":[154,59]},"visibility":"public","docs":"Generates a random `u8` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u8>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3083:857":{"id":"1:3083:857","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:786:6144":{"id":"4:786:6144","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:13659:30073":{"id":"1:13659:30073","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13661:30075","str::split_at_mut":"1:13660:30074"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:60":{"id":"0:20:60","crate_id":0,"name":"default","span":{"filename":"src/global_rng.rs","begin":[17,4],"end":[19,5]},"visibility":"default","docs":"Initialize the `Rng` from the system's random number generator.\n\nThis is equivalent to [`Rng::new()`].","links":{"`Rng::new()`":"0:22:1208"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Rng","id":"0:153:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13719:30090":{"id":"1:13719:30090","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:13326:8636","`DoubleEndedIterator`":"1:8476:133","prim@char":"5:12451:490","str::matches":"1:13716:2797"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44627:6523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13347:8642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32768:248-0:153:2420":{"id":"a:1:32768:248-0:153:2420","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13732:30095":{"id":"1:13732:30095","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153:2420":{"id":"0:153:2420","crate_id":0,"name":"Rng","span":{"filename":"src/lib.rs","begin":[132,0],"end":[132,20]},"visibility":"public","docs":"A random number generator.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:21","0:89","a:1:32827:3114-0:153:2420","a:1:32768:248-0:153:2420","a:1:3335:3307-0:153:2420","a:1:42628:3141-0:153:2420","a:1:42629:3140-0:153:2420","a:1:3300:260-0:153:2420","b:1:2775-0:153:2420","b:1:2772-0:153:2420","b:1:3092-0:153:2420","b:1:3943-0:153:2420","b:1:2804-0:153:2420","b:1:3087-0:153:2420","b:1:3081-0:153:2420","b:1:3077-0:153:2420","b:4:784-0:153:2420","0:74","0:158","0:161","0:156","0:19","0:159"]}}},"0:46:2547":{"id":"0:46:2547","crate_id":0,"name":"lowercase","span":{"filename":"src/global_rng.rs","begin":[102,0],"end":[104,1]},"visibility":"public","docs":"Generates a random `char` in range a-z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5722":{"id":"4:5722","crate_id":4,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["4:5723:30831","4:5724:2725","4:5727:30832","4:5730:30833","4:5738:30834","4:5739:30835","4:5740:8522","4:5741:30836","4:5742:30837"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:53:2508":{"id":"0:53:2508","crate_id":0,"name":"digit","span":{"filename":"src/global_rng.rs","begin":[132,0],"end":[134,1]},"visibility":"public","docs":"Generates a random digit in the given `base`.\n\nDigits are represented by `char`s in ranges 0-9 and a-z.\n\nPanics if the base is zero or greater than 36.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["base",{"primitive":"u32"}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13713:30089":{"id":"1:13713:30089","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42535:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13347:8642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42628:3141-0:153:2420":{"id":"a:1:42628:3141-0:153:2420","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42628:3141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2777:25465":{"id":"1:2777:25465","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:177:1877":{"id":"0:177:1877","crate_id":0,"name":"u16","span":{"filename":"src/lib.rs","begin":[566,4],"end":[572,5]},"visibility":"public","docs":"Generates a random `u16` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3696:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:2495":{"id":"0:91:2495","crate_id":0,"name":"fork","span":{"filename":"src/lib.rs","begin":[322,4],"end":[324,5]},"visibility":"public","docs":"Clones the generator by deterministically deriving a new generator based on the initial\nseed.\n\nThis function can be used to create a new generator that is a \"spinoff\" of the old\ngenerator. The new generator will not produce the same sequence of values as the\nold generator.\n\n# Example\n\n```\n// Seed two generators equally, and clone both of them.\nlet mut base1 = fastrand::Rng::with_seed(0x4d595df4d0f33173);\nbase1.bool(); // Use the generator once.\n\nlet mut base2 = fastrand::Rng::with_seed(0x4d595df4d0f33173);\nbase2.bool(); // Use the generator once.\n\nlet mut rng1 = base1.fork();\nlet mut rng2 = base2.fork();\n\nprintln!(\"rng1 returns {}\", rng1.u32(..));\nprintln!(\"rng2 returns {}\", rng2.u32(..));\n```","links":{},"attrs":["#[inline]","#[must_use = \"this creates a new instance of `Rng`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13692:25637":{"id":"1:13692:25637","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"5:12451:490","self::pattern":"1:13326:8636"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:13141:6364","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13332:6355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:8290:7899":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:15549:4873":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:8223:5994":{"crate_id":5,"path":["std","fs","Permissions"],"kind":"struct"},"17:13193:4379":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"5:9460:173":{"crate_id":5,"path":["std","time","Instant"],"kind":"struct"},"17:14652:4617":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:630:14016":{"crate_id":5,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:12018:4236":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"5:4941:14129":{"crate_id":5,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:11606:3006":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:23335:25567":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:16179:5046":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:3350:5918":{"crate_id":5,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:16377:5095":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:11998:4234":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:22033:3179":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"11:873:3016":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:578:6938":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"5:7801:33270":{"crate_id":5,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"16:7907:5631":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:23634:6439":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:2403:6178":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:12456:1731":{"crate_id":5,"path":["std","slice"],"kind":"primitive"},"1:40933:3368":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:7391:7782":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:33724:2846":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"11:685:3007":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:14114:4520":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:10555:122":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"17:13205:4380":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:3458:2856":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:10500:237":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"16:155:3807":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"4:5302:3906":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"4:7561:2913":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:8028:5646":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:4978:2991":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:3408:2868":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"4:7825:6173":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:23435:7944":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:12069:3871":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"17:12319:4280":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:8900:8567":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:4914:7173":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:11141:3863":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:44854:6537":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:4186:2557":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:41274:6462":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"11:1105:5815":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:532:6914":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:9478:3028":{"crate_id":5,"path":["std","time","SystemTime"],"kind":"struct"},"17:14672:4620":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:3054:156":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:13326:8636":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"11:1580:5817":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"4:7815:6172":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:43505:5681":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"5:3539:5924":{"crate_id":5,"path":["std","io","util","Repeat"],"kind":"struct"},"16:6731:5441":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:5641:7463":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:12723:4335":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:46404:6570":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:6952:244":{"crate_id":5,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:12570:4323":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:12851:4351":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:13119:4374":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:6411:7508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"12:0:2824":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"4:2256:3075":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:3695:5285":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:5127:7252":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:6917:7724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:11016:4168":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:15989:4977":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:14284:4559":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:15785:4924":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:10534:4150":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:15701:4901":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:14917:4675":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:1984:5908":{"crate_id":5,"path":["std","error","Report"],"kind":"struct"},"5:12470:1895":{"crate_id":5,"path":["std","u8"],"kind":"primitive"},"1:10519:155":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:45339:238":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:42297:6347":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:5493:1004":{"crate_id":1,"path":["core","iter"],"kind":"module"},"17:12035:4241":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:6065:3833":{"crate_id":5,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:8906:6085":{"crate_id":5,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:7980:5273":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:42756:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:8889:3006":{"crate_id":5,"path":["std","path","Iter"],"kind":"struct"},"6:6443:7526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:14019:4492":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:22119:14072":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:45461:6560":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"5:11272:32539":{"crate_id":5,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:2840:5250":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"11:881:3017":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:44722:3358":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:45143:7966":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:2966:5256":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:41306:6466":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"4:297:2908":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"1:6287:6320":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:12249:4270":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:44202:6499":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:6640:5406":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"17:13095:4373":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"4:789:121":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:485:6884":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"4:4529:3830":{"crate_id":4,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:47217:6636":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:14750:4647":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:41399:6469":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"4:2348:32419":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:16026:4985":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:4489:3830":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"17:16714:5183":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"18:680:3984":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:40263:6447":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:4211:14117":{"crate_id":5,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:6210:3830":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:4964:7193":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:10781:168":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"17:14358:4575":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:3720:4032":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:12648:4326":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"4:6840:2557":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:14586:4608":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:3048:20329":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"4:1577:3008":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"3:0:2818":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"17:0:2828":{"crate_id":17,"path":["object"],"kind":"module"},"18:623:34719":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:4943:14130":{"crate_id":5,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:5179:7256":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:8206:5992":{"crate_id":5,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:1521:6959":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:13798:4449":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:46632:6595":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:667:4018":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:11952:4230":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:43247:3290":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:10193:29248":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:2732:3821":{"crate_id":5,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"11:809:2911":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:13983:4483":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:14055:4497":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:10953:7917":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:2668:8490":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"6:5349:7327":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:10572:3291":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:7959:5643":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:6098:5324":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:10816:3023":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:10218:21253":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"4:780:263":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:8233:21200":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:1643:7045":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"4:6159:3906":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"4:2295:7933":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:11617:4172":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:14640:4616":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:0:1757":{"crate_id":5,"path":["std"],"kind":"module"},"6:6449:7527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:12216:4264":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:5107:7250":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:5044:7235":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:41006:3362":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"11:2148:3020":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:14963:4682":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:3448:5923":{"crate_id":5,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:8612:5279":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:5742:4151":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:10387:5905":{"crate_id":5,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"5:8112:5990":{"crate_id":5,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:7518:7831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:7308:7731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:10663:4006":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:12550:4322":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:31117:2903":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:8105:5650":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"4:3297:3006":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:14405:4581":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:22043:29267":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:16311:5083":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:11457:4187":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"17:13290:4109":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:12931:4358":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:3576:154":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"4:7263:3925":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:10793:4156":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"17:15963:4971":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:3140:149":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:44405:6048":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"17:11606:4171":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:9169:6088":{"crate_id":5,"path":["std","process","ExitStatusError"],"kind":"struct"},"4:7778:6171":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:6638:7623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:16084:5027":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:1711:7080":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:12135:4256":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:8209:5265":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:8536:6041":{"crate_id":5,"path":["std","io","Chain"],"kind":"struct"},"6:5265:7296":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:1085:3018":{"crate_id":5,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:42463:6484":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:8624:7915":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:7969:5644":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:44688:6526":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"5:8895:6084":{"crate_id":5,"path":["std","path","Ancestors"],"kind":"struct"},"5:8553:4009":{"crate_id":5,"path":["std","io","Bytes"],"kind":"struct"},"6:6544:7572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:23524:6429":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:11448:4185":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:46419:6571":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:6876:7698":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:8260:2740":{"crate_id":5,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"5:6824:5963":{"crate_id":5,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:5217:7276":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:13222:21264":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"4:7114:2918":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:23008:8489":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"11:1140:5816":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:16362:5094":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:41236:6460":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"19:0:1323":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:11280:6769":{"crate_id":5,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:12028:4238":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:5311:7318":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:42707:3006":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"17:16332:5089":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:16555:5149":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"4:3720:3007":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"4:889:3879":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:11315:6770":{"crate_id":5,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:1220:4019":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:5477:7397":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:4857:2982":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:1907:5905":{"crate_id":5,"path":["std","env","SplitPaths"],"kind":"struct"},"6:4937:7181":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:7949:5272":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:16507:4445":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"5:12458:1855":{"crate_id":5,"path":["std","tuple"],"kind":"primitive"},"1:40155:226":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:8043:34697":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:8353:7913":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:8010:14072":{"crate_id":5,"path":["std","sealed","Sealed"],"kind":"trait"},"1:41055:3357":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:10958:7919":{"crate_id":5,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:5451:6314":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"4:4208:3007":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:2724:5245":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:6480:7538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:8284:5998":{"crate_id":5,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:45173:134":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"6:6823:7687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:5804:7685":{"crate_id":5,"path":["std","process","exit"],"kind":"function"},"1:44980:8657":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"4:6527:3912":{"crate_id":4,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"4:6931:3876":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:4569:5934":{"crate_id":5,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:9433:3830":{"crate_id":5,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:11249:3947":{"crate_id":1,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"17:14975:4684":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:2406:4026":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:15689:4898":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:41350:6468":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"4:1401:3019":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:6738:34701":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:4778:2709":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:11432:21277":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:10928:4167":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:31155:3166":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:6658:5420":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:10562:3287":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:42659:3091":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"16:6904:5459":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"18:643:3953":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:15148:4713":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"4:1595:3010":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:43560:149":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"16:8585:5713":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:43749:6490":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:2326:150":{"crate_id":5,"path":["std","fs","File"],"kind":"struct"},"1:3300:260":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:11848:6368":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:5019:7222":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:2142:1393":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:10560:132":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:42793:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:546:5211":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:42941:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:46922:6625":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:44509:6369":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"11:2400:3007":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"16:2772:5247":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:44322:6510":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:8273:7894":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:4983:5301":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"11:842:3014":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:11757:21298":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"11:1884:2557":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:45317:7969":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"16:2415:20300":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:6881:5967":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:46553:6583":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:4614:8534":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:7223:5513":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:32768:248":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:45135:7964":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:32734:6442":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"5:984:3015":{"crate_id":5,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"4:1539:3007":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:42357:7947":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:3313:33171":{"crate_id":5,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:3987:4057":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"4:1627:221":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:15531:4868":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:8438:176":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"5:3851:14110":{"crate_id":5,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:4311:33381":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:22:842":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:45329:230":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:12416:6373":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"16:4766:5294":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:4869:7151":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:42650:3322":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:8014:7879":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:14483:4595":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:12826:4342":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:10442:21261":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:44312:6509":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"4:1370:3018":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:5507:7407":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:0:582":{"crate_id":1,"path":["core"],"kind":"module"},"5:11248:6087":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:12976:4362":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:6526:7560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:3341:3309":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"4:3851:5998":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:15410:4822":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:41084:8557":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10861:150":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:3799:25756":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:938:2913":{"crate_id":5,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"11:488:165":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"18:538:3960":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:7906:5981":{"crate_id":5,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:5325:7322":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:6942:5462":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:13951:6391":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"16:6876:5456":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:10564:3288":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:31181:25556":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"9:176:8016":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:3687:14090":{"crate_id":5,"path":["std","io","BufRead"],"kind":"trait"},"5:904:2557":{"crate_id":5,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:4997:7209":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:8000:5274":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:11298:3028":{"crate_id":5,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"16:6794:5445":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"5:6746:3850":{"crate_id":5,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:16399:5101":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:46763:6602":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:46862:6607":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:41288:6465":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:9139:6086":{"crate_id":5,"path":["std","process","CommandArgs"],"kind":"struct"},"17:11075:34708":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:1632:7037":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:45123:7961":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:44609:6522":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"17:13014:4369":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:11775:6366":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:6462:7528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:687:14018":{"crate_id":5,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:22055:29267":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"4:1386:3020":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"4:885:102":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"18:531:3957":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:5366:7332":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:15896:4952":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:9190:3006":{"crate_id":5,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:42667:237":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"6:5007:7216":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:7896:4018":{"crate_id":5,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:44966:6540":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:11000:6113":{"crate_id":5,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:8938:29252":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"5:963:3012":{"crate_id":5,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:13028:4371":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"4:3338:5819":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:8572:6052":{"crate_id":5,"path":["std","net","tcp","Incoming"],"kind":"struct"},"11:1907:5820":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:41227:6459":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:5255:5309":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:46746:6601":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:42497:6350":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:16595:4449":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:12056:4248":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:15760:4919":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"4:7707:3004":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:16019:4983":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:9496:3029":{"crate_id":5,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:9229:6092":{"crate_id":5,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:10974:6106":{"crate_id":5,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"11:2349:3020":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"6:6882:7699":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:954:3010":{"crate_id":5,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:3352:5919":{"crate_id":5,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:6020:5958":{"crate_id":5,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:14327:4568":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:34928:2857":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:4984:7203":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:41099:6453":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:47063:6630":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:14099:4514":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:14520:4599":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:4567:6310":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:22087:29261":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:3075:237":{"crate_id":5,"path":["std","io","error","Result"],"kind":"type_alias"},"17:12886:4353":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"4:7790:3907":{"crate_id":4,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"5:12476:1957":{"crate_id":5,"path":["std","usize"],"kind":"primitive"},"4:7613:221":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:14083:216":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:15997:4978":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:4362:14140":{"crate_id":5,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:41763:5924":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:15:2798":{"crate_id":1,"path":["core","write"],"kind":"macro"},"4:7571:3887":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:12122:4255":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:22905:13800":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:44527:6370":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:40848:3359":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:10296:21256":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:22610:29264":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:47726:6691":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:12451:490":{"crate_id":5,"path":["std","char"],"kind":"primitive"},"11:434:34670":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:46877:6608":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:16036:4990":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:538:6917":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:6310:3835":{"crate_id":5,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:5009:2993":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:12673:4328":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:13103:6383":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:2530:5236":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:12038:34025":{"crate_id":5,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:903:4011":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"4:7541:2557":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:2331:3929":{"crate_id":5,"path":["std","fs","read"],"kind":"function"},"5:5879:5951":{"crate_id":5,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:45449:5827":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"5:8011:2729":{"crate_id":5,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:45014:6549":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:2802:8510":{"crate_id":1,"path":["core","clone","CloneToUninit"],"kind":"trait"},"1:23270:6404":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:44627:6523":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:22192:6401":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"18:491:3952":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:13757:4445":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:14886:4669":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:4890:7159":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"18:706:3989":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:1619:3006":{"crate_id":5,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"4:1616:3012":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:2029:3830":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"14:165:20262":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:13070:4171":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:13145:4375":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:45208:8667":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"5:11363:7921":{"crate_id":5,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:6953:5463":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:40252:6182":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"16:3441:5283":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:10115:21250":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:3048:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"6:473:6879":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:2816:3931":{"crate_id":1,"path":["core","clone","InitializingSlice"],"kind":"struct"},"16:6144:21188":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:11124:34709":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:11831:4196":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"18:507:3953":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:8879:5936":{"crate_id":5,"path":["std","path","Components"],"kind":"struct"},"1:23324:6410":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:32738:5612":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"5:11909:5928":{"crate_id":5,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:15829:4935":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:10803:4009":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"4:3800:3876":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"10:0:2822":{"crate_id":10,"path":["adler"],"kind":"module"},"5:10657:6086":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:2521:14069":{"crate_id":5,"path":["std","fs","exists"],"kind":"function"},"17:15876:4945":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:8629:14141":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:8091:14021":{"crate_id":5,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:9198:6091":{"crate_id":5,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:15077:4703":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:12992:4364":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:881:3006":{"crate_id":5,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"13:0:2819":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:43778:6492":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:42628:3141":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:8330:7907":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:6749:5218":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:11261:6088":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:10501:3286":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:32752:2990":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"5:8363:6000":{"crate_id":5,"path":["std","io","error","Custom"],"kind":"struct"},"5:6211:3843":{"crate_id":5,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"5:10774:5920":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"16:7212:5512":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"9:236:6492":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"5:8753:6076":{"crate_id":5,"path":["std","path","Prefix"],"kind":"enum"},"5:6227:231":{"crate_id":5,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:13400:8650":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:10408:6114":{"crate_id":5,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"4:3309:32377":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:6680:7641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:5689:5317":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:14056:29003":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:6159:5330":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:4929:7179":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:12472:1883":{"crate_id":5,"path":["std","u32"],"kind":"primitive"},"5:5986:5954":{"crate_id":5,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:5105:14161":{"crate_id":5,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:10568:3290":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:46611:6594":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:16613:4459":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:45347:218":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"6:5205:7269":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"11:830:3010":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:1675:7063":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"4:726:6142":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:11805:4220":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:8626:5718":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"15:394:20291":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:4947:7187":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"11:785:3009":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"11:1888:2913":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:7578:6104":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:12260:21369":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"1:44902:6539":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"4:3866:6147":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:13087:6382":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:13141:6364":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:15887:4949":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:42619:3137":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:15475:4862":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:47636:6680":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:4053:2913":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"4:4133:2913":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:5682:7479":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:2652:694":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:5520:7408":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:42629:3140":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:534:3075":{"crate_id":5,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:5709:21187":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:40003:2879":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:768:165":{"crate_id":5,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:4680:14142":{"crate_id":5,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"11:2137:3019":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:40884:3366":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"4:7751:8557":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10823:4013":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:7386:5535":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"18:581:3179":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:14507:4596":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"11:1005:3018":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:13818:4459":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:15621:4884":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:2859:146":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"6:5593:7435":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:15286:4719":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:6588:5401":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"1:43998:6361":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:11515:4192":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:23393:25586":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:8649:6061":{"crate_id":5,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:13361:4391":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:42563:3006":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"6:5533:7409":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:7358:5268":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:41265:6319":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"4:3304:5820":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"11:1880:3006":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"4:4298:3830":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:6173:5333":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:9536:3138":{"crate_id":1,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"1:5040:2994":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:12711:4334":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:7577:7864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:5282:7307":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:2570:5238":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:46778:6603":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"4:5973:264":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"1:2766:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"17:10394:21259":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:11717:6492":{"crate_id":5,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"17:13662:4418":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"5:1932:5907":{"crate_id":5,"path":["std","env","ArgsOs"],"kind":"struct"},"4:6561:14012":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"17:10516:21263":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:22072:29270":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:45197:3032":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:9768:130":{"crate_id":5,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:11903:6370":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:13890:4471":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:10368:21258":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:7951:3858":{"crate_id":5,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"4:3330:5821":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:14416:4582":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:1584:7001":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:42313:6349":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"4:4575:3899":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:14335:4570":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:13921:4475":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"4:3707:3006":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:14821:4661":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:46472:6578":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:3517:2877":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:7305:5527":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:43128:6359":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:32859:117":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:3854:4033":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:8268:5996":{"crate_id":5,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:12983:21396":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:948:2911":{"crate_id":5,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:11592:4134":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:13692:4422":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:5139:7253":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:7539:7845":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:46486:6579":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:6652:7634":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:15777:4922":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:16008:4982":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:3774:158":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:2860:5251":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:12452:1917":{"crate_id":5,"path":["std","unit"],"kind":"primitive"},"1:41176:6456":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:6902:7713":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:7521:5559":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"4:4499:3899":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:5379:5313":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:8559:6048":{"crate_id":5,"path":["std","io","Split"],"kind":"struct"},"6:4829:7118":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:6402:3842":{"crate_id":5,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:15315:4739":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"4:3086:32437":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:7766:6169":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:6708:7653":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"5:10700:3861":{"crate_id":5,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:47196:6635":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"5:9305:6094":{"crate_id":5,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:5562:7426":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:6462:21191":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:5288:7310":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:973:3014":{"crate_id":5,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:5285:5941":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13592:4408":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:8498:6038":{"crate_id":5,"path":["std","io","util","Sink"],"kind":"struct"},"16:6440:21190":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"11:299:6857":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"18:481:3951":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:16775:5197":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"5:8694:5935":{"crate_id":5,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:8578:6054":{"crate_id":5,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:16761:5193":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:10487:21262":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"1:32759:6444":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"5:4225:14119":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"4:4330:3830":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:40039:2878":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"5:3677:14070":{"crate_id":5,"path":["std","io","Seek"],"kind":"trait"},"6:6534:7565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:23612:6437":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"11:2545:6864":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:2282:200":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:46387:6569":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:13055:4196":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"16:8223:5654":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:4902:14142":{"crate_id":5,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:47607:6677":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:4730:2997":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:34409:2853":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"11:1920:5822":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:13349:4390":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:10773:164":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:13027:6378":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:12409:21370":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:15557:4874":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:11527:4195":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:2506:5235":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:14043:4496":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:22571:14072":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:15036:4698":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:43521:25652":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"1:33300:2844":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:5570:7428":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:41534:6335":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:3042:3829":{"crate_id":5,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:545:6920":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:47662:6682":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:9310:118":{"crate_id":5,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"5:4333:14137":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:16494:4431":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"6:5295:7312":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:884:201":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"4:7549:6163":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:45438:6559":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:23557:6432":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"5:507:3818":{"crate_id":5,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"11:1158:3021":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:15812:4928":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:23164:6402":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"11:430:34677":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"15:288:20281":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"4:7090:2917":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:43981:7958":{"crate_id":1,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"5:6434:5960":{"crate_id":5,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:2467:5228":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:881:8322":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"9:500:5881":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:8031:3088":{"crate_id":5,"path":["std","thread","ThreadId"],"kind":"struct"},"16:7789:34702":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:14220:4530":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"5:11949:5929":{"crate_id":5,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:6042:5262":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:43788:6496":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:4939:14127":{"crate_id":5,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:46440:6576":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"4:7124:2919":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"5:2508:14067":{"crate_id":5,"path":["std","fs","read_dir"],"kind":"function"},"0:153:2420":{"crate_id":0,"path":["fastrand","Rng"],"kind":"struct"},"5:8617:5931":{"crate_id":5,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:6691:7644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"5:8516:14071":{"crate_id":5,"path":["std","io","SeekFrom"],"kind":"enum"},"17:14375:4578":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:4815:14116":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:5198:5307":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:7168:5500":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:1869:5903":{"crate_id":5,"path":["std","env","Vars"],"kind":"struct"},"6:7454:7791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:47590:6676":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:14438:4589":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:5357:7328":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"5:599:3083":{"crate_id":5,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:12749:4337":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:3668:33997":{"crate_id":5,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:16323:5085":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:12347:4283":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"14:40:4446":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:1597:7008":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:1494:6948":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"4:5572:13995":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"5:5475:214":{"crate_id":5,"path":["std","path","Path"],"kind":"struct"},"16:5172:5306":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:3769:267":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:6713:5431":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:3851:131":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:22929:14072":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:3295:120":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:3181:6179":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"17:16786:5199":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:41359:6331":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:5658:7467":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"5:9442:246":{"crate_id":5,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:44303:6508":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:5441:7373":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:8284:7898":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"15:327:8003":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"4:6180:14004":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:16341:5091":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:22172:14072":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:11459:251":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:47673:6683":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"4:7605:2557":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:5616:5942":{"crate_id":5,"path":["std","process","Child"],"kind":"struct"},"4:3931:2911":{"crate_id":4,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:41169:6455":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:43233:3287":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:45325:175":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:3573:153":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:6748:7661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:10975:3944":{"crate_id":1,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"4:1524:3006":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:16209:5053":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"4:5426:3908":{"crate_id":4,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"11:2323:3019":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"16:6696:5429":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:42275:181":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:12906:4355":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:34582:2854":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:43766:168":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:13970:4482":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:13491:4399":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:15836:4936":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:6064:5264":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:3496:14097":{"crate_id":5,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:43493:7957":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:3061:270":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"16:7508:5556":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:1930:5906":{"crate_id":5,"path":["std","env","Args"],"kind":"struct"},"1:44679:6525":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:32828:3311":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"11:396:3813":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:8891:161":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:11691:4206":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:2206:8503":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:40083:2869":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"18:659:3977":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:583:4017":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:3570:152":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"16:7372:5269":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:4899:14164":{"crate_id":5,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:4881:7154":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"11:671:3006":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:11886:3867":{"crate_id":5,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:2480:8478":{"crate_id":5,"path":["std","fs","metadata"],"kind":"function"},"1:31170:3297":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:12473:1889":{"crate_id":5,"path":["std","u64"],"kind":"primitive"},"5:6489:3843":{"crate_id":5,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:8636:21202":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:42723:2557":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"16:4267:5291":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:4702:14143":{"crate_id":5,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:44713:3359":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:46989:6628":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:16241:5068":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:5196:7264":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:7883:5371":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:10938:34714":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:6813:7684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:15905:4953":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"18:0:2829":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:4171:14115":{"crate_id":5,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"4:7581:6164":{"crate_id":4,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:23373:25662":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:12699:4333":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:12920:4356":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:43015:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"4:1250:32274":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:1589:7003":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:44332:6511":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:7448:7789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:23579:6434":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"6:1727:7085":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:9397:6767":{"crate_id":5,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:15753:4918":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:12466:918":{"crate_id":5,"path":["std","i16"],"kind":"primitive"},"5:8077:14020":{"crate_id":5,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:14140:4525":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:11539:4196":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:4827:7777":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"5:11563:3865":{"crate_id":5,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"16:4241:5290":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:6111:5329":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:1530:6964":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:32770:257":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:9686:6355":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:45401:27780":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:3759:2872":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:46524:6581":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:11653:4203":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:5271:7299":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:9425:3847":{"crate_id":5,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:23408:25609":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"6:1667:7062":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:3620:5926":{"crate_id":5,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:1641:5820":{"crate_id":5,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:8179:5652":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:8566:6051":{"crate_id":5,"path":["std","io","Lines"],"kind":"struct"},"1:44573:6521":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:22288:14072":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:14947:4678":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:7839:33268":{"crate_id":5,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"17:11733:21297":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:6672:7639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:12449:434":{"crate_id":5,"path":["std","bool"],"kind":"primitive"},"17:14708:4626":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:16632:5163":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:33512:2843":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"5:12402:6138":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:23301:6405":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:497:6888":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:13933:4476":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:5635:7460":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:14573:4607":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:6666:7636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:12108:4254":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:1339:4021":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"4:1636:6146":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:16283:5074":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:5025:7225":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:2990:5257":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:8669:5612":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:4921:7177":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:7807:34704":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:16198:5052":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:7337:5531":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:12392:4287":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:40100:224":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"4:3088:7934":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:15121:4710":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:15602:4883":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:5629:7457":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:47101:6632":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:23546:6431":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:46731:6600":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:31555:3179":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:41340:6467":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:10246:21254":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:12869:4397":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"18:735:25457":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:2328:5912":{"crate_id":5,"path":["std","fs","DirEntry"],"kind":"struct"},"1:44837:6536":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:14001:4491":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"14:202:14001":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"4:7215:278":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"1:3941:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"17:11864:4224":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:6914:5460":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:5488:7400":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"16:0:2827":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:12474:1871":{"crate_id":5,"path":["std","u128"],"kind":"primitive"},"16:5449:5315":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:43741:3024":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"4:1889:2911":{"crate_id":4,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:22101:29258":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"5:9746:5991":{"crate_id":5,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:43054:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:4956:5300":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:13266:21265":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:491:6885":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:6777:7671":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:23285:7941":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:7990:5645":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"18:573:3953":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:38680:2859":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:11818:4221":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:2208:8504":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:46340:6564":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:10778:4152":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"5:1652:5822":{"crate_id":5,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:46539:6582":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:22731:13714":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:6808:5258":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"4:6713:2913":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:6758:7668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:3378:2847":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"18:589:3963":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"11:798:2913":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:912:3008":{"crate_id":5,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:8711:5725":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:16728:5186":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"6:6507:7558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:5362:215":{"crate_id":5,"path":["std","path","PathBuf"],"kind":"struct"},"1:43091:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"18:689:3986":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:6239:5339":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:6765:7669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:41246:145":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:8255:7891":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"14:187:20269":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:47461:6671":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:10549:4151":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:2793:5917":{"crate_id":5,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:11112:3946":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"16:4120:5287":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:15136:4358":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:3024:14072":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:472:4014":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"11:2380:3006":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:22957:8489":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"5:4233:14121":{"crate_id":5,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"4:4484:279":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:10963:5992":{"crate_id":5,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:7495:5553":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:14299:4564":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"17:12952:4360":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:10565:34143":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:11777:4215":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"11:1914:5821":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:11333:173":{"crate_id":5,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:44697:6384":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:2620:5240":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"5:967:3013":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:7428:3856":{"crate_id":5,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"11:0:2823":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:2105:693":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"5:8368:14102":{"crate_id":5,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:15160:4717":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:11421:4184":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:1684:7069":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:2896:213":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:42571:3007":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"6:8261:7892":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:5543:132":{"crate_id":5,"path":["std","path","Display"],"kind":"struct"},"1:44423:6367":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:15540:4872":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"5:5650:5948":{"crate_id":5,"path":["std","process","ChildStdout"],"kind":"struct"},"17:12008:4089":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"11:1725:167":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:10729:4008":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:47371:6669":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:45388:6555":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:7548:7848":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:564:6930":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:9364:6104":{"crate_id":5,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:11475:21278":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"17:12280:4273":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:13041:4372":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"4:0:323":{"crate_id":4,"path":["alloc"],"kind":"module"},"5:1108:3020":{"crate_id":5,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:31528:207":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:44823:6533":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:2900:5253":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:7099:6330":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"5:2498:14062":{"crate_id":5,"path":["std","fs","canonicalize"],"kind":"function"},"1:47616:6678":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"18:698:3987":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:45322:162":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"6:5117:7251":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"4:1214:32280":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:6680:5426":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"16:6837:5451":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:5387:7342":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:43240:3289":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:5462:7388":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:42867:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:8014:5275":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:14859:4665":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:3141:4044":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:16297:5076":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:2550:5237":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:6123:5263":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:8839:14186":{"crate_id":5,"path":["std","path","Component"],"kind":"enum"},"6:570:6933":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"11:2121:3018":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:14282:3949":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:46664:6597":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"4:3096:32311":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:38735:2860":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:46693:6598":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:8151:5277":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:5220:3351":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:6573:5398":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:12434:32535":{"crate_id":5,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:7335:33272":{"crate_id":5,"path":["std","sys","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"5:11085:6089":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"11:1049:3020":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:6716:7656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:13991:6465":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"16:7192:21195":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:559:6928":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:9573:3139":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:1626:2913":{"crate_id":5,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:11926:4229":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:8447:3113":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:11065:4169":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:15050:4699":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:2378:21325":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:14533:4292":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"4:2162:6147":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"4:2368:7937":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"11:854:3015":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:6386:3839":{"crate_id":5,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:15431:4832":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:13537:4358":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:1117:3021":{"crate_id":5,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:2796:5248":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"11:2228:4241":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:11579:4200":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:8319:7906":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"4:6127:72":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"16:6970:5261":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:7838:21198":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:506:4016":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:13427:4395":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"14:220:5810":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:4495:5933":{"crate_id":5,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:22576:13718":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:7105:7940":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:7855:3373":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:5165:7255":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:22121:13716":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:47627:6679":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:16159:5040":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:9581:5906":{"crate_id":5,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:32745:6443":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:12941:4359":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"9:328:6869":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"4:7591:32380":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:40175:225":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:8343:7911":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:41196:6457":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:7044:5266":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:6910:6323":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:10474:14193":{"crate_id":5,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"11:123:3809":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:16385:5098":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:45119:7960":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"17:3503:4030":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:8213:5993":{"crate_id":5,"path":["std","fs","FileTimes"],"kind":"struct"},"5:4341:14138":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:682:5898":{"crate_id":5,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:3564:2733":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:47519:6673":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:13515:21267":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:12478:13":{"crate_id":5,"path":["std","fn"],"kind":"primitive"},"16:6302:5352":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"18:515:3950":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:4896:7161":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"4:2266:6149":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:34264:2851":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:42475:5931":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:6437:7523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:40087:2871":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:7341:7754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:45151:7968":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:6419:7510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:7110:3941":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:3335:3307":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:40967:3361":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"5:996:3017":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:42732:207":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:5865:231":{"crate_id":5,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:5348:5312":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:11053:5950":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"5:11147:3864":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:7825:33280":{"crate_id":5,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"1:46824:6605":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:7563:7855":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"4:39:2910":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:3834:5286":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:1635:5819":{"crate_id":5,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:10784:4153":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"18:563:3962":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:5113:5304":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:8503:5704":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:5036:7230":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:13958:4481":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:12841:8609":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"18:548:164":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"11:2366:5825":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:14239:118":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:44991:6541":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:2660:5242":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:13181:4378":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"16:4694:5293":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:45001:6545":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:2684:5243":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:40436:8511":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:15939:4966":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:11222:4172":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:7180:14211":{"crate_id":5,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:5186:7257":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:16171:5043":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:13570:21268":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:15973:4974":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:6706:5961":{"crate_id":5,"path":["std","sync","once","Once"],"kind":"struct"},"6:6623:7621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:15106:4706":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:10570:217":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"5:8801:6492":{"crate_id":5,"path":["std","path","State"],"kind":"enum"},"17:10167:21252":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:5316:5941":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:8358:5999":{"crate_id":5,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:3535:127":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:15351:4770":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:2590:5239":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:8267:7893":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:8008:7877":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:42579:2557":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"17:10843:4157":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"4:6580:14014":{"crate_id":4,"path":["alloc","task","LocalWake"],"kind":"trait"},"5:2718:3824":{"crate_id":5,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:12471:1877":{"crate_id":5,"path":["std","u16"],"kind":"primitive"},"16:8298:5666":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"11:2301:3018":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:23466:8335":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:23601:6436":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"6:5151:7254":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"4:3694:193":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:43543:3297":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"6:4902:7164":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:40137:223":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:11970:5930":{"crate_id":5,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:8296:7900":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:15586:4880":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:4921:2989":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:16668:5170":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:40854:6448":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:11281:4173":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:7282:5526":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:4792:7091":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:6790:7678":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:22174:13712":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:9212:5952":{"crate_id":5,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"8:0:2820":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:13968:6394":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"6:5224:7277":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:15573:4875":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:4852:2981":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"5:9452:3854":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:34197:2849":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:13398:4394":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"15:306:20282":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"11:2420:2557":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:13322:21266":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:3889:4049":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:14460:4590":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:2854:212":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:5255:7290":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:46457:6577":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:9316:3080":{"crate_id":5,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:46355:6565":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:40115:221":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"5:4780:14160":{"crate_id":5,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:41047:3364":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1:3786:2876":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:5131:4039":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"16:6625:5404":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:23442:6424":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"9:53:8006":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:6600:197":{"crate_id":5,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:40944:3358":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:4177:14116":{"crate_id":5,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"13:229:6855":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:12026:6135":{"crate_id":5,"path":["std","alloc","System"],"kind":"struct"},"17:16642:5164":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"11:698:2557":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:12787:4340":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:8143:3998":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:6631:7622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:3446:5922":{"crate_id":5,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:22823:13798":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:42904:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:12191:4261":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"4:7696:2909":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:12873:8643":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"11:2533:6862":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:10406:6115":{"crate_id":5,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:44211:6500":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:14152:4528":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:5319:7321":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:43466:7948":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:14807:4659":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:7920:27277":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:4184:5289":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:1551:6979":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:5676:7476":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"11:1564:20256":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:5224:5308":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:44669:6524":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:679:5896":{"crate_id":5,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:959:3011":{"crate_id":5,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:15064:4702":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:11851:4223":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:11630:4202":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:5417:5314":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"5:9351:6100":{"crate_id":5,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:9323:32512":{"crate_id":5,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:6770:7670":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"6:6564:7588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:42978:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:3092:32310":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:5195:14169":{"crate_id":5,"path":["std","panic","always_abort"],"kind":"function"},"5:5128:14163":{"crate_id":5,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"14:7:5803":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"4:7884:2911":{"crate_id":4,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"4:7621:6165":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:23084:13793":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:47647:6681":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:6852:5453":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:12625:4325":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:47688:6684":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"11:1893:2911":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"16:5144:5305":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:9271:14210":{"crate_id":5,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"4:3364:5822":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:3553:2865":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"17:15844:4937":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:6381:7483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:12467:924":{"crate_id":5,"path":["std","i32"],"kind":"primitive"},"1:34063:2852":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:12052:5980":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:5395:7347":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:15931:4963":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:15641:4892":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:22300:6401":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:6700:7650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:41524:6046":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:2486:5234":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:41734:6338":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:4805:7100":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:4591:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:46372:6568":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:11838:7929":{"crate_id":5,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:4875:7152":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:15739:4915":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:4018:5930":{"crate_id":5,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:13306:4388":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:10548:116":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:15496:4867":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"11:1064:20255":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"11:2440:2913":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:11503:4191":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"5:11029:32534":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:1647:5821":{"crate_id":5,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:8235:151":{"crate_id":5,"path":["std","fs","FileType"],"kind":"struct"},"4:7738:6166":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:8894:3371":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:9182:6089":{"crate_id":5,"path":["std","process","ExitCode"],"kind":"struct"},"17:13385:4392":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"11:740:3012":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:3305:2902":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"5:8276:5997":{"crate_id":5,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:12475:993":{"crate_id":5,"path":["std","isize"],"kind":"primitive"},"4:6043:2913":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"5:4829:7779":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:46972:6627":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:2920:5254":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:12449:6374":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"16:4929:5299":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:7424:21196":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:6723:7657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"16:2748:5246":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:6473:7536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:12840:4347":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:3814:115":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:14738:4645":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:2666:8489":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"17:12044:4244":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:7259:5525":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"11:364:3811":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:8546:5709":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:11407:6133":{"crate_id":5,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:12776:4339":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:12468:930":{"crate_id":5,"path":["std","i64"],"kind":"primitive"},"5:439:196":{"crate_id":5,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:8199:7889":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"4:1002:3006":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"18:718:3993":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:14269:4555":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:13733:4431":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:14796:4657":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:4699:2996":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"11:835:3013":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:32857:3310":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:47764:6693":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:2950:5255":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:14346:4573":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:12537:4320":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:8049:3086":{"crate_id":5,"path":["std","thread","Thread"],"kind":"struct"},"16:7919:5632":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:5069:7248":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:1690:7072":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:22955:27464":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:22867:13799":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:12066:4249":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:4816:7108":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:4149:14113":{"crate_id":5,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:41548:6336":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"5:6710:5962":{"crate_id":5,"path":["std","sync","once","OnceState"],"kind":"struct"},"4:7722:3090":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:5241:7284":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:47548:6674":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:10198:8027":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"9:390:20178":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:13006:4367":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:5428:7363":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:12816:4034":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:380:3097":{"crate_id":5,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:6731:7658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:14872:4666":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:13554:4405":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"5:9739:150":{"crate_id":5,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:3025:2834":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"5:1099:3019":{"crate_id":5,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:11720:4209":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:11788:4217":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:11902:4228":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:1539:6970":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:13635:4412":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:10574:3292":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:11163:4171":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:6401:6321":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:46951:6626":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:13547:4404":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"1:44277:6456":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"4:5576:13996":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"1:41149:6454":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"11:1674:3815":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:16812:5203":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:41073:6452":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"4:3268:101":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"5:2496:14061":{"crate_id":5,"path":["std","fs","read_link"],"kind":"function"},"6:5249:7288":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:8196:4090":{"crate_id":5,"path":["std","fs","Metadata"],"kind":"struct"},"17:11319:34707":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:3587:5284":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"6:4970:7195":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:8031:7888":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:8583:14109":{"crate_id":5,"path":["std","net","Shutdown"],"kind":"enum"},"5:4113:14112":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:9377:32525":{"crate_id":5,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:523:6908":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:13562:122":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"4:4370:3006":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"4:1785:3876":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:13451:4397":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:10817:3086":{"crate_id":5,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"5:9156:6087":{"crate_id":5,"path":["std","process","ExitStatus"],"kind":"struct"},"1:44555:6520":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:23590:6435":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"6:5670:7474":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:10771:5918":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:13286:8321":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:12204:4262":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"5:10934:6124":{"crate_id":5,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"6:586:6942":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:6659:7635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:7361:7760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:44351:6512":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:2648:5915":{"crate_id":5,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:12465:936":{"crate_id":5,"path":["std","i8"],"kind":"primitive"},"1:47294:6668":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:41748:5961":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:386:3098":{"crate_id":5,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:44240:6504":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:11401:4181":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:44290:6507":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:5375:7338":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:3605:2870":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:5648:7466":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:4987:2992":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"17:10418:21260":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:32827:3114":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:13347:8642":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:4957:7190":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:45131:7963":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:11309:4174":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:46795:6604":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:10566:3289":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:41318:6328":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:990:3016":{"crate_id":5,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:23079:13795":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"5:5682:116":{"crate_id":5,"path":["std","process","Command"],"kind":"struct"},"1:41389:6333":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:3405:5921":{"crate_id":5,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:3129:126":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"17:14612:4612":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:44220:6502":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"11:772:3008":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:14031:4495":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:2083:209":{"crate_id":5,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:3110:5280":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:41256:6316":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:11105:3945":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"1:23357:6412":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"5:8736:14173":{"crate_id":5,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:47490:6672":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:14393:4579":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:11810:6367":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:13781:4446":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"18:80:25447":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:42830:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:7368:7764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:3602:6055":{"crate_id":5,"path":["std","io","Read"],"kind":"trait"},"11:1023:3019":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"5:7743:32563":{"crate_id":5,"path":["std","panicking","Hook"],"kind":"enum"},"16:6408:5367":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:8203:2980":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"5:11045:5990":{"crate_id":5,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"11:2466:2911":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"18:670:3983":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:11012:5927":{"crate_id":5,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:14997:4695":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:16822:4476":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"5:4221:14118":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:7487:7805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:46649:6596":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:11807:5976":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:12163:4258":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:2112:3163":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:10338:3305":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:13471:4034":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:6521:7559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:7938:5640":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:11889:6369":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:8528:5707":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:8249:7890":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:2754:5916":{"crate_id":5,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:5494:7402":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:4931:2990":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:44391:4009":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:7416:5538":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"4:3343:32376":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:12461:760":{"crate_id":5,"path":["std","f16"],"kind":"primitive"},"17:12736:4336":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:7058:5475":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:45032:6388":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:41772:3942":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:13719:4430":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"18:613:34720":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:925:3009":{"crate_id":5,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:9356:6101":{"crate_id":5,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:5392:452":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"11:2559:6866":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:6188:5335":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:6028:5259":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:5807:14191":{"crate_id":5,"path":["std","process","Termination"],"kind":"trait"},"17:10564:4003":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"4:1605:3011":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:3916:5929":{"crate_id":5,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:10280:6481":{"crate_id":5,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"5:2020:810":{"crate_id":5,"path":["std","ffi"],"kind":"module"},"5:11821:5979":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:3051:174":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:31149:2904":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"4:1487:100":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"9:480:20176":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"4:7532:2907":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"1:2209:8478":{"crate_id":1,"path":["core","ptr","metadata","metadata"],"kind":"function"},"17:12176:4259":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:38790:2861":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:41111:4009":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"5:5736:5950":{"crate_id":5,"path":["std","process","Stdio"],"kind":"struct"},"4:1230:32386":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"18:754:4002":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:7397:3855":{"crate_id":5,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:7350:7755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:11958:4231":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:5057:7239":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"18:598:34718":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:8390:8569":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:1657:7056":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"4:2585:6841":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:15946:4967":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:5301:7315":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:44808:6528":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:9145:210":{"crate_id":5,"path":["std","process","Output"],"kind":"struct"},"17:11386:21276":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:5412:1275":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:47167:6634":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"0:0:2590":{"crate_id":0,"path":["fastrand"],"kind":"module"},"17:5305:4041":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:42535:205":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"16:4404:5292":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:479:6882":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:8201:5991":{"crate_id":5,"path":["std","fs","ReadDir"],"kind":"struct"},"1:45127:7962":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:5551:7420":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:3403:2867":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:43796:6497":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:4976:7198":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:15010:4696":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:1696:7073":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:16750:5192":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:5413:27987":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:42441:25572":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:7316:7736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"4:929:3882":{"crate_id":4,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:12234:4266":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"4:1586:3009":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:14599:4610":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:5051:7237":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:14773:4656":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:2890:206":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:23487:14072":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:13169:4377":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:16656:5168":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"16:4152:5288":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:45422:191":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:16145:5034":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:8824:6079":{"crate_id":5,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:317:4011":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:11129:3862":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:40960:3360":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:5649:5316":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:45380:6553":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:46714:6599":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:3659:3286":{"crate_id":5,"path":["std","io","Write"],"kind":"trait"},"6:5450:7379":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:11878:4171":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:47122:6633":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"17:10332:21257":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:15769:4920":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"4:7288:3928":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:9447:3853":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:22943:13801":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"16:6866:21193":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:7159:5499":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:7332:7748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:465:6874":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:1703:7076":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:45412:6558":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:2792:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"4:2173:6148":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"5:12463:779":{"crate_id":5,"path":["std","f64"],"kind":"primitive"},"17:12687:4332":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:41040:3363":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"11:102:6856":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"18:521:25459":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:1489:6946":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:42515:6352":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:11698:6364":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:12293:4275":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:10993:151":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:44381:6516":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:7749:3211":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:6843:5452":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:5405:7353":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:42329:8576":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:46582:6585":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:0:1029":{"crate_id":6,"path":["libc"],"kind":"module"},"1:44659:6051":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:43226:3288":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:41327:6329":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"11:1601:5818":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:896:5220":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"5:8255:3005":{"crate_id":5,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:46845:6606":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:7414:7783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:23455:6425":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:3045:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:47711:6690":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"4:4999:228":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"1:40215:2417":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"5:8727:6064":{"crate_id":5,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"1:45139:7965":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:12371:4285":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:33996:2848":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:13610:4411":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:1630:2911":{"crate_id":5,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"5:12450:1204":{"crate_id":5,"path":["std","never"],"kind":"primitive"},"16:8598:5716":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:10630:4005":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:15864:4944":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"18:113:25449":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:2227:4022":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"4:5836:2917":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:13838:4460":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:3388:2845":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:5341:7326":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"18:726:3996":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:14627:4615":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:12524:4319":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:38845:2862":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:36804:2858":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:8058:5648":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:42588:3136":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"17:12798:21394":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"4:2148:5998":{"crate_id":4,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:1507:6954":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:4810:5295":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:6421:5213":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:26497:281":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:47084:6631":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"11:2539:6863":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:11787:6134":{"crate_id":5,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:2335:14054":{"crate_id":5,"path":["std","fs","read_to_string"],"kind":"function"},"17:14312:4566":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"1:41139:3935":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:10983:5993":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:15852:4938":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:6599:7609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:14832:4662":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:517:6905":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:6537:231":{"crate_id":5,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:7030:5473":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:40910:3365":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:11793:5975":{"crate_id":5,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"4:985:3884":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"9:422:20179":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:47416:6670":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:7586:7867":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:5420:7358":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:41297:6322":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"4:4562:3830":{"crate_id":4,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"5:6827:14204":{"crate_id":5,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:22070:29272":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:553:6925":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:6998:5464":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:6389:5360":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:22089:29263":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:8427:157":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"13:110:34680":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:13871:4466":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:15714:4907":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:5085:5303":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:4633:8535":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"4:7649:2557":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:13209:149":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:22298:13713":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:3126:20330":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:5586:7433":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:15665:4896":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:11917:6371":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:32769:250":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"5:8672:7764":{"crate_id":5,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"4:7900:2912":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:3548:2864":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:15090:4704":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:5114:14162":{"crate_id":5,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:23568:6433":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"11:328:6860":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:5622:7454":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:13945:4479":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:7765:5592":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:47741:6692":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:6256:5344":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:4842:7128":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:2435:20327":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"5:4349:14139":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:4579:6311":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:43476:3297":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:8096:5649":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:7604:7870":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:8320:21201":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:8584:189":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:2769:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:41790:6343":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:30887:3336":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:10696:4007":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:1898:8441":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"4:4163:3876":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:22729:14072":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:13332:6355":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"11:2566:2909":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:1623:2557":{"crate_id":5,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:3569:3830":{"crate_id":5,"path":["std","io","Guard"],"kind":"struct"},"5:11037:6063":{"crate_id":5,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"1:13352:8641":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:894:3007":{"crate_id":5,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:3913:5928":{"crate_id":5,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:47034:6629":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:663:5895":{"crate_id":5,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:11449:14072":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:8121:221":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:1625:7033":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:11931:6372":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:7401:34698":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:11985:4233":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:5471:7394":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:322:4012":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"14:0:2825":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:5318:5311":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:7813:33277":{"crate_id":5,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"6:7986:7876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:7469:7795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"11:1085:34668":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:15679:4897":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:10597:4004":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:16264:5069":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:5381:7339":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:8489:3998":{"crate_id":5,"path":["std","io","util","Empty"],"kind":"struct"},"5:10777:5922":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"5:12045:5980":{"crate_id":5,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:15731:4912":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:3293:276":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"4:7802:256":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"17:12583:4324":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:8723:149":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:16739:5191":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"5:8668:6063":{"crate_id":5,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:13082:4172":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:10821:3025":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:5020:14126":{"crate_id":5,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:1491:167":{"crate_id":5,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:4119:14111":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"5:2013:14053":{"crate_id":5,"path":["std","error","Indented"],"kind":"struct"},"1:42554:184":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"16:6269:5345":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:0:524":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:41121:8543":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"5:2245:132":{"crate_id":5,"path":["std","ffi","os_str","Display"],"kind":"struct"},"5:8507:5927":{"crate_id":5,"path":["std","io","IoSlice"],"kind":"struct"},"17:11026:34711":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:44929:6387":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:16701:5177":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"6:5334:7325":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"16:6205:21189":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:7463:7794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:12423:14022":{"crate_id":5,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:6493:7547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:12477:1456":{"crate_id":5,"path":["std","reference"],"kind":"primitive"},"1:10007:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:8097:14043":{"crate_id":5,"path":["std","env","VarError"],"kind":"enum"},"16:8066:21199":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"7:79:20171":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:7731:3136":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:8137:5276":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:2554:2757":{"crate_id":5,"path":["std","io"],"kind":"module"},"5:9751:3860":{"crate_id":5,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"17:11678:4205":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:5282:5310":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:1871:5904":{"crate_id":5,"path":["std","env","VarsOs"],"kind":"struct"},"9:0:2821":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:4163:14114":{"crate_id":5,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:9292:6093":{"crate_id":5,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:3373:2842":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"5:8249:130":{"crate_id":5,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:3308:5225":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:7971:8560":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"17:16187:5047":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"4:1123:3876":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"9:445:20177":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"4:3085:6144":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:43535:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"4:5143:3830":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"4:7641:2557":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:9206:2557":{"crate_id":5,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:15655:4895":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:23535:6430":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"16:8565:5712":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:7542:5561":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:44251:6505":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:11566:4198":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:2215:6175":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:1500:6951":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:3077:149":{"crate_id":5,"path":["std","io","error","Error"],"kind":"struct"},"6:5603:7440":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:12462:763":{"crate_id":5,"path":["std","f32"],"kind":"primitive"},"1:11737:6365":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:39424:2863":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:12469:911":{"crate_id":5,"path":["std","i128"],"kind":"primitive"},"17:15981:4975":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:11291:34712":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:14127:4524":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:234:237":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:44230:6503":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:16832:4481":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:15024:4697":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:7075:21194":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:12464:758":{"crate_id":5,"path":["std","f128"],"kind":"primitive"},"6:5482:7399":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:5541:7414":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:22180:13715":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:44473:6519":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:4825:7775":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:10977:34710":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"5:9437:245":{"crate_id":5,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:3400:2866":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:14262:3839":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"5:11021:32523":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:11553:4197":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:3014:20328":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:4844:5296":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:40895:25550":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:13064:6381":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:41068:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:8476:133":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:4873:5297":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:12487:8501":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"11:708:3011":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:5993:5957":{"crate_id":5,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:23037:14072":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:10097:21249":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:12095:4253":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:6890:5260":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:2086:208":{"crate_id":5,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:3057:271":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"16:6822:21192":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"6:6740:7660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:34130:2850":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:4414:5932":{"crate_id":5,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:12897:4354":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:14084:4508":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:3310:33183":{"crate_id":5,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:3307:34542":{"crate_id":5,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:44455:6518":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:5872:3843":{"crate_id":5,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:12962:21395":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:16520:5119":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"5:11473:5878":{"crate_id":5,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"16:5727:4150":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:8302:7901":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"5:8643:6052":{"crate_id":5,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:46568:6584":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:12335:4282":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:41205:6041":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:44787:8656":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:8394:8568":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:5230:7280":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:2880:5252":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:47569:6675":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:11781:5971":{"crate_id":5,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:23623:6438":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"5:4997:3831":{"crate_id":5,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"18:765:25458":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:12418:8025":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:11465:4188":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"1:40952:3359":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:15418:4825":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"4:5527:3876":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:1854:719":{"crate_id":5,"path":["std","env"],"kind":"module"},"1:43581:3298":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"16:2640:5241":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:8529:2558":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:12762:4338":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:11706:4207":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:4848:232":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"16:5060:5302":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:41741:6339":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"5:2482:14057":{"crate_id":5,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:12082:4251":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:40195:227":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:12860:4352":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"14:31:5803":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:44375:6377":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:41218:6458":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"5:12454:1348":{"crate_id":5,"path":["std","pointer"],"kind":"primitive"},"10:44:5828":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:14547:4604":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:6285:3830":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"18:608:3970":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:44704:3360":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:22994:13802":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:23645:6440":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"16:6502:20299":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:44364:6515":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:5630:5947":{"crate_id":5,"path":["std","process","ChildStdin"],"kind":"struct"},"5:9420:198":{"crate_id":5,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:1569:6989":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:41782:6341":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:14108:6396":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:14933:4676":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:15953:4968":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"15:0:2826":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:12605:4171":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:40245:2873":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:8546:6046":{"crate_id":5,"path":["std","io","Take"],"kind":"struct"},"6:6611:7614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:11232:21278":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:10012:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"10:36:6868":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"14:160:5803":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:7495:33385":{"crate_id":5,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:7016:5471":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:3696:222":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:7554:21197":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:41375:3974":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"4:3456:2911":{"crate_id":4,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:41757:6340":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:5088:7249":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:32692:2833":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"17:2437:4029":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:8635:6059":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:2450:5226":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"4:282:3876":{"crate_id":4,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"5:12457:1765":{"crate_id":5,"path":["std","str"],"kind":"primitive"},"16:6984:5278":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"11:351:34675":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"4:6759:3876":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:44151:6498":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:16132:5028":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:7716:34700":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:14692:4621":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:10031:21248":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:5666:5949":{"crate_id":5,"path":["std","process","ChildStderr"],"kind":"struct"},"5:8026:3087":{"crate_id":5,"path":["std","thread","Builder"],"kind":"struct"},"18:635:3976":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:6895:3851":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"16:7471:5552":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:1514:6956":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:4:1288":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"17:16684:5175":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:6368:5206":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:14560:4605":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"7:32:20164":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:14902:4671":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:7462:5549":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:575:3081":{"crate_id":5,"path":["std","thread","Packet"],"kind":"struct"},"1:43757:3026":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:40923:3367":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"5:12237:3873":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:12857:6375":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:2704:5244":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:12455:349":{"crate_id":5,"path":["std","array"],"kind":"primitive"},"11:1900:5819":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"7:0:1947":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:3403:5920":{"crate_id":5,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:9241:14209":{"crate_id":5,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:10274:21255":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:15919:4960":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"4:212:3875":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:24097:247":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:8483:5703":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:908:4012":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"6:7431:7784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:16798:5202":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"16:6337:5354":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:15439:4833":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:42715:3007":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"6:8308:7902":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"4:1555:2557":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:13157:4376":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"4:1415:3021":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:12306:4277":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"17:12149:4257":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:34755:2855":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"4:2816:6839":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:5757:5318":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:9256:14208":{"crate_id":5,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:11832:7928":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:23349:6411":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:23051:13794":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:14845:4664":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:47803:6709":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:11630:3007":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:11358:21275":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:12359:4284":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:6608:217":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"11:2551:34678":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:7350:5533":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:3780:2874":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:11971:4232":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:46325:6561":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:11655:6048":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"17:12225:4265":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:10141:21251":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:4902:5298":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"11:2495:20251":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"17:11114:4170":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:11068:32520":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:4990:7206":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:14374:2906":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"16:6781:5444":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"9:355:20192":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"14:214:5808":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"18:651:3953":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:14072:4505":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:8165:5267":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:23217:6403":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"18:96:25448":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:43994:7959":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:46507:6580":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:13909:4472":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:9344:6099":{"crate_id":5,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:1563:6987":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:11173:34713":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:7854:3372":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"17:16218:5055":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:13341:3989":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:8267:5662":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:14319:163":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:13854:4464":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:22598:6400":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:6084:5320":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:2820:5249":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:45147:7967":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:45155:6769":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":31}