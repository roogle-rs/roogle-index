{"root":"0:0:2567","crate_version":"2.1.0","includes_private":false,"index":{"b:1:3860-0:153:2397":{"id":"b:1:3860-0:153:2397","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32655:3093","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3858:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3862:1841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[134,0],"end":[139,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2736:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:75:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:153:2397":{"id":"0:153:2397","crate_id":0,"name":"Rng","span":{"filename":"src/lib.rs","begin":[132,0],"end":[132,20]},"visibility":"public","docs":"A random number generator.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:21","0:89","a:1:32713:3094-0:153:2397","a:1:3244:247-0:153:2397","a:1:3279:3287-0:153:2397","a:1:42515:3121-0:153:2397","a:1:42516:3120-0:153:2397","a:1:32654:237-0:153:2397","b:1:3021-0:153:2397","b:1:3860-0:153:2397","b:1:3036-0:153:2397","b:1:3025-0:153:2397","b:1:3031-0:153:2397","b:1:2748-0:153:2397","b:1:2719-0:153:2397","b:1:2716-0:153:2397","b:4:784-0:153:2397","0:161","0:159","0:156","0:19","0:158","0:74"]}}},"4:5721:30379":{"id":"4:5721:30379","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:297:2887","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"4:297:2887","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2718:2729":{"id":"1:2718:2729","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13596:29636":{"id":"1:13596:29636","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167:908":{"id":"0:167:908","crate_id":0,"name":"i32","span":{"filename":"src/lib.rs","begin":[435,4],"end":[441,5]},"visibility":"public","docs":"Generates a random `i32` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i32>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:2472":{"id":"0:91:2472","crate_id":0,"name":"fork","span":{"filename":"src/lib.rs","begin":[322,4],"end":[324,5]},"visibility":"public","docs":"Clones the generator by deterministically deriving a new generator based on the initial\nseed.\n\nThis function can be used to create a new generator that is a \"spinoff\" of the old\ngenerator. The new generator will not produce the same sequence of values as the\nold generator.\n\n# Example\n\n```\n// Seed two generators equally, and clone both of them.\nlet mut base1 = fastrand::Rng::with_seed(0x4d595df4d0f33173);\nbase1.bool(); // Use the generator once.\n\nlet mut base2 = fastrand::Rng::with_seed(0x4d595df4d0f33173);\nbase2.bool(); // Use the generator once.\n\nlet mut rng1 = base1.fork();\nlet mut rng2 = base2.fork();\n\nprintln!(\"rng1 returns {}\", rng1.u32(..));\nprintln!(\"rng2 returns {}\", rng2.u32(..));\n```","links":{},"attrs":["#[inline]","#[must_use = \"this creates a new instance of `Rng`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3244:247-0:153:2397":{"id":"a:1:3244:247-0:153:2397","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:22:1192":{"id":"0:22:1192","crate_id":0,"name":"new","span":{"filename":"src/global_rng.rs","begin":[25,4],"end":[27,5]},"visibility":"public","docs":"Creates a new random number generator.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Rng","id":"0:153:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:113:476":{"id":"0:113:476","crate_id":0,"name":"char","span":{"filename":"src/lib.rs","begin":[642,4],"end":[695,5]},"visibility":"public","docs":"Generates a random `char` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<char>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13649:29658":{"id":"1:13649:29658","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:2502":{"id":"0:63:2502","crate_id":0,"name":"choose_multiple","span":{"filename":"src/global_rng.rs","begin":[179,0],"end":[181,1]},"visibility":"public","docs":"Collects `amount` values at random from the iterator into a vector.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["source",{"generic":"T"}],["amount",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"std::vec::Vec","id":"4:7211:264","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"","id":"1:8482:178","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8482:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13631:29649":{"id":"1:13631:29649","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:12434:476","self::pattern":"1:13212:8615"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:8621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13656:29663":{"id":"1:13656:29663","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5053:29663"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44608:3338","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,16],"end":[131,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2798:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:706"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13647:29656":{"id":"1:13647:29656","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32713:3094-0:153:2397":{"id":"a:1:32713:3094-0:153:2397","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32713:3094","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:42:2474":{"id":"0:42:2474","crate_id":0,"name":"alphabetic","span":{"filename":"src/global_rng.rs","begin":[90,0],"end":[92,1]},"visibility":"public","docs":"Generates a random `char` in ranges a-z and A-Z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183:1847":{"id":"0:183:1847","crate_id":0,"name":"u128","span":{"filename":"src/lib.rs","begin":[590,4],"end":[596,5]},"visibility":"public","docs":"Generates a random `u128` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u128>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13526:29614":{"id":"1:13526:29614","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:2538":{"id":"0:55:2538","crate_id":0,"name":"shuffle","span":{"filename":"src/global_rng.rs","begin":[138,0],"end":[140,1]},"visibility":"public","docs":"Shuffles a slice randomly.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:787:25451":{"id":"4:787:25451","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:2538":{"id":"0:108:2538","crate_id":0,"name":"shuffle","span":{"filename":"src/lib.rs","begin":[528,4],"end":[532,5]},"visibility":"public","docs":"Shuffles a slice randomly.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["slice",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:158":{"id":"0:158","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,16],"end":[131,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32656:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13616:29642":{"id":"1:13616:29642","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13618:29643":{"id":"1:13618:29643","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:2477":{"id":"0:106:2477","crate_id":0,"name":"choice","span":{"filename":"src/lib.rs","begin":[509,4],"end":[524,5]},"visibility":"public","docs":"Choose an item from an iterator at random.\n\nThis function may have an unexpected result if the `len()` property of the\niterator does not match the actual number of items in the iterator. If\nthe iterator is empty, this returns `None`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8336:165","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8336:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8336:165","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8427:2535","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3031-0:153:2397":{"id":"b:1:3031-0:153:2397","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3001:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3034:138","1:3035:1828"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13558:3173":{"id":"1:13558:3173","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"5:12434:476","self::pattern":"1:13212:8615"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13637:29651":{"id":"1:13637:29651","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:12434:476","self::pattern":"1:13212:8615"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13545:29621":{"id":"1:13545:29621","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13547:29623","str::split_at_mut":"1:13546:29622"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2567":{"id":"0:0:2567","crate_id":0,"name":"fastrand","span":{"filename":"src/lib.rs","begin":[1,0],"end":[696,1]},"visibility":"public","docs":"A simple and fast random number generator.\n\nThe implementation uses [Wyrand](https://github.com/wangyi-fudan/wyhash), a simple and fast\ngenerator but **not** cryptographically secure.\n\n# Examples\n\nFlip a coin:\n\n```\nif fastrand::bool() {\n    println!(\"heads\");\n} else {\n    println!(\"tails\");\n}\n```\n\nGenerate a random `i32`:\n\n```\nlet num = fastrand::i32(..);\n```\n\nChoose a random element in an array:\n\n```\nlet v = vec![1, 2, 3, 4, 5];\nlet i = fastrand::usize(..v.len());\nlet elem = v[i];\n```\n\nSample values from an array with `O(n)` complexity (`n` is the length of array):\n\n```\nfastrand::choose_multiple(vec![1, 4, 5].iter(), 2);\nfastrand::choose_multiple(0..20, 12);\n```\n\n\nShuffle an array:\n\n```\nlet mut v = vec![1, 2, 3, 4, 5];\nfastrand::shuffle(&mut v);\n```\n\nGenerate a random [`Vec`] or [`String`]:\n\n```\nuse std::iter::repeat_with;\n\nlet v: Vec<i32> = repeat_with(|| fastrand::i32(..)).take(10).collect();\nlet s: String = repeat_with(fastrand::alphanumeric).take(10).collect();\n```\n\nTo get reproducible results on every run, initialize the generator with a seed:\n\n```\n// Pick an arbitrary number as seed.\nfastrand::seed(7);\n\n// Now this prints the same number on every run:\nprintln!(\"{}\", fastrand::u32(..));\n```\n\nTo be more efficient, create a new [`Rng`] instance instead of using the thread-local\ngenerator:\n\n```\nuse std::iter::repeat_with;\n\nlet mut rng = fastrand::Rng::new();\nlet mut bytes: Vec<u8> = repeat_with(|| rng.u8(..)).take(10_000).collect();\n```\n\nThis crate aims to expose a core set of useful randomness primitives. For more niche algorithms,\nconsider using the [`fastrand-contrib`] crate alongside this one.\n\n# Features\n\n- `std` (enabled by default): Enables the `std` library. This is required for the global\n  generator and global entropy. Without this feature, [`Rng`] can only be instantiated using\n  the [`with_seed`](Rng::with_seed) method.\n- `js`: Assumes that WebAssembly targets are being run in a JavaScript environment. See the\n  [WebAssembly Notes](#webassembly-notes) section for more information.\n\n# WebAssembly Notes\n\nFor non-WASI WASM targets, there is additional sublety to consider when utilizing the global RNG.\nBy default, `std` targets will use entropy sources in the standard library to seed the global RNG.\nHowever, these sources are not available by default on WASM targets outside of WASI.\n\nIf the `js` feature is enabled, this crate will assume that it is running in a JavaScript\nenvironment. At this point, the [`getrandom`] crate will be used in order to access the available\nentropy sources and seed the global RNG. If the `js` feature is not enabled, the global RNG will\nuse a predefined seed.\n\n[`fastrand-contrib`]: https://crates.io/crates/fastrand-contrib\n[`getrandom`]: https://crates.io/crates/getrandom","links":{"`Rng`":"0:153:2397","Rng::with_seed":"0:90:2399","`Vec`":"4:7211:264"},"attrs":["#![no_std]","#![forbid(unsafe_code)]","#![warn(missing_docs, missing_debug_implementations, rust_2018_idioms)]","#![doc(html_favicon_url =\n\"https://raw.githubusercontent.com/smol-rs/smol/master/assets/images/logo_fullsize_transparent.png\")]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/smol-rs/smol/master/assets/images/logo_fullsize_transparent.png\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:153:2397","0:73-0:13:2395"],"is_stripped":false}}},"b:4:784-0:153:2397":{"id":"b:4:784-0:153:2397","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2736:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:780:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:786:5896","4:787:25451","4:788:25452"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3021-0:153:2397":{"id":"b:1:3021-0:153:2397","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2998:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2995:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3024:3176"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:160:706":{"id":"0:160:706","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[131,16],"end":[131,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Rng","id":"0:153:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13652:29661":{"id":"1:13652:29661","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1066:37633"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:179:1859":{"id":"0:179:1859","crate_id":0,"name":"u32","span":{"filename":"src/lib.rs","begin":[574,4],"end":[580,5]},"visibility":"public","docs":"Generates a random `u32` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u32>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13532:29617":{"id":"1:13532:29617","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13543:29619":{"id":"1:13543:29619","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"5:12440:1741","str::slice_mut_unchecked":"1:13544:29620","crate::ops::Index":"1:39968:2845"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:1853":{"id":"0:131:1853","crate_id":0,"name":"u16","span":{"filename":"src/global_rng.rs","begin":[156,0],"end":[156,61]},"visibility":"public","docs":"Generates a random `u16` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:747":{"id":"0:98:747","crate_id":0,"name":"f32","span":{"filename":"src/lib.rs","begin":[368,4],"end":[372,5]},"visibility":"public","docs":"Generates a random `f32` in range `0..1`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13608:29639":{"id":"1:13608:29639","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:13212:8615","`DoubleEndedIterator`":"1:8374:130","prim@char":"5:12434:476","str::rmatch_indices":"1:13611:29640"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44441:6272","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:181:1865":{"id":"0:181:1865","crate_id":0,"name":"u64","span":{"filename":"src/lib.rs","begin":[582,4],"end":[588,5]},"visibility":"public","docs":"Generates a random `u64` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u64>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13541:26062":{"id":"1:13541:26062","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13522":{"id":"1:13522","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13523:1008","1:13524:2550","1:13525:29613","1:13526:29614","1:13528:29615","1:13531:29616","1:13532:29617","1:13533:336","1:13534:29618","1:13535:3085","1:13537:2514","1:13539:26061","1:13541:26062","1:13543:29619","1:13544:29620","1:13545:29621","1:13546:29622","1:13547:29623","1:13548:29624","1:13550:6136","1:13551:6287","1:13552:5729","1:13553:26214","1:13554:26187","1:13555:29626","1:13556:29627","1:13557:26238","1:13558:3173","1:13561:29628","1:13564:29629","1:13567:3217","1:13571:3182","1:13575:29630","1:13578:26192","1:13581:29631","1:13584:29632","1:13587:29633","1:13590:29634","1:13593:29635","1:13596:29636","1:13599:29637","1:13602:2773","1:13605:29638","1:13608:29639","1:13611:29640","1:13614:29641","1:13616:29642","1:13618:29643","1:13620:29644","1:13621:29645","1:13622:29646","1:13625:29647","1:13628:29648","1:13631:29649","1:13634:29650","1:13637:29651","1:13640:29652","1:13643:29653","1:13645:29654","1:13646:29655","1:13647:29656","1:13648:29657","1:13649:29658","1:13650:29659","1:13651:29660","1:13652:29661","1:13653:29662","1:13655:8512","1:13656:29663"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13645:29654":{"id":"1:13645:29654","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13578:26192":{"id":"1:13578:26192","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"5:12434:476","self::pattern":"1:13212:8615"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:13027:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:177:1853":{"id":"0:177:1853","crate_id":0,"name":"u16","span":{"filename":"src/lib.rs","begin":[566,4],"end":[572,5]},"visibility":"public","docs":"Generates a random `u16` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169:914":{"id":"0:169:914","crate_id":0,"name":"i64","span":{"filename":"src/lib.rs","begin":[443,4],"end":[449,5]},"visibility":"public","docs":"Generates a random `i64` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i64>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13554:26187":{"id":"1:13554:26187","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13553:26214"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44574:6278","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13643:29653":{"id":"1:13643:29653","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:13173:137","`FromStr`":"1:13172:8300"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42554:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:13172:8300","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13172:8300","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13535:3085":{"id":"1:13535:3085","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42424:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3024:3176":{"id":"1:3024:3176","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2998:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13581:29631":{"id":"1:13581:29631","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:13212:8615","`DoubleEndedIterator`":"1:8374:130","prim@char":"5:12434:476","str::split":"1:13575:29630"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44309:6118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:8621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13620:29644":{"id":"1:13620:29644","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5739:30384":{"id":"4:5739:30384","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13648:29657"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13528:29615":{"id":"1:13528:29615","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13526:29614"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:2528":{"id":"0:105:2528","crate_id":0,"name":"get_seed","span":{"filename":"src/lib.rs","begin":[499,4],"end":[501,5]},"visibility":"public","docs":"Gives back **current** seed that is being held by this generator.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3862:1841":{"id":"1:3862:1841","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:40137:6198","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5740:30385":{"id":"4:5740:30385","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13649:29658"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13587:29633":{"id":"1:13587:29633","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:13212:8615","str::split":"1:13575:29630","prim@char":"5:12434:476","str::split_terminator":"1:13584:29632"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44359:6271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:8621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:2455":{"id":"0:36:2455","crate_id":0,"name":"seed","span":{"filename":"src/global_rng.rs","begin":[72,0],"end":[74,1]},"visibility":"public","docs":"Initializes the thread-local generator with the given seed.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["seed",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2748-0:153:2397":{"id":"b:1:2748-0:153:2397","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2736:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2746:8489","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2750:25450"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:5728:30381":{"id":"4:5728:30381","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:7798:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13614:29641":{"id":"1:13614:29641","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13555:29626":{"id":"1:13555:29626","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44545:5803","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2721:25449":{"id":"1:2721:25449","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:156":{"id":"0:156","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,9],"end":[131,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10443:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:157:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13552:5729":{"id":"1:13552:5729","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44277:3761","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40:420":{"id":"0:40:420","crate_id":0,"name":"bool","span":{"filename":"src/global_rng.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"Generates a random `bool`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13622:29646":{"id":"1:13622:29646","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"5:12434:476","self::pattern":"1:13212:8615"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13238:8620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/global_rng.rs","begin":[12,0],"end":[20,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3073:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Rng","id":"0:153:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:20:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13628:29648":{"id":"1:13628:29648","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:12434:476","self::pattern":"1:13212:8615"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:747":{"id":"0:59:747","crate_id":0,"name":"f32","span":{"filename":"src/global_rng.rs","begin":[169,0],"end":[171,1]},"visibility":"public","docs":"Generates a random `f32` in range `0..1`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3035:1828":{"id":"1:3035:1828","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42554:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:2524":{"id":"0:102:2524","crate_id":0,"name":"lowercase","span":{"filename":"src/lib.rs","begin":[486,4],"end":[489,5]},"visibility":"public","docs":"Generates a random `char` in range a-z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:185:1933":{"id":"0:185:1933","crate_id":0,"name":"usize","span":{"filename":"src/lib.rs","begin":[615,4],"end":[621,5]},"visibility":"public","docs":"Generates a random `usize` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<usize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161":{"id":"0:161","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,27],"end":[131,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2803:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:90:2399":{"id":"0:90:2399","crate_id":0,"name":"with_seed","span":{"filename":"src/lib.rs","begin":[293,4],"end":[295,5]},"visibility":"public","docs":"Creates a new random number generator with the initial seed.","links":{},"attrs":["#[inline]","#[must_use =\n\"this creates a new instance of `Rng`; if you want to initialize the thread-local generator, use `fastrand::seed()` instead\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["seed",{"primitive":"u64"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42516:3120-0:153:2397":{"id":"a:1:42516:3120-0:153:2397","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42516:3120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13547:29623":{"id":"1:13547:29623","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13548:29624"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73-0:13:2395":{"id":"0:73-0:13:2395","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,22]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"global_rng","name":"global_rng","id":"0:13:2395","glob":true}}},"4:786:5896":{"id":"4:786:5896","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:13551:6287":{"id":"1:13551:6287","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"5:12434:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44267:6268","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13557:26238":{"id":"1:13557:26238","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44583:6135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13571:3182":{"id":"1:13571:3182","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42424:191","prim@char":"5:12434:476","self::pattern":"1:13212:8615"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:8621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:2558":{"id":"0:48:2558","crate_id":0,"name":"uppercase","span":{"filename":"src/global_rng.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Generates a random `char` in range A-Z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:110:2541":{"id":"0:110:2541","crate_id":0,"name":"fill","span":{"filename":"src/lib.rs","begin":[536,4],"end":[556,5]},"visibility":"public","docs":"Fill a byte slice with random data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["slice",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111:2558":{"id":"0:111:2558","crate_id":0,"name":"uppercase","span":{"filename":"src/lib.rs","begin":[633,4],"end":[636,5]},"visibility":"public","docs":"Generates a random `char` in range A-Z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13646:29655":{"id":"1:13646:29655","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40323:8490","Self::is_ascii":"1:13645:29654"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40323:8490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:763":{"id":"0:61:763","crate_id":0,"name":"f64","span":{"filename":"src/global_rng.rs","begin":[174,0],"end":[176,1]},"visibility":"public","docs":"Generates a random `f64` in range `0..1`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13:2395":{"id":"0:13:2395","crate_id":0,"name":"global_rng","span":{"filename":"src/global_rng.rs","begin":[1,0],"end":[218,1]},"visibility":"crate","docs":"A global, thread-local random number generator.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:36:2455","0:38:2528","0:40:420","0:42:2474","0:44:2479","0:46:2524","0:48:2558","0:50:2477","0:53:2485","0:55:2538","0:127:1871","0:129:920","0:131:1853","0:133:902","0:135:1859","0:137:908","0:139:1865","0:141:914","0:143:1847","0:145:895","0:147:1933","0:149:977","0:151:476","0:59:747","0:61:763","0:63:2502"],"is_stripped":true}}},"0:99:763":{"id":"0:99:763","crate_id":0,"name":"f64","span":{"filename":"src/lib.rs","begin":[375,4],"end":[379,5]},"visibility":"public","docs":"Generates a random `f64` in range `0..1`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13655:8512":{"id":"1:13655:8512","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5056:8512"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44599:3339","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:145:895":{"id":"0:145:895","crate_id":0,"name":"i128","span":{"filename":"src/global_rng.rs","begin":[163,0],"end":[163,63]},"visibility":"public","docs":"Generates a random `i128` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i128"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i128>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13621:29645":{"id":"1:13621:29645","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13611:29640":{"id":"1:13611:29640","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13212:8615","`DoubleEndedIterator`":"1:8374:130","prim@char":"5:12434:476","str::match_indices":"1:13608:29639"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44459:6273","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:8621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13650:29659":{"id":"1:13650:29659","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1066:37633"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:143:1847":{"id":"0:143:1847","crate_id":0,"name":"u128","span":{"filename":"src/global_rng.rs","begin":[162,0],"end":[162,63]},"visibility":"public","docs":"Generates a random `u128` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u128>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151:476":{"id":"0:151:476","crate_id":0,"name":"char","span":{"filename":"src/global_rng.rs","begin":[166,0],"end":[166,63]},"visibility":"public","docs":"Generates a random `char` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<char>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:2524":{"id":"0:46:2524","crate_id":0,"name":"lowercase","span":{"filename":"src/global_rng.rs","begin":[102,0],"end":[104,1]},"visibility":"public","docs":"Generates a random `char` in range a-z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3034:138":{"id":"1:3034:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"1:13525:29613":{"id":"1:13525:29613","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13550:6136":{"id":"1:13550:6136","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"5:12434:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44261:6128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13539:26061":{"id":"1:13539:26061","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[289,0],"end":[696,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Rng","id":"0:153:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:90:2399","0:91:2472","0:92:2474","0:94:2479","0:96:420","0:97:2485","0:98:747","0:99:763","0:100:2502","0:163:920","0:165:902","0:167:908","0:169:914","0:171:895","0:173:977","0:102:2524","0:104:2455","0:105:2528","0:106:2477","0:108:2538","0:110:2541","0:175:1871","0:177:1853","0:179:1859","0:181:1865","0:183:1847","0:185:1933","0:111:2558","0:113:476"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:50:2477":{"id":"0:50:2477","crate_id":0,"name":"choice","span":{"filename":"src/global_rng.rs","begin":[118,0],"end":[124,1]},"visibility":"public","docs":"Choose an item from an iterator at random.\n\nThis function may have an unexpected result if the `len()` property of the\niterator does not match the actual number of items in the iterator. If\nthe iterator is empty, this returns `None`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8336:165","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8336:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8336:165","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8427:2535","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135:1859":{"id":"0:135:1859","crate_id":0,"name":"u32","span":{"filename":"src/global_rng.rs","begin":[158,0],"end":[158,61]},"visibility":"public","docs":"Generates a random `u32` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u32>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13523:1008":{"id":"1:13523:1008","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"5:12434:476"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:2502":{"id":"0:100:2502","crate_id":0,"name":"choose_multiple","span":{"filename":"src/lib.rs","begin":[390,4],"end":[417,5]},"visibility":"public","docs":"Collects `amount` values at random from the iterator into a vector.\n\nThe length of the returned vector equals `amount` unless the iterator\ncontains insufficient elements, in which case it equals the number of\nelements available.\n\nComplexity is `O(n)` where `n` is the length of the iterator.","links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"generic":"T"}],["amount",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Vec","id":"4:7211:264","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"","id":"1:8482:178","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8482:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13533:336":{"id":"1:13533:336","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13534:29618","`u8`":"5:12453:1871"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13593:29635":{"id":"1:13593:29635","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"5:12434:476","str::splitn":"1:13590:29634","self::pattern":"1:13212:8615"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44413:6121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:8621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5722:2701":{"id":"4:5722:2701","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:7798:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163:920":{"id":"0:163:920","crate_id":0,"name":"i8","span":{"filename":"src/lib.rs","begin":[419,4],"end":[425,5]},"visibility":"public","docs":"Generates a random `i8` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i8"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i8>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:420":{"id":"0:96:420","crate_id":0,"name":"bool","span":{"filename":"src/lib.rs","begin":[342,4],"end":[344,5]},"visibility":"public","docs":"Generates a random `bool`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:480":{"id":"0:75:480","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[136,4],"end":[138,5]},"visibility":"default","docs":"Clones the generator by creating a new generator with the same seed.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Rng","id":"0:153:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13524:2550":{"id":"1:13524:2550","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13546:29622":{"id":"1:13546:29622","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13545:29621","str::split_at_mut_checked":"1:13548:29624"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13584:29632":{"id":"1:13584:29632","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:13212:8615","str::split":"1:13575:29630","prim@char":"5:12434:476","`DoubleEndedIterator`":"1:8374:130","str::rsplit_terminator":"1:13587:29633"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44341:6270","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13651:29660":{"id":"1:13651:29660","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1066:37633"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13599:29637":{"id":"1:13599:29637","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:8621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13561:29628":{"id":"1:13561:29628","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"5:12434:476","self::pattern":"1:13212:8615"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:165:902":{"id":"0:165:902","crate_id":0,"name":"i16","span":{"filename":"src/lib.rs","begin":[427,4],"end":[433,5]},"visibility":"public","docs":"Generates a random `i16` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i16"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13640:29652":{"id":"1:13640:29652","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:12434:476","self::pattern":"1:13212:8615"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:8621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:149:977":{"id":"0:149:977","crate_id":0,"name":"isize","span":{"filename":"src/global_rng.rs","begin":[165,0],"end":[165,65]},"visibility":"public","docs":"Generates a random `isize` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"isize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"isize"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<isize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"isize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129:920":{"id":"0:129:920","crate_id":0,"name":"i8","span":{"filename":"src/global_rng.rs","begin":[155,0],"end":[155,59]},"visibility":"public","docs":"Generates a random `i8` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i8"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i8>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32654:237-0:153:2397":{"id":"a:1:32654:237-0:153:2397","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:173:977":{"id":"0:173:977","crate_id":0,"name":"isize","span":{"filename":"src/lib.rs","begin":[476,4],"end":[482,5]},"visibility":"public","docs":"Generates a random `isize` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"isize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"isize"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<isize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"isize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:157:811":{"id":"0:157:811","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[131,9],"end":[131,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10409:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10390:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13537:2514":{"id":"1:13537:2514","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42424:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13534:29618":{"id":"1:13534:29618","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"5:12453:1871"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13548:29624":{"id":"1:13548:29624","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13547:29623"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5737:30383":{"id":"4:5737:30383","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"4:297:2887","`String`":"4:7798:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:297:2887","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"4:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:1871":{"id":"0:127:1871","crate_id":0,"name":"u8","span":{"filename":"src/global_rng.rs","begin":[154,0],"end":[154,59]},"visibility":"public","docs":"Generates a random `u8` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u8>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2719-0:153:2397":{"id":"b:1:2719-0:153:2397","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32655:3093","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2713:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2721:25449"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2716-0:153:2397":{"id":"b:1:2716-0:153:2397","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32655:3093","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2718:2729"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:53:2485":{"id":"0:53:2485","crate_id":0,"name":"digit","span":{"filename":"src/global_rng.rs","begin":[132,0],"end":[134,1]},"visibility":"public","docs":"Generates a random digit in the given `base`.\n\nDigits are represented by `char`s in ranges 0-9 and a-z.\n\nPanics if the base is zero or greater than 36.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["base",{"primitive":"u32"}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3039:138":{"id":"1:3039:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32578:2809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"4:788:25452":{"id":"4:788:25452","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13564:29629":{"id":"1:13564:29629","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"5:12434:476","self::pattern":"1:13212:8615"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:8621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3040:1826":{"id":"1:3040:1826","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42554:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:2528":{"id":"0:38:2528","crate_id":0,"name":"get_seed","span":{"filename":"src/global_rng.rs","begin":[78,0],"end":[80,1]},"visibility":"public","docs":"Gives back **current** seed that is being held by the thread-local generator.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:171:895":{"id":"0:171:895","crate_id":0,"name":"i128","span":{"filename":"src/lib.rs","begin":[451,4],"end":[457,5]},"visibility":"public","docs":"Generates a random `i128` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i128"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i128>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13553:26214":{"id":"1:13553:26214","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13554:26187"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44565:6277","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13531:29616":{"id":"1:13531:29616","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12759:8622"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21":{"id":"0:21","crate_id":0,"name":null,"span":{"filename":"src/global_rng.rs","begin":[22,0],"end":[28,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Rng","id":"0:153:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:22:1192"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13556:29627":{"id":"1:13556:29627","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44555:6276","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13605:29638":{"id":"1:13605:29638","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:13212:8615","`DoubleEndedIterator`":"1:8374:130","prim@char":"5:12434:476","str::matches":"1:13602:2773"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44513:6275","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:8621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13634:29650":{"id":"1:13634:29650","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:12434:476","self::pattern":"1:13212:8615"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:8621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13648:29657":{"id":"1:13648:29657","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5725:30380":{"id":"4:5725:30380","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:7798:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5736:30382":{"id":"4:5736:30382","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"4:7798:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3279:3287-0:153:2397":{"id":"a:1:3279:3287-0:153:2397","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3279:3287","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:147:1933":{"id":"0:147:1933","crate_id":0,"name":"usize","span":{"filename":"src/global_rng.rs","begin":[164,0],"end":[164,65]},"visibility":"public","docs":"Generates a random `usize` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<usize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42515:3121-0:153:2397":{"id":"a:1:42515:3121-0:153:2397","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42515:3121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13544:29620":{"id":"1:13544:29620","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"5:12440:1741","crate::ops::IndexMut":"1:3522:2846","str::slice_unchecked":"1:13543:29619"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2479":{"id":"0:44:2479","crate_id":0,"name":"alphanumeric","span":{"filename":"src/global_rng.rs","begin":[96,0],"end":[98,1]},"visibility":"public","docs":"Generates a random `char` in ranges a-z, A-Z and 0-9.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:2455":{"id":"0:104:2455","crate_id":0,"name":"seed","span":{"filename":"src/lib.rs","begin":[493,4],"end":[495,5]},"visibility":"public","docs":"Initializes this generator with the given seed.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["seed",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3027:841":{"id":"1:3027:841","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:2485":{"id":"0:97:2485","crate_id":0,"name":"digit","span":{"filename":"src/lib.rs","begin":[352,4],"end":[365,5]},"visibility":"public","docs":"Generates a random digit in the given `base`.\n\nDigits are represented by `char`s in ranges 0-9 and a-z.\n\nPanics if the base is zero or greater than 36.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["base",{"primitive":"u32"}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2750:25450":{"id":"1:2750:25450","crate_id":1,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:137:908":{"id":"0:137:908","crate_id":0,"name":"i32","span":{"filename":"src/global_rng.rs","begin":[159,0],"end":[159,61]},"visibility":"public","docs":"Generates a random `i32` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i32>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:139:1865":{"id":"0:139:1865","crate_id":0,"name":"u64","span":{"filename":"src/global_rng.rs","begin":[160,0],"end":[160,61]},"visibility":"public","docs":"Generates a random `u64` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u64>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:2479":{"id":"0:94:2479","crate_id":0,"name":"alphanumeric","span":{"filename":"src/lib.rs","begin":[335,4],"end":[338,5]},"visibility":"public","docs":"Generates a random `char` in ranges a-z, A-Z and 0-9.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:60":{"id":"0:20:60","crate_id":0,"name":"default","span":{"filename":"src/global_rng.rs","begin":[17,4],"end":[19,5]},"visibility":"default","docs":"Initialize the `Rng` from the system's random number generator.\n\nThis is equivalent to [`Rng::new()`].","links":{"`Rng::new()`":"0:22:1192"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Rng","id":"0:153:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:141:914":{"id":"0:141:914","crate_id":0,"name":"i64","span":{"filename":"src/global_rng.rs","begin":[161,0],"end":[161,61]},"visibility":"public","docs":"Generates a random `i64` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i64>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13567:3217":{"id":"1:13567:3217","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42424:191","prim@char":"5:12434:476","self::pattern":"1:13212:8615"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13575:29630":{"id":"1:13575:29630","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:13212:8615","`DoubleEndedIterator`":"1:8374:130","prim@char":"5:12434:476","str::split_whitespace":"1:13553:26214","str::rsplit":"1:13581:29631"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44291:5800","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3025-0:153:2397":{"id":"b:1:3025-0:153:2397","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2998:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3027:841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13602:2773":{"id":"1:13602:2773","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:13212:8615","`DoubleEndedIterator`":"1:8374:130","prim@char":"5:12434:476","str::rmatches":"1:13605:29638"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44495:6274","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13625:29647":{"id":"1:13625:29647","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:12434:476","self::pattern":"1:13212:8615"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13653:29662":{"id":"1:13653:29662","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5055:29662"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44590:3340","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:175:1871":{"id":"0:175:1871","crate_id":0,"name":"u8","span":{"filename":"src/lib.rs","begin":[558,4],"end":[564,5]},"visibility":"public","docs":"Generates a random `u8` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u8>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3036-0:153:2397":{"id":"b:1:3036-0:153:2397","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2995:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3039:138","1:3040:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:133:902":{"id":"0:133:902","crate_id":0,"name":"i16","span":{"filename":"src/global_rng.rs","begin":[157,0],"end":[157,61]},"visibility":"public","docs":"Generates a random `i16` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i16"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3613:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92:2474":{"id":"0:92:2474","crate_id":0,"name":"alphabetic","span":{"filename":"src/lib.rs","begin":[328,4],"end":[331,5]},"visibility":"public","docs":"Generates a random `char` in ranges a-z and A-Z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5738:8501":{"id":"4:5738:8501","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:7798:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13590:29634":{"id":"1:13590:29634","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"5:12434:476","self::pattern":"1:13212:8615","str::rsplitn":"1:13593:29635"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44395:6120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:6106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5720":{"id":"4:5720","crate_id":4,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["4:5721:30379","4:5722:2701","4:5725:30380","4:5728:30381","4:5736:30382","4:5737:30383","4:5738:8501","4:5739:30384","4:5740:30385"],"negative":false,"synthetic":false,"blanket_impl":null}}}},"paths":{"5:12028:5732":{"crate_id":5,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:46393:6332":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"4:5141:3524":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:7980:5025":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:14140:4277":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"4:7734:5918":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:3110:5032":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:14902:4423":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:4947:7132":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:7869:8539":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"11:364:3505":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:14560:4357":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"4:4368:2986":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:14586:4360":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:6623:7566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:2242:129":{"crate_id":5,"path":["std","ffi","os_str","Display"],"kind":"struct"},"6:5186:7202":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:5648:5700":{"crate_id":5,"path":["std","process","ChildStdout"],"kind":"struct"},"5:5877:5703":{"crate_id":5,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"11:2551:34655":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:42619:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:41286:6221":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:9583:6106":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:40771:3346":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:15036:4450":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"11:2301:2998":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:12204:4014":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:42717:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:44291:5800":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"6:5179:7201":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:16822:4228":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:15679:4649":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"10:36:6813":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:5742:3903":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:13871:4218":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:45017:7907":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:2715:3518":{"crate_id":5,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:6225:220":{"crate_id":5,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:47559:6435":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"4:3338:5571":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:13451:4149":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"11:830:2990":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:13233:8621":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:902:2534":{"crate_id":5,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:16798:4954":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"11:842:2994":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:573:3061":{"crate_id":5,"path":["std","thread","Packet"],"kind":"struct"},"1:4100:2534":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:7807:34681":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:12886:4105":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:1650:5574":{"crate_id":5,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:11114:3922":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:12373:8480":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:22753:13778":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"16:6064:5016":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:15905:4705":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:5562:7371":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:41411:5798":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:44189:6260":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"5:8562:5800":{"crate_id":5,"path":["std","io","Split"],"kind":"struct"},"17:15777:4674":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"5:11736:6244":{"crate_id":5,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"5:9450:3547":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"16:7282:5278":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:16812:4955":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"18:726:3748":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:40986:6205":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:10551:114":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"6:7316:7681":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:4929:5051":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:16132:4780":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:13837:6142":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"6:6765:7614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"5:910:2988":{"crate_id":5,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:32645:6195":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:23465:6185":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"1:44088:6251":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:4404:5044":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:6534:7510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:4699:14122":{"crate_id":5,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:583:3769":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:11065:5742":{"crate_id":5,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"16:8105:5402":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"11:2545:6809":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:23520:6190":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:11335:14051":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:6631:7567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:16036:4742":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:44459:6273":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:44887:6297":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:46858:6379":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:14872:4418":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:6384:3533":{"crate_id":5,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:4308:33362":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:11953:5682":{"crate_id":5,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:5870:3537":{"crate_id":5,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:6462:7473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:7563:7800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:47476:6428":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:23171:7886":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:4485:6062":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:4492:5685":{"crate_id":5,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"11:2420:2534":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"5:1852:703":{"crate_id":5,"path":["std","env"],"kind":"module"},"17:13169:4129":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"4:2816:6705":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:22005:14051":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:42402:6103":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"5:6400:3536":{"crate_id":5,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:16714:4935":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"5:8652:5813":{"crate_id":5,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"16:6573:5150":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:10409:5867":{"crate_id":5,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"5:1617:2986":{"crate_id":5,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:10978:7864":{"crate_id":5,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"6:6480:7483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:532:3055":{"crate_id":5,"path":["std","thread","PanicGuard"],"kind":"struct"},"5:11281:5840":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:13798:4201":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:16642:4916":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:7003:6081":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:42680:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:15064:4454":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:46305:6323":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:15557:4626":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:13055:3948":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"4:6559:13991":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"5:9354:5852":{"crate_id":5,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:13547:4156":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"6:553:6870":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:14520:4351":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:22937:13773":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:12028:3990":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:8836:28734":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:46497:6346":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:2550:4989":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"4:3304:5572":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:4777:14139":{"crate_id":5,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:896:4972":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:31056:3277":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:23410:6180":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"6:4957:7135":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:23983:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"0:0:2567":{"crate_id":0,"path":["fastrand"],"kind":"module"},"17:13471:3786":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"11:1105:5567":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:5593:7380":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:1645:5573":{"crate_id":5,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:15148:4465":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:8013:14051":{"crate_id":5,"path":["std","sealed","Sealed"],"kind":"trait"},"1:43421:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:8898:5836":{"crate_id":5,"path":["std","path","Ancestors"],"kind":"struct"},"17:12216:4016":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:8598:5468":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:5192:14148":{"crate_id":5,"path":["std","panic","always_abort"],"kind":"function"},"6:545:6865":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:4976:7143":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:9159:5839":{"crate_id":5,"path":["std","process","ExitStatus"],"kind":"struct"},"17:322:3764":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"4:2368:7882":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:384:3078":{"crate_id":5,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:7949:5024":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:23279:26175":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:9470:3119":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:0:568":{"crate_id":1,"path":["core"],"kind":"module"},"6:5381:7284":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:15602:4635":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:15714:4659":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:13290:3861":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:2018:794":{"crate_id":5,"path":["std","ffi"],"kind":"module"},"6:564:6875":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:12009:5887":{"crate_id":5,"path":["std","alloc","System"],"kind":"struct"},"16:8233:21179":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:11579:3952":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:1115:3001":{"crate_id":5,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:44900:6301":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:22462:13697":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:6473:7481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:21941:26923":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:6790:7623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:12056:4000":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:13212:8615":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"17:10778:3904":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"16:2506:4987":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:11775:6120":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:5541:7359":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:15024:4449":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"18:113:25428":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:6723:7602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:16311:4835":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:10477:14172":{"crate_id":5,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"6:4881:7099":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:8284:7843":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:12448:920":{"crate_id":5,"path":["std","i8"],"kind":"primitive"},"14:220:5562":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"4:212:3569":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:42184:6098":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:45013:7906":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:10411:5866":{"crate_id":5,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:14405:4333":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:1930:5659":{"crate_id":5,"path":["std","env","ArgsOs"],"kind":"struct"},"17:14507:4348":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:12459:1933":{"crate_id":5,"path":["std","usize"],"kind":"primitive"},"6:1597:6953":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:7789:34679":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:10703:3555":{"crate_id":5,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:11553:3949":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:12449:902":{"crate_id":5,"path":["std","i16"],"kind":"primitive"},"6:5271:7244":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:3244:247":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"5:12021:34600":{"crate_id":5,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:1584:6946":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:3910:5680":{"crate_id":5,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:6680:5178":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"17:11566:3950":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:8031:7833":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:6526:7505":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:6998:5216":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:6389:5112":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:4174:14095":{"crate_id":5,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:11720:3961":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"18:491:3704":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:2148:8483":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"5:1928:5658":{"crate_id":5,"path":["std","env","Args"],"kind":"struct"},"17:667:3770":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:8029:3067":{"crate_id":5,"path":["std","thread","Builder"],"kind":"struct"},"17:13933:4228":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:12723:4087":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:3889:3801":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:23187:6156":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:2505:14046":{"crate_id":5,"path":["std","fs","read_dir"],"kind":"function"},"16:4766:5046":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:994:2997":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"11:809:2890":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:14312:4318":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"5:8675:7709":{"crate_id":5,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"4:40:2889":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:13027:6115":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:7454:7736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:7828:32470":{"crate_id":5,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"1:45347:6312":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:3048:20308":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:16555:4901":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:3237:2975":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"17:16241:4820":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:12860:4104":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:923:2989":{"crate_id":5,"path":["std","collections","hash","map","Values"],"kind":"struct"},"4:4133:2892":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:14796:4409":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:12371:4037":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"11:698:2534":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:3703:2852":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:4884:2970":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:6063:3527":{"crate_id":5,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:32743:3290":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"5:3536:5676":{"crate_id":5,"path":["std","io","util","Repeat"],"kind":"struct"},"1:42384:6101":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:8325:146":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:23235:6162":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:10663:3758":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:23352:8314":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:8223:5406":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:2969:2810":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:40022:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:11020:5865":{"crate_id":5,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"16:903:3763":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:11805:3972":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"9:328:6814":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:14692:4373":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:14152:4280":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:0:2804":{"crate_id":17,"path":["object"],"kind":"module"},"1:42244:7892":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:11492:2986":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:8626:5470":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:12749:4089":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:317:3763":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"11:2323:2999":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"5:9295:5845":{"crate_id":5,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:11268:5839":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:9274:14189":{"crate_id":5,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:473:6824":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"14:0:2801":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:3676:2848":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:46439:6335":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"9:0:2797":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:46343:6329":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:31414:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"17:5131:3791":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:12605:3923":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:5670:7419":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"11:2539:6808":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:12220:3567":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:12450:908":{"crate_id":5,"path":["std","i32"],"kind":"primitive"},"4:1595:2990":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"14:202:13980":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:12851:4103":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:8565:5464":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:16684:4927":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"4:4573:3593":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:9380:32586":{"crate_id":5,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"14:214:5560":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:40831:3338":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:14672:4372":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:3400:5672":{"crate_id":5,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:40137:6198":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"17:13921:4227":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:1097:2999":{"crate_id":5,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"18:623:34696":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:15931:4715":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:11386:21255":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:7487:7750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"4:4497:3593":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:41276:6084":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:8569:5803":{"crate_id":5,"path":["std","io","Lines"],"kind":"struct"},"5:8646:5804":{"crate_id":5,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:5107:7195":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:11998:3986":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:2406:3778":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:4230:14100":{"crate_id":5,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:14269:4307":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:15665:4648":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:15549:4625":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:13006:4119":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:46649:6354":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:6814:6074":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:10954:5876":{"crate_id":5,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:42458:2987":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"5:11753:5886":{"crate_id":5,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:5113:5056":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:5217:7221":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:15540:4624":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:46518:6347":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:7938:5392":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:45025:7909":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:4397:3524":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"16:6144:21167":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"11:1580:5569":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:7542:5313":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:12460:1435":{"crate_id":5,"path":["std","reference"],"kind":"primitive"},"5:5313:5693":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:15689:4650":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:8216:5745":{"crate_id":5,"path":["std","fs","FileTimes"],"kind":"struct"},"1:44237:6264":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:4902:7109":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:10274:21234":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:5395:7292":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:45009:7905":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:32655:3093":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"17:13322:21245":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:4899:14121":{"crate_id":5,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:2660:4994":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:22617:13693":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"15:0:2802":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:12455:1859":{"crate_id":5,"path":["std","u32"],"kind":"primitive"},"5:11167:3558":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:44413:6121":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"4:1524:2986":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:9463:162":{"crate_id":5,"path":["std","time","Instant"],"kind":"struct"},"16:2966:5008":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"5:2790:5669":{"crate_id":5,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:6411:7453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:3834:5038":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:4566:5686":{"crate_id":5,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:766:154":{"crate_id":5,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:46241:6317":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:11582:3559":{"crate_id":5,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"17:10296:21235":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:7508:5308":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:2570:4990":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:677:5648":{"crate_id":5,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:6239:5091":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:5727:3902":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:685:13997":{"crate_id":5,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:6740:7605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"6:491:6830":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"4:1415:3001":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:42422:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:8798:8546":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:5359:204":{"crate_id":5,"path":["std","path","PathBuf"],"kind":"struct"},"1:8374:130":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:8353:7858":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:4970:7140":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"4:885:102":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:13306:4140":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:22841:26266":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"6:1530:6909":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:6308:3529":{"crate_id":5,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:41214:6080":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"5:4116:14090":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:11661:6117":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:44608:3338":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:6890:5012":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"18:718:3745":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:21929:26923":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:15531:4620":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:41227:6219":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"11:1914:5573":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:44106:6254":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:7586:7812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:41143:6067":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:45233:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"5:8287:5750":{"crate_id":5,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:1563:6932":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:3493:143":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:2486:4986":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:12840:4099":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"11:2137:2999":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:13877:6217":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1:2746:8489":{"crate_id":1,"path":["core","clone","CloneToUninit"],"kind":"trait"},"17:13635:4164":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:47347:6423":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"4:4527:3524":{"crate_id":4,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:4763:2961":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:31067:26299":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:4636:2977":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:8620:5683":{"crate_id":5,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:4824:7722":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"6:6680:7586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:8510:5679":{"crate_id":5,"path":["std","io","IoSlice"],"kind":"struct"},"17:11457:3939":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"1:2082:1373":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:3084:138":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"16:5709:21166":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:6902:7658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:14652:4369":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:6744:3544":{"crate_id":5,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"4:282:3570":{"crate_id":4,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:8096:5401":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:517:6850":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:10784:3905":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"1:38565:2835":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:5507:7352":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"11:1920:5574":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:46258:6320":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:8575:5804":{"crate_id":5,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:47103:6388":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:44574:6278":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:10458:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:22457:14051":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:13145:4127":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"5:8632:14120":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"4:1889:2890":{"crate_id":4,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:5325:7267":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:6813:7629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:13193:4131":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:40971:8536":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:1605:2991":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:5417:5066":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:15136:4110":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:23259:26177":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:12537:4072":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"4:3092:32045":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:15090:4456":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:5319:26244":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:8539:5793":{"crate_id":5,"path":["std","io","Chain"],"kind":"struct"},"6:5635:7405":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:15887:4701":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:15953:4720":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:15852:4690":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"4:7762:5921":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:6205:21168":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:32620:6193":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:46808:6377":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:4520:8513":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:2704:4996":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:538:6862":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:465:6819":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:23487:6187":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:46454:6336":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:6825:14183":{"crate_id":5,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:14127:4276":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:5144:5057":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"11:2400:2987":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"5:12035:5732":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:45033:7911":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:12983:21375":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:2796:5000":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:892:2987":{"crate_id":5,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:9428:3541":{"crate_id":5,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"6:6449:7472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"4:1616:2992":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:14547:4356":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:16668:4922":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:15351:4522":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"9:445:20156":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:6209:3537":{"crate_id":5,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:2155:5927":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"18:680:3736":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:11926:3981":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"4:2256:3055":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:47574:6436":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:16283:4826":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"15:327:7982":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:4956:5052":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:8371:14081":{"crate_id":5,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:11773:5728":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:9244:14188":{"crate_id":5,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:6659:7580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:2081:198":{"crate_id":5,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:7990:5397":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"9:176:7995":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:13592:4160":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:11787:5731":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:1624:2892":{"crate_id":5,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:5420:7303":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:4792:7036":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:47493:6429":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:14438:4341":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:38620:2836":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:11105:5841":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"17:11878:3923":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"4:3456:2890":{"crate_id":4,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"11:328:6805":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:7424:21175":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:5628:5699":{"crate_id":5,"path":["std","process","ChildStdin"],"kind":"struct"},"11:1023:2999":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"5:1489:156":{"crate_id":5,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:6419:7455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:12439:1707":{"crate_id":5,"path":["std","slice"],"kind":"primitive"},"16:7305:5279":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:6696:5181":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:41677:6094":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:42200:6100":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:8288:8548":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:12385:5890":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"5:10774:5670":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:40854:3341":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:33881:2824":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:8336:165":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:7495:5305":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"18:80:25426":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:2860:5003":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:5125:14142":{"crate_id":5,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:7818:27017":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:8638:5811":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"4:1785:3570":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:12906:4107":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"4:3866:5899":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:14220:4282":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:43674:6248":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:8165:5019":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:15731:4664":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:155:3501":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:6028:5011":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:6256:5096":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:8586:14088":{"crate_id":5,"path":["std","net","Shutdown"],"kind":"enum"},"17:16171:4795":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:8842:14165":{"crate_id":5,"path":["std","path","Component"],"kind":"enum"},"1:42506:3117":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:7907:5383":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:3125:5931":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"17:13515:21246":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:0:2803":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:41262:3726":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:39309:2839":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:8267:5414":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:22923:14051":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"5:9209:2534":{"crate_id":5,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:44877:6293":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:43682:6249":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:14599:4362":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:2998:145":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:3465:2840":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:3308:4977":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:15785:4676":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:46763:6360":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:5412:1258":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:23454:6184":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:14299:4316":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"6:5586:7378":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:10843:3909":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:7372:5021":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:8115:5742":{"crate_id":5,"path":["std","env","JoinPathsError"],"kind":"struct"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:5614:5694":{"crate_id":5,"path":["std","process","Child"],"kind":"struct"},"11:740:2992":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"11:299:6802":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:8792:3351":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:10391:3266":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:2760:3625":{"crate_id":1,"path":["core","clone","InitializingSlice"],"kind":"struct"},"17:13610:4163":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:10973:7862":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"5:1106:3000":{"crate_id":5,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:10938:34685":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"4:3086:32442":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:12869:4149":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:5126:3331":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"18:507:3705":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"4:1401:2999":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:7192:21174":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"11:1564:20235":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:6876:7643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"4:7567:3581":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:11075:34686":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:31041:3146":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:42602:2987":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:3375:2832":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"16:8121:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:45203:7913":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"1:45041:6522":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"5:11032:5679":{"crate_id":5,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"16:8320:21180":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:7401:34673":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:40839:3339":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:10097:21228":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"5:12434:476":{"crate_id":5,"path":["std","char"],"kind":"primitive"},"1:4684:2685":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:34294:2829":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:5017:14105":{"crate_id":5,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:45083:3012":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:7341:7699":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:11049:33168":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:7333:32477":{"crate_id":5,"path":["std","sys","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:11952:3982":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"11:1888:2892":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:45208:151":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:39924:2854":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:41421:6086":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:16399:4853":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:42466:2534":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:31003:2882":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:42902:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"4:2266:5901":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:11013:140":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:3305:2821":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:40000:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:16323:4837":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"11:798:2892":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:5224:5060":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:41435:6087":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"5:3913:5681":{"crate_id":5,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:6866:21172":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:12931:4110":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:10090:28735":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:3695:5037":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:15439:4585":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:9319:3060":{"crate_id":5,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:9440:234":{"crate_id":5,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:5494:7347":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:14947:4430":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:2596:679":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:14533:4044":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:8892:2986":{"crate_id":5,"path":["std","path","Iter"],"kind":"struct"},"1:21958:26927":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:5341:7271":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:16739:4943":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"5:7392:3549":{"crate_id":5,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"5:8014:2705":{"crate_id":5,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:14738:4397":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"4:7609:210":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"4:3085:5896":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:5405:7298":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"4:4997:217":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"5:12447:742":{"crate_id":5,"path":["std","f128"],"kind":"primitive"},"5:11869:3561":{"crate_id":5,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:12798:21373":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:42594:2986":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"5:11057:5815":{"crate_id":5,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"4:4560:3524":{"crate_id":4,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"1:34082:2825":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:3074:138":{"crate_id":5,"path":["std","io","error","Error"],"kind":"struct"},"5:661:5647":{"crate_id":5,"path":["std","backtrace","Backtrace"],"kind":"struct"},"11:2559:6811":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:14168:3643":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"17:3854:3785":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:6652:7579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:5241:7229":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:22829:13780":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:41644:6091":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:10115:21229":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"4:1555:2534":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:13983:4235":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"4:7545:5915":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:21973:26913":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:15641:4644":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"4:1539:2987":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:4694:5045":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:16008:4734":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:2684:4995":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:3656:3266":{"crate_id":5,"path":["std","io","Write"],"kind":"trait"},"11:351:34646":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:16656:4920":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:16145:4786":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:971:2994":{"crate_id":5,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:3286:3289":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:32624:5364":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:43127:3269":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"4:6838:2534":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:12319:4032":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"18:598:34694":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:5357:6065":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:10167:21231":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"11:1880:2986":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:4218:14097":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"4:7811:5924":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"9:422:20158":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:7816:32492":{"crate_id":5,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"5:1628:2890":{"crate_id":5,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"8:0:2796":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:4222:14098":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"4:7587:31915":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:13082:3924":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:12962:21374":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:14627:4367":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:8290:7844":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:13227:3741":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:2450:4978":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:23103:6154":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:8730:5816":{"crate_id":5,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"17:12035:3993":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:5102:14140":{"crate_id":5,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:2995:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"11:785:2989":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"16:4267:5043":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:546:4963":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:3073:124":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"4:6757:3570":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:7498:33358":{"crate_id":5,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:15050:4451":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:46600:6351":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:4168:14094":{"crate_id":5,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"4:3330:5573":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"7:32:20143":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:26383:267":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:6953:5215":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:6758:7613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:46987:6384":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:4160:14093":{"crate_id":5,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:32631:6194":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:6159:5082":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:10704:3003":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:46731:6358":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"4:2585:6707":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:15586:4632":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:378:3077":{"crate_id":5,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:12913:6129":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:15844:4689":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:4241:5042":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:44694:6280":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"4:3364:5574":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:40998:3761":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"6:5165:7200":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:46617:6352":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:16297:4828":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:5649:5068":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:41092:5793":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:2834:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"5:7178:14190":{"crate_id":5,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:47455:6427":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:13222:21243":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:23210:6161":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:3279:3287":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"6:6672:7584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"18:589:3715":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:5334:7270":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:3503:3782":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:6462:21170":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:46468:6337":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:10390:5657":{"crate_id":5,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:12673:4080":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:15760:4671":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"4:3707:2986":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:3487:141":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:23321:7889":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"4:7284:3622":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:39985:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:23443:6183":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"6:1551:6924":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:23373:14051":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:10141:21230":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:46226:6316":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:3566:3524":{"crate_id":5,"path":["std","io","Guard"],"kind":"struct"},"1:45005:7904":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"6:6493:7492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"18:754:3754":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:12440:1741":{"crate_id":5,"path":["std","str"],"kind":"primitive"},"9:236:6244":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:9904:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:46748:6359":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:3310:34517":{"crate_id":5,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"14:7:5555":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"5:12457:1847":{"crate_id":5,"path":["std","u128"],"kind":"primitive"},"16:2990:5009":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"18:573:3705":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:4539:8514":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:11606:3923":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:8581:5806":{"crate_id":5,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:41026:3629":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"4:7747:8536":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:8249:7835":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:1633:5571":{"crate_id":5,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:45225:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"16:8636:21181":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:15963:4723":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:40100:2394":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"16:2772:4999":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:43664:6244":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:42546:3071":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"18:670:3735":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:8308:7847":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:3617:5678":{"crate_id":5,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:6368:4958":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:32654:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:824:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"16:3014:20307":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:5255:5061":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:8330:7852":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"5:11892:5680":{"crate_id":5,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:5399:988":{"crate_id":1,"path":["core","iter"],"kind":"module"},"16:6852:5205":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:46875:6380":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:2467:4980":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:44599:3339":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:12433:1188":{"crate_id":5,"path":["std","never"],"kind":"primitive"},"17:16179:4798":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:11747:5723":{"crate_id":5,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:3452:125":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:10991:3639":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"1:2798:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:4805:7045":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:4359:14119":{"crate_id":5,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"4:1214:31940":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:5971:251":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"17:13361:4143":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:5288:7255":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:12302:6124":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:42791:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:42328:26220":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:4015:5682":{"crate_id":5,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:14358:4327":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"11:1601:5570":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"4:7577:5916":{"crate_id":4,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"4:1370:2998":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"11:873:2996":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:8585:5465":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:46326:6328":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:961:2992":{"crate_id":5,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:3295:2823":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"4:2162:5899":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:16595:4201":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"6:4829:7063":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:13719:4182":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:45094:8646":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:16264:4821":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:1500:6896":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:12082:4003":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:5224:7222":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:14773:4408":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"11:685:2987":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:11353:162":{"crate_id":5,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"5:3599:5807":{"crate_id":5,"path":["std","io","Read"],"kind":"trait"},"1:2045:678":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"6:5255:7235":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:952:2990":{"crate_id":5,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"4:7617:5917":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:5085:5055":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:11759:5727":{"crate_id":5,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:12306:4029":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"4:7703:2984":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"11:1158:3001":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:5629:7402":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"5:2518:14048":{"crate_id":5,"path":["std","fs","exists"],"kind":"function"},"5:10568:34591":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:16632:4915":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:2803:135":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"4:3343:32439":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:10283:6233":{"crate_id":5,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"16:2900:5005":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:3126:20309":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:47502:6430":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:5249:7233":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"4:6041:2892":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"17:16520:4871":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:11630:3954":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"4:7110:2897":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:40960:6204":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:43408:26298":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"1:10452:3268":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"5:5802:7630":{"crate_id":5,"path":["std","process","exit"],"kind":"function"},"5:8052:3066":{"crate_id":5,"path":["std","thread","Thread"],"kind":"struct"},"16:6837:5203":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"5:9259:14187":{"crate_id":5,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:9423:187":{"crate_id":5,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:8789:150":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:13692:4174":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:10793:3908":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"1:43643:3006":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"4:6283:3524":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:8100:14022":{"crate_id":5,"path":["std","env","VarError"],"kind":"enum"},"1:44126:6256":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:2052:3143":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:10448:129":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"5:9455:3548":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"18:659:3729":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:40741:6200":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:4208:14096":{"crate_id":5,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:3307:34379":{"crate_id":5,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:11617:3924":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:33948:2828":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:2989:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:44852:6292":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:5282:7252":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:6942:5214":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"4:1250:31947":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"13:229:6800":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:570:6878":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:46632:6353":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:8000:5026":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"11:434:34650":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:4937:7126":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:45037:7912":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:5462:7333":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:43120:3267":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:23050:6153":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"11:1674:3509":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:10863:3638":{"crate_id":1,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"1:14260:2885":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"17:15496:4619":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"4:5525:3570":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:9172:5840":{"crate_id":5,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:6269:5097":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"18:531:3709":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:1339:3773":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:6111:5081":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:10998:3640":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"6:5603:7385":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:10820:3066":{"crate_id":5,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"6:6638:7568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:4990:7151":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:22174:14051":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:2493:14040":{"crate_id":5,"path":["std","fs","read_link"],"kind":"function"},"1:34015:2826":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:6731:7603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:4754:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:44723:6288":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"9:355:20171":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:11541:5800":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"6:7986:7821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"13:110:34657":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:12727:8588":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:5282:5062":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:45335:5579":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"4:1002:2986":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:12787:4092":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:578:6883":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:4152:5040":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:4110:14091":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:16026:4737":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:4816:7053":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:32714:3291":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:47612:6443":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:6381:7428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:45308:180":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"4:3297:2986":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:13157:4128":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"4:7557:2892":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:6713:5183":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:42941:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"4:4482:265":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"4:3800:3570":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:7804:32494":{"crate_id":5,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"5:2323:139":{"crate_id":5,"path":["std","fs","File"],"kind":"struct"},"5:5664:5701":{"crate_id":5,"path":["std","process","ChildStderr"],"kind":"struct"},"17:16332:4841":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:821:8301":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:42643:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:4677:14121":{"crate_id":5,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:7159:5251":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:13733:4183":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:42516:3120":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:41237:6220":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:6708:7598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"5:9232:5844":{"crate_id":5,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:1220:3771":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"4:7086:2896":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:46290:6322":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:6640:5158":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"17:13119:4126":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:6599:7554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:15077:4455":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:8503:5456":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:11851:3975":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:46535:6348":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:8528:5459":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"9:500:5633":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:9749:5743":{"crate_id":5,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:12648:4078":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:1727:7030":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:4896:7106":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:12437:1329":{"crate_id":5,"path":["std","pointer"],"kind":"primitive"},"16:7058:5227":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:9445:235":{"crate_id":5,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"4:726:5894":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:13537:4110":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:39972:2847":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"5:11300:6522":{"crate_id":5,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:10394:21238":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"14:160:5555":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:10630:3757":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:16775:4949":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"5:4940:14109":{"crate_id":5,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:12280:4025":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:8671:5815":{"crate_id":5,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:44267:6268":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:5984:5706":{"crate_id":5,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:12066:4001":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:7361:7705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:8255:7836":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"4:3096:32044":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:41114:6211":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:43429:3277":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"6:4984:7148":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"4:6525:3606":{"crate_id":4,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"5:12406:14001":{"crate_id":5,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"5:11149:3556":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:13909:4224":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:2610:8468":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1:44495:6274":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"6:4869:7096":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"9:390:20157":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"4:7880:2890":{"crate_id":4,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:40934:3344":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"6:5117:7196":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:5282:5693":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11232:21257":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:22184:13692":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:1507:6899":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:6748:7606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"5:4338:14117":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"18:96:25427":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:22615:14051":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:7539:7790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:7423:3550":{"crate_id":5,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:8058:5400":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:40797:3345":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:8427:2535":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:34813:2833":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:5069:7193":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:15:2774":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:22007:13695":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:12176:4011":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:43113:3268":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:23421:6181":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"4:7120:2898":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:3858:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"17:15121:4462":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:22:826":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:38675:2837":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:7554:21176":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:965:2993":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:5036:7175":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"4:1386:3000":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"4:3088:7879":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"11:2533:6807":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"15:306:20261":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:5060:5054":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:1494:6893":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:40927:3343":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"5:9148:199":{"crate_id":5,"path":["std","process","Output"],"kind":"struct"},"5:12461:13":{"crate_id":5,"path":["std","fn"],"kind":"primitive"},"3:0:2794":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"17:11971:3984":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:13781:4198":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"4:7821:5925":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:12135:4008":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:44866:8636":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:6625:5156":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:2820:5001":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:2724:4997":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:11777:3967":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:1625:6978":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:1982:5660":{"crate_id":5,"path":["std","error","Report"],"kind":"struct"},"17:12687:4084":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:7578:5856":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:16507:4197":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:15864:4696":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:15739:4667":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:11527:3947":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:5044:7180":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:9215:5704":{"crate_id":5,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:9193:2986":{"crate_id":5,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:3470:2841":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"17:11788:3969":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:8501:5790":{"crate_id":5,"path":["std","io","util","Sink"],"kind":"struct"},"5:1621:2534":{"crate_id":5,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:32713:3094":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"6:8319:7851":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:11432:21256":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:2748:4998":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:10597:3756":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"7:0:1923":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:16159:4792":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:7337:5283":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:8014:7824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:12432:420":{"crate_id":5,"path":["std","bool"],"kind":"primitive"},"17:15160:4469":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:1083:2998":{"crate_id":5,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:7969:5396":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:44788:6291":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:46837:6378":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:15939:4718":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:4964:7138":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:4896:14143":{"crate_id":5,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:8209:5744":{"crate_id":5,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:11358:21254":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:11789:6121":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:14084:4260":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"18:635:3728":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:6564:7533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:13209:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:12435:1893":{"crate_id":5,"path":["std","unit"],"kind":"primitive"},"11:1907:5572":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:2551:2733":{"crate_id":5,"path":["std","io"],"kind":"module"},"5:9326:32495":{"crate_id":5,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:4812:14095":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:8804:6244":{"crate_id":5,"path":["std","path","State"],"kind":"enum"},"1:4497:110":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:22880:13781":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:12163:4010":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:6173:5085":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:6544:7517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:32745:115":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:46579:6350":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"4:4208:2987":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:7774:5923":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:13028:4123":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:12776:4091":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:4938:14108":{"crate_id":5,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"9:480:20155":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:6843:5204":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:1667:7007":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:43363:3277":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:13994:6147":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:988:2996":{"crate_id":5,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:6708:5714":{"crate_id":5,"path":["std","sync","once","OnceState"],"kind":"struct"},"4:7798:243":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"17:11448:3937":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:3987:3809":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"1:21919:3159":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:12359:4036":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"11:2380:2986":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:3522:2846":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:3665:32456":{"crate_id":5,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"18:538:3712":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"4:3931:2890":{"crate_id":4,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:13945:4231":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:10442:21240":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:5349:7272":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:13349:4142":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:22843:8468":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"4:7528:2886":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"5:879:2986":{"crate_id":5,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:44163:6208":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"4:4328:3524":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:14327:4320":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:14963:4434":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"4:5570:13974":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"5:982:2995":{"crate_id":5,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"4:5834:2896":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:3349:5671":{"crate_id":5,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:12524:4071":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:44441:6272":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:8263:2716":{"crate_id":5,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:12122:4007":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:22965:13774":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:6914:5212":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:46425:6334":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"5:946:2890":{"crate_id":5,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"5:8279:5749":{"crate_id":5,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:12234:4018":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"18:563:3714":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"11:1900:5571":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:8492:3750":{"crate_id":5,"path":["std","io","util","Empty"],"kind":"struct"},"17:14031:4247":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:14845:4416":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:6191:6071":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:13181:4130":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:23531:6191":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:42865:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:3290:2818":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"16:7350:5285":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:4890:7104":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:8008:7822":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:14416:4334":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:15981:4727":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:6770:7615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"17:10487:21241":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"1:13238:8620":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:11319:34690":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:12409:21349":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:47257:6421":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:46550:6349":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:41161:6214":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:41105:6210":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:14375:4330":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:1521:6904":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:47302:6422":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:12446:763":{"crate_id":5,"path":["std","f64"],"kind":"primitive"},"6:5658:7412":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:4:1271":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"6:6666:7581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"11:2121:2998":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:43627:3004":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:47082:6387":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"17:14807:4411":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:7753:3353":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:5375:7283":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:14821:4413":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:6507:7503":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:13385:4144":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:10709:3005":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:12458:977":{"crate_id":5,"path":["std","isize"],"kind":"primitive"},"17:11592:3886":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:15876:4697":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:4330:14116":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:7259:5277":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:10669:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:45324:6311":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:5305:3793":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:10564:3755":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:12095:4005":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:46372:6331":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:41133:134":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:10660:5838":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:12438:335":{"crate_id":5,"path":["std","array"],"kind":"primitive"},"17:14460:4342":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:14640:4368":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:8101:2959":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"16:7223:5265":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:44709:6285":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:46681:6356":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:3325:2844":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:8345:3092":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:6084:5072":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:14612:4364":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:12973:6133":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:11065:3921":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:40735:3339":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:7009:7885":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:14055:4249":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:8482:178":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:14335:4322":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:10462:3272":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:5682:7424":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:9347:5851":{"crate_id":5,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:3697:2850":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:33609:2822":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:42350:6236":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:3481:2709":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:5533:7354":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:8302:7846":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:16750:4944":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:6305:6072":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:1632:6982":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:472:3766":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:21987:26920":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:13041:4124":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"6:4929:7124":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:5319:7266":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:2146:8482":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:12149:4009":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:11706:3959":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:908:3764":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:44359:6271":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:2590:4991":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:12897:4106":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:13172:8300":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:10409:144":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"5:6879:5719":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"5:8361:5751":{"crate_id":5,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"0:153:2397":{"crate_id":0,"path":["fastrand","Rng"],"kind":"struct"},"1:41063:6208":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:5298:438":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:11345:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:41152:6070":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:7752:3352":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"6:5676:7421":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:5648:7411":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:2477:8457":{"crate_id":5,"path":["std","fs","metadata"],"kind":"function"},"17:16218:4807":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:12952:4112":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:8028:5398":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:506:3768":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:23221:26182":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:12444:744":{"crate_id":5,"path":["std","f16"],"kind":"primitive"},"5:8627:7860":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:10460:3271":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:47513:6431":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:12976:4114":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:3848:14089":{"crate_id":5,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:3691:147":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:11691:3958":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:10450:3267":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"17:14859:4417":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:40040:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:47689:6461":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:8151:5029":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"18:608:3722":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:12550:4074":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:7014:3635":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:10454:3269":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"10:0:2798":{"crate_id":10,"path":["adler"],"kind":"module"},"1:41635:5713":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:5477:7342":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:12108:4006":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:42515:3121":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"11:772:2988":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"11:1085:34649":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:7414:7728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:47180:6420":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:5265:7241":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:15836:4688":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:22709:13777":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"5:5863:220":{"crate_id":5,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:1867:5655":{"crate_id":5,"path":["std","env","Vars"],"kind":"struct"},"17:16198:4804":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:9742:139":{"crate_id":5,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:14708:4378":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:44309:6118":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"4:6578:13993":{"crate_id":4,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:41036:6206":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"17:14346:4325":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:9584:5658":{"crate_id":5,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:12347:4035":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:11465:3940":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"5:9436:3524":{"crate_id":5,"path":["std","sync","poison","Guard"],"kind":"struct"},"6:1684:7014":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:1539:6915":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:3304:33879":{"crate_id":5,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:9367:5856":{"crate_id":5,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"18:581:3159":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:2840:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:16019:4735":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:13818:4211":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:4473:6061":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:5025:7170":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:42450:2986":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:3001:258":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"17:10928:3919":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:15769:4672":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:34467:2830":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:3731:2855":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:16701:4929":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"4:6178:13983":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:46410:6333":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:15812:4680":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:1869:5656":{"crate_id":5,"path":["std","env","VarsOs"],"kind":"struct"},"17:11653:3955":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"11:2148:3000":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:485:6829":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:6535:220":{"crate_id":5,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:9909:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:15655:4647":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:5641:7408":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:3317:2842":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:13854:4216":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:12456:1865":{"crate_id":5,"path":["std","u64"],"kind":"primitive"},"1:47548:6434":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:45215:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"15:288:20260":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"4:7637:2534":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:10780:5674":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"6:1569:6934":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:6984:5030":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:10823:3765":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:47650:6445":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:39888:2857":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:12018:3988":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:44815:6138":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"14:187:20248":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:43884:6112":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:46970:6383":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"5:5473:203":{"crate_id":5,"path":["std","path","Path"],"kind":"struct"},"17:11401:3933":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:22894:8468":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1:46920:6381":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:15829:4687":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:6018:3524":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"5:3445:5675":{"crate_id":5,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"5:0:1733":{"crate_id":5,"path":["std"],"kind":"module"},"1:2713:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:7358:5020":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:42362:5683":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:3039:3523":{"crate_id":5,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:12260:21348":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"4:4298:3524":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:11335:6523":{"crate_id":5,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:47053:6386":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"17:12736:4088":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:41083:6209":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:14750:4399":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"4:3268:101":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:11309:3926":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:12225:4017":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:47522:6432":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:4875:7097":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:15989:4729":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"4:2148:5750":{"crate_id":4,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"12:0:2800":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:6822:21171":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:44218:6263":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:4873:5049":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:46273:6321":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:11734:6119":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:6114:3524":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:7959:5395":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:5051:7182":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"9:53:7985":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:12759:8622":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:14043:4248":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"11:2440:2892":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:46710:6357":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:6098:5076":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:7716:34678":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:3347:5670":{"crate_id":5,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:39968:2845":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:13854:6145":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"17:11757:21277":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:13448:120":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:3320:2843":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"5:9499:3009":{"crate_id":5,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:5301:7260":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:8292:8547":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:41669:6092":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:40130:2849":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"4:2173:5900":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:2612:8469":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"6:7368:7709":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:9359:5853":{"crate_id":5,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:5441:7318":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:8546:5461":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:44565:6277":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:47376:6424":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:7883:5123":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:23294:26190":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"4:1230:32441":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:7212:5264":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:10031:21227":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:4146:14092":{"crate_id":5,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:5482:7344":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:11804:7874":{"crate_id":5,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:4902:5050":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:3441:5035":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:6691:7589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:47405:6425":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:11041:33173":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"10:44:5580":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:7521:5311":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:23156:6155":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:505:3512":{"crate_id":5,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:2640:4993":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:11803:6122":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"4:5424:3602":{"crate_id":4,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"1:23509:6189":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"6:5570:7373":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:13970:4234":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:13969:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"5:7842:32496":{"crate_id":5,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"5:11798:7873":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:41123:6212":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:9433:3118":{"crate_id":1,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"1:22791:13779":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"11:2228:3993":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:11817:6123":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:10729:3760":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:22066:13694":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:12335:6125":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:4915:2972":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:5357:7273":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"5:6822:5715":{"crate_id":5,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:5680:114":{"crate_id":5,"path":["std","process","Command"],"kind":"struct"},"16:8669:5364":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:3716:29226":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"4:297:2887":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"4:780:250":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:4346:14118":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:11678:3957":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:5734:5702":{"crate_id":5,"path":["std","process","Stdio"],"kind":"struct"},"17:13662:4170":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:12583:4076":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"4:789:119":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:8179:5404":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:10696:3759":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:14148:3533":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:44918:6139":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:31035:2883":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:8043:34675":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"11:2495:20230":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"1:42978:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"4:7692:2888":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"4:6711:2892":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:46211:6313":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:4997:7154":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:42162:170":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:44097:6252":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"4:1586:2989":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:3493:14076":{"crate_id":5,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"18:521:25438":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"4:1487:100":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:46358:6330":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:13218:6106":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:41184:6073":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:8209:5017":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:40820:3348":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:44673:8635":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:5449:5067":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:6700:7595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:41628:6090":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"5:8556:3761":{"crate_id":5,"path":["std","io","Bytes"],"kind":"struct"},"1:44208:6262":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:41659:3636":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:6588:5153":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"1:43392:5433":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:42554:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"17:11733:21276":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"4:889:3573":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:11281:3925":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"11:0:2799":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:34640:2831":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:3005:257":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:23328:6175":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"11:671:2986":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"18:706:3741":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:45298:6310":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"18:735:25436":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:2084:197":{"crate_id":5,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:9313:116":{"crate_id":5,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"5:12401:8004":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:8204:5743":{"crate_id":5,"path":["std","fs","ReadDir"],"kind":"struct"},"17:15010:4448":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:6738:34677":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:15475:4614":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:12570:4075":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:42754:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:43652:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:9754:3554":{"crate_id":5,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"5:437:185":{"crate_id":5,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:11902:3980":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:10368:21237":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:15573:4627":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:11016:3920":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"11:854:2995":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"18:698:3739":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:523:6853":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:10861:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:43867:7902":{"crate_id":1,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"1:44555:6276":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:8697:5687":{"crate_id":5,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:8827:5831":{"crate_id":5,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:8756:5828":{"crate_id":5,"path":["std","path","Prefix"],"kind":"enum"},"1:2149:8457":{"crate_id":1,"path":["core","ptr","metadata","metadata"],"kind":"function"},"6:5450:7324":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"5:8034:3068":{"crate_id":5,"path":["std","thread","ThreadId"],"kind":"struct"},"18:0:2805":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:16832:4233":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:3249:2881":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:40080:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:532:6859":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:44583:6135":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:6658:5172":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:15753:4670":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:8252:128":{"crate_id":5,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:13095:4125":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:15286:4471":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:4810:5047":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:11475:21257":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"16:6749:4970":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:16385:4850":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:11539:3948":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"4:7645:2534":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"4:3720:2987":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:47597:6442":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"18:643:3705":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:1514:6901":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:11421:3936":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:2343:5930":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:5295:7257":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:12762:4090":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"4:5300:3600":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"5:4411:5684":{"crate_id":5,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:40323:8490":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:7030:5225":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:4983:5053":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:8723:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"11:396:3507":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:11831:3948":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:43015:6110":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"5:7746:32523":{"crate_id":5,"path":["std","panicking","Hook"],"kind":"enum"},"16:7416:5290":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:40810:3347":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"5:4822:7720":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:14573:4359":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:12293:4027":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:4120:5039":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:2729:3515":{"crate_id":5,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"18:481:3703":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:45029:7910":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:2751:5668":{"crate_id":5,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:6704:5713":{"crate_id":5,"path":["std","sync","once","Once"],"kind":"struct"},"16:2920:5006":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:13890:4223":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:2736:113":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"17:13838:4212":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:13570:21247":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:5805:14170":{"crate_id":5,"path":["std","process","Termination"],"kind":"trait"},"5:3674:14049":{"crate_id":5,"path":["std","io","Seek"],"kind":"trait"},"4:7896:2891":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:12452:895":{"crate_id":5,"path":["std","i128"],"kind":"primitive"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:7765:5344":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:7577:7809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:8343:7856":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"11:1884:2534":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:4827:2968":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:32656:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:11958:3983":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"11:2349:3000":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"18:651:3705":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"4:7786:3601":{"crate_id":4,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:12989:6134":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:11864:3976":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"5:6432:5712":{"crate_id":5,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:7731:3116":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:11292:33171":{"crate_id":5,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"4:6927:3570":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:3239:118":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"16:8014:5027":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:6123:5015":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:4914:7118":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"7:79:20150":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:40847:3340":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:6502:20278":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:2530:4988":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:1838:8420":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"5:5541:129":{"crate_id":5,"path":["std","path","Display"],"kind":"struct"},"5:936:2892":{"crate_id":5,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:12052:3565":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"6:5471:7339":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:8882:5688":{"crate_id":5,"path":["std","path","Components"],"kind":"struct"},"5:8909:5837":{"crate_id":5,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:45274:6307":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:11427:5885":{"crate_id":5,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"5:12451:914":{"crate_id":5,"path":["std","i64"],"kind":"primitive"},"17:11818:3973":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:1690:7017":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:8739:14152":{"crate_id":5,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"4:3694:182":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"18:613:34697":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:44137:6257":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:6716:7601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:23432:6182":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"17:12191:4013":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:23476:6186":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"16:8612:5031":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:10443:120":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:43134:3270":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:6611:7559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:13942:26885":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:7431:7729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:9308:5846":{"crate_id":5,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:5111:14141":{"crate_id":5,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:44198:6261":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:6970:5013":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"5:597:3063":{"crate_id":5,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:10983:5744":{"crate_id":5,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:43635:6242":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:11135:3641":{"crate_id":1,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"17:2378:21304":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:42475:3116":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"17:14832:4414":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:14975:4436":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:7075:21173":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:2645:5667":{"crate_id":5,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:3613:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:32638:2969":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"5:8094:14000":{"crate_id":5,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:8519:14050":{"crate_id":5,"path":["std","io","SeekFrom"],"kind":"enum"},"1:11584:6115":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:2222:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:6731:5193":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:11088:33140":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:12454:1853":{"crate_id":5,"path":["std","u16"],"kind":"primitive"},"6:5428:7308":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:7168:5252":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:2437:3781":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:8041:3750":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:6487:3537":{"crate_id":5,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:7044:5018":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:8137:5028":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:44590:3340":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:41246:6082":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:40150:6199":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:11696:6118":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:3684:14069":{"crate_id":5,"path":["std","io","BufRead"],"kind":"trait"},"1:3686:254":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:2227:3774":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:7308:7676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:16377:4847":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:11383:7866":{"crate_id":5,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:6302:5104":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:23498:6188":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"5:2495:14041":{"crate_id":5,"path":["std","fs","canonicalize"],"kind":"function"},"1:4946:2973":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:7391:7727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:11515:3944":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:5172:5058":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:10235:3285":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:15701:4653":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:4758:2960":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:23341:6176":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:41175:6217":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"4:7601:2534":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:11492:5630":{"crate_id":5,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:41008:8522":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:16761:4945":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"6:479:6827":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:41193:6218":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"11:1005:2998":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:15410:4574":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:2840:5002":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:11073:5702":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:1969:3524":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"11:1893:2890":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:5520:7353":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"5:3402:5673":{"crate_id":5,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:44116:6255":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:6188:5087":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:6408:5119":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:42537:3302":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:10332:21236":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:14917:4427":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:10803:3761":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:42441:173":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"16:5757:5070":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:11932:5681":{"crate_id":5,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:6598:186":{"crate_id":5,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:7462:5301":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"4:7718:3070":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"4:6125:72":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"6:7448:7734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:4837:2969":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"17:16613:4211":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:44545:5803":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"16:4844:5048":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:10994:5858":{"crate_id":5,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"5:2328:3623":{"crate_id":5,"path":["std","fs","read"],"kind":"function"},"1:38730:2838":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:6443:7471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:9771:128":{"crate_id":5,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:41650:5676":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:12992:4116":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:3967:2892":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:2992:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"17:11503:3943":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"1:47533:6433":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:10456:3270":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:6808:5010":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"4:2348:31929":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:8273:7839":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:4605:2976":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:8258:2985":{"crate_id":5,"path":["std","hash","random","RandomState"],"kind":"struct"},"6:5151:7199":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:5088:7194":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:45211:164":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:5007:7161":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:8261:7837":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:1589:6948":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:2710:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"17:13205:4132":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"11:708:2991":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:11026:34687":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:4842:7073":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:44740:6289":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:33397:2819":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"17:15973:4726":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:15896:4704":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:10777:5672":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"16:8298:5418":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:12950:6132":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:0:1013":{"crate_id":6,"path":["libc"],"kind":"module"},"6:1696:7018":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:12625:4077":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:2880:5004":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"18:689:3738":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:12008:3841":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:6904:5211":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:14483:4347":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:5689:5069":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:11161:3557":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:13554:4157":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"4:2295:7878":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:13266:21244":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"5:11318:3008":{"crate_id":5,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"6:1657:7001":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:9481:3008":{"crate_id":5,"path":["std","time","SystemTime"],"kind":"struct"},"6:1675:7008":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:5551:7365":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:16341:4843":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:6882:7644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"11:1064:20234":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:12826:4094":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:12743:6126":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"4:0:309":{"crate_id":4,"path":["alloc"],"kind":"module"},"1:22060:13691":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:5205:7214":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:13958:4233":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:7548:7793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:11173:34688":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"4:4163:3570":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:14393:4331":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:9185:5841":{"crate_id":5,"path":["std","process","ExitCode"],"kind":"struct"},"1:22078:6152":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:16209:4805":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:5196:7209":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:23243:6163":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:12816:3786":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:13427:4147":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"17:15431:4584":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"11:2566:2888":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:13398:4146":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:497:6833":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:586:6887":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:9400:6520":{"crate_id":5,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:43467:3278":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"6:5127:7197":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"4:3309:32438":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:12417:33132":{"crate_id":5,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:44037:6250":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:8226:5746":{"crate_id":5,"path":["std","fs","Permissions"],"kind":"struct"},"14:31:5555":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:11163:3923":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:11124:34691":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:4826:7724":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"5:2011:14032":{"crate_id":5,"path":["std","error","Indented"],"kind":"struct"},"17:15946:4719":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:8271:5748":{"crate_id":5,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:14933:4428":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:10516:21242":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"4:7537:2534":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:12920:4108":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:7016:5223":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:10390:226":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"6:559:6873":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:7647:3191":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:6440:21169":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:12941:4111":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:2435:20306":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:44250:6267":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:7386:5287":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:10246:21233":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:41056:6207":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"11:835:2993":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:22815:14051":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:8199:7834":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:14114:4272":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:47434:6426":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:12441:1831":{"crate_id":5,"path":["std","tuple"],"kind":"primitive"},"17:14072:4257":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"13:0:2795":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:3490:142":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:3072:226":{"crate_id":5,"path":["std","io","error","Result"],"kind":"type_alias"},"1:45266:6305":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:10534:3902":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"18:765:25437":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:5230:7225":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:5387:7287":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:32578:2809":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:46949:6382":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:0:510":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"16:6608:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:11222:3924":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:45287:26204":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"17:14019:4244":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:7471:5304":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:12249:4022":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"4:3851:5750":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"4:1577:2988":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:13491:4151":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:5139:7198":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:10661:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"6:5057:7184":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:12445:747":{"crate_id":5,"path":["std","f32"],"kind":"primitive"},"15:394:20270":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"16:6421:4965":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:5311:7263":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:43380:7901":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:40893:3342":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"6:6521:7504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:3141:3796":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:10095:8006":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:7899:3770":{"crate_id":5,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:12392:4039":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:13070:3923":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"16:8483:5455":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:12335:4034":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:8366:5752":{"crate_id":5,"path":["std","io","error","Custom"],"kind":"struct"},"6:5019:7167":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:4936:14106":{"crate_id":5,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:14997:4447":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:1711:7025":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:3720:3784":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:21956:26925":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:11516:2987":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:6337:5106":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:16494:4183":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:4893:2971":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"16:2415:20279":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:8296:7845":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:44277:3761":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:6018:5710":{"crate_id":5,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"5:1905:5657":{"crate_id":5,"path":["std","env","SplitPaths"],"kind":"struct"},"5:6893:3545":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:44176:6259":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"19:0:1306":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:6917:7669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:40942:3337":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:6823:7632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:8711:5477":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"11:1140:5568":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"11:2466:2890":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:14001:4243":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:16362:4846":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:31441:3159":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"11:2366:5577":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"5:12453:1871":{"crate_id":5,"path":["std","u8"],"kind":"primitive"},"11:1049:3000":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:44341:6270":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:44513:6275":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:14284:4311":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:43880:7903":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:47627:6444":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:7838:21177":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"5:680:5650":{"crate_id":5,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:42216:8555":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:14205:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:15418:4577":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:15997:4730":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:13014:4121":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:40782:26211":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:30773:3316":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"6:8267:7838":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:5366:7277":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"4:1627:210":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"4:1636:5898":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:6781:5196":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:1489:6891":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:13757:4197":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:3443:5674":{"crate_id":5,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:1639:5572":{"crate_id":5,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:16728:4938":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"6:7518:7776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:15919:4712":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:12711:4086":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:2620:4992":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:7919:5384":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:44261:6128":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"6:1703:7021":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:5379:5065":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:42610:2534":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"11:881:2997":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:45021:7908":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:7604:7815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:15315:4491":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:36689:2834":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:8199:3842":{"crate_id":5,"path":["std","fs","Metadata"],"kind":"struct"},"6:5622:7399":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:42828:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:14886:4421":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"5:8080:13999":{"crate_id":5,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"4:7259:3619":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:44395:6120":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:12044:3996":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:41621:6089":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:6437:7468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:1643:6990":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:7332:7693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:9201:5843":{"crate_id":5,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:11985:3985":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:2950:5007":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:7954:3552":{"crate_id":5,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:6777:7616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:16187:4799":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"4:5574:13975":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"5:628:13995":{"crate_id":5,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:46664:6355":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"4:6157:3600":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"5:8238:140":{"crate_id":5,"path":["std","fs","FileType"],"kind":"struct"},"18:515:3702":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"4:1123:3570":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:5318:5063":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:2479:14036":{"crate_id":5,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:14099:4266":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:22058:14051":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:7350:7700":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:15106:4458":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:10418:21239":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:11623:6116":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"4:7211:264":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"5:2332:14033":{"crate_id":5,"path":["std","fs","read_to_string"],"kind":"function"},"1:22496:26918":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:16786:4951":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:45059:131":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"5:5991:5709":{"crate_id":5,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:8549:5798":{"crate_id":5,"path":["std","io","Take"],"kind":"struct"},"5:9142:5838":{"crate_id":5,"path":["std","process","CommandArgs"],"kind":"struct"},"11:123:3503":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:6876:5208":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:2325:5664":{"crate_id":5,"path":["std","fs","DirEntry"],"kind":"struct"},"14:165:20241":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:21975:26917":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:12699:4085":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:6794:5197":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"17:11291:34684":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:33185:2820":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:957:2991":{"crate_id":5,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"4:985:3578":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:3768:2856":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:34149:2827":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"11:102:6801":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:10218:21232":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:22186:6152":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:3434:2853":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:10549:3903":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"4:929:3576":{"crate_id":4,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:8066:21178":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:7469:7740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:40060:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:11003:5745":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"16:3587:5036":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"16:5198:5059":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:16084:4779":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:7909:5733":{"crate_id":5,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:13286:8629":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:15621:4636":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:5488:7345":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:7463:7739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:40955:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:2968:14051":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:10977:34689":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:43446:138":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:43353:7893":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:14125:116":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"5:6950:233":{"crate_id":5,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:47008:6385":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"16:4184:5041":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"11:430:34654":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:22484:6151":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"14:40:4198":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:4921:7122":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:22970:13772":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"5:4994:3525":{"crate_id":5,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:41205:6079":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:6042:5014":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:5348:5064":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":30}