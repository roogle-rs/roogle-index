{"root":"0:0:2541","crate_version":"2.1.0","includes_private":false,"index":{"0:42:2448":{"id":"0:42:2448","crate_id":0,"name":"alphabetic","span":{"filename":"src/global_rng.rs","begin":[90,0],"end":[92,1]},"visibility":"public","docs":"Generates a random `char` in ranges a-z and A-Z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3002:1809":{"id":"1:3002:1809","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42210:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2972:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2717:2704":{"id":"1:2717:2704","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[134,0],"end":[139,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2731:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:75:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:13:2369":{"id":"0:13:2369","crate_id":0,"name":"global_rng","span":{"filename":"src/global_rng.rs","begin":[1,0],"end":[218,1]},"visibility":"crate","docs":"A global, thread-local random number generator.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:36:2429","0:38:2502","0:40:417","0:42:2448","0:44:2453","0:46:2498","0:48:2532","0:50:2451","0:53:2459","0:55:2512","0:122:1852","0:124:909","0:126:1834","0:128:891","0:130:1840","0:132:897","0:134:1846","0:136:903","0:138:1828","0:140:884","0:142:1912","0:144:966","0:146:471","0:59:738","0:61:754","0:63:2476"],"is_stripped":true}}},"1:13296:25796":{"id":"1:13296:25796","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13297:25798"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44243:6320","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2541":{"id":"0:0:2541","crate_id":0,"name":"fastrand","span":{"filename":"src/lib.rs","begin":[1,0],"end":[696,1]},"visibility":"public","docs":"A simple and fast random number generator.\n\nThe implementation uses [Wyrand](https://github.com/wangyi-fudan/wyhash), a simple and fast\ngenerator but **not** cryptographically secure.\n\n# Examples\n\nFlip a coin:\n\n```\nif fastrand::bool() {\n    println!(\"heads\");\n} else {\n    println!(\"tails\");\n}\n```\n\nGenerate a random `i32`:\n\n```\nlet num = fastrand::i32(..);\n```\n\nChoose a random element in an array:\n\n```\nlet v = vec![1, 2, 3, 4, 5];\nlet i = fastrand::usize(..v.len());\nlet elem = v[i];\n```\n\nSample values from an array with `O(n)` complexity (`n` is the length of array):\n\n```\nfastrand::choose_multiple(vec![1, 4, 5].iter(), 2);\nfastrand::choose_multiple(0..20, 12);\n```\n\n\nShuffle an array:\n\n```\nlet mut v = vec![1, 2, 3, 4, 5];\nfastrand::shuffle(&mut v);\n```\n\nGenerate a random [`Vec`] or [`String`]:\n\n```\nuse std::iter::repeat_with;\n\nlet v: Vec<i32> = repeat_with(|| fastrand::i32(..)).take(10).collect();\nlet s: String = repeat_with(fastrand::alphanumeric).take(10).collect();\n```\n\nTo get reproducible results on every run, initialize the generator with a seed:\n\n```\n// Pick an arbitrary number as seed.\nfastrand::seed(7);\n\n// Now this prints the same number on every run:\nprintln!(\"{}\", fastrand::u32(..));\n```\n\nTo be more efficient, create a new [`Rng`] instance instead of using the thread-local\ngenerator:\n\n```\nuse std::iter::repeat_with;\n\nlet mut rng = fastrand::Rng::new();\nlet mut bytes: Vec<u8> = repeat_with(|| rng.u8(..)).take(10_000).collect();\n```\n\nThis crate aims to expose a core set of useful randomness primitives. For more niche algorithms,\nconsider using the [`fastrand-contrib`] crate alongside this one.\n\n# Features\n\n- `std` (enabled by default): Enables the `std` library. This is required for the global\n  generator and global entropy. Without this feature, [`Rng`] can only be instantiated using\n  the [`with_seed`](Rng::with_seed) method.\n- `js`: Assumes that WebAssembly targets are being run in a JavaScript environment. See the\n  [WebAssembly Notes](#webassembly-notes) section for more information.\n\n# WebAssembly Notes\n\nFor non-WASI WASM targets, there is additional sublety to consider when utilizing the global RNG.\nBy default, `std` targets will use entropy sources in the standard library to seed the global RNG.\nHowever, these sources are not available by default on WASM targets outside of WASI.\n\nIf the `js` feature is enabled, this crate will assume that it is running in a JavaScript\nenvironment. At this point, the [`getrandom`] crate will be used in order to access the available\nentropy sources and seed the global RNG. If the `js` feature is not enabled, the global RNG will\nuse a predefined seed.\n\n[`fastrand-contrib`]: https://crates.io/crates/fastrand-contrib\n[`getrandom`]: https://crates.io/crates/getrandom","links":{"`Rng`":"0:148:2371","Rng::with_seed":"0:90:2373","`Vec`":"4:7066:264"},"attrs":["#![no_std]","#![forbid(unsafe_code)]","#![warn(missing_docs, missing_debug_implementations, rust_2018_idioms)]","#![doc(html_favicon_url =\n\"https://raw.githubusercontent.com/smol-rs/smol/master/assets/images/logo_fullsize_transparent.png\")]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/smol-rs/smol/master/assets/images/logo_fullsize_transparent.png\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:148:2371","0:73-0:13:2369"],"is_stripped":false}}},"0:22:1178":{"id":"0:22:1178","crate_id":0,"name":"new","span":{"filename":"src/global_rng.rs","begin":[25,4],"end":[27,5]},"visibility":"public","docs":"Creates a new random number generator.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Rng","id":"0:148:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2998-0:148:2371":{"id":"b:1:2998-0:148:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2972:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2968:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3001:137","1:3002:1809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13354:31484":{"id":"1:13354:31484","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12955:8618","`DoubleEndedIterator`":"1:8333:129","prim@char":"5:12346:471","str::match_indices":"1:13351:31483"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44137:6316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12976:8624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3007:1807":{"id":"1:3007:1807","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42210:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2972:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3003-0:148:2371":{"id":"b:1:3003-0:148:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2962:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2972:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3006:137","1:3007:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:96:417":{"id":"0:96:417","crate_id":0,"name":"bool","span":{"filename":"src/lib.rs","begin":[342,4],"end":[344,5]},"visibility":"public","docs":"Generates a random `bool`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:158:909":{"id":"0:158:909","crate_id":0,"name":"i8","span":{"filename":"src/lib.rs","begin":[419,4],"end":[425,5]},"visibility":"public","docs":"Generates a random `i8` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i8"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i8>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153":{"id":"0:153","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,16],"end":[131,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32311:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13304:30040":{"id":"1:13304:30040","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"5:12346:471","self::pattern":"1:12955:8618"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13321:25792":{"id":"1:13321:25792","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"5:12346:471","self::pattern":"1:12955:8618"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12770:6153","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13327:31480":{"id":"1:13327:31480","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12955:8618","str::split":"1:13318:30029","prim@char":"5:12346:471","`DoubleEndedIterator`":"1:8333:129","str::rsplit_terminator":"1:13330:31481"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44019:6313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13282:26687":{"id":"1:13282:26687","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13361:31487":{"id":"1:13361:31487","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13286:31476":{"id":"1:13286:31476","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"5:12352:1722","str::slice_mut_unchecked":"1:13287:31477","crate::ops::Index":"1:39623:2820"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13294:6330":{"id":"1:13294:6330","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"5:12346:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43945:6311","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:2512":{"id":"0:108:2512","crate_id":0,"name":"shuffle","span":{"filename":"src/lib.rs","begin":[528,4],"end":[532,5]},"visibility":"public","docs":"Shuffles a slice randomly.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["slice",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13275:31475":{"id":"1:13275:31475","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13394:29924":{"id":"1:13394:29924","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1061:37502"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:741:25437":{"id":"4:741:25437","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5621:32201":{"id":"4:5621:32201","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:304:2862","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"4:304:2862","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130:1840":{"id":"0:130:1840","crate_id":0,"name":"u32","span":{"filename":"src/global_rng.rs","begin":[158,0],"end":[158,61]},"visibility":"public","docs":"Generates a random `u32` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u32>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5636:32204":{"id":"4:5636:32204","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"4:7652:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:738":{"id":"0:59:738","crate_id":0,"name":"f32","span":{"filename":"src/global_rng.rs","begin":[169,0],"end":[171,1]},"visibility":"public","docs":"Generates a random `f32` in range `0..1`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13269:31473":{"id":"1:13269:31473","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13345:2748":{"id":"1:13345:2748","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12955:8618","`DoubleEndedIterator`":"1:8333:129","prim@char":"5:12346:471","str::rmatches":"1:13348:31482"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44173:6317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:122:1852":{"id":"0:122:1852","crate_id":0,"name":"u8","span":{"filename":"src/global_rng.rs","begin":[154,0],"end":[154,59]},"visibility":"public","docs":"Generates a random `u8` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u8>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13351:31483":{"id":"1:13351:31483","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12955:8618","`DoubleEndedIterator`":"1:8333:129","prim@char":"5:12346:471","str::rmatch_indices":"1:13354:31484"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44119:6315","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42172:3112-0:148:2371":{"id":"a:1:42172:3112-0:148:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42172:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13330:31481":{"id":"1:13330:31481","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12955:8618","str::split":"1:13318:30029","prim@char":"5:12346:471","str::split_terminator":"1:13327:31480"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44037:6314","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12976:8624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13357:31485":{"id":"1:13357:31485","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13380:31493":{"id":"1:13380:31493","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:12346:471","self::pattern":"1:12955:8618"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2720:25432":{"id":"1:2720:25432","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50:2451":{"id":"0:50:2451","crate_id":0,"name":"choice","span":{"filename":"src/global_rng.rs","begin":[118,0],"end":[124,1]},"visibility":"public","docs":"Choose an item from an iterator at random.\n\nThis function may have an unexpected result if the `len()` property of the\niterator does not match the actual number of items in the iterator. If\nthe iterator is empty, this returns `None`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42077:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8295:165","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8295:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8295:165","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8386:2509","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:164:903":{"id":"0:164:903","crate_id":0,"name":"i64","span":{"filename":"src/lib.rs","begin":[443,4],"end":[449,5]},"visibility":"public","docs":"Generates a random `i64` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i64>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13392:29921":{"id":"1:13392:29921","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13291:30028":{"id":"1:13291:30028","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13290:30027"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42077:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99:754":{"id":"0:99:754","crate_id":0,"name":"f64","span":{"filename":"src/lib.rs","begin":[375,4],"end":[379,5]},"visibility":"public","docs":"Generates a random `f64` in range `0..1`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13284:26688":{"id":"1:13284:26688","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13298:31478":{"id":"1:13298:31478","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44223:5842","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13295:5770":{"id":"1:13295:5770","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43955:3824","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13398:8511":{"id":"1:13398:8511","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5023:8511"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44277:3406","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:113:471":{"id":"0:113:471","crate_id":0,"name":"char","span":{"filename":"src/lib.rs","begin":[642,4],"end":[695,5]},"visibility":"public","docs":"Generates a random `char` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<char>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:740:5934":{"id":"4:740:5934","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:13391:29920":{"id":"1:13391:29920","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32368:3181-0:148:2371":{"id":"a:1:32368:3181-0:148:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32368:3181","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13267:2524":{"id":"1:13267:2524","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,16],"end":[131,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2765:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:155:699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13374:30043":{"id":"1:13374:30043","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:12346:471","self::pattern":"1:12955:8618"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42077:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12976:8624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3001:137":{"id":"1:3001:137","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2972:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"1:13274:29910":{"id":"1:13274:29910","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12502:8625"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140:884":{"id":"0:140:884","crate_id":0,"name":"i128","span":{"filename":"src/global_rng.rs","begin":[163,0],"end":[163,63]},"visibility":"public","docs":"Generates a random `i128` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i128"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i128>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13318:30029":{"id":"1:13318:30029","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12955:8618","`DoubleEndedIterator`":"1:8333:129","prim@char":"5:12346:471","str::split_whitespace":"1:13296:25796","str::rsplit":"1:13324:30032"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43969:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13324:30032":{"id":"1:13324:30032","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12955:8618","`DoubleEndedIterator`":"1:8333:129","prim@char":"5:12346:471","str::split":"1:13318:30029"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43987:6156","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12976:8624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13359:31486":{"id":"1:13359:31486","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13377:31492":{"id":"1:13377:31492","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:12346:471","self::pattern":"1:12955:8618"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12976:8624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3830-0:148:2371":{"id":"b:1:3830-0:148:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32310:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3828:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3832:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3246:3354-0:148:2371":{"id":"a:1:3246:3354-0:148:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3246:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:98:738":{"id":"0:98:738","crate_id":0,"name":"f32","span":{"filename":"src/lib.rs","begin":[368,4],"end":[372,5]},"visibility":"public","docs":"Generates a random `f32` in range `0..1`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151":{"id":"0:151","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,9],"end":[131,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:152:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13300:26676":{"id":"1:13300:26676","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44261:6173","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13293:6174":{"id":"1:13293:6174","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"5:12346:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43939:6166","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:475":{"id":"0:75:475","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[136,4],"end":[138,5]},"visibility":"default","docs":"Clones the generator by creating a new generator with the same seed.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Rng","id":"0:148:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134:1846":{"id":"0:134:1846","crate_id":0,"name":"u64","span":{"filename":"src/global_rng.rs","begin":[160,0],"end":[160,61]},"visibility":"public","docs":"Generates a random `u64` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u64>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:180:1912":{"id":"0:180:1912","crate_id":0,"name":"usize","span":{"filename":"src/lib.rs","begin":[615,4],"end":[621,5]},"visibility":"public","docs":"Generates a random `usize` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<usize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:166:884":{"id":"0:166:884","crate_id":0,"name":"i128","span":{"filename":"src/lib.rs","begin":[451,4],"end":[457,5]},"visibility":"public","docs":"Generates a random `i128` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i128"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i128>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:2498":{"id":"0:46:2498","crate_id":0,"name":"lowercase","span":{"filename":"src/global_rng.rs","begin":[102,0],"end":[104,1]},"visibility":"public","docs":"Generates a random `char` in range a-z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132:897":{"id":"0:132:897","crate_id":0,"name":"i32","span":{"filename":"src/global_rng.rs","begin":[159,0],"end":[159,61]},"visibility":"public","docs":"Generates a random `i32` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i32>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:738-0:148:2371":{"id":"b:4:738-0:148:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2731:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:734:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:740:5934","4:741:25437","4:742:25438"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:156":{"id":"0:156","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,27],"end":[131,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2770:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:138:1828":{"id":"0:138:1828","crate_id":0,"name":"u128","span":{"filename":"src/global_rng.rs","begin":[162,0],"end":[162,63]},"visibility":"public","docs":"Generates a random `u128` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u128>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:2429":{"id":"0:104:2429","crate_id":0,"name":"seed","span":{"filename":"src/lib.rs","begin":[493,4],"end":[495,5]},"visibility":"public","docs":"Initializes this generator with the given seed.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["seed",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13393:29923":{"id":"1:13393:29923","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1061:37502"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2994:832":{"id":"1:2994:832","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13280:2488":{"id":"1:13280:2488","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42079:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42077:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2715-0:148:2371":{"id":"b:1:2715-0:148:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32310:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2709:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2717:2704"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/global_rng.rs","begin":[12,0],"end":[20,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3040:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Rng","id":"0:148:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:20:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:5640:31248":{"id":"4:5640:31248","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13392:29921"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2988-0:148:2371":{"id":"b:1:2988-0:148:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2965:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2962:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2991:3228"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13348:31482":{"id":"1:13348:31482","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12955:8618","`DoubleEndedIterator`":"1:8333:129","prim@char":"5:12346:471","str::matches":"1:13345:2748"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44191:6318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12976:8624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13390:29919":{"id":"1:13390:29919","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5638:8541":{"id":"4:5638:8541","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:7652:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:2532":{"id":"0:48:2532","crate_id":0,"name":"uppercase","span":{"filename":"src/global_rng.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Generates a random `char` in range A-Z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:2498":{"id":"0:102:2498","crate_id":0,"name":"lowercase","span":{"filename":"src/lib.rs","begin":[486,4],"end":[489,5]},"visibility":"public","docs":"Generates a random `char` in range a-z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13297:25798":{"id":"1:13297:25798","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13296:25796"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44252:6321","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5637:32205":{"id":"4:5637:32205","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"4:304:2862","`String`":"4:7652:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:304:2862","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"4:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2453":{"id":"0:44:2453","crate_id":0,"name":"alphanumeric","span":{"filename":"src/global_rng.rs","begin":[96,0],"end":[98,1]},"visibility":"public","docs":"Generates a random `char` in ranges a-z, A-Z and 0-9.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162:897":{"id":"0:162:897","crate_id":0,"name":"i32","span":{"filename":"src/lib.rs","begin":[435,4],"end":[441,5]},"visibility":"public","docs":"Generates a random `i32` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i32>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13365:31490":{"id":"1:13365:31490","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"5:12346:471","self::pattern":"1:12955:8618"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12981:8623","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:903":{"id":"0:136:903","crate_id":0,"name":"i64","span":{"filename":"src/global_rng.rs","begin":[161,0],"end":[161,61]},"visibility":"public","docs":"Generates a random `i64` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i64>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111:2532":{"id":"0:111:2532","crate_id":0,"name":"uppercase","span":{"filename":"src/lib.rs","begin":[633,4],"end":[636,5]},"visibility":"public","docs":"Generates a random `char` in range A-Z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13364:31489":{"id":"1:13364:31489","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5639:31247":{"id":"4:5639:31247","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13391:29920"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13342:30039":{"id":"1:13342:30039","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42077:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12976:8624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5620":{"id":"4:5620","crate_id":4,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["4:5621:32201","4:5622:2676","4:5625:32202","4:5628:32203","4:5636:32204","4:5637:32205","4:5638:8541","4:5639:31247","4:5640:31248"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13290:30027":{"id":"1:13290:30027","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13291:30028"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42077:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13314:3234":{"id":"1:13314:3234","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42079:191","prim@char":"5:12346:471","self::pattern":"1:12955:8618"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42077:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12976:8624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13339:30038":{"id":"1:13339:30038","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42077:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13399:31497":{"id":"1:13399:31497","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5020:31497"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44286:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13336:30036":{"id":"1:13336:30036","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"5:12346:471","str::splitn":"1:13333:30034","self::pattern":"1:12955:8618"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44091:6159","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12976:8624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13396:31496":{"id":"1:13396:31496","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5022:31496"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44268:3407","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3211:247-0:148:2371":{"id":"a:1:3211:247-0:148:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3211:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:105:2502":{"id":"0:105:2502","crate_id":0,"name":"get_seed","span":{"filename":"src/lib.rs","begin":[499,4],"end":[501,5]},"visibility":"public","docs":"Gives back **current** seed that is being held by this generator.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:2502":{"id":"0:38:2502","crate_id":0,"name":"get_seed","span":{"filename":"src/global_rng.rs","begin":[78,0],"end":[80,1]},"visibility":"public","docs":"Gives back **current** seed that is being held by the thread-local generator.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[289,0],"end":[696,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Rng","id":"0:148:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:90:2373","0:91:2446","0:92:2448","0:94:2453","0:96:417","0:97:2459","0:98:738","0:99:754","0:100:2476","0:158:909","0:160:891","0:162:897","0:164:903","0:166:884","0:168:966","0:102:2498","0:104:2429","0:105:2502","0:106:2451","0:108:2512","0:110:2515","0:170:1852","0:172:1834","0:174:1840","0:176:1846","0:178:1828","0:180:1912","0:111:2532","0:113:471"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:126:1834":{"id":"0:126:1834","crate_id":0,"name":"u16","span":{"filename":"src/global_rng.rs","begin":[156,0],"end":[156,61]},"visibility":"public","docs":"Generates a random `u16` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:742:25438":{"id":"4:742:25438","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:172:1834":{"id":"0:172:1834","crate_id":0,"name":"u16","span":{"filename":"src/lib.rs","begin":[566,4],"end":[572,5]},"visibility":"public","docs":"Generates a random `u16` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13363:31488":{"id":"1:13363:31488","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13278:3062":{"id":"1:13278:3062","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42079:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42077:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13371:30042":{"id":"1:13371:30042","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:12346:471","self::pattern":"1:12955:8618"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42077:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32309:237-0:148:2371":{"id":"a:1:32309:237-0:148:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32309:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13386:31495":{"id":"1:13386:31495","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12916:136","`FromStr`":"1:12915:8306"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42210:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12915:8306","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12915:8306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:110:2515":{"id":"0:110:2515","crate_id":0,"name":"fill","span":{"filename":"src/lib.rs","begin":[536,4],"end":[556,5]},"visibility":"public","docs":"Fill a byte slice with random data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["slice",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13301:3225":{"id":"1:13301:3225","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"5:12346:471","self::pattern":"1:12955:8618"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73-0:13:2369":{"id":"0:73-0:13:2369","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,22]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"global_rng","name":"global_rng","id":"0:13:2369","glob":true}}},"0:61:754":{"id":"0:61:754","crate_id":0,"name":"f64","span":{"filename":"src/global_rng.rs","begin":[174,0],"end":[176,1]},"visibility":"public","docs":"Generates a random `f64` in range `0..1`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13287:31477":{"id":"1:13287:31477","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"5:12352:1722","crate::ops::IndexMut":"1:3489:2821","str::slice_unchecked":"1:13286:31476"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:174:1840":{"id":"0:174:1840","crate_id":0,"name":"u32","span":{"filename":"src/lib.rs","begin":[574,4],"end":[580,5]},"visibility":"public","docs":"Generates a random `u32` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u32>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3006:137":{"id":"1:3006:137","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32233:2784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:13299:31479":{"id":"1:13299:31479","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44233:6319","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13307:30041":{"id":"1:13307:30041","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"5:12346:471","self::pattern":"1:12955:8618"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12976:8624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13310:3269":{"id":"1:13310:3269","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42079:191","prim@char":"5:12346:471","self::pattern":"1:12955:8618"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42077:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13389:29917":{"id":"1:13389:29917","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39978:8492","Self::is_ascii":"1:13388:29916"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42077:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39978:8492","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13388:29916":{"id":"1:13388:29916","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5622:2676":{"id":"4:5622:2676","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:7652:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:2512":{"id":"0:55:2512","crate_id":0,"name":"shuffle","span":{"filename":"src/global_rng.rs","begin":[138,0],"end":[140,1]},"visibility":"public","docs":"Shuffles a slice randomly.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13268:31472":{"id":"1:13268:31472","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:2446":{"id":"0:91:2446","crate_id":0,"name":"fork","span":{"filename":"src/lib.rs","begin":[322,4],"end":[324,5]},"visibility":"public","docs":"Clones the generator by deterministically deriving a new generator based on the initial\nseed.\n\nThis function can be used to create a new generator that is a \"spinoff\" of the old\ngenerator. The new generator will not produce the same sequence of values as the\nold generator.\n\n# Example\n\n```\n// Seed two generators equally, and clone both of them.\nlet mut base1 = fastrand::Rng::with_seed(0x4d595df4d0f33173);\nbase1.bool(); // Use the generator once.\n\nlet mut base2 = fastrand::Rng::with_seed(0x4d595df4d0f33173);\nbase2.bool(); // Use the generator once.\n\nlet mut rng1 = base1.fork();\nlet mut rng2 = base2.fork();\n\nprintln!(\"rng1 returns {}\", rng1.u32(..));\nprintln!(\"rng2 returns {}\", rng2.u32(..));\n```","links":{},"attrs":["#[inline]","#[must_use = \"this creates a new instance of `Rng`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92:2448":{"id":"0:92:2448","crate_id":0,"name":"alphabetic","span":{"filename":"src/lib.rs","begin":[328,4],"end":[331,5]},"visibility":"public","docs":"Generates a random `char` in ranges a-z and A-Z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:148:2371":{"id":"0:148:2371","crate_id":0,"name":"Rng","span":{"filename":"src/lib.rs","begin":[132,0],"end":[132,20]},"visibility":"public","docs":"A random number generator.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:21","0:89","a:1:42171:3113-0:148:2371","a:1:3211:247-0:148:2371","a:1:3246:3354-0:148:2371","a:1:42172:3112-0:148:2371","a:1:32368:3181-0:148:2371","a:1:32309:237-0:148:2371","b:1:2718-0:148:2371","b:1:2988-0:148:2371","b:1:3830-0:148:2371","b:1:3003-0:148:2371","b:1:2998-0:148:2371","b:1:2992-0:148:2371","b:1:2715-0:148:2371","b:4:738-0:148:2371","0:151","0:153","0:156","0:154","0:19","0:74"]}}},"0:97:2459":{"id":"0:97:2459","crate_id":0,"name":"digit","span":{"filename":"src/lib.rs","begin":[352,4],"end":[365,5]},"visibility":"public","docs":"Generates a random digit in the given `base`.\n\nDigits are represented by `char`s in ranges 0-9 and a-z.\n\nPanics if the base is zero or greater than 36.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["base",{"primitive":"u32"}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124:909":{"id":"0:124:909","crate_id":0,"name":"i8","span":{"filename":"src/global_rng.rs","begin":[155,0],"end":[155,59]},"visibility":"public","docs":"Generates a random `i8` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i8"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i8>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13333:30034":{"id":"1:13333:30034","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"5:12346:471","self::pattern":"1:12955:8618","str::rsplitn":"1:13336:30036"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44073:6158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13383:31494":{"id":"1:13383:31494","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:12346:471","self::pattern":"1:12955:8618"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12976:8624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:2451":{"id":"0:106:2451","crate_id":0,"name":"choice","span":{"filename":"src/lib.rs","begin":[509,4],"end":[524,5]},"visibility":"public","docs":"Choose an item from an iterator at random.\n\nThis function may have an unexpected result if the `len()` property of the\niterator does not match the actual number of items in the iterator. If\nthe iterator is empty, this returns `None`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42077:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8295:165","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8295:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8295:165","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8386:2509","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2459":{"id":"0:53:2459","crate_id":0,"name":"digit","span":{"filename":"src/global_rng.rs","begin":[132,0],"end":[134,1]},"visibility":"public","docs":"Generates a random digit in the given `base`.\n\nDigits are represented by `char`s in ranges 0-9 and a-z.\n\nPanics if the base is zero or greater than 36.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["base",{"primitive":"u32"}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2992-0:148:2371":{"id":"b:1:2992-0:148:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2965:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2994:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:3832:1822":{"id":"1:3832:1822","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39792:6236","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:2429":{"id":"0:36:2429","crate_id":0,"name":"seed","span":{"filename":"src/global_rng.rs","begin":[72,0],"end":[74,1]},"visibility":"public","docs":"Initializes the thread-local generator with the given seed.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["seed",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40:417":{"id":"0:40:417","crate_id":0,"name":"bool","span":{"filename":"src/global_rng.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"Generates a random `bool`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:891":{"id":"0:160:891","crate_id":0,"name":"i16","span":{"filename":"src/lib.rs","begin":[427,4],"end":[433,5]},"visibility":"public","docs":"Generates a random `i16` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i16"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13276:336":{"id":"1:13276:336","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13277:30006","`u8`":"5:12365:1852"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13266:997":{"id":"1:13266:997","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"5:12346:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21":{"id":"0:21","crate_id":0,"name":null,"span":{"filename":"src/global_rng.rs","begin":[22,0],"end":[28,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Rng","id":"0:148:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:22:1178"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:63:2476":{"id":"0:63:2476","crate_id":0,"name":"choose_multiple","span":{"filename":"src/global_rng.rs","begin":[179,0],"end":[181,1]},"visibility":"public","docs":"Collects `amount` values at random from the iterator into a vector.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["source",{"generic":"T"}],["amount",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"std::vec::Vec","id":"4:7066:264","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"","id":"1:8441:178","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8441:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13289:30024":{"id":"1:13289:30024","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13288:30023","str::split_at_mut_checked":"1:13291:30028"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2991:3228":{"id":"1:2991:3228","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2965:144"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:2453":{"id":"0:94:2453","crate_id":0,"name":"alphanumeric","span":{"filename":"src/lib.rs","begin":[335,4],"end":[338,5]},"visibility":"public","docs":"Generates a random `char` in ranges a-z, A-Z and 0-9.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:178:1828":{"id":"0:178:1828","crate_id":0,"name":"u128","span":{"filename":"src/lib.rs","begin":[590,4],"end":[596,5]},"visibility":"public","docs":"Generates a random `u128` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u128>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13288:30023":{"id":"1:13288:30023","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13290:30027","str::split_at_mut":"1:13289:30024"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:176:1846":{"id":"0:176:1846","crate_id":0,"name":"u64","span":{"filename":"src/lib.rs","begin":[582,4],"end":[588,5]},"visibility":"public","docs":"Generates a random `u64` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u64>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:146:471":{"id":"0:146:471","crate_id":0,"name":"char","span":{"filename":"src/global_rng.rs","begin":[166,0],"end":[166,63]},"visibility":"public","docs":"Generates a random `char` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<char>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:1852":{"id":"0:170:1852","crate_id":0,"name":"u8","span":{"filename":"src/lib.rs","begin":[558,4],"end":[564,5]},"visibility":"public","docs":"Generates a random `u8` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u8>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13368:31491":{"id":"1:13368:31491","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:12346:471","self::pattern":"1:12955:8618"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:142:1912":{"id":"0:142:1912","crate_id":0,"name":"usize","span":{"filename":"src/global_rng.rs","begin":[164,0],"end":[164,65]},"visibility":"public","docs":"Generates a random `usize` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<usize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:60":{"id":"0:20:60","crate_id":0,"name":"default","span":{"filename":"src/global_rng.rs","begin":[17,4],"end":[19,5]},"visibility":"default","docs":"Initialize the `Rng` from the system's random number generator.\n\nThis is equivalent to [`Rng::new()`].","links":{"`Rng::new()`":"0:22:1178"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Rng","id":"0:148:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:152:802":{"id":"0:152:802","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[131,9],"end":[131,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5625:32202":{"id":"4:5625:32202","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:7652:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5628:32203":{"id":"4:5628:32203","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:7652:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13271:31474":{"id":"1:13271:31474","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13269:31473"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168:966":{"id":"0:168:966","crate_id":0,"name":"isize","span":{"filename":"src/lib.rs","begin":[476,4],"end":[482,5]},"visibility":"public","docs":"Generates a random `isize` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"isize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"isize"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<isize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"isize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:144:966":{"id":"0:144:966","crate_id":0,"name":"isize","span":{"filename":"src/global_rng.rs","begin":[165,0],"end":[165,65]},"visibility":"public","docs":"Generates a random `isize` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"isize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"isize"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<isize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"isize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:128:891":{"id":"0:128:891","crate_id":0,"name":"i16","span":{"filename":"src/global_rng.rs","begin":[157,0],"end":[157,61]},"visibility":"public","docs":"Generates a random `i16` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i16"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3583:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:2476":{"id":"0:100:2476","crate_id":0,"name":"choose_multiple","span":{"filename":"src/lib.rs","begin":[390,4],"end":[417,5]},"visibility":"public","docs":"Collects `amount` values at random from the iterator into a vector.\n\nThe length of the returned vector equals `amount` unless the iterator\ncontains insufficient elements, in which case it equals the number of\nelements available.\n\nComplexity is `O(n)` where `n` is the length of the iterator.","links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"generic":"T"}],["amount",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Vec","id":"4:7066:264","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"","id":"1:8441:178","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8441:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13395:29925":{"id":"1:13395:29925","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1061:37502"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13277:30006":{"id":"1:13277:30006","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"5:12365:1852"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:699":{"id":"0:155:699","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[131,16],"end":[131,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Rng","id":"0:148:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:90:2373":{"id":"0:90:2373","crate_id":0,"name":"with_seed","span":{"filename":"src/lib.rs","begin":[293,4],"end":[295,5]},"visibility":"public","docs":"Creates a new random number generator with the initial seed.","links":{},"attrs":["#[inline]","#[must_use =\n\"this creates a new instance of `Rng`; if you want to initialize the thread-local generator, use `fastrand::seed()` instead\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["seed",{"primitive":"u64"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2718-0:148:2371":{"id":"b:1:2718-0:148:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32310:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2712:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2720:25432"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42171:3113-0:148:2371":{"id":"a:1:42171:3113-0:148:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42171:3113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13265":{"id":"1:13265","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13266:997","1:13267:2524","1:13268:31472","1:13269:31473","1:13271:31474","1:13274:29910","1:13275:31475","1:13276:336","1:13277:30006","1:13278:3062","1:13280:2488","1:13282:26687","1:13284:26688","1:13286:31476","1:13287:31477","1:13288:30023","1:13289:30024","1:13290:30027","1:13291:30028","1:13293:6174","1:13294:6330","1:13295:5770","1:13296:25796","1:13297:25798","1:13298:31478","1:13299:31479","1:13300:26676","1:13301:3225","1:13304:30040","1:13307:30041","1:13310:3269","1:13314:3234","1:13318:30029","1:13321:25792","1:13324:30032","1:13327:31480","1:13330:31481","1:13333:30034","1:13336:30036","1:13339:30038","1:13342:30039","1:13345:2748","1:13348:31482","1:13351:31483","1:13354:31484","1:13357:31485","1:13359:31486","1:13361:31487","1:13363:31488","1:13364:31489","1:13365:31490","1:13368:31491","1:13371:30042","1:13374:30043","1:13377:31492","1:13380:31493","1:13383:31494","1:13386:31495","1:13388:29916","1:13389:29917","1:13390:29919","1:13391:29920","1:13392:29921","1:13393:29923","1:13394:29924","1:13395:29925","1:13396:31496","1:13398:8511","1:13399:31497"],"negative":false,"synthetic":false,"blanket_impl":null}}}},"paths":{"16:6665:21172":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:15836:4897":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:43303:2979":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:1631:5613":{"crate_id":5,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"11:2301:2973":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"16:2788:5051":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:47252:6479":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:9147:5875":{"crate_id":5,"path":["std","process","ExitStatusError"],"kind":"struct"},"4:1549:2965":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"4:7617:5959":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:41983:25510":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:12107:3976":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:21723:27790":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"16:2548:5040":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:44137:6316":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:6542:7560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:12485:21364":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:23113:14052":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:33670:2801":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"4:6941:2871":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:4819:7765":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"4:7422:3645":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:43328:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:10661:3974":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:542:5009":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:1565:6977":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:1861:5697":{"crate_id":5,"path":["std","env","VarsOs"],"kind":"struct"},"6:5390:7335":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"18:96:25414":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:12361:891":{"crate_id":5,"path":["std","i16"],"kind":"primitive"},"5:9176:5878":{"crate_id":5,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"11:1105:5608":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:32275:6231":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"16:7379:34565":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:6721:7645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:8247:8549":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"18:643:3768":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"5:8802:5866":{"crate_id":5,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:6872:5317":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"4:6180:3588":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:9755:21214":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:5102:7238":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:10622:34576":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:14587:4506":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:46036:6373":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:4354:14120":{"crate_id":5,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:7168:5891":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:16235:4998":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"4:1559:2966":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:14752:4535":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:5250:7278":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"18:613:34587":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:13674:4325":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:43896:6306":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:1098:2975":{"crate_id":5,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:12887:4190":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:2572:5041":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:11230:34447":{"crate_id":5,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:9207:5879":{"crate_id":5,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:5981:3588":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:15596:4836":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:7111:5350":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:2010:785":{"crate_id":5,"path":["std","ffi"],"kind":"module"},"1:2956:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"5:11698:7916":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:6447:7515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:5638:5742":{"crate_id":5,"path":["std","process","ChildStderr"],"kind":"struct"},"17:14271:4455":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:22489:13781":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:2037:3837":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:43056:7947":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:46665:6427":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:6263:5200":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"11:2551:34537":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:5844:3601":{"crate_id":5,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:46486:6420":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"4:7573:3045":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:13437:4278":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:4981:3589":{"crate_id":5,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:47328:6488":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:4167:14096":{"crate_id":5,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:40502:3407":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:10759:3695":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"4:1493:2962":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:11113:3624":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:570:6921":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:44893:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"17:11227:4006":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:4725:2935":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"16:4614:5097":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:6374:3600":{"crate_id":5,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:6282:3593":{"crate_id":5,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:13731:6185":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:13538:4303":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:11428:5671":{"crate_id":5,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"6:5557:7414":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:3658:34452":{"crate_id":5,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:22232:27781":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"4:2127:5938":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:39978:8492":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:5960:5149":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:44073:6158":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:7516:7819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:1625:5612":{"crate_id":5,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:12470:8587":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:40830:6255":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:15635:4848":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:40892:6258":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:10954:21249":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:10943:5893":{"crate_id":5,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"5:623:13997":{"crate_id":5,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:42494:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:2972:257":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:3342:2807":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"17:13509:4292":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:7085:5344":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:8236:127":{"crate_id":5,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:3778:5084":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:3583:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:42130:3109":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"16:4531:5094":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:14246:4452":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"4:5474:13980":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"17:14131:4414":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:46515:6421":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:44965:27617":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"6:5423:7351":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:2770:134":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:10825:3697":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:13252:4244":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:43775:6295":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:6335:5234":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:45983:6366":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"4:5868:251":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"1:39640:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:13899:4383":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:5831:5130":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"11:698:2508":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:16151:4979":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"5:2318:3682":{"crate_id":5,"path":["std","fs","read"],"kind":"function"},"1:11321:6154":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:12478:4160":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:12659:4174":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"5:8210:5785":{"crate_id":5,"path":["std","fs","Permissions"],"kind":"struct"},"5:4303:34139":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"11:1884:2508":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:6026:5004":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"4:1340:2975":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:9342:5891":{"crate_id":5,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:44711:7956":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:15376:4762":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:2469:14037":{"crate_id":5,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:12621:4172":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"16:6456:21171":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:13785:4366":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:30658:2857":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:40509:3408":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:5046:7225":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:7857:5455":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:8259:5403":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:10922:7905":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"17:11405:4024":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:9886:21234":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"9:392:20157":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:44493:6176":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"4:5470:13979":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"6:6756:7656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:40711:6245":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:1827:8426":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"6:4870:7140":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"4:40:2864":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:11467:4029":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:11089:3996":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:2728:5048":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:11687:5772":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:6532:7553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:11755:4065":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"5:10652:3621":{"crate_id":5,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:23061:7935":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:5653:7455":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:11102:3997":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:10137:21215":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:10600:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"6:7561:7843":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:12949:3849":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"4:1369:2976":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:15616:4842":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:4886:14122":{"crate_id":5,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:39623:2820":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"17:9671:21217":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:4651:2660":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"4:3661:2961":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:7314:7724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"11:854:2970":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:47305:6487":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:30711:3343":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:568:3036":{"crate_id":5,"path":["std","thread","Packet"],"kind":"struct"},"1:44091:6159":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:15720:4870":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:21743:13698":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:5002:7204":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:5236:7272":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:6037:3591":{"crate_id":5,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:1481:156":{"crate_id":5,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"14:214:5601":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:1107:2976":{"crate_id":5,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:16165:4982":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"5:9160:5876":{"crate_id":5,"path":["std","process","ExitCode"],"kind":"struct"},"1:2221:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:0:1002":{"crate_id":6,"path":["libc"],"kind":"module"},"17:11324:4017":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:5260:7284":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:7397:34566":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:32310:3180":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"4:2302:29393":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:5837:220":{"crate_id":5,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:13972:4088":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:5335:204":{"crate_id":5,"path":["std","path","PathBuf"],"kind":"struct"},"1:39735:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:43928:6310":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:11688:4057":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"11:1580:5610":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"9:53:8029":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:26123:267":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:15931:4226":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"5:8476:3813":{"crate_id":5,"path":["std","io","util","Empty"],"kind":"struct"},"16:5722:5062":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:5107:5112":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:12683:4176":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"5:11936:5773":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:22927:6194":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:11518:3625":{"crate_id":5,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"16:4802:5102":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:5897:5136":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:8884:5872":{"crate_id":5,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:11634:4053":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:23183:6221":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"5:6199:220":{"crate_id":5,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:44707:7955":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:11769:3627":{"crate_id":5,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:1974:5701":{"crate_id":5,"path":["std","error","Report"],"kind":"struct"},"1:12693:6170":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:16138:4973":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"16:8301:5518":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"11:881:2972":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:40610:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:11583:4044":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:43562:6150":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:12572:3976":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:13173:4225":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:7780:26114":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:2355:5026":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:465:6862":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:7823:21178":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:43876:6304":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:8351:7901":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:11841:4078":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:8271:7882":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:5686:5057":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:15701:4865":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:4103:14092":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:40807:6108":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:47054:6467":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:8251:8548":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:3253:3356":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:21814:6190":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:9456:2983":{"crate_id":5,"path":["std","time","SystemTime"],"kind":"struct"},"5:8540:3824":{"crate_id":5,"path":["std","io","Bytes"],"kind":"struct"},"17:15992:4945":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"4:6421:13993":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"11:1601:5611":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:42096:173":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"5:11219:5875":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:6358:3597":{"crate_id":5,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:559:6916":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:42572:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:15342:4749":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:44544:8639":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:12647:4173":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"16:7144:21175":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:43097:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:45968:6365":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"11:685:2962":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:5083:7237":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:8188:5782":{"crate_id":5,"path":["std","fs","ReadDir"],"kind":"struct"},"1:42810:3336":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:578:6926":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"18:531:3772":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:3419:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:4913:2948":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:1098:3834":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:8300:7889":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:2203:3841":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:42338:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:1628:7025":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:15206:4716":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"4:7114:3678":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:44952:6350":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:8226:21180":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:44286:3405":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:3673:2827":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:46536:6422":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:871:2961":{"crate_id":5,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:256:3826":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"9:0:2772":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:5779:14170":{"crate_id":5,"path":["std","process","Termination"],"kind":"trait"},"6:5565:7416":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:43945:6311":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:11501:6160":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:3460:142":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"11:708:2966":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:3040:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"4:7558:2959":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"9:482:20155":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:2030:671":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"11:2533:6850":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:3401:2828":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:10710:3975":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:6342:34564":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:43784:6297":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:12371:1912":{"crate_id":5,"path":["std","usize"],"kind":"primitive"},"17:16105:4966":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"5:11704:7917":{"crate_id":5,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:6406:5753":{"crate_id":5,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:41817:170":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"11:1005:2973":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:2132:8485":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:7467:7783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:43143:3344":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"17:14977:4668":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"5:6678:5754":{"crate_id":5,"path":["std","sync","once","Once"],"kind":"struct"},"6:6788:7666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:9420:3111":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:43715:6293":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:43543:6292":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:14189:4440":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:44715:7957":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:6900:7701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:44191:6318":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:42077:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"16:4468:5092":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:7888:5459":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:44223:5842":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:44986:180":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:3529:5717":{"crate_id":5,"path":["std","io","util","Repeat"],"kind":"struct"},"1:44703:7954":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:8216:5511":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:12359:733":{"crate_id":5,"path":["std","f128"],"kind":"primitive"},"16:8175:5506":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:7648:5441":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:12768:21219":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:6317:5224":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"3:0:2769":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"17:15151:4703":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:13344:4266":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:39677:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:22710:13775":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"5:9411:3588":{"crate_id":5,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:32840:2795":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:22790:6191":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:5436:7361":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:14529:4497":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:23172:6220":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"5:5004:14106":{"crate_id":5,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"4:1581:210":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:32286:6232":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:3029:3859":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:14994:4670":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"5:5098:14142":{"crate_id":5,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:40931:6122":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:6867:3609":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"18:735:25423":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:40901:6120":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:6609:7602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:6718:3608":{"crate_id":5,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:14463:4490":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:4062:5089":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"4:1355:2974":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:8155:5505":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:22618:13784":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:3842:5086":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:11524:4033":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:5052:7227":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:40718:6246":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:6689:7632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:15301:4740":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:10317:3822":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"4:7492:2508":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:860:5018":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"6:6678:7629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:15138:4697":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:32369:3358":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:42789:3334":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"4:3648:182":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:8857:5729":{"crate_id":5,"path":["std","path","Components"],"kind":"struct"},"4:4938:217":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"17:15092:4691":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:33603:2803":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:43854:6302":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:10720:34578":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:10350:3823":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"4:883:3640":{"crate_id":4,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:2234:3844":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:7580:5437":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:6976:5326":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:36344:2809":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:379:3053":{"crate_id":5,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:2155:5965":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"11:123:3567":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:23194:6222":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:13116:4213":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:8317:7894":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"11:2366:5618":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:0:563":{"crate_id":1,"path":["core"],"kind":"module"},"1:42803:3335":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:3287:2818":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:8063:2934":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"17:14516:4496":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:10339:226":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"17:12543:4170":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:819:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"6:6811:7672":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:6977:3692":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:2612:5043":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:6777:6112":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"4:3292:5612":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"4:4322:2961":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:14560:4503":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:21665:27788":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"5:9403:3605":{"crate_id":5,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"11:2566:2863":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:43939:6166":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"17:14284:4457":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:6077:3588":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:43350:6290":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:11313:4015":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:14177:4438":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:40941:6259":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:2322:14034":{"crate_id":5,"path":["std","fs","read_to_string"],"kind":"function"},"4:7602:8535":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"11:1914:5614":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:21920:13695":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:6629:7610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:6796:5756":{"crate_id":5,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:11115:3999":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:7656:21177":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:4587:5096":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:3437:2816":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"5:11107:3623":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:7528:5432":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:15390:4764":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"15:327:8026":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:47025:6466":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:12362:897":{"crate_id":5,"path":["std","i32"],"kind":"primitive"},"5:11614:3055":{"crate_id":5,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"17:12150:4123":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:15473:4786":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:6047:5157":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:11206:5874":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:2609:8471":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1:40798:6105":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:485:6872":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:10903:5911":{"crate_id":5,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"6:5336:7314":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"1:22351:14052":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:44944:6348":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:8565:5845":{"crate_id":5,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:1663:7050":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:12707:4178":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:15058:4680":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:13855:4375":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:13553:4309":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:2374:5032":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:46295:6395":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:8386:2509":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:7799:5063":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:10185:3818":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"4:1478:2961":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:13577:6180":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"17:14091:4410":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:22445:13780":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:23161:6219":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"16:7509:5424":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:15273:4732":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:3067:137":{"crate_id":5,"path":["std","io","error","Error"],"kind":"struct"},"5:2485:14042":{"crate_id":5,"path":["std","fs","canonicalize"],"kind":"function"},"1:43358:6291":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"4:3040:29290":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:13235:4241":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:6782:21173":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"11:2148:2975":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:44596:6177":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"5:5654:113":{"crate_id":5,"path":["std","process","Command"],"kind":"struct"},"17:15814:4891":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:3206:117":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:40860:6117":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:11018:5743":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"17:11142:3976":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:40548:3409":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"17:12584:3977":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:10044:8050":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:4641:5098":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:44351:8638":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:5385:3960":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:16121:4971":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:10857:3701":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"11:671:2961":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:6799:14183":{"crate_id":5,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:10399:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"11:102:6844":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:4916:7165":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:4109:14091":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:41839:6136":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"16:8093:5497":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:5112:14143":{"crate_id":5,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:5415:7346":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:16050:4254":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:12076:4119":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:0:1714":{"crate_id":5,"path":["std"],"kind":"module"},"17:13308:4259":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:44119:6315":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:39715:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:8345:5790":{"crate_id":5,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:40882:6257":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:1613:2508":{"crate_id":5,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:7339:7742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"12:0:2775":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:6746:7649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"16:2998:5078":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"5:8036:3041":{"crate_id":5,"path":["std","thread","Thread"],"kind":"struct"},"17:13211:4240":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:8073:5496":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:23249:6227":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"5:4139:14093":{"crate_id":5,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:12443:4157":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:8604:5724":{"crate_id":5,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:11291:162":{"crate_id":5,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"4:3263:29874":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:22663:14052":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"5:12368:1846":{"crate_id":5,"path":["std","u64"],"kind":"primitive"},"17:11702:4058":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"5:500:3576":{"crate_id":5,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:21794:14052":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:5075:5111":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:34122:2805":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:6821:7675":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:6588:5254":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:9219:14188":{"crate_id":5,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:14788:4566":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"14:31:5596":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:2801:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:44889:164":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"4:7629:5961":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:2003:14033":{"crate_id":5,"path":["std","error","Indented"],"kind":"struct"},"11:1907:5613":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:6572:186":{"crate_id":5,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:1510:6944":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:11045:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:5307:5113":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:44687:7950":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:10524:3972":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:46760:6430":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"5:4223:14101":{"crate_id":5,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:16069:4959":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"16:2936:20307":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"4:7392:2508":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:5995:5151":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:5370:7326":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:30690:2858":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:10769:34577":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:12360:909":{"crate_id":5,"path":["std","i8"],"kind":"primitive"},"17:13325:4261":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:15434:4774":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:7389:7770":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:5415:5115":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:16223:4995":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:39655:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:11547:3904":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:6562:7576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:656:5688":{"crate_id":5,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:3395:5714":{"crate_id":5,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:44886:150":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"6:6478:7526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:6505:7546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:5306:7306":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:21655:3211":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:7348:7743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:12399:4151":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:11909:5922":{"crate_id":5,"path":["std","alloc","System"],"kind":"struct"},"5:10999:34449":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:46342:6398":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:6670:7627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:12313:8048":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:12724:21240":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:3204:2950":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"4:5733:2871":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:9731:3620":{"crate_id":5,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"5:10360:5901":{"crate_id":5,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"10:44:5621":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:8029:7876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:7366:7752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:43029:7939":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"5:963:2969":{"crate_id":5,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"4:2220:5939":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:3436:5715":{"crate_id":5,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:41314:3693":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"11:1564:20235":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:13412:4276":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:32311:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:44881:7958":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"17:12175:4125":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:6895:5318":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:12345:1174":{"crate_id":5,"path":["std","never"],"kind":"primitive"},"1:47180:6473":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:11419:3976":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:44903:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:22565:13783":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:5122:7240":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:2073:198":{"crate_id":5,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:8630:5843":{"crate_id":5,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:5314:7309":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:9556:5699":{"crate_id":5,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"4:6076:13988":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:4807:14096":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:8341:7899":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:5502:7395":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"10:0:2773":{"crate_id":10,"path":["adler"],"kind":"module"},"1:6154:6109":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:14260:4454":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:12863:4189":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:12433:4155":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"4:3410:2865":{"crate_id":4,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:14475:4491":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:3432:2815":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:15010:4671":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:4817:7763":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:13738:4354":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:13986:4397":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:7456:2508":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:6948:5066":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:4424:5091":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:5466:7382":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:10828:34573":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:2635:5708":{"crate_id":5,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:44418:6332":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:7695:5443":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:5671:7464":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:33737:2800":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:0:505":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:13941:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:10395:3335":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"18:563:3777":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:3297:33095":{"crate_id":5,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:4333:14118":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:40788:133":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:13473:4287":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"4:3039:5934":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:33804:2802":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:953:2967":{"crate_id":5,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"11:2420:2508":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:7485:7793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:44372:6323":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:11743:4062":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:11865:4080":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:4897:7152":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:46175:6389":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:22911:7932":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:6657:7623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:1517:6947":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:8753:3291":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"4:4481:3588":{"crate_id":4,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:11035:14052":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:9283:5881":{"crate_id":5,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:564:6918":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:675:5691":{"crate_id":5,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:42057:6141":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:8306:7890":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:10232:6271":{"crate_id":5,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:13568:4315":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:46359:6399":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:2748:5049":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:3677:14070":{"crate_id":5,"path":["std","io","BufRead"],"kind":"trait"},"4:6055:3662":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"1:22632:8471":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"17:12278:4136":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:4438:6099":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:23081:6214":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:44565:6340":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:11621:4051":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:5160:7243":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:40589:3411":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"16:6849:5316":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:23034:25468":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"5:4211:14098":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:45936:6363":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:2878:5055":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:986:2972":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:41871:8556":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:42691:6148":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:12530:4169":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"5:5168:14148":{"crate_id":5,"path":["std","panic","always_abort"],"kind":"function"},"5:5602:5740":{"crate_id":5,"path":["std","process","ChildStdin"],"kind":"struct"},"1:4462:109":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"16:4830:5103":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:39792:6236":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"5:12372:1419":{"crate_id":5,"path":["std","reference"],"kind":"primitive"},"11:2349:2975":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"4:2539:6752":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"18:718:3808":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:13774:4363":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:22527:13782":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:11016:3988":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"4:4436:265":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:1609:2961":{"crate_id":5,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:22198:13700":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"16:6927:5322":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:13497:4291":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:22843:6192":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:1859:5696":{"crate_id":5,"path":["std","env","Vars"],"kind":"struct"},"1:44252:6321":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:5700:5060":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:7429:7772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:43340:6286":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"11:2539:6851":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:32300:6233":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:40681:3686":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:2768:5050":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:10932:5783":{"crate_id":5,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:3329:5081":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:11010:5781":{"crate_id":5,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"6:6768:7658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"17:13766:4361":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:10393:3334":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"17:16198:4989":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"6:5477:7387":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:5286:29186":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:15039:4679":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:4325:14117":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:1699:7064":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:13959:4392":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:22193:14052":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"18:623:34589":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:6398:5056":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:928:2867":{"crate_id":5,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"4:3042:7922":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:15760:4881":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:46731:6429":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"17:10612:3973":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:7995:2680":{"crate_id":5,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:11647:5764":{"crate_id":5,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:5352:7316":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"5:11653:5921":{"crate_id":5,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:12976:8624":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:2495:14047":{"crate_id":5,"path":["std","fs","read_dir"],"kind":"function"},"17:14147:4419":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:1680:7057":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:7950:3618":{"crate_id":5,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:4940:5107":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:42161:3110":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:3592:5846":{"crate_id":5,"path":["std","io","Read"],"kind":"trait"},"11:299:6845":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:6461:3601":{"crate_id":5,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:47171:6472":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:13797:4368":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:41332:6132":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:10389:128":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:2595:672":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:11825:4076":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:2708:5047":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:13706:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:2936:2785":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:2134:8486":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"17:12808:4186":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:5489:7390":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:15102:4692":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:8271:5789":{"crate_id":5,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:10981:5720":{"crate_id":5,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"5:8503:14051":{"crate_id":5,"path":["std","io","SeekFrom"],"kind":"enum"},"17:10877:3978":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:8750:149":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:42105:2961":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"17:513:3832":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:5781:5061":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:7355:5383":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:42266:2508":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:45889:6356":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:40396:6238":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:10982:21250":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"4:7139:3681":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:43039:3343":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"11:430:34538":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:734:250":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:4572:2951":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"11:842:2969":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"11:2545:6852":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:6763:7657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:40848:6256":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:12362:4149":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:8136:5502":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:13015:4155":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:4942:7175":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:6698:7638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:40390:3406":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:3454:140":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:13606:4323":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:3925:5088":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:1485:6934":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:437:3831":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"4:4282:3588":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:16212:4993":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:34468:2808":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:42202:3046":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"17:15281:4733":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:39627:2822":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"4:3284:5614":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:2303:20279":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:44387:6328":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:11051:3991":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:10769:3041":{"crate_id":5,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"16:867:3826":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"4:6573:2867":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"5:11636:32656":{"crate_id":5,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"1:11190:2961":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:10039:26077":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:14545:4499":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:40486:3405":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:14436:4488":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:22551:14052":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"16:4976:5108":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:6441:7514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:12486:6164":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"9:447:20156":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:10962:139":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:32398:3357":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"17:13814:4371":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:32293:2944":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"6:8247:7878":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:1496:6939":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:5344:7315":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:22950:6199":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:1580:6989":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:13526:4300":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:5089:14141":{"crate_id":5,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:16269:4276":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"5:7881:3833":{"crate_id":5,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:42377:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:11487:6159":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:5817:5127":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:8265:7881":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:7359:7748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:39695:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:14575:4155":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:592:3038":{"crate_id":5,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:8659:7752":{"crate_id":5,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:5212:7264":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:9430:3612":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"4:5426:3634":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:12328:4139":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:2636:5044":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:40452:3412":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:22220:6189":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:23150:6218":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"4:3251:2961":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:46050:6374":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:5134:7241":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:11354:4021":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:1639:7033":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:44243:6320":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:13064:4206":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:9737:21216":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:11293:21269":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"5:9117:5873":{"crate_id":5,"path":["std","process","CommandArgs"],"kind":"struct"},"6:7412:7771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:14986:4669":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:13424:4277":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:3262:2798":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:21692:27796":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"4:7641:3663":{"crate_id":4,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"5:12297:5928":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:42210:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"5:11033:32666":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:6621:7609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:1089:2974":{"crate_id":5,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:8797:26040":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:12955:8618":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"17:11567:4038":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"5:3610:5719":{"crate_id":5,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:6412:21170":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:44578:6344":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:2342:5968":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"14:7:5596":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:816:8307":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"5:6509:220":{"crate_id":5,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"11:830:2965":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:6574:5076":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:16093:4964":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:5200:7257":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:8485:5829":{"crate_id":5,"path":["std","io","util","Sink"],"kind":"struct"},"1:47083:6468":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:41276:6127":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:12981:8623":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:7716:3419":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:3292:2819":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:11661:4055":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:6922:233":{"crate_id":5,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:12033:6163":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"5:8731:5863":{"crate_id":5,"path":["std","path","Prefix"],"kind":"enum"},"5:4694:14123":{"crate_id":5,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:12732:6172":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:12342:4144":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:14855:4621":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:12373:13":{"crate_id":5,"path":["std","fn"],"kind":"primitive"},"17:12318:3849":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:42171:3113":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:8328:7895":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:14111:4413":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:3899:5087":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:2067:1358":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"16:7052:5340":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:13904:3707":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:39805:6237":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:10419:3828":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:14051:4405":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:2313:138":{"crate_id":5,"path":["std","fs","File"],"kind":"struct"},"5:2780:5710":{"crate_id":5,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"18:670:3798":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:22975:6200":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:7014:21174":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:5376:7327":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:8259:7880":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:40747:5832":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:46228:6392":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"11:798:2867":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:47226:6477":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:44976:6353":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"5:9748:127":{"crate_id":5,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"16:4882:5105":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:2959:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"6:1503:6942":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:3738:2831":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:7755:5065":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:4153:14094":{"crate_id":5,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:10439:3962":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:22579:8471":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"4:7750:2866":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:45002:6354":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:8202:5077":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:7618:5438":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"4:7432:5954":{"crate_id":4,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"9:178:8039":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:11050:5876":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:23019:25476":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:9334:5888":{"crate_id":5,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:5617:7442":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:23216:6224":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"11:873:2971":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:3828:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"17:3597:3848":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:1954:3588":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"5:7409:3614":{"crate_id":5,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"18:0:2780":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:15456:4779":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:7729:32633":{"crate_id":5,"path":["std","panicking","Hook"],"kind":"enum"},"17:16187:4988":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"4:3258:5613":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:14341:4464":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:12300:21362":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:44037:6314":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:47367:6504":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:4487:5726":{"crate_id":5,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"18:651:3768":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"9:238:6286":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:12464:21363":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:12000:6162":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:39785:2824":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"4:7675:5963":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:10969:5900":{"crate_id":5,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"16:4743:5100":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:40663:8521":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:8333:129":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:3211:247":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"5:7994:14052":{"crate_id":5,"path":["std","sealed","Sealed"],"kind":"trait"},"17:12127:4122":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:40760:6248":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:38220:2810":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:43987:6156":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:10915:34579":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:8294:7888":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:11832:5722":{"crate_id":5,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:9984:21237":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"18:491:3767":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"18:598:34586":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:1526:6952":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:2467:7930":{"crate_id":5,"path":["std","fs","metadata"],"kind":"function"},"1:43068:5474":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:4821:3854":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:9857:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"11:328:6848":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:11788:4071":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:15624:4843":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:7428:21176":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:6385:5237":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:8636:5852":{"crate_id":5,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:11026:21251":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"5:1637:5614":{"crate_id":5,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:11063:3994":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"9:330:6857":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:15078:4688":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:2146:7928":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"4:5081:3588":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:4485:8512":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"4:1168:32288":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"18:521:25425":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:4986:3856":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"16:6802:5303":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:872:3827":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:43766:6294":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:4923:14107":{"crate_id":5,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:45951:6364":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:12043:4116":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"18:573:3768":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:523:6896":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:1723:7073":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:5014:7210":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:46278:6394":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:5146:7242":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:8441:178":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:3065:226":{"crate_id":5,"path":["std","io","error","Result"],"kind":"type_alias"},"6:5064:7236":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:8570:14089":{"crate_id":5,"path":["std","net","Shutdown"],"kind":"enum"},"17:15608:4839":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:6543:5253":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:13679:25622":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:10401:3337":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:32368:3181":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"16:7061:5343":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:5483:7388":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:5643:7454":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:1559:6975":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:4794:2943":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:10759:3976":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:43804:6299":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"9:424:20158":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:15521:4823":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:40626:8535":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:13594:6183":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"16:3810:5085":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:43122:137":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"5:2483:14041":{"crate_id":5,"path":["std","fs","read_link"],"kind":"function"},"1:46781:6431":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:4772:14140":{"crate_id":5,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:10426:14172":{"crate_id":5,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:32279:5403":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"16:7910:21179":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:7633:34561":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:4927:14110":{"crate_id":5,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:47200:6475":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:5225:7268":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"4:5938:2867":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"11:396:3571":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"5:9249:14189":{"crate_id":5,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:12508:4165":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:5382:7330":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:21711:27795":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:9329:5887":{"crate_id":5,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:8553:5842":{"crate_id":5,"path":["std","io","Lines"],"kind":"struct"},"17:13024:21243":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:8779:6286":{"crate_id":5,"path":["std","path","State"],"kind":"enum"},"1:13861:115":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:40769:6249":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:11394:6156":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:12369:1828":{"crate_id":5,"path":["std","u128"],"kind":"primitive"},"5:9184:2508":{"crate_id":5,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:33264:2797":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:4450:6100":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"4:2249:7921":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:532:6902":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:47154:6471":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"15:306:20261":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:5400:3961":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:46117:6378":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:5445:7367":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:44911:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"6:4876:7142":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:5863:21167":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:12695:4177":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:5366:977":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:2807:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:545:6908":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"4:839:101":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:5266:7287":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:5546:7408":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:11341:4020":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:5219:7265":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:10403:3338":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:7570:5071":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:538:6905":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:15646:4849":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"11:0:2774":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:14723:4515":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:597:3833":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:15418:4771":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:13723:4350":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:4787:7079":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:14402:4475":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:3906:5722":{"crate_id":5,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:5039:7223":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:12656:6167":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:5472:7385":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"5:5708:5743":{"crate_id":5,"path":["std","process","Stdio"],"kind":"struct"},"5:4672:14122":{"crate_id":5,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:1671:7051":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:16032:4244":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"4:6440:13995":{"crate_id":4,"path":["alloc","task","LocalWake"],"kind":"trait"},"5:5258:5734":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:45919:6360":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:15569:4824":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:12351:1688":{"crate_id":5,"path":["std","slice"],"kind":"primitive"},"17:12851:4188":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:5289:5734":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:30435:3375":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"5:3393:5713":{"crate_id":5,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:8255:5787":{"crate_id":5,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:1653:7044":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:6471:7524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"11:434:34539":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:43815:6300":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:43841:6246":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"11:785:2964":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:8304:3179":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:14449:4489":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"5:11921:33455":{"crate_id":5,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"5:9301:32659":{"crate_id":5,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:15289:4734":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:8253:7879":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:4:1256":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:46686:6428":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"1:42652:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"4:1077:3634":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:8006:7865":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"19:0:1291":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:15356:4756":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:11898:4083":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:6442:5243":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:3284:2817":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:22983:6201":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:6813:5304":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:41066:5837":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"11:364:3569":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"18:659:3792":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"4:7066:264":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"1:9852:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:10068:21221":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:43084:25483":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"17:15176:4711":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:15822:4894":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"4:6965:2872":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:15126:4694":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:11214:2962":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"10:36:6856":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:9858:21233":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:13617:6255":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1:5265:435":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:3935:2867":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"5:7337:3613":{"crate_id":5,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"4:5234:3662":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"5:8611:7903":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:5457:7376":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:46980:6465":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"4:843:3637":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:2458:5036":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:3300:34362":{"crate_id":5,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:42416:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:38330:2812":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:10887:34574":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:46257:6393":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:11075:3995":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:10997:3986":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:473:6867":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:12671:4175":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:40691:6244":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:23205:6223":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"16:2808:5052":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"11:2121:2973":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:13387:4271":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:915:2964":{"crate_id":5,"path":["std","collections","hash","map","Values"],"kind":"struct"},"14:160:5596":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:10044:21238":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:4730:2936":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"4:3820:5937":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:304:2862":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"5:8546:5839":{"crate_id":5,"path":["std","io","Split"],"kind":"struct"},"6:7584:7855":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:42613:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:957:2968":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:10818:3977":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:944:2965":{"crate_id":5,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:10723:5711":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"5:9270:5880":{"crate_id":5,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:2438:5035":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:3303:34360":{"crate_id":5,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:46213:6391":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:2660:5045":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:42017:5724":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:5914:5141":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:8242:2960":{"crate_id":5,"path":["std","hash","random","RandomState"],"kind":"struct"},"4:7400:5953":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:884:2962":{"crate_id":5,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:479:6870":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:12238:4133":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:12089:4120":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:5636:7451":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:2684:5046":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:3701:2830":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:6962:5067":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:2965:144":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"11:1920:5615":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:42250:2961":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"16:7321:3109":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"4:1204:32286":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:4504:8513":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"4:7442:29412":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"18:581:3211":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:7813:5447":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"11:1880:2961":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:7931:3616":{"crate_id":5,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:15734:4872":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:6427:5241":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"5:8084:14023":{"crate_id":5,"path":["std","env","VarError"],"kind":"enum"},"17:16249:4999":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:46388:6400":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:1547:6967":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"4:939:3642":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:15197:4715":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:12370:966":{"crate_id":5,"path":["std","isize"],"kind":"primitive"},"1:33052:2794":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:43558:7948":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:46310:6396":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:11282:6153":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"11:1900:5612":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:6066:5164":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"0:148:2371":{"crate_id":0,"path":["fastrand","Rng"],"kind":"struct"},"11:740:2967":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:1075:2973":{"crate_id":5,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:6991:34562":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:12189:4129":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:46327:6397":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:8222:139":{"crate_id":5,"path":["std","fs","FileType"],"kind":"struct"},"1:39543:2832":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:46021:6372":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:7306:34567":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:7484:34140":{"crate_id":5,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:40653:3824":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"1:12770:6153":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:14012:4400":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:4891:7149":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:5927:5142":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:3614:5083":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:2765:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:8533:5837":{"crate_id":5,"path":["std","io","Take"],"kind":"struct"},"15:0:2777":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:261:3827":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:42193:3298":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:5181:7245":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:32233:2784":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"16:7006:5329":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:6749:5290":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:12030:4115":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:4824:7106":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:7546:7836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:9294:3035":{"crate_id":5,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:10534:34580":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:4924:7167":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:6532:5252":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:3841:14090":{"crate_id":5,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"11:351:34533":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:23092:8320":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"4:1441:99":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:46409:6401":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"4:7652:243":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"6:5598:7428":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:1920:5699":{"crate_id":5,"path":["std","env","Args"],"kind":"struct"},"1:6966:6119":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:46132:6379":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:3092:5969":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"17:12422:4153":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:2592:5042":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:22:817":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"5:12350:335":{"crate_id":5,"path":["std","array"],"kind":"primitive"},"4:7412:2867":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:5361:7320":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"5:9322:5886":{"crate_id":5,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:11497:4031":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:6524:7548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:758:154":{"crate_id":5,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:4215:14099":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:3646:2823":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"18:754:3817":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:46146:6380":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:41324:6130":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:44173:6317":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:46648:6426":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:33536:2799":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:7665:5962":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"18:726:3811":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:44530:6335":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:1535:6958":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:10184:3351":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:11557:4036":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:8295:165":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"4:4252:3588":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:938:2865":{"crate_id":5,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:21741:14052":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:5665:7462":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:44019:6313":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:47112:6469":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:9531:6144":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:40475:3415":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:11595:4048":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:15313:4741":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:5742:5117":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:21802:13697":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:10729:5715":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"18:507:3768":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:5320:7310":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"11:2380:2961":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"5:2232:128":{"crate_id":5,"path":["std","ffi","os_str","Display"],"kind":"struct"},"5:4201:14097":{"crate_id":5,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:44683:7949":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"17:13187:4226":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:11493:4030":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"4:3050:29271":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:6775:7659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"16:2478:5037":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:1620:2865":{"crate_id":5,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:34295:2806":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:15324:4745":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:6606:5262":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:5965:5750":{"crate_id":5,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:1897:5698":{"crate_id":5,"path":["std","env","SplitPaths"],"kind":"struct"},"1:7831:8538":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"17:11166:4002":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:14599:4513":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:14414:4477":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"4:219:3633":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:15023:4676":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:12961:6144":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"7:79:20149":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"18:680:3799":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:10218:3819":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"11:1049:2975":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:44761:2987":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:23271:6229":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:10608:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:41090:6125":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:2175:21296":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"15:288:20260":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:11269:21268":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"18:481:3766":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"4:3674:2962":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:3559:3588":{"crate_id":5,"path":["std","io","Guard"],"kind":"struct"},"4:3297:29878":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:2508:5038":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:41299:6129":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:12344:417":{"crate_id":5,"path":["std","bool"],"kind":"primitive"},"16:5769:5126":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:9726:5782":{"crate_id":5,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"4:1531:2963":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"14:187:20248":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"5:4821:7767":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:11214:4005":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"18:608:3785":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:4909:7161":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:12353:4148":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:15214:4718":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:15957:4915":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:30696:3388":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:5093:3398":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:2968:258":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:10251:3820":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:7686:5442":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:8099:5781":{"crate_id":5,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:894:2508":{"crate_id":5,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:15463:4781":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:6417:7498":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:10990:34445":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"5:10339:5698":{"crate_id":5,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:15769:4885":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:22677:13776":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:15944:4240":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"16:7769:5445":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:2394:5033":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:5031:7218":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:11764:4066":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:12251:4134":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:45013:5620":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"5:11928:5773":{"crate_id":5,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"4:4087:2867":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:12213:4131":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:3032:3587":{"crate_id":5,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:1844:696":{"crate_id":5,"path":["std","env"],"kind":"module"},"11:835:2968":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:4856:5104":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:11812:4074":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"18:113:25415":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:42455:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:11674:4056":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:12969:4195":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:21922:6190":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:11915:21338":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:3649:3332":{"crate_id":5,"path":["std","io","Write"],"kind":"trait"},"5:9420:235":{"crate_id":5,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:41855:6138":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:46088:6376":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"8:0:2771":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"18:635:3791":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:11537:4034":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:6491:7535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:7473:5168":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:42005:6274":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:11730:4061":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:43969:5839":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"5:8616:14121":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:41283:6128":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:40816:6252":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"4:1184:29291":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:12347:1874":{"crate_id":5,"path":["std","unit"],"kind":"primitive"},"5:4406:5725":{"crate_id":5,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:11242:4007":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:47290:6486":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:46858:6463":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:46598:6424":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:15383:4763":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:4721:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"6:6706:7641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:42113:2962":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"6:6664:7624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"4:3046:29272":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:44691:7951":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:11799:4072":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:6940:5324":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:4352:5090":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:3438:5716":{"crate_id":5,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"11:1085:34543":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:12557:3995":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:11773:4067":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"4:1590:5936":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:2338:5024":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:11473:6158":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:2315:5705":{"crate_id":5,"path":["std","fs","DirEntry"],"kind":"struct"},"5:8350:5791":{"crate_id":5,"path":["std","io","error","Custom"],"kind":"struct"},"1:23238:6226":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"4:3805:5789":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"14:202:13985":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"11:809:2865":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:0:2778":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:5515:7396":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"6:5400:7341":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:12356:735":{"crate_id":5,"path":["std","f16"],"kind":"primitive"},"17:14066:4408":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:12289:4137":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:3340:5711":{"crate_id":5,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:22577:26437":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"16:6620:5264":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:8494:5720":{"crate_id":5,"path":["std","io","IoSlice"],"kind":"struct"},"4:6023:71":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"1:40738:6247":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:11256:2983":{"crate_id":5,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"5:9123:199":{"crate_id":5,"path":["std","process","Output"],"kind":"struct"},"5:2719:3579":{"crate_id":5,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:40494:3406":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:11392:4023":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"4:7464:210":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"11:1023:2974":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"5:12365:1852":{"crate_id":5,"path":["std","u8"],"kind":"primitive"},"11:2495:20230":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"16:5347:5114":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:13046:4203":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:4800:7088":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:4882:2947":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:8655:5854":{"crate_id":5,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:3457:141":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:7741:5075":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:31096:3211":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"17:10399:3824":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"4:3222:100":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:5324:6103":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"5:12363:903":{"crate_id":5,"path":["std","i64"],"kind":"primitive"},"1:23260:6228":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"5:5992:5751":{"crate_id":5,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:6597:7597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:43105:3343":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"17:12388:4150":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:14933:4663":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:47211:6476":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:11321:7909":{"crate_id":5,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:47275:6485":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:8284:145":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:5006:5109":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:9916:21235":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"4:1324:2973":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:10726:5713":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"13:229:6843":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:13594:4320":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:30722:25494":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"6:5283:7298":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"4:2210:3030":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:8559:5843":{"crate_id":5,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:6738:7648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:2709:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"4:680:5932":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:43886:6305":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:11877:4081":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:12371:4193":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:16259:4271":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:40869:6118":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:6504:5250":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:14356:4468":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"14:40:4241":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:31069:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"5:680:13999":{"crate_id":5,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:15400:4767":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:7330:7736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"4:4515:3657":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:15249:4724":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:14025:4401":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:1692:7061":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:44719:6567":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:12502:8625":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:9134:5874":{"crate_id":5,"path":["std","process","ExitStatus"],"kind":"struct"},"1:8003:3813":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:5407:1243":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:7610:3243":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"4:1570:2967":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:7715:3418":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"6:4992:7197":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:15333:4748":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:9190:5745":{"crate_id":5,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"4:1843:2865":{"crate_id":4,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:6560:5059":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:15190:4714":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:8282:7886":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:15222:4720":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:10170:3961":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:6300:5217":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:11367:3995":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:7150:14190":{"crate_id":5,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:12494:4162":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:11673:5769":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:12993:21242":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:4718:5099":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:9415:234":{"crate_id":5,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"4:1509:2508":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:11715:4059":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:5630:7448":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:44772:8649":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:10643:2978":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:5244:7276":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:9807:21222":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:8188:5509":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:6460:7516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:6183:3601":{"crate_id":5,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:5174:7244":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:1642:5615":{"crate_id":5,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:6853:5760":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:42172:3112":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:47133:6470":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:6648:5266":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:9168:2961":{"crate_id":5,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:40597:3404":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:3667:14050":{"crate_id":5,"path":["std","io","Seek"],"kind":"trait"},"1:42533:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:43311:6284":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:1686:7060":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:4864:7139":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"4:6700:2508":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:11574:4041":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:41290:5754":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:7132:5352":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:517:6893":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:974:2970":{"crate_id":5,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:8197:7877":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:11432:6157":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:8263:5788":{"crate_id":5,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:7604:5073":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:40641:6243":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:23227:6225":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"5:9355:32671":{"crate_id":5,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"5:10927:7907":{"crate_id":5,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"6:553:6913":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:4603:2952":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:5846:5132":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:12792:3925":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:12074:8483":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:3448:2684":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:8622:5850":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:9719:138":{"crate_id":5,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"5:11659:5768":{"crate_id":5,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:6278:5202":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"18:689:3801":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"11:1674:3573":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:12366:1834":{"crate_id":5,"path":["std","u16"],"kind":"primitive"},"17:3473:3847":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:15:2749":{"crate_id":1,"path":["core","write"],"kind":"macro"},"5:8247:2691":{"crate_id":5,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"5:672:5689":{"crate_id":5,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"4:3885:2865":{"crate_id":4,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:10092:21239":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"4:3318:5615":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"11:1140:5609":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:43915:6307":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:15368:4759":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:7559:5436":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:13877:4382":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:12364:884":{"crate_id":5,"path":["std","i128"],"kind":"primitive"},"17:14311:4459":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"9:502:5674":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:14968:4664":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:4362:3588":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"17:13146:4217":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:12454:4158":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:4985:7194":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:9781:21232":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:13455:4286":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"4:6975:2873":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:1207:3836":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:9234:14187":{"crate_id":5,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:12408:4152":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:44233:6319":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:6160:20278":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:4561:5727":{"crate_id":5,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:14847:4618":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:15266:4731":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:10340:3332":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"0:0:2541":{"crate_id":0,"path":["fastrand"],"kind":"module"},"17:15678:4864":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:7727:5074":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:42299:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:45904:6359":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:7497:5423":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:3264:3845":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:15748:4879":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:44261:6173":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:2418:5034":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"4:6619:3634":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:23723:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:4851:2945":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:14912:4658":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:42275:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:4860:2946":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"17:15445:4778":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:12357:738":{"crate_id":5,"path":["std","f32"],"kind":"primitive"},"1:3686:26325":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:6714:7644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:403:3829":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"18:698:3802":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:12900:4192":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"4:4117:3634":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:6231:5195":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:8183:3905":{"crate_id":5,"path":["std","fs","Metadata"],"kind":"struct"},"5:5515:128":{"crate_id":5,"path":["std","path","Display"],"kind":"struct"},"5:1616:2867":{"crate_id":5,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:4925:14109":{"crate_id":5,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:9288:115":{"crate_id":5,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"5:8681:5728":{"crate_id":5,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:12264:4135":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:6268:6110":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:14212:4449":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:3196:5023":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:43955:3824":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:949:2966":{"crate_id":5,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:4885:7147":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"11:1158:2976":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"5:12346:471":{"crate_id":5,"path":["std","char"],"kind":"primitive"},"5:8867:2961":{"crate_id":5,"path":["std","path","Iter"],"kind":"struct"},"6:6409:7496":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:5588:5735":{"crate_id":5,"path":["std","process","Child"],"kind":"struct"},"5:2076:197":{"crate_id":5,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:5624:7445":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"16:4560:5095":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:40917:3789":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:39755:2368":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:44555:6336":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:6650:7622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:43867:6303":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:3051:137":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:46553:6423":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:7461:7782":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:38964:2814":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:3667:2825":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"4:2102:5789":{"crate_id":4,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:3669:3864":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:13399:4274":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"11:2137:2974":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:8193:5783":{"crate_id":5,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:5756:5121":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:4008:5723":{"crate_id":5,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:8288:7887":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:3661:146":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:13191:119":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:3903:5721":{"crate_id":5,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:38275:2811":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:11256:4009":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:32400:114":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:5677:7467":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:46935:6464":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:6636:7611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:47191:6474":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:46426:6402":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"4:1540:2964":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"18:80:25413":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:14372:4469":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:980:2971":{"crate_id":5,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:6466:5246":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:13753:4359":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:46071:6375":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:40615:6242":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:3257:2793":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:2935:14052":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:40465:3414":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:22999:25492":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:13089:4207":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:7602:7858":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:1593:6996":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:21677:27788":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"9:357:20171":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:8355:14082":{"crate_id":5,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:586:6930":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:15799:4890":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:3486:14077":{"crate_id":5,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:44401:6331":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"4:7472:5955":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:4883:14144":{"crate_id":5,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:902:2963":{"crate_id":5,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"4:3754:3634":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:13946:4389":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:14489:4492":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:4959:7181":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:5622:5741":{"crate_id":5,"path":["std","process","ChildStdout"],"kind":"struct"},"18:706:3804":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:1490:6936":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:22353:13696":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"11:2228:4041":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:38385:2813":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:10358:143":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"17:15168:4708":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:13272:4254":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:6480:5058":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:14235:4450":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:7590:5072":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:32309:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"6:5536:7402":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:4913:5106":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:10500:113":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:13844:4374":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:13884:3597":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:42796:3333":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:21910:14052":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:12318:14004":{"crate_id":5,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:5581:7421":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:2705:3582":{"crate_id":5,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:12516:4167":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:14298:4458":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:42039:6139":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:14503:4495":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"4:7383:2861":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"16:5802:21166":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:4502:5093":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:373:3052":{"crate_id":5,"path":["std","thread","scoped","Scope"],"kind":"struct"},"13:110:34545":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"4:2770:6750":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"4:2116:5937":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:11239:5839":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:13996:2860":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:11515:6161":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:6379:7471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"4:7500:2508":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:2712:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:11510:4032":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:5367:21165":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:12353:1812":{"crate_id":5,"path":["std","tuple"],"kind":"primitive"},"17:14038:4403":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"11:1064:20234":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:2541:2708":{"crate_id":5,"path":["std","io"],"kind":"module"},"5:8064:14002":{"crate_id":5,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"4:0:309":{"crate_id":4,"path":["alloc"],"kind":"module"},"16:2323:20305":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:6519:7547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:6634:5064":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:13922:4388":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:11853:5723":{"crate_id":5,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"11:1888:2867":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:7891:5925":{"crate_id":5,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:7446:7777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:8873:5871":{"crate_id":5,"path":["std","path","Ancestors"],"kind":"struct"},"1:2962:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"17:12824:21241":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:10671:34572":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"14:0:2776":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:40437:25470":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:3342:5712":{"crate_id":5,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:7306:7719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"18:515:3765":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"5:8078:14003":{"crate_id":5,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:5277:7295":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:11443:4028":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:39579:2829":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:8012:7867":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:2611:8472":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"17:11647:4054":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:13363:4267":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:41305:5717":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:1707:7068":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:9438:162":{"crate_id":5,"path":["std","time","Instant"],"kind":"struct"},"17:12225:4132":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:44699:7953":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:12358:754":{"crate_id":5,"path":["std","f64"],"kind":"primitive"},"6:5112:7239":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:4771:5101":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:22896:6193":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:7537:7833":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:4341:14119":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"11:1893:2865":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:12201:4130":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:11153:3977":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:6120:21169":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:5958:5747":{"crate_id":5,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:11792:5721":{"crate_id":5,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:15116:4693":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:4161:14095":{"crate_id":5,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:41899:7938":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:9425:3611":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"5:12329:32669":{"crate_id":5,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:47237:6478":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:40778:6250":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"4:7547:2863":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:3014:20308":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"5:9375:6563":{"crate_id":5,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:46004:6371":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"15:394:20270":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:11042:3989":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:46627:6425":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:6682:5755":{"crate_id":5,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:10648:2980":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:22961:25512":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:10609:5873":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"4:7589:5956":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:6874:7686":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:13485:4290":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:6353:5016":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:3246:3354":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"11:2440:2867":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:13581:4319":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:10384:119":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:10842:3579":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:0:2779":{"crate_id":17,"path":["object"],"kind":"module"},"6:4952:7178":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:13029:8632":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:6433:5242":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:10517:32568":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:12915:8306":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:11095:3622":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:14386:4471":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:8759:8547":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:4804:2944":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"6:5329:7313":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:44466:6334":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:12929:4193":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:4932:7169":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:10155:3960":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:2037:3386":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"17:14325:4462":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:46196:6390":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:11605:4049":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:40839:6111":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:21796:13694":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:46441:6403":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:15426:4773":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:11238:6567":{"crate_id":5,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"5:9398:187":{"crate_id":5,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:12970:3804":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:12056:4118":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:42258:2962":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:3489:2821":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:5528:7397":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:11273:6568":{"crate_id":5,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:22705:13777":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"6:6880:7687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:43794:6298":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"4:6782:3634":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:46103:6377":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:5191:7252":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:33949:2804":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"11:2559:6854":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"4:956:2961":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:2838:5053":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"14:220:5603":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:8817:14165":{"crate_id":5,"path":["std","path","Component"],"kind":"enum"},"1:10391:3333":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"16:6758:5291":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:1621:7021":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:6098:21168":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"7:0:1902":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:2731:112":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"6:5290:7300":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:7366:33118":{"crate_id":5,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"5:432:185":{"crate_id":5,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:2528:5039":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:40582:3410":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"18:589:3778":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:491:6873":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"5:8018:3043":{"crate_id":5,"path":["std","thread","ThreadId"],"kind":"struct"},"1:44737:130":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"11:2323:2974":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:4068:2508":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"4:2322:7925":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:7549:5435":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"18:538:3775":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:3475:5082":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:497:6876":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:13832:4372":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:5020:7213":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"4:1739:3634":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:14868:4628":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:4971:7186":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"7:32:20142":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:150:3565":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:21694:27783":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:7452:7779":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:4837:7116":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:12349:1314":{"crate_id":5,"path":["std","pointer"],"kind":"primitive"},"6:7575:7852":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:10573:34575":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:6079:5011":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"5:2741:5709":{"crate_id":5,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:4979:7191":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:10905:3979":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:5296:7303":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:14876:4629":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:8118:5500":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:41076:6124":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:11189:4003":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:10018:21218":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:4965:7183":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:12367:1840":{"crate_id":5,"path":["std","u32"],"kind":"primitive"},"1:23068:6213":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:8523:5832":{"crate_id":5,"path":["std","io","Chain"],"kind":"struct"},"6:7984:7864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:15582:4830":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:7539:5070":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"14:165:20241":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:2902:20306":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:10397:3336":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"13:0:2770":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:44277:3406":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:4811:7096":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:6435:7511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:1585:6991":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"11:2400:2962":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:11359:6155":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"4:743:118":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:3216:2856":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"17:13375:4270":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:40426:3413":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:16079:4960":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"5:11365:5919":{"crate_id":5,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:3272:2796":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:10284:3821":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:5447:203":{"crate_id":5,"path":["std","path","Path"],"kind":"struct"},"5:527:3030":{"crate_id":5,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:12597:4171":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"5:9474:2984":{"crate_id":5,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:5037:5110":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:42121:2508":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:12716:6171":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:6915:7712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:8200:5784":{"crate_id":5,"path":["std","fs","FileTimes"],"kind":"struct"},"1:44695:7952":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:7098:5347":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:9938:21236":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:12132:3631":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:11853:4079":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:45025:6355":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:13999:4398":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"11:772:2963":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:15778:4887":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"18:765:25424":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:14079:4409":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:6729:7646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"5:1922:5700":{"crate_id":5,"path":["std","env","ArgsOs"],"kind":"struct"},"4:4162:2962":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:5588:7423":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:2854:5054":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:15410:4770":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"4:7734:2865":{"crate_id":4,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:16176:4987":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"4:289:3634":{"crate_id":4,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"5:10358:5902":{"crate_id":5,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:44268:3407":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:21709:27792":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"11:2466:2865":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:15655:4851":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:6972:7931":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"5:5851:5744":{"crate_id":5,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:6494:5249":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:3656:254":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:8013:3042":{"crate_id":5,"path":["std","thread","Builder"],"kind":"struct"},"17:11128:3951":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"4:4451:3657":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:5776:7673":{"crate_id":5,"path":["std","process","exit"],"kind":"function"},"1:43319:2981":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:8714:14152":{"crate_id":5,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:13292:4255":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:12352:1722":{"crate_id":5,"path":["std","str"],"kind":"primitive"},"5:10952:5784":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}