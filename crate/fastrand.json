{"root":"0:0:2609","crate_version":"2.1.0","includes_private":false,"index":{"1:13747:2556":{"id":"1:13747:2556","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42594:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5704:2746":{"id":"4:5704:2746","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13733:1027":{"id":"1:13733:1027","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"5:12599:492"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163:939":{"id":"0:163:939","crate_id":0,"name":"i8","span":{"filename":"src/lib.rs","begin":[419,4],"end":[425,5]},"visibility":"public","docs":"Generates a random `i8` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i8"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i8>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[134,0],"end":[139,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:75:496"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:2609":{"id":"0:0:2609","crate_id":0,"name":"fastrand","span":{"filename":"src/lib.rs","begin":[1,0],"end":[696,1]},"visibility":"public","docs":"A simple and fast random number generator.\n\nThe implementation uses [Wyrand](https://github.com/wangyi-fudan/wyhash), a simple and fast\ngenerator but **not** cryptographically secure.\n\n# Examples\n\nFlip a coin:\n\n```\nif fastrand::bool() {\n    println!(\"heads\");\n} else {\n    println!(\"tails\");\n}\n```\n\nGenerate a random `i32`:\n\n```\nlet num = fastrand::i32(..);\n```\n\nChoose a random element in an array:\n\n```\nlet v = vec![1, 2, 3, 4, 5];\nlet i = fastrand::usize(..v.len());\nlet elem = v[i];\n```\n\nSample values from an array with `O(n)` complexity (`n` is the length of array):\n\n```\nfastrand::choose_multiple(vec![1, 4, 5].iter(), 2);\nfastrand::choose_multiple(0..20, 12);\n```\n\n\nShuffle an array:\n\n```\nlet mut v = vec![1, 2, 3, 4, 5];\nfastrand::shuffle(&mut v);\n```\n\nGenerate a random [`Vec`] or [`String`]:\n\n```\nuse std::iter::repeat_with;\n\nlet v: Vec<i32> = repeat_with(|| fastrand::i32(..)).take(10).collect();\nlet s: String = repeat_with(fastrand::alphanumeric).take(10).collect();\n```\n\nTo get reproducible results on every run, initialize the generator with a seed:\n\n```\n// Pick an arbitrary number as seed.\nfastrand::seed(7);\n\n// Now this prints the same number on every run:\nprintln!(\"{}\", fastrand::u32(..));\n```\n\nTo be more efficient, create a new [`Rng`] instance instead of using the thread-local\ngenerator:\n\n```\nuse std::iter::repeat_with;\n\nlet mut rng = fastrand::Rng::new();\nlet mut bytes: Vec<u8> = repeat_with(|| rng.u8(..)).take(10_000).collect();\n```\n\nThis crate aims to expose a core set of useful randomness primitives. For more niche algorithms,\nconsider using the [`fastrand-contrib`] crate alongside this one.\n\n# Features\n\n- `std` (enabled by default): Enables the `std` library. This is required for the global\n  generator and global entropy. Without this feature, [`Rng`] can only be instantiated using\n  the [`with_seed`](Rng::with_seed) method.\n- `js`: Assumes that WebAssembly targets are being run in a JavaScript environment. See the\n  [WebAssembly Notes](#webassembly-notes) section for more information.\n\n# WebAssembly Notes\n\nFor non-WASI WASM targets, there is additional sublety to consider when utilizing the global RNG.\nBy default, `std` targets will use entropy sources in the standard library to seed the global RNG.\nHowever, these sources are not available by default on WASM targets outside of WASI.\n\nIf the `js` feature is enabled, this crate will assume that it is running in a JavaScript\nenvironment. At this point, the [`getrandom`] crate will be used in order to access the available\nentropy sources and seed the global RNG. If the `js` feature is not enabled, the global RNG will\nuse a predefined seed.\n\n[`fastrand-contrib`]: https://crates.io/crates/fastrand-contrib\n[`getrandom`]: https://crates.io/crates/getrandom","links":{"`Rng`":"0:153:2439","Rng::with_seed":"0:90:2441","`Vec`":"4:7185:280"},"attrs":["#![no_std]","#![forbid(unsafe_code)]","#![warn(missing_docs, missing_debug_implementations, rust_2018_idioms)]","#![doc(html_favicon_url =\n\"https://raw.githubusercontent.com/smol-rs/smol/master/assets/images/logo_fullsize_transparent.png\")]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/smol-rs/smol/master/assets/images/logo_fullsize_transparent.png\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:153:2439","0:73-0:13:2437"],"is_stripped":false}}},"1:13765:29746":{"id":"1:13765:29746","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44846:5853","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5716:30522":{"id":"4:5716:30522","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"4:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3103:1857":{"id":"1:3103:1857","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42860:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:2580":{"id":"0:55:2580","crate_id":0,"name":"shuffle","span":{"filename":"src/global_rng.rs","begin":[138,0],"end":[140,1]},"visibility":"public","docs":"Shuffles a slice randomly.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183:1877":{"id":"0:183:1877","crate_id":0,"name":"u128","span":{"filename":"src/lib.rs","begin":[590,4],"end":[596,5]},"visibility":"public","docs":"Generates a random `u128` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u128>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13735:29733":{"id":"1:13735:29733","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:181:1895":{"id":"0:181:1895","crate_id":0,"name":"u64","span":{"filename":"src/lib.rs","begin":[582,4],"end":[588,5]},"visibility":"public","docs":"Generates a random `u64` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u64>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5703:30519":{"id":"4:5703:30519","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:297:2929","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"4:297:2929","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:2497":{"id":"0:104:2497","crate_id":0,"name":"seed","span":{"filename":"src/lib.rs","begin":[493,4],"end":[495,5]},"visibility":"public","docs":"Initializes this generator with the given seed.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["seed",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22:1212":{"id":"0:22:1212","crate_id":0,"name":"new","span":{"filename":"src/global_rng.rs","begin":[25,4],"end":[27,5]},"visibility":"public","docs":"Creates a new random number generator.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Rng","id":"0:153:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13784:25654":{"id":"1:13784:25654","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"5:12599:492","self::pattern":"1:13426:8645"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:13215:6169","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13809:29759":{"id":"1:13809:29759","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:13426:8645","`DoubleEndedIterator`":"1:8387:134","prim@char":"5:12599:492","str::rmatch_indices":"1:13811:29760"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44742:6328","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:90:2441":{"id":"0:90:2441","crate_id":0,"name":"with_seed","span":{"filename":"src/lib.rs","begin":[293,4],"end":[295,5]},"visibility":"public","docs":"Creates a new random number generator with the initial seed.","links":{},"attrs":["#[inline]","#[must_use =\n\"this creates a new instance of `Rng`; if you want to initialize the thread-local generator, use `fastrand::seed()` instead\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["seed",{"primitive":"u64"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,16],"end":[131,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2866:213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:145:914":{"id":"0:145:914","crate_id":0,"name":"i128","span":{"filename":"src/global_rng.rs","begin":[163,0],"end":[163,63]},"visibility":"public","docs":"Generates a random `i128` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i128"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i128>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13814:29761":{"id":"1:13814:29761","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13822:29766":{"id":"1:13822:29766","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"5:12599:492","self::pattern":"1:13426:8645"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13454:8650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2527":{"id":"0:53:2527","crate_id":0,"name":"digit","span":{"filename":"src/global_rng.rs","begin":[132,0],"end":[134,1]},"visibility":"public","docs":"Generates a random digit in the given `base`.\n\nDigits are represented by `char`s in ranges 0-9 and a-z.\n\nPanics if the base is zero or greater than 36.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["base",{"primitive":"u32"}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2521":{"id":"0:44:2521","crate_id":0,"name":"alphanumeric","span":{"filename":"src/global_rng.rs","begin":[96,0],"end":[98,1]},"visibility":"public","docs":"Generates a random `char` in ranges a-z, A-Z and 0-9.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:158":{"id":"0:158","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,16],"end":[131,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32805:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13744:29738":{"id":"1:13744:29738","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"5:12618:1901"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13854:29784":{"id":"1:13854:29784","crate_id":1,"name":"substr_range","span":null,"visibility":"public","docs":"Returns the range that a substring points to.\n\nReturns `None` if `substr` does not point within `self`.\n\nUnlike [`str::find`], **this does not search through the string**.\nInstead, it uses pointer arithmetic to find where in the string\n`substr` is derived from.\n\nThis is useful for extending [`str::split`] and similar methods.\n\nNote that this method may return false positives (typically either\n`Some(0..0)` or `Some(self.len()..self.len())`) if `substr` is a\nzero-length `str` that points at the beginning or end of another,\nindependent, `str`.\n\n# Examples\n```\n#![feature(substr_range)]\n\nlet data = \"a, b, b, a\";\nlet mut iter = data.split(\", \").map(|s| data.substr_range(s).unwrap());\n\nassert_eq!(iter.next(), Some(0..1));\nassert_eq!(iter.next(), Some(3..4));\nassert_eq!(iter.next(), Some(6..7));\nassert_eq!(iter.next(), Some(9..10));\n```","links":{"`str::split`":"1:13782:29750","`str::find`":"1:13775:3263"},"attrs":["#[must_use]","#[unstable(feature = \"substr_range\", issue = \"126769\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["substr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Range","id":"1:40167:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3089-0:153:2439":{"id":"b:1:3089-0:153:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3066:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3063:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3092:3221"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:100:2544":{"id":"0:100:2544","crate_id":0,"name":"choose_multiple","span":{"filename":"src/lib.rs","begin":[390,4],"end":[417,5]},"visibility":"public","docs":"Collects `amount` values at random from the iterator into a vector.\n\nThe length of the returned vector equals `amount` unless the iterator\ncontains insufficient elements, in which case it equals the number of\nelements available.\n\nComplexity is `O(n)` where `n` is the length of the iterator.","links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"generic":"T"}],["amount",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Vec","id":"4:7185:280","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"","id":"1:8495:190","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8495:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2818:25473":{"id":"1:2818:25473","crate_id":1,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13763:25665":{"id":"1:13763:25665","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13764:25666"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44866:6333","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73-0:13:2437":{"id":"0:73-0:13:2437","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,22]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"global_rng","name":"global_rng","id":"0:13:2437","glob":true}}},"0:160:725":{"id":"0:160:725","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[131,16],"end":[131,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Rng","id":"0:153:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129:939":{"id":"0:129:939","crate_id":0,"name":"i8","span":{"filename":"src/global_rng.rs","begin":[155,0],"end":[155,59]},"visibility":"public","docs":"Generates a random `i8` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i8"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i8>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111:2600":{"id":"0:111:2600","crate_id":0,"name":"uppercase","span":{"filename":"src/lib.rs","begin":[633,4],"end":[636,5]},"visibility":"public","docs":"Generates a random `char` in range A-Z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2786:2774":{"id":"1:2786:2774","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13767:25667":{"id":"1:13767:25667","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44884:6189","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13850:29782":{"id":"1:13850:29782","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5059:29782"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44891:3386","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13760:6190":{"id":"1:13760:6190","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"5:12599:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44562:6182","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:171:914":{"id":"0:171:914","crate_id":0,"name":"i128","span":{"filename":"src/lib.rs","begin":[451,4],"end":[457,5]},"visibility":"public","docs":"Generates a random `i128` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i128"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i128>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13754:29740":{"id":"1:13754:29740","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"5:12605:1770","crate::ops::IndexMut":"1:3621:2891","str::slice_unchecked":"1:13753:29739"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:137:927":{"id":"0:137:927","crate_id":0,"name":"i32","span":{"filename":"src/global_rng.rs","begin":[159,0],"end":[159,61]},"visibility":"public","docs":"Generates a random `i32` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i32>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3315:261-0:153:2439":{"id":"a:1:3315:261-0:153:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3315:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13743:352":{"id":"1:13743:352","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13744:29738","`u8`":"5:12618:1901"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:175:1901":{"id":"0:175:1901","crate_id":0,"name":"u8","span":{"filename":"src/lib.rs","begin":[558,4],"end":[564,5]},"visibility":"public","docs":"Generates a random `u8` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u8>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13820:29764":{"id":"1:13820:29764","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13825:29767":{"id":"1:13825:29767","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:12599:492","self::pattern":"1:13426:8645"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:139:1895":{"id":"0:139:1895","crate_id":0,"name":"u64","span":{"filename":"src/global_rng.rs","begin":[160,0],"end":[160,61]},"visibility":"public","docs":"Generates a random `u64` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u64>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3095:860":{"id":"1:3095:860","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:2570":{"id":"0:105:2570","crate_id":0,"name":"get_seed","span":{"filename":"src/lib.rs","begin":[499,4],"end":[501,5]},"visibility":"public","docs":"Gives back **current** seed that is being held by this generator.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13832:29770":{"id":"1:13832:29770","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:12599:492","self::pattern":"1:13426:8645"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:8651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13840:29773":{"id":"1:13840:29773","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:13386:149","`FromStr`":"1:13385:8329"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42860:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:13385:8329","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13385:8329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:2497":{"id":"0:36:2497","crate_id":0,"name":"seed","span":{"filename":"src/global_rng.rs","begin":[72,0],"end":[74,1]},"visibility":"public","docs":"Initializes the thread-local generator with the given seed.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["seed",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:2521":{"id":"0:94:2521","crate_id":0,"name":"alphanumeric","span":{"filename":"src/lib.rs","begin":[335,4],"end":[338,5]},"visibility":"public","docs":"Generates a random `char` in ranges a-z, A-Z and 0-9.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:780-0:153:2439":{"id":"b:4:780-0:153:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:776:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:782:5949","4:783:25474","4:784:25475"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2816-0:153:2439":{"id":"b:1:2816-0:153:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2814:8518","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2818:25473"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:782:5949":{"id":"4:782:5949","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"4:783:25474":{"id":"4:783:25474","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13736:29734":{"id":"1:13736:29734","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13755:29741":{"id":"1:13755:29741","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13757:29743","str::split_at_mut":"1:13756:29742"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13842:29774":{"id":"1:13842:29774","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42689:3165-0:153:2439":{"id":"a:1:42689:3165-0:153:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42689:3165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:3092:3221":{"id":"1:3092:3221","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:3066:157"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13753:29739":{"id":"1:13753:29739","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"5:12605:1770","str::slice_mut_unchecked":"1:13754:29740","crate::ops::Index":"1:40135:2890"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3104-0:153:2439":{"id":"b:1:3104-0:153:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3063:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3107:150","1:3108:1855"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13818:29763":{"id":"1:13818:29763","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13829:29769":{"id":"1:13829:29769","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:12599:492","self::pattern":"1:13426:8645"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:8651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:147:1965":{"id":"0:147:1965","crate_id":0,"name":"usize","span":{"filename":"src/global_rng.rs","begin":[164,0],"end":[164,65]},"visibility":"public","docs":"Generates a random `usize` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<usize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:173:996":{"id":"0:173:996","crate_id":0,"name":"isize","span":{"filename":"src/lib.rs","begin":[476,4],"end":[482,5]},"visibility":"public","docs":"Generates a random `isize` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"isize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"isize"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<isize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"isize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2789:25468":{"id":"1:2789:25468","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:2544":{"id":"0:63:2544","crate_id":0,"name":"choose_multiple","span":{"filename":"src/global_rng.rs","begin":[179,0],"end":[181,1]},"visibility":"public","docs":"Collects `amount` values at random from the iterator into a vector.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["source",{"generic":"T"}],["amount",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"std::vec::Vec","id":"4:7185:280","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"","id":"1:8495:190","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8495:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13811:29760":{"id":"1:13811:29760","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13426:8645","`DoubleEndedIterator`":"1:8387:134","prim@char":"5:12599:492","str::match_indices":"1:13809:29759"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44760:6329","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:8651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167:927":{"id":"0:167:927","crate_id":0,"name":"i32","span":{"filename":"src/lib.rs","begin":[435,4],"end":[441,5]},"visibility":"public","docs":"Generates a random `i32` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i32>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13:2437":{"id":"0:13:2437","crate_id":0,"name":"global_rng","span":{"filename":"src/global_rng.rs","begin":[1,0],"end":[218,1]},"visibility":"crate","docs":"A global, thread-local random number generator.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:36:2497","0:38:2570","0:40:436","0:42:2516","0:44:2521","0:46:2566","0:48:2600","0:50:2519","0:53:2527","0:55:2580","0:127:1901","0:129:939","0:131:1883","0:133:921","0:135:1889","0:137:927","0:139:1895","0:141:933","0:143:1877","0:145:914","0:147:1965","0:149:996","0:151:492","0:59:766","0:61:782","0:63:2544"],"is_stripped":true}}},"0:92:2516":{"id":"0:92:2516","crate_id":0,"name":"alphabetic","span":{"filename":"src/lib.rs","begin":[328,4],"end":[331,5]},"visibility":"public","docs":"Generates a random `char` in ranges a-z and A-Z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5717:30523":{"id":"4:5717:30523","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"4:297:2929","`String`":"4:7759:257"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:297:2929","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"4:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:149:996":{"id":"0:149:996","crate_id":0,"name":"isize","span":{"filename":"src/global_rng.rs","begin":[165,0],"end":[165,65]},"visibility":"public","docs":"Generates a random `isize` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"isize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"isize"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<isize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"isize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:156":{"id":"0:156","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,9],"end":[131,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10646:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:157:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:5702":{"id":"4:5702","crate_id":4,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["4:5703:30519","4:5704:2746","4:5706:30520","4:5708:30521","4:5716:30522","4:5717:30523","4:5718:8530","4:5719:30524","4:5720:30525"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:91:2514":{"id":"0:91:2514","crate_id":0,"name":"fork","span":{"filename":"src/lib.rs","begin":[322,4],"end":[324,5]},"visibility":"public","docs":"Clones the generator by deterministically deriving a new generator based on the initial\nseed.\n\nThis function can be used to create a new generator that is a \"spinoff\" of the old\ngenerator. The new generator will not produce the same sequence of values as the\nold generator.\n\n# Example\n\n```\n// Seed two generators equally, and clone both of them.\nlet mut base1 = fastrand::Rng::with_seed(0x4d595df4d0f33173);\nbase1.bool(); // Use the generator once.\n\nlet mut base2 = fastrand::Rng::with_seed(0x4d595df4d0f33173);\nbase2.bool(); // Use the generator once.\n\nlet mut rng1 = base1.fork();\nlet mut rng2 = base2.fork();\n\nprintln!(\"rng1 returns {}\", rng1.u32(..));\nprintln!(\"rng2 returns {}\", rng2.u32(..));\n```","links":{},"attrs":["#[inline]","#[must_use = \"this creates a new instance of `Rng`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2787-0:153:2439":{"id":"b:1:2787-0:153:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2781:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2789:25468"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:127:1901":{"id":"0:127:1901","crate_id":0,"name":"u8","span":{"filename":"src/global_rng.rs","begin":[154,0],"end":[154,59]},"visibility":"public","docs":"Generates a random `u8` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u8>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:179:1889":{"id":"0:179:1889","crate_id":0,"name":"u32","span":{"filename":"src/lib.rs","begin":[574,4],"end":[580,5]},"visibility":"public","docs":"Generates a random `u32` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u32>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32861:3139-0:153:2439":{"id":"a:1:32861:3139-0:153:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32861:3139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:3108:1855":{"id":"1:3108:1855","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42860:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/global_rng.rs","begin":[12,0],"end":[20,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3141:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Rng","id":"0:153:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:20:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13772:29749":{"id":"1:13772:29749","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"5:12599:492","self::pattern":"1:13426:8645"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:8651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13789:29752":{"id":"1:13789:29752","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:13426:8645","str::split":"1:13782:29750","prim@char":"5:12599:492","`DoubleEndedIterator`":"1:8387:134","str::rsplit_terminator":"1:13791:29753"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44642:6326","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13849:29781":{"id":"1:13849:29781","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1151:37776"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13738:29735":{"id":"1:13738:29735","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13736:29734"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:1883":{"id":"0:131:1883","crate_id":0,"name":"u16","span":{"filename":"src/global_rng.rs","begin":[156,0],"end":[156,61]},"visibility":"public","docs":"Generates a random `u16` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5720:30525":{"id":"4:5720:30525","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13846:29778"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13741:29736":{"id":"1:13741:29736","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12948:8652"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161":{"id":"0:161","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,27],"end":[131,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:50:2519":{"id":"0:50:2519","crate_id":0,"name":"choice","span":{"filename":"src/global_rng.rs","begin":[118,0],"end":[124,1]},"visibility":"public","docs":"Choose an item from an iterator at random.\n\nThis function may have an unexpected result if the `len()` property of the\niterator does not match the actual number of items in the iterator. If\nthe iterator is empty, this returns `None`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8319:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8319:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8319:177","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8440:2577","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:141:933":{"id":"0:141:933","crate_id":0,"name":"i64","span":{"filename":"src/global_rng.rs","begin":[161,0],"end":[161,61]},"visibility":"public","docs":"Generates a random `i64` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i64>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13827:29768":{"id":"1:13827:29768","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:12599:492","self::pattern":"1:13426:8645"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13794:29754":{"id":"1:13794:29754","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"5:12599:492","self::pattern":"1:13426:8645","str::rsplitn":"1:13796:29755"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44696:6174","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40:436":{"id":"0:40:436","crate_id":0,"name":"bool","span":{"filename":"src/global_rng.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"Generates a random `bool`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:2516":{"id":"0:42:2516","crate_id":0,"name":"alphabetic","span":{"filename":"src/global_rng.rs","begin":[90,0],"end":[92,1]},"visibility":"public","docs":"Generates a random `char` in ranges a-z and A-Z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13778:3227":{"id":"1:13778:3227","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42594:203","prim@char":"5:12599:492","self::pattern":"1:13426:8645"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:8651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13804:2818":{"id":"1:13804:2818","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:13426:8645","`DoubleEndedIterator`":"1:8387:134","prim@char":"5:12599:492","str::rmatches":"1:13806:29758"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44796:6330","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5708:30521":{"id":"4:5708:30521","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13762:5779":{"id":"1:13762:5779","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44578:3811","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13782:29750":{"id":"1:13782:29750","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:13426:8645","`DoubleEndedIterator`":"1:8387:134","prim@char":"5:12599:492","str::split_whitespace":"1:13763:25665","str::rsplit":"1:13786:29751"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44592:5850","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153:2439":{"id":"0:153:2439","crate_id":0,"name":"Rng","span":{"filename":"src/lib.rs","begin":[132,0],"end":[132,20]},"visibility":"public","docs":"A random number generator.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:21","0:89","a:1:32803:249-0:153:2439","a:1:3315:261-0:153:2439","a:1:3350:3333-0:153:2439","a:1:32861:3139-0:153:2439","a:1:42688:3166-0:153:2439","a:1:42689:3165-0:153:2439","b:1:2784-0:153:2439","b:1:2787-0:153:2439","b:1:2816-0:153:2439","b:1:3089-0:153:2439","b:1:3093-0:153:2439","b:1:3099-0:153:2439","b:1:3104-0:153:2439","b:1:3959-0:153:2439","b:4:780-0:153:2439","0:19","0:156","0:158","0:159","0:161","0:74"]}}},"0:135:1889":{"id":"0:135:1889","crate_id":0,"name":"u32","span":{"filename":"src/global_rng.rs","begin":[158,0],"end":[158,61]},"visibility":"public","docs":"Generates a random `u32` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u32>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13786:29751":{"id":"1:13786:29751","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:13426:8645","`DoubleEndedIterator`":"1:8387:134","prim@char":"5:12599:492","str::split":"1:13782:29750"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44610:6172","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:8651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5706:30520":{"id":"4:5706:30520","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:784:25475":{"id":"4:784:25475","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133:921":{"id":"0:133:921","crate_id":0,"name":"i16","span":{"filename":"src/global_rng.rs","begin":[157,0],"end":[157,61]},"visibility":"public","docs":"Generates a random `i16` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i16"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169:933":{"id":"0:169:933","crate_id":0,"name":"i64","span":{"filename":"src/lib.rs","begin":[443,4],"end":[449,5]},"visibility":"public","docs":"Generates a random `i64` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i64>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13775:3263":{"id":"1:13775:3263","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42594:203","prim@char":"5:12599:492","self::pattern":"1:13426:8645"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:177:1883":{"id":"0:177:1883","crate_id":0,"name":"u16","span":{"filename":"src/lib.rs","begin":[566,4],"end":[572,5]},"visibility":"public","docs":"Generates a random `u16` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[289,0],"end":[696,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Rng","id":"0:153:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:90:2441","0:91:2514","0:92:2516","0:94:2521","0:96:436","0:97:2527","0:98:766","0:99:782","0:100:2544","0:163:939","0:165:921","0:167:927","0:169:933","0:171:914","0:173:996","0:102:2566","0:104:2497","0:105:2570","0:106:2519","0:108:2580","0:110:2583","0:175:1901","0:177:1883","0:179:1889","0:181:1895","0:183:1877","0:185:1965","0:111:2600","0:113:492"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2784-0:153:2439":{"id":"b:1:2784-0:153:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2778:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2786:2774"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13846:29778":{"id":"1:13846:29778","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13801:29757":{"id":"1:13801:29757","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:8651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13757:29743":{"id":"1:13757:29743","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13758:29744"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3093-0:153:2439":{"id":"b:1:3093-0:153:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3066:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3095:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:5718:8530":{"id":"4:5718:8530","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:2527":{"id":"0:97:2527","crate_id":0,"name":"digit","span":{"filename":"src/lib.rs","begin":[352,4],"end":[365,5]},"visibility":"public","docs":"Generates a random digit in the given `base`.\n\nDigits are represented by `char`s in ranges 0-9 and a-z.\n\nPanics if the base is zero or greater than 36.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["base",{"primitive":"u32"}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:157:830":{"id":"0:157:830","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[131,9],"end":[131,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10613:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10594:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:2519":{"id":"0:106:2519","crate_id":0,"name":"choice","span":{"filename":"src/lib.rs","begin":[509,4],"end":[524,5]},"visibility":"public","docs":"Choose an item from an iterator at random.\n\nThis function may have an unexpected result if the `len()` property of the\niterator does not match the actual number of items in the iterator. If\nthe iterator is empty, this returns `None`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8319:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8319:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8319:177","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8440:2577","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13799:29756":{"id":"1:13799:29756","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13756:29742":{"id":"1:13756:29742","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13755:29741","str::split_at_mut_checked":"1:13758:29744"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13770:29748":{"id":"1:13770:29748","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"5:12599:492","self::pattern":"1:13426:8645"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:165:921":{"id":"0:165:921","crate_id":0,"name":"i16","span":{"filename":"src/lib.rs","begin":[427,4],"end":[433,5]},"visibility":"public","docs":"Generates a random `i16` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i16"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:2566":{"id":"0:46:2566","crate_id":0,"name":"lowercase","span":{"filename":"src/global_rng.rs","begin":[102,0],"end":[104,1]},"visibility":"public","docs":"Generates a random `char` in range a-z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13835:29771":{"id":"1:13835:29771","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:12599:492","self::pattern":"1:13426:8645"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13845:29777":{"id":"1:13845:29777","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13768:3218":{"id":"1:13768:3218","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"5:12599:492","self::pattern":"1:13426:8645"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13742:29737":{"id":"1:13742:29737","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13751:28802":{"id":"1:13751:28802","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13847:29779":{"id":"1:13847:29779","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1151:37776"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:766":{"id":"0:59:766","crate_id":0,"name":"f32","span":{"filename":"src/global_rng.rs","begin":[169,0],"end":[171,1]},"visibility":"public","docs":"Generates a random `f32` in range `0..1`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13734:2592":{"id":"1:13734:2592","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:436":{"id":"0:96:436","crate_id":0,"name":"bool","span":{"filename":"src/lib.rs","begin":[342,4],"end":[344,5]},"visibility":"public","docs":"Generates a random `bool`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:496":{"id":"0:75:496","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[136,4],"end":[138,5]},"visibility":"default","docs":"Clones the generator by creating a new generator with the same seed.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Rng","id":"0:153:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:2580":{"id":"0:108:2580","crate_id":0,"name":"shuffle","span":{"filename":"src/lib.rs","begin":[528,4],"end":[532,5]},"visibility":"public","docs":"Shuffles a slice randomly.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["slice",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3107:150":{"id":"1:3107:150","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32727:2854","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:13761:6343":{"id":"1:13761:6343","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"5:12599:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44568:6324","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42688:3166-0:153:2439":{"id":"a:1:42688:3166-0:153:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42688:3166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13848:29780":{"id":"1:13848:29780","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1151:37776"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13745:3132":{"id":"1:13745:3132","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42594:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13837:29772":{"id":"1:13837:29772","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:12599:492","self::pattern":"1:13426:8645"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:8651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3099-0:153:2439":{"id":"b:1:3099-0:153:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3069:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3102:150","1:3103:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:61:782":{"id":"0:61:782","crate_id":0,"name":"f64","span":{"filename":"src/global_rng.rs","begin":[174,0],"end":[176,1]},"visibility":"public","docs":"Generates a random `f64` in range `0..1`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99:782":{"id":"0:99:782","crate_id":0,"name":"f64","span":{"filename":"src/lib.rs","begin":[375,4],"end":[379,5]},"visibility":"public","docs":"Generates a random `f64` in range `0..1`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:113:492":{"id":"0:113:492","crate_id":0,"name":"char","span":{"filename":"src/lib.rs","begin":[642,4],"end":[695,5]},"visibility":"public","docs":"Generates a random `char` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<char>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3959-0:153:2439":{"id":"b:1:3959-0:153:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3957:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3961:1870"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:21":{"id":"0:21","crate_id":0,"name":null,"span":{"filename":"src/global_rng.rs","begin":[22,0],"end":[28,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Rng","id":"0:153:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:22:1212"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13791:29753":{"id":"1:13791:29753","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:13426:8645","str::split":"1:13782:29750","prim@char":"5:12599:492","str::split_terminator":"1:13789:29752"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44660:6327","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:8651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:2600":{"id":"0:48:2600","crate_id":0,"name":"uppercase","span":{"filename":"src/global_rng.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Generates a random `char` in range A-Z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32803:249-0:153:2439":{"id":"a:1:32803:249-0:153:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32803:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13796:29755":{"id":"1:13796:29755","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"5:12599:492","str::splitn":"1:13794:29754","self::pattern":"1:13426:8645"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44714:6175","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:8651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13844:29776":{"id":"1:13844:29776","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13853:29783":{"id":"1:13853:29783","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5057:29783"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44909:3384","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13749:28801":{"id":"1:13749:28801","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:2570":{"id":"0:38:2570","crate_id":0,"name":"get_seed","span":{"filename":"src/global_rng.rs","begin":[78,0],"end":[80,1]},"visibility":"public","docs":"Gives back **current** seed that is being held by the thread-local generator.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13732":{"id":"1:13732","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13733:1027","1:13734:2592","1:13735:29733","1:13736:29734","1:13738:29735","1:13741:29736","1:13742:29737","1:13743:352","1:13744:29738","1:13745:3132","1:13747:2556","1:13749:28801","1:13751:28802","1:13753:29739","1:13754:29740","1:13755:29741","1:13756:29742","1:13757:29743","1:13758:29744","1:13760:6190","1:13761:6343","1:13762:5779","1:13763:25665","1:13764:25666","1:13765:29746","1:13766:29747","1:13767:25667","1:13768:3218","1:13770:29748","1:13772:29749","1:13775:3263","1:13778:3227","1:13782:29750","1:13784:25654","1:13786:29751","1:13789:29752","1:13791:29753","1:13794:29754","1:13796:29755","1:13799:29756","1:13801:29757","1:13804:2818","1:13806:29758","1:13809:29759","1:13811:29760","1:13814:29761","1:13816:29762","1:13818:29763","1:13820:29764","1:13821:29765","1:13822:29766","1:13825:29767","1:13827:29768","1:13829:29769","1:13832:29770","1:13835:29771","1:13837:29772","1:13840:29773","1:13842:29774","1:13843:29775","1:13844:29776","1:13845:29777","1:13846:29778","1:13847:29779","1:13848:29780","1:13849:29781","1:13850:29782","1:13852:8541","1:13853:29783","1:13854:29784"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13852:8541":{"id":"1:13852:8541","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5060:8541"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44900:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13821:29765":{"id":"1:13821:29765","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:143:1877":{"id":"0:143:1877","crate_id":0,"name":"u128","span":{"filename":"src/global_rng.rs","begin":[162,0],"end":[162,63]},"visibility":"public","docs":"Generates a random `u128` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u128>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3961:1870":{"id":"1:3961:1870","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:40304:5987","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13758:29744":{"id":"1:13758:29744","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13757:29743"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:110:2583":{"id":"0:110:2583","crate_id":0,"name":"fill","span":{"filename":"src/lib.rs","begin":[536,4],"end":[556,5]},"visibility":"public","docs":"Fill a byte slice with random data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["slice",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:60":{"id":"0:20:60","crate_id":0,"name":"default","span":{"filename":"src/global_rng.rs","begin":[17,4],"end":[19,5]},"visibility":"default","docs":"Initialize the `Rng` from the system's random number generator.\n\nThis is equivalent to [`Rng::new()`].","links":{"`Rng::new()`":"0:22:1212"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Rng","id":"0:153:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151:492":{"id":"0:151:492","crate_id":0,"name":"char","span":{"filename":"src/global_rng.rs","begin":[166,0],"end":[166,63]},"visibility":"public","docs":"Generates a random `char` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<char>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13806:29758":{"id":"1:13806:29758","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:13426:8645","`DoubleEndedIterator`":"1:8387:134","prim@char":"5:12599:492","str::matches":"1:13804:2818"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44814:6331","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:6160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:8651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13816:29762":{"id":"1:13816:29762","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:766":{"id":"0:98:766","crate_id":0,"name":"f32","span":{"filename":"src/lib.rs","begin":[368,4],"end":[372,5]},"visibility":"public","docs":"Generates a random `f32` in range `0..1`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:185:1965":{"id":"0:185:1965","crate_id":0,"name":"usize","span":{"filename":"src/lib.rs","begin":[615,4],"end":[621,5]},"visibility":"public","docs":"Generates a random `usize` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<usize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13843:29775":{"id":"1:13843:29775","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40488:8519","Self::is_ascii":"1:13842:29774"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40488:8519","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3350:3333-0:153:2439":{"id":"a:1:3350:3333-0:153:2439","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3350:3333","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:3102:150":{"id":"1:3102:150","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"1:13764:25666":{"id":"1:13764:25666","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13763:25665"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44875:6334","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13766:29747":{"id":"1:13766:29747","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44856:6332","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5719:30524":{"id":"4:5719:30524","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13845:29777"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:2566":{"id":"0:102:2566","crate_id":0,"name":"lowercase","span":{"filename":"src/lib.rs","begin":[486,4],"end":[489,5]},"visibility":"public","docs":"Generates a random `char` in range a-z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:5557:7399":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:11138:32597":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:7735:3397":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:8295:5468":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:16001:4784":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:5539:7391":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:15438:4635":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:11776:4017":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"5:2334:151":{"crate_id":5,"path":["std","fs","File"],"kind":"struct"},"4:3708:3029":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:4758:233":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"16:7421:21200":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:15350:4572":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:7413:5340":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:14532:4094":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:7355:5070":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:13385:8329":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:11199:3602":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:13156:4178":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:11231:21282":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"9:380:20183":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:10441:21265":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"5:8663:7886":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:11732:21301":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:23602:6239":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"16:8480:5505":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:15837:4739":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:9218:5892":{"crate_id":5,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:12521:6178":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"4:6813:2576":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"11:2440:2932":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"5:971:3033":{"crate_id":5,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:3569:2886":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"1:44846:5853":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"17:13265:21269":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:6802:7658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:12017:4038":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"18:589:3765":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:2898:5055":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:11984:4035":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:4871:5099":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"4:3333:29513":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:22172:13725":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:47940:6488":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:44551:6323":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:47720:6478":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:40936:3391":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:7013:5273":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:2902:207":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"5:3504:14103":{"crate_id":5,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:15946:4770":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:5911:232":{"crate_id":5,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:7326:7726":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:31563:208":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:47765:6479":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:40152:225":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:16763:5001":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:41015:3386":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"4:3075:5949":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:7492:5355":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:12698:4135":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:40488:8519":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:1657:7027":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:7430:7762":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:1940:5709":{"crate_id":5,"path":["std","env","ArgsOs"],"kind":"struct"},"16:7966:5446":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:5555:133":{"crate_id":5,"path":["std","path","Display"],"kind":"struct"},"17:3719:3834":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:22953:14078":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:13305:4190":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:42370:6154":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:5088:7220":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:7997:5076":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:32773:5414":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"6:497:6859":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:5575:7406":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:42386:8584":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:15314:4541":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:8148:5079":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:8733:5737":{"crate_id":5,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"4:6502:3653":{"crate_id":4,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"17:14018:4294":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"11:1001:3041":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:46723:6379":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:375:3121":{"crate_id":5,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:8270:8577":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:11787:4019":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:22351:6206":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:41229:6260":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"5:5676:5749":{"crate_id":5,"path":["std","process","ChildStdin"],"kind":"struct"},"17:10695:3809":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"4:5552:14003":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"17:11280:3975":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:23624:6241":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"5:4687:14148":{"crate_id":5,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:4576:5736":{"crate_id":5,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:12991:4166":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:11074:34779":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:1633:2576":{"crate_id":5,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:45347:7935":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:0:527":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:43976:6300":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"16:3124:20334":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:5282:7278":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:13944:4281":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:4120:14118":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:44814:6331":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:46644:6372":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:43947:6298":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"4:785:122":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:41456:6274":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:43703:5483":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"5:9482:3570":{"crate_id":5,"path":["std","sync","poison","Guard"],"kind":"struct"},"16:8040:34772":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:44192:7931":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:45039:6345":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:6967:5063":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:505:3818":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:15159:4519":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"4:3287:3028":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:2360:7909":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:47992:6492":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:34980:2878":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:8257:5795":{"crate_id":5,"path":["std","fs","FileTimes"],"kind":"struct"},"5:8840:6300":{"crate_id":5,"path":["std","path","State"],"kind":"enum"},"1:23547:6234":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:16645:4972":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"5:7540:33363":{"crate_id":5,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"4:3258:101":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"5:11048:5795":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:47966:6490":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:16012:4785":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:5406:1007":{"crate_id":1,"path":["core","iter"],"kind":"module"},"6:5224:7248":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:8274:8576":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:13289:3911":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:10657:3315":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:7800:28033":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:11986:7901":{"crate_id":5,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:44449:6313":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:22641:6205":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:5304:3843":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:3551:128":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:11077:5729":{"crate_id":5,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"5:11102:5865":{"crate_id":5,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"17:15924:4765":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:2094:209":{"crate_id":5,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:5420:7329":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:45606:6363":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:5341:7297":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:10245:21258":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:5415:5116":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:44349:6306":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:5447:5117":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:5696:5750":{"crate_id":5,"path":["std","process","ChildStdout"],"kind":"struct"},"5:4832:7746":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"18:623:34788":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:3315:33626":{"crate_id":5,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:15778:4726":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:12940:4161":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:6850:5255":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:6582:232":{"crate_id":5,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:11775:5850":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:44909:3384":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:15746:4720":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:3012:20332":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:8605:5853":{"crate_id":5,"path":["std","io","Lines"],"kind":"struct"},"6:7553:7835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"18:481:3753":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:15652:4697":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:16809:4283":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"16:7916:5434":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:15548:4675":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:11750:3029":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:7788:33342":{"crate_id":5,"path":["std","panicking","Hook"],"kind":"enum"},"1:10646:123":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"6:7439:7765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:45667:5629":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:3073:271":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"17:14283:4361":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:16341:4896":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"4:4196:3029":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:8267:5796":{"crate_id":5,"path":["std","fs","Permissions"],"kind":"struct"},"17:16691:4985":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"4:7504:2576":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:10872:169":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:40167:222":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"4:3076:29518":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:5325:7293":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:14395:164":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:8025:5448":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:8668:14147":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"15:327:8011":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"4:6263:3570":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:13932:4278":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"18:96:25452":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:3350:3333":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"6:5057:7210":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"11:102:6827":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:5217:7247":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:15932:4768":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:10885:3110":{"crate_id":5,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:43431:3313":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:41191:6259":{"crate_id":1,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"5:1992:5710":{"crate_id":5,"path":["std","error","Report"],"kind":"struct"},"11:663:3029":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:12134:4058":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:8387:134":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:34807:2876":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:8766:5866":{"crate_id":5,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"6:4937:7152":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:15845:4740":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:12918:8618":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:45339:7933":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:13384:4194":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:3315:261":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"16:2918:5056":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"4:2258:5954":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:8175:7860":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:5450:7350":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:15939:4769":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:23613:6240":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"18:680:3786":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:4954:5102":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:11941:5777":{"crate_id":5,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"4:981:3624":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:523:6879":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:12604:3973":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:2516:14073":{"crate_id":5,"path":["std","fs","read_dir"],"kind":"function"},"5:5782:5752":{"crate_id":5,"path":["std","process","Stdio"],"kind":"struct"},"6:5488:7371":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:22756:13723":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:6121:5065":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:12930:4160":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:11980:7900":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:41814:6145":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"11:1542:20261":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:46828:6389":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:4787:14166":{"crate_id":5,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:12215:4066":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:4842:7099":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:12982:21400":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"4:6555:14022":{"crate_id":4,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:43445:3316":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:593:3105":{"crate_id":5,"path":["std","thread","Packet"],"kind":"struct"},"17:10662:3808":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:5316:5113":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:960:2932":{"crate_id":5,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:1690:7043":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:5292:5743":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:3139:3846":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:31216:25496":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:12203:4064":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:22891:13808":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"15:394:20295":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:40999:3384":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"4:5507:3616":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:6791:3590":{"crate_id":5,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:40947:25513":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:3815:28106":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:5202:14175":{"crate_id":5,"path":["std","panic","always_abort"],"kind":"function"},"6:1507:6925":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:1864:722":{"crate_id":5,"path":["std","env"],"kind":"module"},"5:697:5698":{"crate_id":5,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"11:1871:2932":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"5:7941:3820":{"crate_id":5,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:11804:4022":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:5485:215":{"crate_id":5,"path":["std","path","Path"],"kind":"struct"},"1:41839:6146":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:45343:7934":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:44642:6326":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:16727:4994":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:4762:3003":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"4:1589:3032":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:47367:6438":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:4836:7750":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"5:2336:5714":{"crate_id":5,"path":["std","fs","DirEntry"],"kind":"struct"},"4:4513:3570":{"crate_id":4,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:5529:7385":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:7846:32628":{"crate_id":5,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"16:8102:5452":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:36856:2879":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:7398:34766":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"18:651:3755":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:9305:14214":{"crate_id":5,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:9290:14215":{"crate_id":5,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:41446:6138":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:6428:7498":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:22243:6206":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:6820:21196":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"5:1002:3038":{"crate_id":5,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"4:7233:3666":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:4502:5735":{"crate_id":5,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:41313:6121":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:3193:5984":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:44891:3386":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:43758:150":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:43986:6304":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:14126:4326":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:6267:5147":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:5369:216":{"crate_id":5,"path":["std","path","PathBuf"],"kind":"struct"},"9:226:6300":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:3063:175":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"5:9365:3104":{"crate_id":5,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:6638:7606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:3306:5027":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:10433:3331":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:23558:6235":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"6:1675:7034":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:47099:6412":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:16077:4829":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"9:490:5683":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:4964:7164":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:16738:4995":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:12710:4136":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:3108:5082":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:43326:6164":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:13569:21272":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:12549:4124":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:48107:6517":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:8083:3002":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"11:808:3032":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:2504:14067":{"crate_id":5,"path":["std","fs","read_link"],"kind":"function"},"5:5135:14169":{"crate_id":5,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:41354:6127":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"4:1580:3031":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:1684:7040":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:8299:3027":{"crate_id":5,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:11447:3987":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:2838:5052":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:47276:6435":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:1584:6972":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"11:750:3030":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:2226:3824":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:46953:6404":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:10840:5722":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"16:2528:5038":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:10096:21253":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:15707:4709":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"18:598:34786":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:41798:6144":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:4505:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"5:9400:5904":{"crate_id":5,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:15556:4676":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:41253:6262":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:4318:33362":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"11:2297:3041":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"6:5387:7313":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:5165:7226":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:14626:4417":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:3832:5088":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:1097:3040":{"crate_id":5,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:14707:4428":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"18:515:3752":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"4:7653:2930":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:44866:6333":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:11394:6549":{"crate_id":5,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"6:6727:7632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:10295:21260":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:8328:3138":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:12614:921":{"crate_id":5,"path":["std","i16"],"kind":"primitive"},"1:40135:2890":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"6:5550:7397":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:13889:4273":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:4692:2730":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:23657:6244":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"17:12582:4126":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:23580:6237":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"16:7946:5074":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:2119:696":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"16:6406:5169":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:5319:7292":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:12027:4040":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:3712:223":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:10783:3955":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"1:4841:3012":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:34316:2872":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:11925:4031":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:11456:3989":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"5:4709:14149":{"crate_id":5,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:5151:7225":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:3853:3835":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"4:3788:3616":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:6687:7624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:15495:4669":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"4:7554:29400":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:924:3030":{"crate_id":5,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:16534:4951":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"5:8397:5801":{"crate_id":5,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:6186:5137":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:6806:5060":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:5036:7201":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:13661:4220":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"5:3050:3569":{"crate_id":5,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:11357:21279":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:41322:6124":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:10293:8035":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:8775:14179":{"crate_id":5,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:8928:3028":{"crate_id":5,"path":["std","path","Iter"],"kind":"struct"},"5:6066:5760":{"crate_id":5,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:6695:7627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:43438:3315":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:14559:4407":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:8575:5843":{"crate_id":5,"path":["std","io","Chain"],"kind":"struct"},"4:2806:6731":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:12859:4154":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"4:1119:3616":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:7539:7826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:12613:939":{"crate_id":5,"path":["std","i8"],"kind":"primitive"},"4:3839:5800":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:22144:29050":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:16311:4891":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:13634:4214":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:6737:7639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"16:155:3547":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"5:3456:5725":{"crate_id":5,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:13013:4171":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"11:123:3549":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:14482:4397":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:14338:3579":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"5:3411:5722":{"crate_id":5,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:1879:5705":{"crate_id":5,"path":["std","env","Vars"],"kind":"struct"},"1:42628:3029":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"11:344:34739":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:3037:2855":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:23294:6209":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:41375:6133":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:4402:5094":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:7027:5275":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:12850:4153":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:9261:5754":{"crate_id":5,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:5712:5751":{"crate_id":5,"path":["std","process","ChildStderr"],"kind":"struct"},"5:8878:14192":{"crate_id":5,"path":["std","path","Component"],"kind":"enum"},"14:164:20266":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:6096:5126":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:43252:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:10596:3806":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:10837:5720":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:11968:6173":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:5069:7219":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:12097:5731":{"crate_id":5,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:5395:7318":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:491:6856":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:12055:4050":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"5:12610:766":{"crate_id":5,"path":["std","f32"],"kind":"primitive"},"17:11318:34783":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:8249:7865":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:22108:29042":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:13443:3791":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:47388:6439":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:45598:6361":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"11:357:3551":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:13658:123":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:11565:4000":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"15:288:20285":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:13982:4285":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:11929:5773":{"crate_id":5,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:1645:5621":{"crate_id":5,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:6578:7580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:15539:4674":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"5:1636:2934":{"crate_id":5,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:13957:4283":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"13:110:34749":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:34634:2875":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:7334:5333":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:9188:5890":{"crate_id":5,"path":["std","process","CommandArgs"],"kind":"struct"},"4:3328:5621":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:12896:4156":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"4:7695:5971":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:11539:14078":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:5662:5744":{"crate_id":5,"path":["std","process","Child"],"kind":"struct"},"17:11526:3997":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"4:7512:5968":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:2154:5952":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:43964:169":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:8320:5799":{"crate_id":5,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:12961:21399":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:46843:6390":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:33564:2864":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"5:12619:1883":{"crate_id":5,"path":["std","u16"],"kind":"primitive"},"5:12611:782":{"crate_id":5,"path":["std","f64"],"kind":"primitive"},"16:5253:5111":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:532:6885":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:1539:6941":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:2418:5983":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"4:1621:222":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:46857:6391":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:11155:5893":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"5:2253:133":{"crate_id":5,"path":["std","ffi","os_str","Display"],"kind":"struct"},"11:2414:2934":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:12523:4121":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"12:0:2845":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:11058:152":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"5:975:3034":{"crate_id":5,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:14065:6270":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"5:8293:131":{"crate_id":5,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:3985:3859":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"5:4950:14136":{"crate_id":5,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:15:2819":{"crate_id":1,"path":["core","write"],"kind":"macro"},"4:5406:3649":{"crate_id":4,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"5:3413:5723":{"crate_id":5,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:5647:5118":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:1657:5623":{"crate_id":5,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:41095:3389":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"5:8328:5800":{"crate_id":5,"path":["std","io","cursor","Cursor"],"kind":"struct"},"4:2287:7905":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"18:491:3754":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:14437:4391":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:45540:163":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:3785:268":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:2656:5717":{"crate_id":5,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:16661:4977":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"13:229:6826":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"4:7094:2940":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"6:7424:7760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:5728:116":{"crate_id":5,"path":["std","process","Command"],"kind":"struct"},"1:43779:3324":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"17:13027:4173":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"11:676:2576":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"4:3444:2932":{"crate_id":4,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:9829:131":{"crate_id":5,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"6:7580:7841":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:47338:6437":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:14691:4423":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:44696:6174":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:14054:4299":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:47894:6484":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:12233:4068":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:13797:4251":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"9:345:20197":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:11895:6171":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"4:885:3619":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"4:282:3616":{"crate_id":4,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:23569:6236":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"11:2374:3029":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"18:80:25451":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:15724:4714":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:42719:3115":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:42710:3348":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:14996:4497":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:11709:3605":{"crate_id":5,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"1:32769:6247":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"16:6366:5008":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:40227:226":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:47018:6407":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:0:2849":{"crate_id":17,"path":["object"],"kind":"module"},"1:44492:6316":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"5:9320:14216":{"crate_id":5,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:5652:7445":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"7:78:20176":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:11605:3973":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:7041:5068":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:7539:5363":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"4:7664:3026":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:4947:7158":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"4:7708:8564":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:10608:116":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"5:381:3122":{"crate_id":5,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:12569:4125":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:3357:3335":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"5:8240:3892":{"crate_id":5,"path":["std","fs","Metadata"],"kind":"struct"},"18:507:3755":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:10842:3959":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"4:7524:2934":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:44481:6315":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:6441:7499":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:12623:996":{"crate_id":5,"path":["std","isize"],"kind":"primitive"},"16:7551:21201":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:7505:5358":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:14585:4410":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:11850:4025":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:11015:3970":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"4:722:5947":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:41293:6265":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:2028:813":{"crate_id":5,"path":["std","ffi"],"kind":"module"},"6:5357:7299":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"10:0:2843":{"crate_id":10,"path":["adler"],"kind":"module"},"17:14392:4381":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:8918:5738":{"crate_id":5,"path":["std","path","Components"],"kind":"struct"},"17:11064:3971":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:23591:6238":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"16:7904:5433":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:786:166":{"crate_id":5,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"18:659:3779":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:6901:5261":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:8622:14115":{"crate_id":5,"path":["std","net","Shutdown"],"kind":"enum"},"6:6360:7454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:5617:7431":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"5:9393:5903":{"crate_id":5,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"5:12624:1965":{"crate_id":5,"path":["std","usize"],"kind":"primitive"},"17:10563:3805":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:41262:5843":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:22754:14078":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:12121:4057":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:10594:238":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"16:2588:5041":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:6486:7529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:6887:5062":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:5611:7428":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:22619:13727":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:1667:7033":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:7996:3598":{"crate_id":5,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:45413:3054":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:45630:6366":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"5:4126:14117":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:14042:4298":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:3887:3851":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:12919:4158":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:6835:5253":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:582:3819":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:43065:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:23032:8497":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"17:16486:4247":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:14311:4368":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"5:1640:2932":{"crate_id":5,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:44521:6319":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:12815:3836":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:15990:4780":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:8156:5792":{"crate_id":5,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:43176:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:5375:7309":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:7734:3396":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:46997:6406":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:1530:6935":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:12975:4164":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:12305:4079":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"1:3621:2891":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:14858:4467":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:5707:21191":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:12624:4127":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:485:6855":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:5170:5108":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"14:7:5605":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:15869:4747":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:13870:4268":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:15076:4505":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:11877:3973":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:47823:6481":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:41407:6273":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"4:3695:3028":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:5007:7187":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"19:0:1327":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:41022:3387":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:14042:6199":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"17:15805:4730":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"11:1118:5618":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:44714:6175":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:2679:8497":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"6:5051:7208":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"4:7084:2939":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:41171:3811":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"5:11094:32618":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:16799:4278":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:11817:4023":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:3474:2877":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"17:15956:4773":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:3086:29517":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:4163:2576":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:9359:119":{"crate_id":5,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"4:3854:5952":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:1630:5951":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:15620:4686":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:4981:5103":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"11:2323:3042":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:7383:5337":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:11065:5917":{"crate_id":5,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:47293:6436":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:3036:14078":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:4421:5734":{"crate_id":5,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"14:219:5612":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:8317:21205":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:12034:4043":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:11018:7888":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"4:5281:3647":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"16:8633:21206":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:34249:2870":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:42648:3161":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:32805:258":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:42727:6293":{"crate_id":1,"path":["core","range","iter","IterRange"],"kind":"struct"},"6:6602:7592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:4767:3004":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:10342:6286":{"crate_id":5,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"6:1500:6922":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:8023:3800":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:8176:5454":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:11420:3986":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:47500:6443":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"16:5222:5110":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:12748:4139":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:2504:5037":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:6950:5265":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:23646:6243":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:2828:3672":{"crate_id":1,"path":["core","clone","InitializingSlice"],"kind":"struct"},"1:9442:3163":{"crate_id":1,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"5:8060:2750":{"crate_id":5,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:47128:6413":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"11:2507:6833":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:11857:6170":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:4897:3014":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"5:8945:5887":{"crate_id":5,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:42572:6157":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"18:581:3204":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:6989:6135":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"9:168:8024":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"11:820:3036":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:979:3035":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:44592:5850":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"16:7956:5445":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:5255:7261":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:16574:4251":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"11:1083:5617":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:2665:697":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:5044:7206":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:6110:3570":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"5:4822:14122":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:44511:6318":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:8121:14028":{"crate_id":5,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:11591:3936":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:11970:4034":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"4:2340:29403":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:12582:32615":{"crate_id":5,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:5288:7281":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:10625:33305":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"4:7534:3627":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:6864:21197":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:32861:3139":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"5:11969:5781":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:7317:7725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"4:7679:3642":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:3141:127":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"5:12606:1860":{"crate_id":5,"path":["std","tuple"],"kind":"primitive"},"17:13204:4182":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:12408:21374":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"4:7747:3648":{"crate_id":4,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:10665:3318":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:42679:3162":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:48015:6498":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:5312:26486":{"crate_id":1,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"5:12193:5782":{"crate_id":5,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:11023:7890":{"crate_id":5,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:7347:5335":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:47852:6482":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:31152:2924":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"11:832:3037":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:12550:5943":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"4:1395:3041":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"4:3078:7906":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:42554:6155":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"5:8656:5733":{"crate_id":5,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:2988:5059":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"11:859:3039":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:7463:7776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:5027:14132":{"crate_id":5,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"18:670:3785":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:700:5700":{"crate_id":5,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:14151:4330":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:12318:4082":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:6659:7612":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:2658:5044":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"14:0:2846":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:12592:8509":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:42636:2576":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"16:8118:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"4:1244:32375":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:47050:6409":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:6157:5132":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:13546:4206":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"17:14611:4414":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:8611:5854":{"crate_id":5,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:11110:5792":{"crate_id":5,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"6:6744:7640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:3502:3832":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:7445:7766":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:23241:6208":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:42991:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"18:698:3789":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"4:1481:100":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"14:31:5605":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:15409:4624":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"18:689:3788":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:13853:4266":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:6237:5141":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:8206:5067":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:6203:21193":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"4:4121:2934":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:5405:7324":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:9341:5897":{"crate_id":5,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:2343:14060":{"crate_id":5,"path":["std","fs","read_to_string"],"kind":"function"},"5:4218:14123":{"crate_id":5,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"11:776:2934":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:47405:6440":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"4:3299:29512":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:46676:6376":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:44470:6261":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:13718:4232":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:10760:3601":{"crate_id":5,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:5462:7359":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:4900:5100":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:14098:4316":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:42819:226":{"crate_id":1,"path":["core","range","RangeInclusive"],"kind":"struct"},"2:234:238":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:535:3098":{"crate_id":5,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:1643:7016":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"11:2354:3028":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"11:1878:5621":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:11957:4033":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:13454:8650":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:7369:5071":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:4976:7169":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:15417:4627":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:471:3816":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:2803:5719":{"crate_id":5,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:23489:8343":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:13756:4247":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"4:5126:3570":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:6171:5135":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:5025:7196":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:22118:29042":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"5:8312:5798":{"crate_id":5,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:15822:4737":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:12948:8652":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:11066:3685":{"crate_id":1,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"16:8063:21203":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:553:6896":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:12885:4155":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:14772:4458":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:3358:5720":{"crate_id":5,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:23416:25487":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:6438:21194":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"4:1380:3042":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:901:3813":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:13536:4160":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:32780:6248":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:23668:6245":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"16:2638:5043":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:11690:4008":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:12065:4051":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:3666:3312":{"crate_id":5,"path":["std","io","Write"],"kind":"trait"},"16:2722:5047":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:16138:4836":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:44578:3811":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:14871:4468":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:8162:5069":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:10217:21257":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:14358:3690":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"5:1881:5706":{"crate_id":5,"path":["std","env","VarsOs"],"kind":"struct"},"1:13138:6186":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"11:2540:2930":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:11935:5939":{"crate_id":5,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:42332:182":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:22231:13724":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:2814:8518":{"crate_id":1,"path":["core","clone","CloneToUninit"],"kind":"trait"},"4:7857:2933":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:14962:4484":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:12797:21398":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:8264:5464":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:23309:7913":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:2618:5042":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"5:9556:3051":{"crate_id":5,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:4184:14122":{"crate_id":5,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:22929:13809":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"4:7772:5977":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:10331:21261":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"5:2562:2778":{"crate_id":5,"path":["std","io"],"kind":"module"},"6:559:6899":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:32804:251":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"17:14932:4478":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:14357:4377":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:13450:4199":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:16029:4792":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:10661:218":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"5:6869:5765":{"crate_id":5,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:16752:4999":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"5:560:3123":{"crate_id":5,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"1:43424:3314":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:4869:7122":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:5230:7251":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:42532:5733":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:10777:3954":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"17:10822:3815":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"18:635:3778":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:316:3813":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:11442:7892":{"crate_id":5,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:6500:7530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:5658:7447":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"4:1208:32374":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:15682:4700":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:2224:8486":{"crate_id":1,"path":["core","ptr","metadata","metadata"],"kind":"function"},"1:47226:6433":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:586:6913":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:46708:6378":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:14219:4332":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:42860:238":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"17:12292:4077":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:2742:3561":{"crate_id":5,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:7629:3237":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:9426:32590":{"crate_id":5,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:10802:3811":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:5083:5105":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:13177:6188":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:12175:4061":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"18:754:3804":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:8440:2577":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:11412:174":{"crate_id":5,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:2436:3831":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:2778:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:45182:6348":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:9800:151":{"crate_id":5,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:15762:4722":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:8562:5514":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"11:1136:3043":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:6026:5061":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:5301:7286":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:13360:4193":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"4:1364:3040":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:2908:214":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:23061:14078":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"5:10843:5724":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:11290:34782":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:0:1032":{"crate_id":6,"path":["libc"],"kind":"module"},"4:2248:3098":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:544:5013":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:15063:4504":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:7156:5301":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:906:3029":{"crate_id":5,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"11:2126:3042":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:5640:7438":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"15:0:2847":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:46790:6387":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:1563:6958":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:10166:21256":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:14415:4384":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:48030:6499":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:1569:6960":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:13215:6169":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"11:427:34743":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:2488:8486":{"crate_id":5,"path":["std","fs","metadata"],"kind":"function"},"5:7442:3595":{"crate_id":5,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:8720:150":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:13161:6187":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:6398:7481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:6040:5064":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:570:6904":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:5196:5109":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:4890:7130":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:8863:5881":{"crate_id":5,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:3060:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"6:5334:7296":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:3564:2885":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:8220:5456":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:6694:5231":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:3152:150":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"17:10976:34777":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"18:608:3772":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:8934:5886":{"crate_id":5,"path":["std","path","Ancestors"],"kind":"struct"},"17:14139:4327":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:6747:5020":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:3684:14076":{"crate_id":5,"path":["std","io","Seek"],"kind":"trait"},"17:15880:4751":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:41829:3683":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:8792:5878":{"crate_id":5,"path":["std","path","Prefix"],"kind":"enum"},"5:8711:7735":{"crate_id":5,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"18:735:25460":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:45640:192":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:45679:6368":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:7713:34767":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:7518:5361":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:4613:3018":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:47426:6441":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"5:6872:14210":{"crate_id":5,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:2040:3570":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"6:5664:7450":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:8304:2761":{"crate_id":5,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:46691:6377":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:41581:5848":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:44196:6166":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:7884:32632":{"crate_id":5,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"16:5346:5114":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:1120:3042":{"crate_id":5,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:7804:34769":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"4:7723:5974":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:473:6850":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:22967:13810":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:15009:4498":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:4182:5091":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:14831:4464":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:4228:14124":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:12107:4056":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:950:2934":{"crate_id":5,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"9:318:6840":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:7390:7754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:16249:4871":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:3580:2754":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"4:2575:6733":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"11:2394:2576":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"5:5112:14167":{"crate_id":5,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"9:0:2842":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:12951:4162":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:4240:14127":{"crate_id":5,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:15889:4754":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:41211:8550":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"16:7468:5354":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"14:40:4248":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:6300:5154":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:41275:6263":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"4:925:3622":{"crate_id":4,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:46872:6392":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:12009:6174":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:7984:7848":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:12385:3613":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:12162:4060":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:40985:3393":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:23108:13802":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:2405:3828":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:10417:21264":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:41102:3390":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"6:5604:7425":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:7858:32630":{"crate_id":5,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"17:12346:4085":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:3858:14116":{"crate_id":5,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:12279:4075":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:14916:4477":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:11554:5938":{"crate_id":5,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:42354:6152":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:43139:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:15770:4724":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:45012:6341":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:43733:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:4957:7161":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"14:186:20273":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:14345:4375":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:648:14024":{"crate_id":5,"path":["std","ascii","AsciiExt"],"kind":"trait"},"4:1533:3029":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:8707:5865":{"crate_id":5,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:41236:6261":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:42840:224":{"crate_id":1,"path":["core","range","RangeFrom"],"kind":"struct"},"11:2099:3040":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"10:36:6839":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:32862:3337":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"9:435:20182":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:5241:7255":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:14737:4447":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"11:0:2844":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:34048:2869":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:4265:5093":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"3:0:2839":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:42954:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:12037:6176":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:8682:5854":{"crate_id":5,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:4842:5098":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:13192:4181":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"6:4997:7180":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"4:6020:2934":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"16:7987:5447":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:12259:21373":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"5:9641:5708":{"crate_id":5,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"5:7379:32627":{"crate_id":5,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"16:6911:5262":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:5004:3571":{"crate_id":5,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:3419:2888":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:13321:21270":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:22614:14078":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"5:2506:14068":{"crate_id":5,"path":["std","fs","canonicalize"],"kind":"function"},"16:8055:5450":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"4:1883:2932":{"crate_id":4,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"11:481:166":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:23380:6217":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:3775:2893":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:42520:6289":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:46629:6369":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:13732:4233":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:12566:8033":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:24126:248":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"4:7759:257":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"4:4546:3570":{"crate_id":4,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"1:34182:2871":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:33352:2865":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"11:1898:5624":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:22170:14078":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"14:213:5610":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:6638:5208":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"17:12839:4149":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"5:11377:3050":{"crate_id":5,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"4:6688:2934":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"5:4340:14143":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:1008:3039":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:7762:5394":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:11308:3976":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:10486:21266":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"16:6606:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:5345:454":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"5:6927:5769":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"5:8592:3811":{"crate_id":5,"path":["std","io","Bytes"],"kind":"struct"},"1:48045:6500":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:9405:5905":{"crate_id":5,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:6300:6126":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:12536:4122":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"18:718:3795":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"7:31:20169":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:2091:210":{"crate_id":5,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"11:2513:6834":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:8011:5077":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:7951:5783":{"crate_id":5,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:506:3558":{"crate_id":5,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:5630:7437":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"9:49:8014":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:8093:5451":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"4:5811:2938":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:11028:5794":{"crate_id":5,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:7575:5908":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:3609:5857":{"crate_id":5,"path":["std","io","Read"],"kind":"trait"},"5:8537:5840":{"crate_id":5,"path":["std","io","util","Sink"],"kind":"struct"},"16:5725:3952":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:564:6901":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"4:4316:3570":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"5:12034:3607":{"crate_id":5,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:7786:34768":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:11536:7896":{"crate_id":5,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"17:13817:4261":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:42620:3028":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"6:4902:7135":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"11:763:3031":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:6878:7684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:45371:6548":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:22652:29053":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:4888:3013":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:44400:6307":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:11578:4002":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"4:776:264":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:3830:115":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:4547:8543":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"6:8231:7862":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:31205:3323":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:15572:4677":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:5381:7310":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:2878:5054":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:11039:5910":{"crate_id":5,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"4:7185:280":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"17:12081:4053":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"11:1558:5619":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:14268:4357":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:6571:5200":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:13348:4192":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:6800:6128":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:13397:4196":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:41123:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:16019:4787":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:8304:7878":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:41110:3383":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:10288:28587":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:3085:150":{"crate_id":5,"path":["std","io","error","Error"],"kind":"struct"},"11:787:2932":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"11:423:34742":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:26526:283":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:11201:3687":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"17:16356:4897":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:15530:4670":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:2858:5053":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"4:4482:3639":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"4:3082:29516":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"4:4286:3570":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"11:686:3033":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:12200:5782":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:6422:7497":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:12190:4063":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:4914:7144":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:3957:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:2781:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:32894:278":{"crate_id":1,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"1:42767:6294":{"crate_id":1,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"5:4356:14145":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:5295:7283":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:45230:6357":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:6756:7642":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"5:12604:1736":{"crate_id":5,"path":["std","slice"],"kind":"primitive"},"5:3318:33770":{"crate_id":5,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:15147:4515":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:16716:4993":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"6:7524:7819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:14598:4412":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:7870:32631":{"crate_id":5,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"17:12722:4137":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:5568:7404":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:5249:7259":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:11951:4032":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:705:14026":{"crate_id":5,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:3533:2898":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:10393:21263":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:6623:5206":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:45207:6349":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:23324:6210":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:538:6888":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:10533:3952":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:6500:20303":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:42689:3165":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:45355:7937":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:9497:246":{"crate_id":5,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:43691:7929":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:7851:8568":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"16:2948:5057":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:23396:25486":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:5107:7221":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:42930:208":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:12057:5730":{"crate_id":5,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:31184:2925":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"11:2519:6835":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:48068:6501":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:12094:4055":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"4:7258:3669":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:11221:3974":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:47035:6408":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:1589:6974":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:7302:5329":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:12620:1889":{"crate_id":5,"path":["std","u32"],"kind":"primitive"},"17:16290:4885":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:3802:2897":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:10792:3958":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"1:47873:6483":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:4792:7062":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:23458:7916":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"4:6158:14012":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:42916:2576":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"6:6670:7615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"5:1662:5624":{"crate_id":5,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:43102:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:5265:7267":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:45543:176":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:0:1762":{"crate_id":5,"path":["std"],"kind":"module"},"16:8500:5506":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:14083:4310":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:8525:5509":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:15660:4698":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:2126:3188":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"17:14820:4463":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:2377:21329":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:10367:21262":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:14000:4293":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:6273:232":{"crate_id":5,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:1494:6919":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"4:1549:2576":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"7:0:1955":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:6981:5080":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:10912:3047":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"11:1862:2576":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:40055:2900":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:8225:7861":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:16230:4870":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:1632:7008":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:44875:6334":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:22100:3204":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:1629:3028":{"crate_id":5,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:16276:4878":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:13040:4174":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"16:2465:5030":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:3592:155":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:34115:2873":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:2770:5049":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:6082:5122":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:44997:6336":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:5477:7368":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:14519:4401":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:47911:6485":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"4:5950:265":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"5:8093:3110":{"crate_id":5,"path":["std","thread","Thread"],"kind":"struct"},"1:12932:6180":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:15674:4699":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:6617:7594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:4990:7177":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:6769:7649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:12672:4130":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:6039:5759":{"crate_id":5,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:7072:21198":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:8284:7873":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:5019:7193":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:15120:4512":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:15585:4682":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:9183:5889":{"crate_id":5,"path":["std","pipe","PipeWriter"],"kind":"struct"},"1:40297:2894":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:5142:5107":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:3057:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"6:7308:7719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:14901:4473":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"4:1599:3033":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:23103:13804":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:44568:6324":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:1521:6930":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:7209:5314":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:1915:5707":{"crate_id":5,"path":["std","env","SplitPaths"],"kind":"struct"},"11:2115:3041":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:6996:245":{"crate_id":5,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:43289:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:681:5697":{"crate_id":5,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:6995:7912":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:15966:4776":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:46744:6384":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:44428:6311":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:8800:162":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"18:765:25461":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:6534:3583":{"crate_id":5,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:12761:4140":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:6416:7494":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:6513:7536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:15474:4664":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:14885:4471":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:4805:7071":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:8617:5856":{"crate_id":5,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:15912:4762":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:14795:4459":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:4970:7166":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:41345:6270":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:44538:6320":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:3389:2863":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"11:389:3553":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:5271:7270":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:16164:4845":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:8326:7884":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:9372:32589":{"crate_id":5,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:40906:6253":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:4906:14170":{"crate_id":5,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:45547:231":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:11930:6172":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:12616:933":{"crate_id":5,"path":["std","i64"],"kind":"primitive"},"6:5196:7235":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:9278:5896":{"crate_id":5,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"4:297:2929":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"5:6941:3591":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"6:6893:7695":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:11400:3983":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:14326:4370":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:47675:6477":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:14025:6196":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"4:6137:3647":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"4:4467:281":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:5186:7228":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:34461:2874":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:5482:7370":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:8595:5518":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:11220:3604":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:12775:4141":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:9231:5893":{"crate_id":5,"path":["std","process","ExitCode"],"kind":"struct"},"17:11172:34781":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:6459:7509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:9474:3587":{"crate_id":5,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:4481:6115":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:1696:7044":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:14459:4392":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:906:3814":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:12554:6179":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:14974:4486":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:8674:5861":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:13908:4274":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:16499:4921":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:44418:6310":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:3694:14096":{"crate_id":5,"path":["std","io","BufRead"],"kind":"trait"},"16:2568:5040":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"11:2469:20256":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"6:6651:7610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:479:6853":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:6751:5763":{"crate_id":5,"path":["std","sync","once","Once"],"kind":"struct"},"4:1571:3030":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:1219:3821":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:3627:5728":{"crate_id":5,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:14506:4398":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:14671:4422":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:4025:5732":{"crate_id":5,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:2221:8511":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:7990:7850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:14298:4366":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"17:11474:21282":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"17:11997:4036":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:10595:3312":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"17:10030:21252":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:14315:119":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:47067:6410":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:7292:7707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:0:585":{"crate_id":1,"path":["core"],"kind":"module"},"1:47166:6415":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:5311:7289":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:5111:5106":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:13054:3998":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:16172:4848":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:6852:7669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:45557:239":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"6:6719:7631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"5:5853:14198":{"crate_id":5,"path":["std","process","Termination"],"kind":"trait"},"1:46886:6393":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"18:613:34787":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:4692:5095":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:6679:7621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:16180:4849":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:8847:28586":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:40315:6252":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:6610:7593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"11:1027:3042":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:10653:3313":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"11:2275:3040":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:6710:7629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"5:11340:5892":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:10548:3953":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"11:1652:3555":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:44976:8665":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:22981:8497":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:41363:6271":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:12605:1770":{"crate_id":5,"path":["std","str"],"kind":"primitive"},"1:22979:29274":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"16:6711:5233":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:9512:3594":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"10:44:5630":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"5:12597:436":{"crate_id":5,"path":["std","bool"],"kind":"primitive"},"1:38842:2882":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"18:0:2850":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:7880:5173":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:12248:4072":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:16125:4830":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:9812:3600":{"crate_id":5,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:4919:3015":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:12118:5732":{"crate_id":5,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:41791:6143":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:11901:4030":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"5:8528:3800":{"crate_id":5,"path":["std","io","util","Empty"],"kind":"struct"},"5:10469:5918":{"crate_id":5,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:11337:3688":{"crate_id":1,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"1:4405:3570":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:2156:1397":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"4:4982:229":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"8:0:2841":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:41133:6257":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:45389:135":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"16:7256:5327":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:23347:6215":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:12618:1901":{"crate_id":5,"path":["std","u8"],"kind":"primitive"},"4:6902:3616":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:4896:7132":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:13168:4179":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:2681:8498":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"16:8708:5527":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:16705:4988":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"6:6390:7479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:985:3036":{"crate_id":5,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:40975:3392":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:23075:13803":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"16:3439:5085":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:10659:3316":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:42498:25518":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:6729:5243":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:12617:914":{"crate_id":5,"path":["std","i128"],"kind":"primitive"},"17:13490:4201":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:45097:6347":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:6479:5762":{"crate_id":5,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:6939:5264":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:15857:4746":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:23018:13811":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:3046:20333":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:8272:7871":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:43939:3046":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:7515:7816":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:10999:5928":{"crate_id":5,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"5:3321:33771":{"crate_id":5,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:8598:5850":{"crate_id":5,"path":["std","io","Split"],"kind":"struct"},"1:45196:8666":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:44179:7930":{"crate_id":1,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"5:996:3037":{"crate_id":5,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:8582:5515":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:43213:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:14450:2927":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"11:851:3038":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:45335:7932":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:3066:157":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"6:5585:7411":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:16775:5004":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"5:2529:14075":{"crate_id":5,"path":["std","fs","exists"],"kind":"function"},"6:465:6845":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:23510:14078":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:16611:4965":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"16:4118:5089":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:13514:21271":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:8007:7859":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"4:6734:3616":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:41181:3676":{"crate_id":1,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"1:4493:6116":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:6995:5266":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:8585:5848":{"crate_id":5,"path":["std","io","Take"],"kind":"struct"},"17:11552:3999":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:15982:4779":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:1651:5622":{"crate_id":5,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:906:8330":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:16302:4887":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:2794:5050":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:5494:7373":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"11:1579:5620":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:41159:6258":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:6645:7607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:41284:6264":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:47181:6416":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:10907:3045":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:8070:3111":{"crate_id":5,"path":["std","thread","Builder"],"kind":"struct"},"17:10728:3810":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:14749:4449":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:12174:5940":{"crate_id":5,"path":["std","alloc","System"],"kind":"struct"},"1:32794:6249":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"16:6419:5015":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"5:10467:5919":{"crate_id":5,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"5:2764:5718":{"crate_id":5,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:23372:6216":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"11:718:3034":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:2490:14063":{"crate_id":5,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:4808:5097":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:8688:5863":{"crate_id":5,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"5:12598:1208":{"crate_id":5,"path":["std","never"],"kind":"primitive"},"1:47794:6480":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:16473:4233":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:13144:4177":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"5:2339:3670":{"crate_id":5,"path":["std","fs","read"],"kind":"function"},"1:4528:8542":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"4:5556:14004":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"5:12615:927":{"crate_id":5,"path":["std","i32"],"kind":"primitive"},"17:16202:4855":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:14030:4297":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:578:6909":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:12148:4059":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:43028:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:46968:6405":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"4:7735:5976":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:5850:7656":{"crate_id":5,"path":["std","process","exit"],"kind":"function"},"1:42688:3166":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:43719:25651":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"0:0:2609":{"crate_id":0,"path":["fastrand"],"kind":"module"},"6:5412:1279":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"4:7782:5978":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:9807:5793":{"crate_id":5,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:14404:4383":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:41397:6272":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:4156:14119":{"crate_id":5,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:8266:7870":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:11514:3994":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:44562:6182":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:3589:154":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:1597:6979":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:11705:4009":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:2484:5036":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"9:470:20181":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:14157:217":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:15089:4506":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:14572:4409":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:42592:206":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:13502:8659":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:12647:4128":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:46659:6373":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:9469:199":{"crate_id":5,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:11818:6169":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:1727:7056":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:3320:2923":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:38732:2880":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:45026:6344":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:16191:4854":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:45359:7938":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:9446:6546":{"crate_id":5,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"5:11351:32619":{"crate_id":5,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:11123:34780":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:3586:153":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"6:6858:7670":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"4:1610:3034":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:8609:5081":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:13426:8645":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"11:1063:34747":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:8308:158":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:13691:4224":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"5:5323:5743":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:5623:7434":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"5:617:3107":{"crate_id":5,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:42900:3028":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"16:2746:5048":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:11552:252":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:8055:14078":{"crate_id":5,"path":["std","sealed","Sealed"],"kind":"trait"},"6:6631:7605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"11:2206:4043":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"5:6032:5756":{"crate_id":5,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:12334:4084":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:46811:6388":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:15601:4685":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:44900:3385":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:11538:3998":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:5512:7379":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"4:7612:2576":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:22142:29048":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:3920:5730":{"crate_id":5,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:7835:21202":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:6142:21192":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"11:1703:168":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:12868:4199":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"0:153:2439":{"crate_id":0,"path":["fastrand","Rng"],"kind":"struct"},"1:47521:6444":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:6543:7559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:16592:4261":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"16:7935:5442":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:6109:5131":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:23478:6230":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:11863:4026":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"4:7495:2928":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"1:13432:6160":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:32787:3012":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"17:15732:4717":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:4950:3016":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:6447:3582":{"crate_id":5,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:45424:8676":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:14844:4466":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:2548:5039":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:2804:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:8319:177":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:8803:3395":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:40962:3398":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:1938:5708":{"crate_id":5,"path":["std","env","Args"],"kind":"struct"},"1:38897:2883":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"4:7544:5969":{"crate_id":4,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"6:6505:7531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:38787:2881":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:40189:224":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:44742:6328":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"11:2340:5627":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"5:12603:351":{"crate_id":5,"path":["std","array"],"kind":"primitive"},"16:6841:5254":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:4369:14146":{"crate_id":5,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:22349:13722":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:43741:3323":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"17:11616:3974":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:4948:14135":{"crate_id":5,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:6792:7655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:5349:7298":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:11025:34778":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"4:4151:3616":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"4:7841:2932":{"crate_id":4,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:5366:7303":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:45535:7941":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"6:5179:7227":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:15049:4501":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"4:3294:5622":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"4:1409:3043":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:14334:4372":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:40139:2892":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:3585:5086":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"17:12370:4087":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:12602:1352":{"crate_id":5,"path":["std","pointer"],"kind":"primitive"},"16:8623:5520":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:1129:3043":{"crate_id":5,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:1551:6950":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:5121:14168":{"crate_id":5,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"9:412:20184":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:7728:3161":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"11:1042:20260":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:45351:7936":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:16678:4979":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:1338:3823":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:4929:7150":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:7279:5328":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:12391:4089":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:11726:3028":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:2866:213":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"4:881:102":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:6387:5162":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:5925:5753":{"crate_id":5,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:4834:7748":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"4:3354:5624":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"18:113:25453":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:2021:14059":{"crate_id":5,"path":["std","error","Indented"],"kind":"struct"},"5:8546:5729":{"crate_id":5,"path":["std","io","IoSlice"],"kind":"struct"},"17:15694:4703":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:11756:21302":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:41605:6141":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:32727:2854":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"17:13069:3973":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:15035:4500":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:12007:3891":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:42414:7919":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:23188:6207":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"11:292:6828":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:46761:6385":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:4150:5090":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:9239:3028":{"crate_id":5,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:30922:3362":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"18:531:3759":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:11194:3686":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"16:0:2848":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:40304:5987":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"6:1711:7051":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:40267:2436":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"16:6460:21195":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:9194:211":{"crate_id":5,"path":["std","process","Output"],"kind":"struct"},"1:41384:6134":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:45656:6367":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:2297:201":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:3790:159":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:10140:21255":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:5280:5112":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:2728:3564":{"crate_id":5,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"4:3921:2932":{"crate_id":4,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:40247:228":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"4:3682:194":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"4:7576:222":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:6792:5247":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"17:10927:3969":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:2871:147":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"5:12622:1877":{"crate_id":5,"path":["std","u128"],"kind":"primitive"},"4:3320:5623":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:44501:6317":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:47951:6489":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:46915:6402":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"11:2533:6837":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:11431:21281":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:13081:3974":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:43994:6305":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:8237:7863":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:15829:4738":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:12609:763":{"crate_id":5,"path":["std","f16"],"kind":"primitive"},"5:11214:3603":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"11:1885:5622":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:6062:5066":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:13221:21268":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:3454:5724":{"crate_id":5,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:41432:3776":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:893:3028":{"crate_id":5,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:13426:4197":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"1:47255:6434":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:4881:7125":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:7407:7755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:47931:6487":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:13837:4262":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:13591:4210":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:5127:7223":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"4:2165:5953":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:13969:4284":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:7284:7702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:8555:14077":{"crate_id":5,"path":["std","io","SeekFrom"],"kind":"enum"},"1:42785:6295":{"crate_id":1,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"4:1224:29515":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:3675:33395":{"crate_id":5,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:13609:4213":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:6111:3573":{"crate_id":5,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:10937:34776":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:6472:7518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:8135:14029":{"crate_id":5,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:2964:5058":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"18:521:25462":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:10860:151":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:7189:21199":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:47920:6486":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:5755:5120":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:14946:4480":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:3693:5087":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:7367:7753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:32803:249":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"17:13118:4176":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:33776:2867":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:13553:4207":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"5:434:197":{"crate_id":5,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:11502:3993":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"17:10629:3807":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:5058:5104":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:3308:277":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"17:12786:4142":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:10663:3317":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:6749:7641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:10613:156":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"5:9538:3050":{"crate_id":5,"path":["std","time","SystemTime"],"kind":"struct"},"17:321:3814":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:41303:146":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:23465:6229":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:43955:3048":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:8278:7872":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:40207:227":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:45367:7940":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:4170:14120":{"crate_id":5,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:9479:3164":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:7000:3682":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:11162:3973":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:15105:4508":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:5441:7344":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:15753:4721":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:5740:3953":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:41144:8564":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:0:325":{"crate_id":4,"path":["alloc"],"kind":"module"},"17:16152:4842":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:16378:4903":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"4:998:3028":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"4:4356:3028":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:4063:2934":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:22225:13721":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:8666:5414":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:7494:7802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:22223:14078":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:4829:7089":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:41805:5763":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:3547:5726":{"crate_id":5,"path":["std","io","util","Repeat"],"kind":"struct"},"14:201:14009":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:41591:6140":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:13920:4277":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:5687:5119":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:8402:5802":{"crate_id":5,"path":["std","io","error","Custom"],"kind":"struct"},"17:12224:4067":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:12023:6175":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:4:1292":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:41007:3385":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"11:321:6831":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:3923:5731":{"crate_id":5,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:43664:7920":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:44856:6332":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:12612:761":{"crate_id":5,"path":["std","f128"],"kind":"primitive"},"6:1703:7047":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:2682:5045":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:13470:3836":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:894:5022":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:44409:6308":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:7344:7735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:10114:21254":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:2818:5051":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:12571:14030":{"crate_id":5,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:11629:4004":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:44438:6312":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:7337:7731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:8279:152":{"crate_id":5,"path":["std","fs","FileType"],"kind":"struct"},"17:16262:4876":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:7962:7847":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"18:726:3798":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:15285:4521":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:5428:7334":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:13780:4248":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:22154:29051":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:4831:3011":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:14113:4322":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:3394:2868":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:5503:7378":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"18:538:3762":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"4:1779:3616":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:9520:174":{"crate_id":5,"path":["std","time","Instant"],"kind":"struct"},"1:10102:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:4875:7123":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:15898:4755":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:12051:6177":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:8141:14049":{"crate_id":5,"path":["std","env","VarError"],"kind":"enum"},"1:3796:2895":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:11955:5778":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:1514:6927":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:4927:5101":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:5127:3377":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:15135:4160":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:23431:25488":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:10107:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:7220:5315":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:13094:4175":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"18:563:3764":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:12735:4138":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"11:1858:3028":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:11086:32616":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:11385:21280":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"5:10717:5890":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:40900:3385":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:545:6891":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:45363:7939":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:14130:28673":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:4239:5092":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:517:6876":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:42908:3029":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"16:6678:5228":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"1:46776:6386":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:2413:20304":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:8250:5794":{"crate_id":5,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:7055:5277":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:7562:7838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:14546:4406":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:5139:7224":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:42611:185":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"16:7459:5351":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:6779:5246":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:9592:6160":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:6431:3579":{"crate_id":5,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:8316:7882":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:12626:13":{"crate_id":5,"path":["std","fn"],"kind":"primitive"},"16:7165:5302":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:23358:25484":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:41331:6267":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"11:813:3035":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:10655:3314":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"17:14651:4419":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:11464:3990":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"1:46936:6403":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:11114:5931":{"crate_id":5,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"16:6873:5258":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:2448:5028":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:45619:25739":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:44760:6329":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:41416:6136":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:12905:4157":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:14374:4380":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"4:1518:3028":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:11652:4005":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:44660:6327":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:3577:3570":{"crate_id":5,"path":["std","io","Guard"],"kind":"struct"},"1:3069:272":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:41820:5726":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:4921:7148":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:16364:4900":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"5:4232:14125":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:4764:5096":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:12043:4046":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"11:1866:2934":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:9507:3593":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:909:202":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"5:9247:5895":{"crate_id":5,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:6586:5203":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"5:4178:14121":{"crate_id":5,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:4816:7079":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:2223:8512":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:3404:2866":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:8260:7869":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:5471:7365":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:31190:3191":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:15023:4499":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:4644:3019":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:8075:3112":{"crate_id":5,"path":["std","thread","ThreadId"],"kind":"struct"},"1:22129:29045":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:937:3031":{"crate_id":5,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:31590:3204":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:43674:3323":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"5:9255:2576":{"crate_id":5,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"4:7604:2576":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:15638:4694":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:16619:4966":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"6:8294:7877":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:11719:4011":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"5:9502:247":{"crate_id":5,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:9413:5908":{"crate_id":5,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:41061:3388":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:13101:6183":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"5:11865:6300":{"crate_id":5,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"5:6645:198":{"crate_id":5,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:11830:3998":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:6452:7507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"4:212:3615":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"4:4559:3639":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:12621:1895":{"crate_id":5,"path":["std","u64"],"kind":"primitive"},"1:1918:8449":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"5:4909:14148":{"crate_id":5,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:16789:5005":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:3867:132":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:9354:5898":{"crate_id":5,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:3360:5721":{"crate_id":5,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"4:39:2931":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"14:159:5605":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"15:306:20286":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:14182:6201":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:39476:2884":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:9205:5891":{"crate_id":5,"path":["std","process","ExitStatus"],"kind":"struct"},"6:6523:7543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:6736:34765":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:3083:238":{"crate_id":5,"path":["std","io","error","Result"],"kind":"type_alias"},"16:5377:5115":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:6656:5222":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:11327:5891":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:41847:6148":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:8230:21204":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:1489:6917":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:966:3032":{"crate_id":5,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:666:3820":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:6702:7628":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"18:573:3755":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:45565:219":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:10651:133":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"17:12358:4086":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:47977:6491":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:12825:4144":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:22339:14078":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:6254:5146":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:47149:6414":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:10515:21267":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:5521:7380":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:8809:8575":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:8134:5078":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:5130:3841":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"5:6755:5764":{"crate_id":5,"path":["std","sync","once","OnceState"],"kind":"struct"},"4:6105:72":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"4:7060:2938":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"4:7584:5970":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:22847:13807":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"6:8243:7864":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"5:6355:3575":{"crate_id":5,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:22:845":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"5:1503:168":{"crate_id":5,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:7977:5075":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:10273:21259":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:40091:2899":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"5:12600:1923":{"crate_id":5,"path":["std","unit"],"kind":"primitive"},"17:12686:4134":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:1625:7004":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:6335:5156":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:11123:5752":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"5:4348:14144":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:12625:1460":{"crate_id":5,"path":["std","reference"],"kind":"primitive"},"5:1111:3041":{"crate_id":5,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:5918:3583":{"crate_id":5,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"11:1892:5623":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:11677:4007":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:6257:3583":{"crate_id":5,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"4:2140:5800":{"crate_id":4,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:45248:6193":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:47598:6476":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:44884:6189":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:45217:6353":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:16633:4970":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:13005:4169":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:2230:5980":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:9178:5888":{"crate_id":5,"path":["std","pipe","PipeReader"],"kind":"struct"},"11:2525:34738":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:11620:5680":{"crate_id":5,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"5:12186:32601":{"crate_id":5,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:3424:2889":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:16320:4893":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:4984:7174":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"4:7568:2576":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:14071:4307":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:32891:3336":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"16:2702:5046":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:45131:6192":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:23635:6242":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"18:643:3755":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"5:12599:492":{"crate_id":5,"path":["std","char"],"kind":"primitive"},"1:8495:190":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:14639:4418":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"18:706:3791":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"11:983:3040":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:22131:29047":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:47082:6411":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:12217:3611":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"18:548:165":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:8245:5793":{"crate_id":5,"path":["std","fs","ReadDir"],"kind":"struct"},"5:4946:14133":{"crate_id":5,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:6590:7585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:10864:165":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"17:15430:4634":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"11:649:3028":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:5364:6119":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:11113:3972":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:47471:6442":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"1:42795:222":{"crate_id":1,"path":["core","range","Range"],"kind":"struct"},"5:7224:14217":{"crate_id":5,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:3416:2887":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"13:0:2840":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:5205:7240":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:2433:20331":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:13449:8651":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:15974:4777":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:7473:3596":{"crate_id":5,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:32893:118":{"crate_id":1,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"6:5117:7222":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:44796:6330":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"5:10448:5707":{"crate_id":5,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:16211:4857":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:6187:6125":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:13180:4180":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:44610:6172":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:8407:14108":{"crate_id":5,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:8543:5511":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:14806:4461":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"4:6536:14020":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"17:13208:150":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:11359:6548":{"crate_id":5,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:3310:121":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"5:916:2576":{"crate_id":5,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":32}