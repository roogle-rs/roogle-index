{"root":"0:0:2231","crate_version":"2.1.0","includes_private":false,"index":{"0:110:2204":{"id":"0:110:2204","crate_id":0,"name":"fill","span":{"filename":"src/lib.rs","begin":[536,4],"end":[556,5]},"visibility":"public","docs":"Fill a byte slice with random data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["slice",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13306:30783":{"id":"1:13306:30783","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[134,0],"end":[139,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2657:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:75:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13298:30949":{"id":"1:13298:30949","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:12330:471","self::pattern":"1:12873:8343"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5628:31661":{"id":"4:5628:31661","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"4:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:2165":{"id":"0:63:2165","crate_id":0,"name":"choose_multiple","span":{"filename":"src/global_rng.rs","begin":[179,0],"end":[181,1]},"visibility":"public","docs":"Collects `amount` values at random from the iterator into a vector.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["source",{"generic":"T"}],["amount",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"std::vec::Vec","id":"4:7055:264","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"","id":"1:8364:178","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8364:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:737":{"id":"0:59:737","crate_id":0,"name":"f32","span":{"filename":"src/global_rng.rs","begin":[169,0],"end":[171,1]},"visibility":"public","docs":"Generates a random `f32` in range `0..1`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13225:29652":{"id":"1:13225:29652","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"5:12330:471","self::pattern":"1:12873:8343"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:8349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5631:30915":{"id":"4:5631:30915","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13309:30787"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:128:890":{"id":"0:128:890","crate_id":0,"name":"i16","span":{"filename":"src/global_rng.rs","begin":[157,0],"end":[157,61]},"visibility":"public","docs":"Generates a random `i16` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i16"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:166:883":{"id":"0:166:883","crate_id":0,"name":"i128","span":{"filename":"src/lib.rs","begin":[451,4],"end":[457,5]},"visibility":"public","docs":"Generates a random `i128` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i128"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i128>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13218:26797":{"id":"1:13218:26797","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44168:5868","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13212:6025":{"id":"1:13212:6025","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"5:12330:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43852:6006","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13245:30936":{"id":"1:13245:30936","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12873:8343","str::split":"1:13236:29640","prim@char":"5:12330:471","`DoubleEndedIterator`":"1:8256:129","str::rsplit_terminator":"1:13248:30937"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43926:6008","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:417":{"id":"0:96:417","crate_id":0,"name":"bool","span":{"filename":"src/lib.rs","begin":[342,4],"end":[344,5]},"visibility":"public","docs":"Generates a random `bool`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:2148":{"id":"0:97:2148","crate_id":0,"name":"digit","span":{"filename":"src/lib.rs","begin":[352,4],"end":[365,5]},"visibility":"public","docs":"Generates a random digit in the given `base`.\n\nDigits are represented by `char`s in ranges 0-9 and a-z.\n\nPanics if the base is zero or greater than 36.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["base",{"primitive":"u32"}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153":{"id":"0:153","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,16],"end":[131,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32218:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13239:26783":{"id":"1:13239:26783","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"5:12330:471","self::pattern":"1:12873:8343"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12688:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:753":{"id":"0:61:753","crate_id":0,"name":"f64","span":{"filename":"src/global_rng.rs","begin":[174,0],"end":[176,1]},"visibility":"public","docs":"Generates a random `f64` in range `0..1`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99:753":{"id":"0:99:753","crate_id":0,"name":"f64","span":{"filename":"src/lib.rs","begin":[375,4],"end":[379,5]},"visibility":"public","docs":"Generates a random `f64` in range `0..1`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2929-0:148:2059":{"id":"b:1:2929-0:148:2059","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2888:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2932:137","1:2933:1805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:739:25165":{"id":"4:739:25165","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:738:5629":{"id":"4:738:5629","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:36:2118":{"id":"0:36:2118","crate_id":0,"name":"seed","span":{"filename":"src/global_rng.rs","begin":[72,0],"end":[74,1]},"visibility":"public","docs":"Initializes the thread-local generator with the given seed.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["seed",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13195:29617":{"id":"1:13195:29617","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"5:12349:1850"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13216:30934":{"id":"1:13216:30934","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44130:5537","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13317:30953":{"id":"1:13317:30953","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4942:30953"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44193:3096","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168:965":{"id":"0:168:965","crate_id":0,"name":"isize","span":{"filename":"src/lib.rs","begin":[476,4],"end":[482,5]},"visibility":"public","docs":"Generates a random `isize` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"isize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"isize"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<isize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"isize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13:2057":{"id":"0:13:2057","crate_id":0,"name":"global_rng","span":{"filename":"src/global_rng.rs","begin":[1,0],"end":[218,1]},"visibility":"crate","docs":"A global, thread-local random number generator.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:36:2118","0:38:2191","0:40:417","0:42:2137","0:44:2142","0:46:2187","0:48:2222","0:50:2140","0:53:2148","0:55:2201","0:122:1850","0:124:908","0:126:1832","0:128:890","0:130:1838","0:132:896","0:134:1844","0:136:902","0:138:1826","0:140:883","0:142:1911","0:144:965","0:146:471","0:59:737","0:61:753","0:63:2165"],"is_stripped":true}}},"0:55:2201":{"id":"0:55:2201","crate_id":0,"name":"shuffle","span":{"filename":"src/global_rng.rs","begin":[138,0],"end":[140,1]},"visibility":"public","docs":"Shuffles a slice randomly.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:158:908":{"id":"0:158:908","crate_id":0,"name":"i8","span":{"filename":"src/lib.rs","begin":[419,4],"end":[425,5]},"visibility":"public","docs":"Generates a random `i8` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i8"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i8>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13263:2440":{"id":"1:13263:2440","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12873:8343","`DoubleEndedIterator`":"1:8256:129","prim@char":"5:12330:471","str::rmatches":"1:13266:30938"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44080:6012","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140:883":{"id":"0:140:883","crate_id":0,"name":"i128","span":{"filename":"src/global_rng.rs","begin":[163,0],"end":[163,63]},"visibility":"public","docs":"Generates a random `i128` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i128"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i128>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13248:30937":{"id":"1:13248:30937","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12873:8343","str::split":"1:13236:29640","prim@char":"5:12330:471","str::split_terminator":"1:13245:30936"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43944:6009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:8349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:2191":{"id":"0:105:2191","crate_id":0,"name":"get_seed","span":{"filename":"src/lib.rs","begin":[499,4],"end":[501,5]},"visibility":"public","docs":"Gives back **current** seed that is being held by this generator.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13204:30932":{"id":"1:13204:30932","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"5:12336:1720","str::slice_mut_unchecked":"1:13205:30933","crate::ops::Index":"1:39530:2511"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13295:30948":{"id":"1:13295:30948","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:12330:471","self::pattern":"1:12873:8343"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:8349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2933:1805":{"id":"1:2933:1805","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42117:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13242:29643":{"id":"1:13242:29643","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12873:8343","`DoubleEndedIterator`":"1:8256:129","prim@char":"5:12330:471","str::split":"1:13236:29640"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43894:5851","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:8349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:126:1832":{"id":"0:126:1832","crate_id":0,"name":"u16","span":{"filename":"src/global_rng.rs","begin":[156,0],"end":[156,61]},"visibility":"public","docs":"Generates a random `u16` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13279:30943":{"id":"1:13279:30943","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:172:1832":{"id":"0:172:1832","crate_id":0,"name":"u16","span":{"filename":"src/lib.rs","begin":[566,4],"end":[572,5]},"visibility":"public","docs":"Generates a random `u16` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13269:30939":{"id":"1:13269:30939","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12873:8343","`DoubleEndedIterator`":"1:8256:129","prim@char":"5:12330:471","str::rmatch_indices":"1:13272:30940"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44026:6010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3758:1820":{"id":"1:3758:1820","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39699:5931","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13184:996":{"id":"1:13184:996","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"5:12330:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13208:29638":{"id":"1:13208:29638","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13209:29639"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:152:801":{"id":"0:152:801","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[131,9],"end":[131,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10278:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10259:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13207:29635":{"id":"1:13207:29635","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13206:29634","str::split_at_mut_checked":"1:13209:29639"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5629:31662":{"id":"4:5629:31662","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"4:304:2553","`String`":"4:7641:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:304:2553","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"4:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13308:30786":{"id":"1:13308:30786","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:113:471":{"id":"0:113:471","crate_id":0,"name":"char","span":{"filename":"src/lib.rs","begin":[642,4],"end":[695,5]},"visibility":"public","docs":"Generates a random `char` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<char>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3172:3045-0:148:2059":{"id":"a:1:3172:3045-0:148:2059","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3172:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2917:2919":{"id":"1:2917:2919","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2891:144"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5632:30916":{"id":"4:5632:30916","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13310:30788"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,16],"end":[131,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2691:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:155:698"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13316:8235":{"id":"1:13316:8235","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4945:8235"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44184:3097","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13189:30930":{"id":"1:13189:30930","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13187:30929"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13292:29654":{"id":"1:13292:29654","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:12330:471","self::pattern":"1:12873:8343"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:8349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:2137":{"id":"0:42:2137","crate_id":0,"name":"alphabetic","span":{"filename":"src/global_rng.rs","begin":[90,0],"end":[92,1]},"visibility":"public","docs":"Generates a random `char` in ranges a-z and A-Z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3756-0:148:2059":{"id":"b:1:3756-0:148:2059","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32217:2871","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3754:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3758:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:48:2222":{"id":"0:48:2222","crate_id":0,"name":"uppercase","span":{"filename":"src/global_rng.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Generates a random `char` in range A-Z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132:896":{"id":"0:132:896","crate_id":0,"name":"i32","span":{"filename":"src/global_rng.rs","begin":[159,0],"end":[159,61]},"visibility":"public","docs":"Generates a random `i32` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i32>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13187:30929":{"id":"1:13187:30929","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13214:26788":{"id":"1:13214:26788","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13215:26784"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44150:6015","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151":{"id":"0:151","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,9],"end":[131,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10304:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:152:801"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:46:2187":{"id":"0:46:2187","crate_id":0,"name":"lowercase","span":{"filename":"src/global_rng.rs","begin":[102,0],"end":[104,1]},"visibility":"public","docs":"Generates a random `char` in range a-z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13222:29651":{"id":"1:13222:29651","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"5:12330:471","self::pattern":"1:12873:8343"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5612":{"id":"4:5612","crate_id":4,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["4:5613:31658","4:5614:2364","4:5617:31659","4:5620:31660","4:5628:31661","4:5629:31662","4:5630:8265","4:5631:30915","4:5632:30916"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:134:1844":{"id":"0:134:1844","crate_id":0,"name":"u64","span":{"filename":"src/global_rng.rs","begin":[160,0],"end":[160,61]},"visibility":"public","docs":"Generates a random `u64` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u64>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:475":{"id":"0:75:475","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[136,4],"end":[138,5]},"visibility":"default","docs":"Clones the generator by creating a new generator with the same seed.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Rng","id":"0:148:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13272:30940":{"id":"1:13272:30940","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12873:8343","`DoubleEndedIterator`":"1:8256:129","prim@char":"5:12330:471","str::match_indices":"1:13269:30939"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44044:6011","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:8349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:736-0:148:2059":{"id":"b:4:736-0:148:2059","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2657:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:732:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:738:5629","4:739:25165","4:740:25166"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:90:2061":{"id":"0:90:2061","crate_id":0,"name":"with_seed","span":{"filename":"src/lib.rs","begin":[293,4],"end":[295,5]},"visibility":"public","docs":"Creates a new random number generator with the initial seed.","links":{},"attrs":["#[inline]","#[must_use =\n\"this creates a new instance of `Rng`; if you want to initialize the thread-local generator, use `fastrand::seed()` instead\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["seed",{"primitive":"u64"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:2118":{"id":"0:104:2118","crate_id":0,"name":"seed","span":{"filename":"src/lib.rs","begin":[493,4],"end":[495,5]},"visibility":"public","docs":"Initializes this generator with the given seed.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["seed",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:156":{"id":"0:156","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,27],"end":[131,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2696:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13193:30931":{"id":"1:13193:30931","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:138:1826":{"id":"0:138:1826","crate_id":0,"name":"u128","span":{"filename":"src/global_rng.rs","begin":[162,0],"end":[162,63]},"visibility":"public","docs":"Generates a random `u128` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u128>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:2140":{"id":"0:106:2140","crate_id":0,"name":"choice","span":{"filename":"src/lib.rs","begin":[509,4],"end":[524,5]},"visibility":"public","docs":"Choose an item from an iterator at random.\n\nThis function may have an unexpected result if the `len()` property of the\niterator does not match the actual number of items in the iterator. If\nthe iterator is empty, this returns `None`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8218:165","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8218:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8218:165","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8309:2198","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/global_rng.rs","begin":[12,0],"end":[20,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2966:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Rng","id":"0:148:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:20:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13209:29639":{"id":"1:13209:29639","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13208:29638"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13251:29645":{"id":"1:13251:29645","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"5:12330:471","self::pattern":"1:12873:8343","str::rsplitn":"1:13254:29647"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43980:5853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13283:30946":{"id":"1:13283:30946","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"5:12330:471","self::pattern":"1:12873:8343"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12899:8348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13289:29653":{"id":"1:13289:29653","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:12330:471","self::pattern":"1:12873:8343"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13314:30952":{"id":"1:13314:30952","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4944:30952"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44175:3098","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:2201":{"id":"0:108:2201","crate_id":0,"name":"shuffle","span":{"filename":"src/lib.rs","begin":[528,4],"end":[532,5]},"visibility":"public","docs":"Shuffles a slice randomly.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["slice",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2641-0:148:2059":{"id":"b:1:2641-0:148:2059","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32217:2871","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2635:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2643:2396"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:144:965":{"id":"0:144:965","crate_id":0,"name":"isize","span":{"filename":"src/global_rng.rs","begin":[165,0],"end":[165,65]},"visibility":"public","docs":"Generates a random `isize` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"isize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"isize"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<isize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"isize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13202:28644":{"id":"1:13202:28644","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:178:1826":{"id":"0:178:1826","crate_id":0,"name":"u128","span":{"filename":"src/lib.rs","begin":[590,4],"end":[596,5]},"visibility":"public","docs":"Generates a random `u128` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u128>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13200:28643":{"id":"1:13200:28643","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2918-0:148:2059":{"id":"b:1:2918-0:148:2059","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2891:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2920:831"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42078:2804-0:148:2059":{"id":"a:1:42078:2804-0:148:2059","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42078:2804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:170:1850":{"id":"0:170:1850","crate_id":0,"name":"u8","span":{"filename":"src/lib.rs","begin":[558,4],"end":[564,5]},"visibility":"public","docs":"Generates a random `u8` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u8>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13282:30945":{"id":"1:13282:30945","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13183":{"id":"1:13183","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13184:996","1:13185:2213","1:13186:30928","1:13187:30929","1:13189:30930","1:13192:29543","1:13193:30931","1:13194:336","1:13195:29617","1:13196:2753","1:13198:2177","1:13200:28643","1:13202:28644","1:13204:30932","1:13205:30933","1:13206:29634","1:13207:29635","1:13208:29638","1:13209:29639","1:13211:5869","1:13212:6025","1:13213:5465","1:13214:26788","1:13215:26784","1:13216:30934","1:13217:30935","1:13218:26797","1:13219:2916","1:13222:29651","1:13225:29652","1:13228:2960","1:13232:2925","1:13236:29640","1:13239:26783","1:13242:29643","1:13245:30936","1:13248:30937","1:13251:29645","1:13254:29647","1:13257:29649","1:13260:29650","1:13263:2440","1:13266:30938","1:13269:30939","1:13272:30940","1:13275:30941","1:13277:30942","1:13279:30943","1:13281:30944","1:13282:30945","1:13283:30946","1:13286:30947","1:13289:29653","1:13292:29654","1:13295:30948","1:13298:30949","1:13301:30950","1:13304:30951","1:13306:30783","1:13307:30784","1:13308:30786","1:13309:30787","1:13310:30788","1:13311:30790","1:13312:30791","1:13313:30792","1:13314:30952","1:13316:8235","1:13317:30953"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13186:30928":{"id":"1:13186:30928","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5620:31660":{"id":"4:5620:31660","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13211:5869":{"id":"1:13211:5869","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"5:12330:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43846:5861","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13236:29640":{"id":"1:13236:29640","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12873:8343","`DoubleEndedIterator`":"1:8256:129","prim@char":"5:12330:471","str::split_whitespace":"1:13214:26788","str::rsplit":"1:13242:29643"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43876:5534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13257:29649":{"id":"1:13257:29649","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:2191":{"id":"0:38:2191","crate_id":0,"name":"get_seed","span":{"filename":"src/global_rng.rs","begin":[78,0],"end":[80,1]},"visibility":"public","docs":"Gives back **current** seed that is being held by the thread-local generator.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13311:30790":{"id":"1:13311:30790","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:992:37228"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13228:2960":{"id":"1:13228:2960","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41986:191","prim@char":"5:12330:471","self::pattern":"1:12873:8343"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2644-0:148:2059":{"id":"b:1:2644-0:148:2059","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32217:2871","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2638:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2646:25160"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13192:29543":{"id":"1:13192:29543","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12420:8350"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:902":{"id":"0:136:902","crate_id":0,"name":"i64","span":{"filename":"src/global_rng.rs","begin":[161,0],"end":[161,61]},"visibility":"public","docs":"Generates a random `i64` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i64>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13277:30942":{"id":"1:13277:30942","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13313:30792":{"id":"1:13313:30792","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:992:37228"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[289,0],"end":[696,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Rng","id":"0:148:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:90:2061","0:91:2135","0:92:2137","0:94:2142","0:96:417","0:97:2148","0:98:737","0:99:753","0:100:2165","0:158:908","0:160:890","0:162:896","0:164:902","0:166:883","0:168:965","0:102:2187","0:104:2118","0:105:2191","0:106:2140","0:108:2201","0:110:2204","0:170:1850","0:172:1832","0:174:1838","0:176:1844","0:178:1826","0:180:1911","0:111:2222","0:113:471"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2927:137":{"id":"1:2927:137","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:1:2914-0:148:2059":{"id":"b:1:2914-0:148:2059","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2891:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2888:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2917:2919"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:148:2059":{"id":"0:148:2059","crate_id":0,"name":"Rng","span":{"filename":"src/lib.rs","begin":[132,0],"end":[132,20]},"visibility":"public","docs":"A random number generator.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:21","0:89","a:1:42079:2803-0:148:2059","a:1:32275:2872-0:148:2059","a:1:42078:2804-0:148:2059","a:1:3172:3045-0:148:2059","a:1:32216:237-0:148:2059","a:1:3137:247-0:148:2059","b:1:3756-0:148:2059","b:1:2929-0:148:2059","b:1:2924-0:148:2059","b:1:2644-0:148:2059","b:1:2641-0:148:2059","b:1:2918-0:148:2059","b:1:2914-0:148:2059","b:4:736-0:148:2059","0:156","0:153","0:74","0:151","0:154","0:19"]}}},"4:5630:8265":{"id":"4:5630:8265","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13254:29647":{"id":"1:13254:29647","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"5:12330:471","str::splitn":"1:13251:29645","self::pattern":"1:12873:8343"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43998:5854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:8349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13266:30938":{"id":"1:13266:30938","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12873:8343","`DoubleEndedIterator`":"1:8256:129","prim@char":"5:12330:471","str::matches":"1:13263:2440"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44098:6013","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:8349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13196:2753":{"id":"1:13196:2753","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41986:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:180:1911":{"id":"0:180:1911","crate_id":0,"name":"usize","span":{"filename":"src/lib.rs","begin":[615,4],"end":[621,5]},"visibility":"public","docs":"Generates a random `usize` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<usize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50:2140":{"id":"0:50:2140","crate_id":0,"name":"choice","span":{"filename":"src/global_rng.rs","begin":[118,0],"end":[124,1]},"visibility":"public","docs":"Choose an item from an iterator at random.\n\nThis function may have an unexpected result if the `len()` property of the\niterator does not match the actual number of items in the iterator. If\nthe iterator is empty, this returns `None`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8218:165","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8218:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8218:165","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8309:2198","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13275:30941":{"id":"1:13275:30941","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2148":{"id":"0:53:2148","crate_id":0,"name":"digit","span":{"filename":"src/global_rng.rs","begin":[132,0],"end":[134,1]},"visibility":"public","docs":"Generates a random digit in the given `base`.\n\nDigits are represented by `char`s in ranges 0-9 and a-z.\n\nPanics if the base is zero or greater than 36.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["base",{"primitive":"u32"}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13217:30935":{"id":"1:13217:30935","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44140:6014","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92:2137":{"id":"0:92:2137","crate_id":0,"name":"alphabetic","span":{"filename":"src/lib.rs","begin":[328,4],"end":[331,5]},"visibility":"public","docs":"Generates a random `char` in ranges a-z and A-Z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32216:237-0:148:2059":{"id":"a:1:32216:237-0:148:2059","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32216:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13304:30951":{"id":"1:13304:30951","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12834:136","`FromStr`":"1:12833:8035"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42117:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12833:8035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12833:8035","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111:2222":{"id":"0:111:2222","crate_id":0,"name":"uppercase","span":{"filename":"src/lib.rs","begin":[633,4],"end":[636,5]},"visibility":"public","docs":"Generates a random `char` in range A-Z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22:1177":{"id":"0:22:1177","crate_id":0,"name":"new","span":{"filename":"src/global_rng.rs","begin":[25,4],"end":[27,5]},"visibility":"public","docs":"Creates a new random number generator.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Rng","id":"0:148:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13309:30787":{"id":"1:13309:30787","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130:1838":{"id":"0:130:1838","crate_id":0,"name":"u32","span":{"filename":"src/global_rng.rs","begin":[158,0],"end":[158,61]},"visibility":"public","docs":"Generates a random `u32` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u32>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13281:30944":{"id":"1:13281:30944","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:164:902":{"id":"0:164:902","crate_id":0,"name":"i64","span":{"filename":"src/lib.rs","begin":[443,4],"end":[449,5]},"visibility":"public","docs":"Generates a random `i64` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i64>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13219:2916":{"id":"1:13219:2916","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"5:12330:471","self::pattern":"1:12873:8343"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2231":{"id":"0:0:2231","crate_id":0,"name":"fastrand","span":{"filename":"src/lib.rs","begin":[1,0],"end":[696,1]},"visibility":"public","docs":"A simple and fast random number generator.\n\nThe implementation uses [Wyrand](https://github.com/wangyi-fudan/wyhash), a simple and fast\ngenerator but **not** cryptographically secure.\n\n# Examples\n\nFlip a coin:\n\n```\nif fastrand::bool() {\n    println!(\"heads\");\n} else {\n    println!(\"tails\");\n}\n```\n\nGenerate a random `i32`:\n\n```\nlet num = fastrand::i32(..);\n```\n\nChoose a random element in an array:\n\n```\nlet v = vec![1, 2, 3, 4, 5];\nlet i = fastrand::usize(..v.len());\nlet elem = v[i];\n```\n\nSample values from an array with `O(n)` complexity (`n` is the length of array):\n\n```\nfastrand::choose_multiple(vec![1, 4, 5].iter(), 2);\nfastrand::choose_multiple(0..20, 12);\n```\n\n\nShuffle an array:\n\n```\nlet mut v = vec![1, 2, 3, 4, 5];\nfastrand::shuffle(&mut v);\n```\n\nGenerate a random [`Vec`] or [`String`]:\n\n```\nuse std::iter::repeat_with;\n\nlet v: Vec<i32> = repeat_with(|| fastrand::i32(..)).take(10).collect();\nlet s: String = repeat_with(fastrand::alphanumeric).take(10).collect();\n```\n\nTo get reproducible results on every run, initialize the generator with a seed:\n\n```\n// Pick an arbitrary number as seed.\nfastrand::seed(7);\n\n// Now this prints the same number on every run:\nprintln!(\"{}\", fastrand::u32(..));\n```\n\nTo be more efficient, create a new [`Rng`] instance instead of using the thread-local\ngenerator:\n\n```\nuse std::iter::repeat_with;\n\nlet mut rng = fastrand::Rng::new();\nlet mut bytes: Vec<u8> = repeat_with(|| rng.u8(..)).take(10_000).collect();\n```\n\nThis crate aims to expose a core set of useful randomness primitives. For more niche algorithms,\nconsider using the [`fastrand-contrib`] crate alongside this one.\n\n# Features\n\n- `std` (enabled by default): Enables the `std` library. This is required for the global\n  generator and global entropy. Without this feature, [`Rng`] can only be instantiated using\n  the [`with_seed`](Rng::with_seed) method.\n- `js`: Assumes that WebAssembly targets are being run in a JavaScript environment. See the\n  [WebAssembly Notes](#webassembly-notes) section for more information.\n\n# WebAssembly Notes\n\nFor non-WASI WASM targets, there is additional sublety to consider when utilizing the global RNG.\nBy default, `std` targets will use entropy sources in the standard library to seed the global RNG.\nHowever, these sources are not available by default on WASM targets outside of WASI.\n\nIf the `js` feature is enabled, this crate will assume that it is running in a JavaScript\nenvironment. At this point, the [`getrandom`] crate will be used in order to access the available\nentropy sources and seed the global RNG. If the `js` feature is not enabled, the global RNG will\nuse a predefined seed.\n\n[`fastrand-contrib`]: https://crates.io/crates/fastrand-contrib\n[`getrandom`]: https://crates.io/crates/getrandom","links":{"`Rng`":"0:148:2059","Rng::with_seed":"0:90:2061","`Vec`":"4:7055:264"},"attrs":["#![no_std]","#![forbid(unsafe_code)]","#![warn(missing_docs, missing_debug_implementations, rust_2018_idioms)]","#![doc(html_favicon_url =\n\"https://raw.githubusercontent.com/smol-rs/smol/master/assets/images/logo_fullsize_transparent.png\")]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/smol-rs/smol/master/assets/images/logo_fullsize_transparent.png\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:148:2059","0:73-0:13:2057"],"is_stripped":false}}},"1:13215:26784":{"id":"1:13215:26784","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13214:26788"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44159:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2920:831":{"id":"1:2920:831","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:122:1850":{"id":"0:122:1850","crate_id":0,"name":"u8","span":{"filename":"src/global_rng.rs","begin":[154,0],"end":[154,59]},"visibility":"public","docs":"Generates a random `u8` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u8>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13198:2177":{"id":"1:13198:2177","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41986:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13205:30933":{"id":"1:13205:30933","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"5:12336:1720","crate::ops::IndexMut":"1:3415:2512","str::slice_unchecked":"1:13204:30932"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:73-0:13:2057":{"id":"0:73-0:13:2057","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,22]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"global_rng","name":"global_rng","id":"0:13:2057","glob":true}}},"1:13286:30947":{"id":"1:13286:30947","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:12330:471","self::pattern":"1:12873:8343"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5613:31658":{"id":"4:5613:31658","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:304:2553","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"4:304:2553","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2932:137":{"id":"1:2932:137","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32140:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:91:2135":{"id":"0:91:2135","crate_id":0,"name":"fork","span":{"filename":"src/lib.rs","begin":[322,4],"end":[324,5]},"visibility":"public","docs":"Clones the generator by deterministically deriving a new generator based on the initial\nseed.\n\nThis function can be used to create a new generator that is a \"spinoff\" of the old\ngenerator. The new generator will not produce the same sequence of values as the\nold generator.\n\n# Example\n\n```\n// Seed two generators equally, and clone both of them.\nlet mut base1 = fastrand::Rng::with_seed(0x4d595df4d0f33173);\nbase1.bool(); // Use the generator once.\n\nlet mut base2 = fastrand::Rng::with_seed(0x4d595df4d0f33173);\nbase2.bool(); // Use the generator once.\n\nlet mut rng1 = base1.fork();\nlet mut rng2 = base2.fork();\n\nprintln!(\"rng1 returns {}\", rng1.u32(..));\nprintln!(\"rng2 returns {}\", rng2.u32(..));\n```","links":{},"attrs":["#[inline]","#[must_use = \"this creates a new instance of `Rng`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:142:1911":{"id":"0:142:1911","crate_id":0,"name":"usize","span":{"filename":"src/global_rng.rs","begin":[164,0],"end":[164,65]},"visibility":"public","docs":"Generates a random `usize` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<usize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:2142":{"id":"0:94:2142","crate_id":0,"name":"alphanumeric","span":{"filename":"src/lib.rs","begin":[335,4],"end":[338,5]},"visibility":"public","docs":"Generates a random `char` in ranges a-z, A-Z and 0-9.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13260:29650":{"id":"1:13260:29650","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:8349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124:908":{"id":"0:124:908","crate_id":0,"name":"i8","span":{"filename":"src/global_rng.rs","begin":[155,0],"end":[155,59]},"visibility":"public","docs":"Generates a random `i8` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i8"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i8>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2643:2396":{"id":"1:2643:2396","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40:417":{"id":"0:40:417","crate_id":0,"name":"bool","span":{"filename":"src/global_rng.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"Generates a random `bool`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:737":{"id":"0:98:737","crate_id":0,"name":"f32","span":{"filename":"src/lib.rs","begin":[368,4],"end":[372,5]},"visibility":"public","docs":"Generates a random `f32` in range `0..1`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32275:2872-0:148:2059":{"id":"a:1:32275:2872-0:148:2059","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32275:2872","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3137:247-0:148:2059":{"id":"a:1:3137:247-0:148:2059","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3137:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:21":{"id":"0:21","crate_id":0,"name":null,"span":{"filename":"src/global_rng.rs","begin":[22,0],"end":[28,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Rng","id":"0:148:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:22:1177"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2924-0:148:2059":{"id":"b:1:2924-0:148:2059","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2894:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2927:137","1:2928:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13301:30950":{"id":"1:13301:30950","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:12330:471","self::pattern":"1:12873:8343"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:8349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13310:30788":{"id":"1:13310:30788","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:698":{"id":"0:155:698","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[131,16],"end":[131,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Rng","id":"0:148:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13194:336":{"id":"1:13194:336","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13195:29617","`u8`":"5:12349:1850"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:174:1838":{"id":"0:174:1838","crate_id":0,"name":"u32","span":{"filename":"src/lib.rs","begin":[574,4],"end":[580,5]},"visibility":"public","docs":"Generates a random `u32` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u32>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13213:5465":{"id":"1:13213:5465","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43862:3516","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:890":{"id":"0:160:890","crate_id":0,"name":"i16","span":{"filename":"src/lib.rs","begin":[427,4],"end":[433,5]},"visibility":"public","docs":"Generates a random `i16` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i16"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5614:2364":{"id":"4:5614:2364","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:2165":{"id":"0:100:2165","crate_id":0,"name":"choose_multiple","span":{"filename":"src/lib.rs","begin":[390,4],"end":[417,5]},"visibility":"public","docs":"Collects `amount` values at random from the iterator into a vector.\n\nThe length of the returned vector equals `amount` unless the iterator\ncontains insufficient elements, in which case it equals the number of\nelements available.\n\nComplexity is `O(n)` where `n` is the length of the iterator.","links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"generic":"T"}],["amount",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Vec","id":"4:7055:264","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"","id":"1:8364:178","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8364:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:146:471":{"id":"0:146:471","crate_id":0,"name":"char","span":{"filename":"src/global_rng.rs","begin":[166,0],"end":[166,63]},"visibility":"public","docs":"Generates a random `char` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<char>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:176:1844":{"id":"0:176:1844","crate_id":0,"name":"u64","span":{"filename":"src/lib.rs","begin":[582,4],"end":[588,5]},"visibility":"public","docs":"Generates a random `u64` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u64>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42079:2803-0:148:2059":{"id":"a:1:42079:2803-0:148:2059","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42079:2803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:148:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13307:30784":{"id":"1:13307:30784","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39885:8216","Self::is_ascii":"1:13306:30783"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39885:8216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:60":{"id":"0:20:60","crate_id":0,"name":"default","span":{"filename":"src/global_rng.rs","begin":[17,4],"end":[19,5]},"visibility":"default","docs":"Initialize the `Rng` from the system's random number generator.\n\nThis is equivalent to [`Rng::new()`].","links":{"`Rng::new()`":"0:22:1177"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Rng","id":"0:148:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13312:30791":{"id":"1:13312:30791","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:992:37228"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2142":{"id":"0:44:2142","crate_id":0,"name":"alphanumeric","span":{"filename":"src/global_rng.rs","begin":[96,0],"end":[98,1]},"visibility":"public","docs":"Generates a random `char` in ranges a-z, A-Z and 0-9.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2928:1807":{"id":"1:2928:1807","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42117:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13185:2213":{"id":"1:13185:2213","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:2187":{"id":"0:102:2187","crate_id":0,"name":"lowercase","span":{"filename":"src/lib.rs","begin":[486,4],"end":[489,5]},"visibility":"public","docs":"Generates a random `char` in range a-z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13206:29634":{"id":"1:13206:29634","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13208:29638","str::split_at_mut":"1:13207:29635"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2646:25160":{"id":"1:2646:25160","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5617:31659":{"id":"4:5617:31659","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:740:25166":{"id":"4:740:25166","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162:896":{"id":"0:162:896","crate_id":0,"name":"i32","span":{"filename":"src/lib.rs","begin":[435,4],"end":[441,5]},"visibility":"public","docs":"Generates a random `i32` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i32>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3509:211","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13232:2925":{"id":"1:13232:2925","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41986:191","prim@char":"5:12330:471","self::pattern":"1:12873:8343"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:5839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:8349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"16:6098:20894":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:9807:20949":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:8547:5538":{"crate_id":5,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:12107:3668":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:14091:4103":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:31005:2902":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"16:8259:5097":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:44150:6015":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:12969:3888":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:14449:4182":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"5:8861:5566":{"crate_id":5,"path":["std","path","Ancestors"],"kind":"struct"},"1:47235:6184":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:7355:5077":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:41212:5412":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:6671:5450":{"crate_id":5,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:10976:32681":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:7604:4767":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:12337:1810":{"crate_id":5,"path":["std","tuple"],"kind":"primitive"},"1:22593:13501":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"16:6588:4948":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"4:1351:2665":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:8463:3505":{"crate_id":5,"path":["std","io","util","Empty"],"kind":"struct"},"6:6524:7286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"9:53:7758":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:909:2655":{"crate_id":5,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:6466:4940":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:7396:3305":{"crate_id":5,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"4:1586:5631":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:46039:6074":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:11259:6264":{"crate_id":5,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"5:12349:1850":{"crate_id":5,"path":["std","u8"],"kind":"primitive"},"6:5181:6983":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"4:7664:5658":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:4804:2638":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"11:1007:2664":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:43748:5941":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:617:13722":{"crate_id":5,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:11166:3694":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"11:1051:2666":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:9178:5440":{"crate_id":5,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:46460:6118":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"4:7489:2197":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:6749:4984":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:10985:32683":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:40344:26883":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:39562:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:44800:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"5:8528:3516":{"crate_id":5,"path":["std","io","Bytes"],"kind":"struct"},"6:1628:6763":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:747:8036":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:10044:20965":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"18:507:3460":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:1680:6795":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:13802:3288":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"4:7055:264":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"5:2311:3374":{"crate_id":5,"path":["std","fs","read"],"kind":"function"},"17:11102:3689":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:4971:3280":{"crate_id":5,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:1083:2665":{"crate_id":5,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:938:2656":{"crate_id":5,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:14752:4228":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:8541:5537":{"crate_id":5,"path":["std","io","Lines"],"kind":"struct"},"1:12388:8311":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:44130:5537":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:46082:6084":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:473:6605":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:9282:2726":{"crate_id":5,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:8720:27926":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"4:6068:13713":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:11214:3697":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:22443:13507":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"5:8250:5483":{"crate_id":5,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:6191:5805":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:41964:5836":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"5:947:2658":{"crate_id":5,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:4913:4800":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:13959:4085":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"14:187:19974":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:13859:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:10908:7643":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"5:10889:5606":{"crate_id":5,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"16:6456:20897":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"11:1917:5309":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:44373:6029":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:44026:6010":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"18:680:3491":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:5039:6961":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:2534:2400":{"crate_id":5,"path":["std","io"],"kind":"module"},"17:12508:3858":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:13972:3781":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:33577:2492":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:5075:4805":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"5:11205:5570":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:6900:7439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:39692:2515":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"4:1437:99":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:5200:6995":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:3627:2521":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"11:1896:2556":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:45796:6051":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:11743:3754":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"5:5947:5442":{"crate_id":5,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:9237:13914":{"crate_id":5,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:12949:3541":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:7984:7602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:7755:4759":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:46249:6093":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:14177:4131":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:6597:7335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:5073:3279":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:40303:5933":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:11433:5856":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:8256:129":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:15249:4418":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:43050:3035":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"6:7306:7457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:2418:4728":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:6231:4889":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:41762:5833":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"8:0:2462":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:32218:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:11142:3668":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:1699:6802":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:9916:20962":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:2838:4747":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:39662:2056":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"16:7132:5046":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:8599:7641":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"4:680:5627":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:8342:13807":{"crate_id":5,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:44308:6026":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:4807:7501":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:12851:3881":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:932:2556":{"crate_id":5,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"5:8332:5485":{"crate_id":5,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:6849:5010":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:22495:8200":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"14:40:3934":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:6480:4752":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:3415:2512":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"11:299:6583":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:16151:4673":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:16198:4683":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:4730:2635":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:46217:6091":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:2462:13762":{"crate_id":5,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:40333:3104":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:11115:3691":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:10317:3027":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:542:4703":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:865:2652":{"crate_id":5,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:11992:8212":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"5:2306:138":{"crate_id":5,"path":["std","fs","File"],"kind":"struct"},"17:14986:4362":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:10709:5406":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"16:6976:5020":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:5840:5439":{"crate_id":5,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:6561:186":{"crate_id":5,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:9148:5571":{"crate_id":5,"path":["std","process","ExitCode"],"kind":"struct"},"1:45957:6069":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:7052:5034":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:9317:5582":{"crate_id":5,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:42479:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:860:4712":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:8364:178":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:4916:6903":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:6342:34311":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:44893:180":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:2888:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"16:4882:4799":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:1663:6788":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:4577:2348":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:40496:3102":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1:40522:5937":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"18:113:25142":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:16235:4692":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"5:11351:5614":{"crate_id":5,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:15701:4559":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:10439:3654":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:6498:220":{"crate_id":5,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"4:5860:251":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"1:21571:2902":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:11715:3751":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:11227:3698":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:44872:27326":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"17:13187:3919":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:44679:8374":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:7638:3109":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"5:9111:199":{"crate_id":5,"path":["std","process","Output"],"kind":"struct"},"17:11367:3687":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:12201:3823":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:7366:7490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:36251:2500":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:6188:220":{"crate_id":5,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:9454:5839":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:3183:2484":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"17:13412:3969":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:5826:220":{"crate_id":5,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:1614:2556":{"crate_id":5,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:43622:5988":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:4129:13818":{"crate_id":5,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:15521:4517":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"11:2443:2558":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:4835:2639":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:15778:4581":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"4:2535:6448":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:1547:6705":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:15434:4468":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:7537:7571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:8259:7618":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"15:0:2468":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:10996:5476":{"crate_id":5,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"16:3329:4775":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"11:102:6582":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:14235:4143":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:23076:5914":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"17:14912:4351":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:1631:5309":{"crate_id":5,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"4:2098:5484":{"crate_id":4,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:4551:5422":{"crate_id":5,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:14372:4162":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:1838:695":{"crate_id":5,"path":["std","env"],"kind":"module"},"6:7314:7462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:10997:3678":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:5002:6942":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:9386:187":{"crate_id":5,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:6478:7264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:8086:5476":{"crate_id":5,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:46961:6163":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:3380:140":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:13064:3899":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:2087:5660":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:41946:5834":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:8227:2870":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:14994:4363":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:16138:4667":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:22898:5896":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:30599:2549":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:15799:4584":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:2882:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"6:5598:7166":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"4:5462:13704":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"16:2878:4749":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:16093:4658":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"16:6543:4947":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:45911:6066":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:40489:3101":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"17:13497:3984":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:4876:13847":{"crate_id":5,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:44294:6023":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:39534:2513":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:6491:7273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:1723:6811":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:46266:6094":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:12900:3885":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:5768:13895":{"crate_id":5,"path":["std","process","Termination"],"kind":"trait"},"9:330:6595":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:11419:3668":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:5624:7183":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:23142:5920":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"5:3582:5541":{"crate_id":5,"path":["std","io","Read"],"kind":"trait"},"17:14246:4145":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:47061:6167":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:5423:7089":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:43029:137":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"6:7389:7508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:8000:2733":{"crate_id":5,"path":["std","thread","Builder"],"kind":"struct"},"17:14271:4148":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:42100:2989":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:13877:4075":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:7061:5037":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"4:4511:3348":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"4:5226:3353":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"5:8175:5477":{"crate_id":5,"path":["std","fs","ReadDir"],"kind":"struct"},"17:15814:4585":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:11920:5468":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:5390:7073":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"5:9399:3279":{"crate_id":5,"path":["std","sync","poison","Guard"],"kind":"struct"},"5:6785:5451":{"crate_id":5,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:7602:7596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:5064:6974":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:11547:3596":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:39547:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:5557:7152":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:15138:4390":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:7306:34309":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:10929:5588":{"crate_id":5,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"6:5671:7202":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:7618:5133":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:2628:5403":{"crate_id":5,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:12264:3828":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:3132:117":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:12888:3496":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:4994:13831":{"crate_id":5,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:11413:5366":{"crate_id":5,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"6:6650:7360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:1526:6690":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:586:2729":{"crate_id":5,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:2898:257":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"6:5290:7038":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"18:643:3460":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:5904:3279":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"5:3293:32384":{"crate_id":5,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"18:613:34326":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"4:6172:3279":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:3029:3551":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:44618:7694":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:11912:5468":{"crate_id":5,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:5244:7014":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:750:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:42078:2804":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:46103:6085":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:7754:8262":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"5:12340:734":{"crate_id":5,"path":["std","f16"],"kind":"primitive"},"6:6460:7254":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:11354:3713":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:491:3459":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:6657:7361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:44175:3098":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:46295:6095":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:3778:4778":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:12454:3851":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:10963:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:3198:2487":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:32305:3048":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"17:13568:4008":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"11:2554:34273":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:22842:5889":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:15957:4609":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"13:0:2461":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:14284:4150":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:13473:3980":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:40598:5939":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:41206:5824":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:6714:7382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"11:1676:3264":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:11510:3724":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:13766:4054":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:10759:3668":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:14325:4155":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:6494:4943":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:4365:5794":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:4771:4795":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"4:1527:2654":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:44451:8364":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"4:835:101":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:22481:13508":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:4992:6935":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:42157:2652":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"16:6620:4958":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:7485:7531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:6758:4985":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"4:6771:3325":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:11799:3764":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:6066:4858":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:14066:4101":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:44279:6018":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:45843:6058":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:485:6610":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:8006:7603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:11189:3695":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:7799:4757":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:40767:5812":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"4:732:250":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:1475:156":{"crate_id":5,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:46120:6086":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:42165:2653":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:3994:2197":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:44044:6011":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"9:238:5981":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:14386:4164":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:5722:4756":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:46932:6162":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"18:726:3503":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:5612:5436":{"crate_id":5,"path":["std","process","ChildStdout"],"kind":"struct"},"16:3614:4777":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:12357:13":{"crate_id":5,"path":["std","fn"],"kind":"primitive"},"1:43226:2672":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"4:1735:3325":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:2712:3270":{"crate_id":5,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"11:774:2654":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:11688:3749":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:7823:20904":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:13363:3960":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:7539:4764":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:11192:5569":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:21608:25216":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:4647:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:40560:3516":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"11:1923:5310":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"5:7878:5620":{"crate_id":5,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:8521:5532":{"crate_id":5,"path":["std","io","Take"],"kind":"struct"},"4:3644:182":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:10915:34319":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:6447:7253":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:4315:13842":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:8676:2982":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:22:816":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:12947:8357":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:13235:3934":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:33443:2490":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:10612:3665":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:42003:173":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"5:11688:7655":{"crate_id":5,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:0:563":{"crate_id":1,"path":["core"],"kind":"module"},"17:11242:3699":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:15214:4412":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"5:1625:5308":{"crate_id":5,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:12724:20967":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:5382:7068":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:11216:32679":{"crate_id":5,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:12543:3863":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:12621:3865":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:15822:4588":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:13024:20970":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:8294:7626":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"4:7381:2197":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:14356:4161":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:12333:1313":{"crate_id":5,"path":["std","pointer"],"kind":"primitive"},"1:13109:119":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:4477:5421":{"crate_id":5,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:5046:6963":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"18:608:3477":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:12671:3868":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"12:0:2466":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:12335:1686":{"crate_id":5,"path":["std","slice"],"kind":"primitive"},"6:6729:7384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"6:5400:7079":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:46333:6097":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"4:1200:32127":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:23065:5913":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"16:5960:4843":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"4:7401:2558":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:14545:4192":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:9781:20959":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:15931:3919":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:15473:4480":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:41724:170":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:15281:4427":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:11557:3728":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:11016:3680":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:42037:2800":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"5:1853:5391":{"crate_id":5,"path":["std","env","Vars"],"kind":"struct"},"6:517:6631":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"15:288:19986":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:1503:6680":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:5769:4820":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"4:1566:2658":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:11036:5571":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:46534:6120":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:21593:25226":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"0:148:2059":{"crate_id":0,"path":["fastrand","Rng"],"kind":"struct"},"1:3018:5664":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"5:669:5386":{"crate_id":5,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:4909:6899":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:367:2743":{"crate_id":5,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:10877:3670":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:14560:4196":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"11:832:2656":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:43218:5979":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:46443:6117":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:6665:20898":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:8282:7624":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:42012:2652":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"9:482:19881":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:13455:3979":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:45890:6061":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:7584:7593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:6000:3279":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:11277:5850":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:42440:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:40776:5813":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:12611:5865":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:40588:3378":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:7648:5136":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"4:1545:2656":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:2728:4742":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:650:5383":{"crate_id":5,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:22914:26892":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"4:3801:5484":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:9426:162":{"crate_id":5,"path":["std","time","Instant"],"kind":"struct"},"6:8253:7617":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:46688:6126":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:12347:902":{"crate_id":5,"path":["std","i64"],"kind":"primitive"},"1:22405:13506":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:14868:4321":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:5031:6956":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:10311:3024":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"5:5643:113":{"crate_id":5,"path":["std","process","Command"],"kind":"struct"},"6:5653:7193":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:46638:6124":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"17:13594:4013":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:5102:6976":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:15356:4450":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:13146:3910":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:41183:5822":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"4:2112:5632":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:11153:3669":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:42117:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"5:4762:13865":{"crate_id":5,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:8845:5424":{"crate_id":5,"path":["std","path","Components"],"kind":"struct"},"17:12707:3871":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:32276:3049":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:40848:5954":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:42696:3025":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:578:6664":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:40755:5951":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:4641:4792":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:13308:3952":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:44788:7696":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"5:1619:5307":{"crate_id":5,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:11788:3763":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"4:7431:29167":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:0:2470":{"crate_id":17,"path":["object"],"kind":"module"},"1:40393:3096":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:11200:5848":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:11682:7654":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:6636:7349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:11643:5463":{"crate_id":5,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:13814:4064":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:10344:5597":{"crate_id":5,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"5:7139:13915":{"crate_id":5,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:40533:8259":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:15190:4407":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:8767:5981":{"crate_id":5,"path":["std","path","State"],"kind":"enum"},"1:23175:5923":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"6:6409:7234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:13832:4065":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:3572:2514":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:15092:4384":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"11:710:2657":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:42020:2653":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:21826:13777":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:6670:7365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:5361:7058":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"5:10938:5479":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"16:2998:4772":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"4:2206:2721":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:8702:13877":{"crate_id":5,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:12076:3812":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:1098:3526":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:2225:128":{"crate_id":5,"path":["std","ffi","os_str","Display"],"kind":"struct"},"6:7546:7574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:1997:13758":{"crate_id":5,"path":["std","error","Indented"],"kind":"struct"},"1:44485:6039":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:9156:2652":{"crate_id":5,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:8209:139":{"crate_id":5,"path":["std","fs","FileType"],"kind":"struct"},"1:23098:5916":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"5:9403:234":{"crate_id":5,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"11:1107:5303":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:15197:4409":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:5897:4830":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:8491:13776":{"crate_id":5,"path":["std","io","SeekFrom"],"kind":"enum"},"17:12530:3862":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"5:12334:335":{"crate_id":5,"path":["std","array"],"kind":"primitive"},"1:46234:6092":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"4:6964:2564":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:12688:5848":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:1891:5393":{"crate_id":5,"path":["std","env","SplitPaths"],"kind":"struct"},"17:11537:3726":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:12683:3869":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"18:651:3460":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:5158:13873":{"crate_id":5,"path":["std","panic","always_abort"],"kind":"function"},"5:4213:13826":{"crate_id":5,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:7570:4765":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:8247:7616":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"4:6562:2558":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:5006:4803":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:14489:4185":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:13272:3947":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:5079:13866":{"crate_id":5,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:45826:6055":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:40705:5800":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"11:2151:2666":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"5:11277:162":{"crate_id":5,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:3587:146":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:11132:2653":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:10304:119":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"5:5765:7411":{"crate_id":5,"path":["std","process","exit"],"kind":"function"},"6:4824:6844":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:5756:4815":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:2355:4720":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:14212:4142":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:15368:4453":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:2638:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:8136:5197":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:3597:3540":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"11:1603:5306":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"4:3042:29209":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:12127:3815":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:5052:6965":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:4924:6905":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:10953:13777":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"4:4447:3348":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"4:3218:100":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:5677:7205":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"11:875:2662":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:5347:4808":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:22983:5908":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:10399:3516":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:14529:4190":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:6707:3299":{"crate_id":5,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:7111:5044":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:30620:3034":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:22114:13425":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:8317:7632":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:13535:5950":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"16:2936:20033":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"14:160:5291":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:1490:6674":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"4:7411:3336":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:2572:4735":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:9444:2674":{"crate_id":5,"path":["std","time","SystemTime"],"kind":"struct"},"1:30978:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"18:563:3469":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:6667:5449":{"crate_id":5,"path":["std","sync","once","Once"],"kind":"struct"},"1:4431:8237":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:13252:3937":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:5209:28810":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:1762:8155":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"16:8202:4771":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:5700:4754":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:1559:6713":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:2684:4740":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:32959:2485":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:11391:5853":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"11:883:2663":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:3022:3278":{"crate_id":5,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:15078:4381":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"9:502:5369":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:14847:4311":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:46555:6121":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:7452:7517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"4:3280:5309":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:1496:6677":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:14079:4102":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:8337:5486":{"crate_id":5,"path":["std","io","error","Custom"],"kind":"struct"},"1:4:1255":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:42028:2197":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:47087:6169":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"5:8023:2732":{"crate_id":5,"path":["std","thread","Thread"],"kind":"struct"},"5:11893:5617":{"crate_id":5,"path":["std","alloc","System"],"kind":"struct"},"1:43004:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:43894:5851":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"18:589:3470":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:22826:7670":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:2078:7666":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:11313:3707":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"16:2612:4737":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:8682:8271":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"4:7618:5656":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:6664:7362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"18:765:25152":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:13437:3971":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:15102:4385":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:7982:2368":{"crate_id":5,"path":["std","thread","local","AccessError"],"kind":"struct"},"4:4934:217":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"4:2766:6446":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:666:5384":{"crate_id":5,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:43926:6008":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:0:505":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"17:15635:4542":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:13674:4018":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:6385:4931":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:10137:20942":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:7359:7486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:5020:6951":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:11099:3315":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:4811:7505":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"5:5578:5430":{"crate_id":5,"path":["std","process","Child"],"kind":"struct"},"1:2861:13777":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:4913:13832":{"crate_id":5,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"4:3288:5307":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:5581:7159":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:12342:753":{"crate_id":5,"path":["std","f64"],"kind":"primitive"},"17:11583:3736":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:12251:3827":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:7006:5023":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"7:32:19868":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:5954:5445":{"crate_id":5,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:9772:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:8669:5423":{"crate_id":5,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:7639:3110":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:7353:32487":{"crate_id":5,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"5:888:2197":{"crate_id":5,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:11128:3643":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:10828:34312":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:1855:5392":{"crate_id":5,"path":["std","env","VarsOs"],"kind":"struct"},"17:11853:3772":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:13325:3954":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:44818:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:13914:2551":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:21610:25230":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:40645:5942":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:46202:6090":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:15206:4410":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:22109:13777":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:11755:3757":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:43469:5845":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:13785:4059":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:9544:5394":{"crate_id":5,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"5:10325:5393":{"crate_id":5,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"5:3639:3023":{"crate_id":5,"path":["std","io","Write"],"kind":"trait"},"4:7536:2554":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:7769:5140":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:6504:4944":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:7509:5118":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:34202:2497":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:4288:3279":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"11:2562:6592":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:41890:26879":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:2691:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:13999:4091":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:2808:4746":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:47107:6171":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:2476:13766":{"crate_id":5,"path":["std","fs","read_link"],"kind":"function"},"5:5437:203":{"crate_id":5,"path":["std","path","Path"],"kind":"struct"},"17:14968:4357":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"4:7445:2197":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:5665:7200":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:40997:5820":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"5:3332:5407":{"crate_id":5,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:8170:8273":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:3213:2509":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"5:11610:5459":{"crate_id":5,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:2067:198":{"crate_id":5,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:21718:13422":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:6911:233":{"crate_id":5,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:3664:2522":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:16105:4660":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:491:6611":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:43682:5990":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:23131:5919":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"6:7467:7521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:43852:6006":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"4:4318:2652":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:256:3518":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:9736:127":{"crate_id":5,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:40359:3103":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:46053:6075":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:4331:13844":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"4:1320:2664":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:11467:3721":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"5:10638:3312":{"crate_id":5,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"11:2403:2653":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:13606:4016":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:3327:2519":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"10:36:6594":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"11:1160:2667":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"5:752:154":{"crate_id":5,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:6398:4750":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"4:7591:8259":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:3669:3556":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:2478:4731":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:8647:7490":{"crate_id":5,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:22269:13421":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:6379:7209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:41190:5823":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"5:10755:2732":{"crate_id":5,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"9:392:19883":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:42946:3034":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"5:11503:3316":{"crate_id":5,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"16:4802:4796":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:15616:4536":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:9276:115":{"crate_id":5,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:4811:6834":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"4:7739:2557":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:46842:6160":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:14260:4147":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:11093:3314":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:4743:4794":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:13723:4043":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:33171:2488":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:13387:3964":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"11:2304:2664":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:479:6608":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:2066:8215":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:30631:26888":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"6:6811:7410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:1535:6696":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:43980:5853":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:5466:7120":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:14788:4259":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:13922:4081":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:15010:4364":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"4:3036:29311":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:3406:2556":{"crate_id":4,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:6412:20896":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"16:5307:4807":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:42182:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"4:1180:29248":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"19:0:1290":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:41239:5827":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:38182:2502":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:7428:20902":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:10155:3652":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:521:2721":{"crate_id":5,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:22579:13777":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"16:8226:20906":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:13946:4082":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:11443:3720":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:16050:3947":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:40838:5817":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:10313:3025":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:10104:3042":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"16:6802:4997":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:974:2662":{"crate_id":5,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:11089:3688":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:3428:5411":{"crate_id":5,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:14111:4106":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:8216:5206":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:12557:3687":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"5:2308:5400":{"crate_id":5,"path":["std","fs","DirEntry"],"kind":"struct"},"5:4191:13822":{"crate_id":5,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:5014:6948":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:16212:4687":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"5:10715:5410":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"3:0:2460":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:9959:27927":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:12792:3617":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:0:1712":{"crate_id":5,"path":["std"],"kind":"module"},"6:5477:7125":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:38871:2505":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:3754:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"17:13015:3848":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:32747:2486":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"11:2326:2665":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:3130:2641":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:43862:3516":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:7937:3309":{"crate_id":5,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:8558:13814":{"crate_id":5,"path":["std","net","Shutdown"],"kind":"enum"},"17:3473:3539":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:4344:13845":{"crate_id":5,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:11841:3771":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"11:2469:2556":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"5:9418:3303":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:10317:3514":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:6395:5448":{"crate_id":5,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:4864:6877":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:10321:3028":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:4143:13819":{"crate_id":5,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:5102:13868":{"crate_id":5,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:867:3518":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:13344:3959":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:42173:2197":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:10568:2671":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"11:2231:3733":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:7703:26805":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:8624:5547":{"crate_id":5,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"16:4587:4790":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:15944:3933":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:10419:3520":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:10284:3513":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:1686:6798":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:10319:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"5:4917:13835":{"crate_id":5,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:10520:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"4:6410:13718":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"6:5296:7041":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:10068:20948":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:2394:4727":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:45858:6059":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"4:7481:2197":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:12341:737":{"crate_id":5,"path":["std","f32"],"kind":"primitive"},"10:0:2464":{"crate_id":10,"path":["adler"],"kind":"module"},"5:11599:32625":{"crate_id":5,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"1:46422:6116":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:13581:4012":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:9964:7779":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:11567:3730":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:22267:13777":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:4099:13816":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:8271:7620":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:5088:13867":{"crate_id":5,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"16:7497:5117":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:5352:7054":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:44472:6035":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:5415:7084":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:12422:3846":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:8188:5204":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:13424:3970":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:22548:8200":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"6:7461:7520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:14503:4188":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:12464:21090":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:15400:4461":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:15836:4591":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:12929:3886":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:21627:25222":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:42963:7685":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:6621:7347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:2323:20031":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:13597:28891":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:44851:6043":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:43465:7686":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"7:79:19875":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:1069:2664":{"crate_id":5,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:12328:417":{"crate_id":5,"path":["std","bool"],"kind":"primitive"},"16:7321:2800":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:3383:141":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:7986:2625":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"17:15333:4442":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:7528:5127":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:40824:3481":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:6634:4758":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:38237:2503":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:32200:2635":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:40737:5950":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:8553:5540":{"crate_id":5,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"4:2245:7659":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"18:635:3483":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:44796:164":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:10887:34318":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:4971:6924":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:6317:4918":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:12408:3845":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:8309:2198":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:2548:4734":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:12089:3813":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:3612:27177":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:44668:2678":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:12354:965":{"crate_id":5,"path":["std","isize"],"kind":"primitive"},"15:327:7755":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:2004:784":{"crate_id":5,"path":["std","ffi"],"kind":"module"},"1:3386:142":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:10622:34314":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"4:3314:5310":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:7981:13777":{"crate_id":5,"path":["std","sealed","Sealed"],"kind":"trait"},"5:10913:7645":{"crate_id":5,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:11595:3740":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:7590:4766":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:7559:5131":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:5283:7036":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:11671:5467":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:5592:5435":{"crate_id":5,"path":["std","process","ChildStdin"],"kind":"struct"},"6:5260:7022":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:4498:2642":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:13495:5875":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"5:4809:7503":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"17:11341:3712":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:12336:1720":{"crate_id":5,"path":["std","str"],"kind":"primitive"},"1:39486:2520":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:43822:6002":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:44810:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"6:8351:7639":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"11:2140:2665":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:6927:5016":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:8805:13890":{"crate_id":5,"path":["std","path","Component"],"kind":"enum"},"1:10528:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"6:6435:7249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:4502:4787":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:44598:7689":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:494:3267":{"crate_id":5,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:2635:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"5:4873:13869":{"crate_id":5,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:11157:5534":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"5:9195:5574":{"crate_id":5,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:2537:8201":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"5:9363:6259":{"crate_id":5,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:40667:5943":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"5:7918:3307":{"crate_id":5,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:4651:2626":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"6:4837:6854":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:6562:7314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:39450:2523":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:5325:204":{"crate_id":5,"path":["std","path","PathBuf"],"kind":"struct"},"6:5472:7123":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:43247:5981":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"17:16069:4653":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"16:6948:4760":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:5505:128":{"crate_id":5,"path":["std","path","Display"],"kind":"struct"},"5:3896:5417":{"crate_id":5,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:4352:4784":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:5134:6979":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:14855:4314":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:4959:6919":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:6648:4960":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:8012:7605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"4:1505:2197":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:5314:7047":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:8855:2652":{"crate_id":5,"path":["std","path","Iter"],"kind":"struct"},"17:15748:4573":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:6991:34301":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"4:5466:13705":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"1:39885:8216":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"18:670:3490":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:7888:5154":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:40983:5819":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:41984:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"6:6689:7370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"16:6433:4936":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:9707:138":{"crate_id":5,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"5:1603:2652":{"crate_id":5,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"11:787:2655":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"16:6160:20004":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"4:2123:5633":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:23164:5922":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"16:6026:4698":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:44590:7687":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"5:10503:32916":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"18:623:34328":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:39530:2511":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"17:11877:3774":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:10743:3389":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"5:9330:5586":{"crate_id":5,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"5:10712:5408":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"16:2508:4732":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:7085:5038":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:0:1001":{"crate_id":6,"path":["libc"],"kind":"module"},"6:8265:7619":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:11108:2652":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:40409:3098":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:10218:5966":{"crate_id":5,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:42362:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:5914:4835":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:11951:5858":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"5:1916:5395":{"crate_id":5,"path":["std","env","ArgsOs"],"kind":"struct"},"17:14599:4206":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:3861:2558":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:44859:6045":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:3831:13815":{"crate_id":5,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:2636:4738":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:5107:4806":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:5643:7192":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"4:4432:265":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:13211:3933":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:13649:5880":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:33856:2495":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:12043:3809":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:44606:7691":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:8872:5567":{"crate_id":5,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:46990:6164":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:2748:4743":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:5995:4845":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10905:3671":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:9135:5570":{"crate_id":5,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:40618:5940":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"4:3816:5632":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:40654:5527":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:15390:4458":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:47144:6174":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:2891:144":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"11:2542:6589":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:2153:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:5415:4809":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:44644:130":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"6:8197:7615":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:6768:7396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"16:4062:4783":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:7580:5132":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:13774:4056":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:10661:3666":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:7429:7510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:7633:34302":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:3476:13802":{"crate_id":5,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"4:3657:2652":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:12353:1826":{"crate_id":5,"path":["std","u128"],"kind":"primitive"},"6:1593:6734":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:8288:7625":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:9105:5568":{"crate_id":5,"path":["std","process","CommandArgs"],"kind":"struct"},"17:12318:3541":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:23186:5924":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:12873:8343":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"6:5225:7006":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:10671:34316":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:5445:7105":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:6900:3384":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:12478:3853":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:10769:34315":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:2478:13767":{"crate_id":5,"path":["std","fs","canonicalize"],"kind":"function"},"17:11405:3716":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:23638:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:40372:3105":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:32193:5927":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:12887:3883":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:43846:5861":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"18:659:3484":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:12808:3879":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:46185:6089":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:44184:3097":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:562:2727":{"crate_id":5,"path":["std","thread","Packet"],"kind":"struct"},"4:1839:2556":{"crate_id":4,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"5:674:13724":{"crate_id":5,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:1101:2667":{"crate_id":5,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:22705:5886":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"11:328:6586":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:8481:5415":{"crate_id":5,"path":["std","io","IoSlice"],"kind":"struct"},"6:1485:6672":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:7516:7557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"4:6689:2197":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"4:1164:32126":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:6427:4935":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"11:856:2661":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:13844:4067":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:15023:4369":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"11:1903:5307":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:1962:671":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"11:1891:2558":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:10948:139":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"11:1566:19961":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:15678:4558":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:12330:471":{"crate_id":5,"path":["std","char"],"kind":"primitive"},"1:40517:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:8071:13748":{"crate_id":5,"path":["std","env","VarError"],"kind":"enum"},"6:5457:7114":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:4940:4801":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:12213:3824":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:22811:5888":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:3648:32468":{"crate_id":5,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:3509:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:39584:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"11:364:3260":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:3290:32394":{"crate_id":5,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:5483:7126":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"5:6172:3292":{"crate_id":5,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:46887:6161":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:14475:4184":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:42936:7677":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"5:896:2654":{"crate_id":5,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:21710:13777":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:47118:6172":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:4412:8236":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:12297:7777":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:14341:4157":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:40789:5952":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"11:837:2659":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"4:879:3331":{"crate_id":4,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:3196:4717":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:10323:3029":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:12494:3855":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:4389:109":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"17:11075:3687":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:41924:5419":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:1610:2558":{"crate_id":5,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:13797:4061":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:8306:7628":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:16121:4665":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:21657:13777":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"16:3925:4782":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:1671:6789":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:6505:7284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:2592:4736":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:15222:4414":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:4529:2643":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:5122:6978":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:12768:20946":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"11:1910:5308":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:4662:13847":{"crate_id":5,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:12346:896":{"crate_id":5,"path":["std","i32"],"kind":"primitive"},"16:7014:20900":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:9271:5576":{"crate_id":5,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:3142:2547":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"5:10595:5568":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:2488:13772":{"crate_id":5,"path":["std","fs","read_dir"],"kind":"function"},"16:6353:4710":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:3385:5409":{"crate_id":5,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:23007:8049":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:9938:20963":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"11:396:3262":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:10563:2669":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:4614:4791":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:11837:5418":{"crate_id":5,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:5015:3089":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:46393:6115":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"5:3893:5416":{"crate_id":5,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:13046:3896":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"4:7103:3369":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:12388:3843":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"4:7389:5648":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:44932:6050":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"5:3383:5408":{"crate_id":5,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:7727:4768":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"4:1336:2666":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:42206:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:43722:5995":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:47212:6183":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:6560:4753":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"5:943:2657":{"crate_id":5,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:5250:7016":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:14189:4133":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:12225:3825":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:5436:7099":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:2698:3273":{"crate_id":5,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:2854:4748":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:4800:6826":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:10278:143":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:44602:7690":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:10534:34313":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:5344:7053":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"18:481:3458":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:40455:3100":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"16:2303:20005":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:6962:4761":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"4:6015:71":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"5:5697:5438":{"crate_id":5,"path":["std","process","Stdio"],"kind":"struct"},"1:2977:137":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"17:12516:3860":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:1207:3528":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:15992:4639":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:15:2441":{"crate_id":1,"path":["core","write"],"kind":"macro"},"17:13553:4002":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:2788:4745":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:3330:5406":{"crate_id":5,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:23120:5918":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"16:3810:4779":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:6363:3291":{"crate_id":5,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:8300:7627":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:14311:4152":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:9984:20964":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:10982:20977":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:6606:4956":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:5863:20893":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:34029:2496":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:12993:20969":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"18:706:3496":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:16249:4693":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:10775:3393":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:12343:732":{"crate_id":5,"path":["std","f128"],"kind":"primitive"},"5:12281:5623":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"11:430:34283":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:40504:3095":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:12650:5867":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:4787:6817":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:12328:3832":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:7910:20905":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:47182:6181":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:7549:5130":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:11042:3681":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:32307:114":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:1969:3077":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:43944:6009":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:12352:1844":{"crate_id":5,"path":["std","u64"],"kind":"primitive"},"5:12345:890":{"crate_id":5,"path":["std","i16"],"kind":"primitive"},"4:3035:5629":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:8174:8272":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:46024:6073":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:43691:5992":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:44883:6048":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"16:4976:4802":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:9222:13912":{"crate_id":5,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:7716:33852":{"crate_id":5,"path":["std","panicking","Hook"],"kind":"enum"},"1:44080:6012":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:41912:5969":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:10350:3515":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:14012:4093":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:10524:3664":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"4:3881:2556":{"crate_id":4,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"5:8180:5478":{"crate_id":5,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:34375:2499":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:9172:2197":{"crate_id":5,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:43998:5854":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:7472:34260":{"crate_id":5,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:5160:6981":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:11730:3753":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:1580:6727":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:3014:20034":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:1707:6806":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:22493:27703":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:15301:4434":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:5320:7048":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:2070:197":{"crate_id":5,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:40570:8245":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"5:8472:5524":{"crate_id":5,"path":["std","io","util","Sink"],"kind":"struct"},"16:5817:4821":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:4293:34263":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:5636:7189":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:11918:5857":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"17:4821:3546":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"5:922:2558":{"crate_id":5,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"4:7654:5657":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:11312:5851":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:21712:13419":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:3899:4781":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:12362:3842":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"18:689:3493":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:43774:5998":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"11:1066:19960":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:46667:6125":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"17:12056:3811":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"18:718:3500":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:532:6640":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"14:214:5296":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:45875:6060":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:12433:3848":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:21659:13423":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"5:9391:3296":{"crate_id":5,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:2696:134":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:11773:3759":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:6856:3300":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:40416:3099":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:44437:6030":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:22934:26882":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:12331:1872":{"crate_id":5,"path":["std","unit"],"kind":"primitive"},"17:11812:3767":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:11674:3748":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:10720:34320":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:15569:4518":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"11:2352:2666":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:3363:2507":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"17:10251:3512":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:5370:7064":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"4:7578:5651":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:40625:5941":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:13375:3963":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:40746:5806":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:5083:6975":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:13738:4047":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"4:289:3325":{"crate_id":4,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:45978:6070":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:4656:2627":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:11063:3686":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:5191:6990":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:15116:4386":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"4:935:3333":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:12574:5862":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"4:4083:2558":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:15596:4530":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:1968:5396":{"crate_id":5,"path":["std","error","Report"],"kind":"struct"},"16:6442:4937":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:9343:32464":{"crate_id":5,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:10760:3270":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:47133:6173":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:44400:5871":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:5981:5446":{"crate_id":5,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:6609:7340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:14977:4361":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"5:12356:1418":{"crate_id":5,"path":["std","reference"],"kind":"primitive"},"17:12030:3808":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"4:1555:2657":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"9:424:19884":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"4:2298:29142":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"4:219:3324":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:11825:3769":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:12278:3829":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:14131:4107":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:46572:6122":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:9310:5581":{"crate_id":5,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"5:3667:13795":{"crate_id":5,"path":["std","io","BufRead"],"kind":"trait"},"17:12597:3864":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"5:9207:13913":{"crate_id":5,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:40382:3106":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:6756:7394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"14:165:19967":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:41231:5825":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:10967:5415":{"crate_id":5,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:9886:20961":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:11324:3709":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:11915:21065":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:15456:4473":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:2862:2476":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:4965:6921":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:16269:3969":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"5:2315:13759":{"crate_id":5,"path":["std","fs","read_to_string"],"kind":"function"},"16:2902:20032":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:5628:5437":{"crate_id":5,"path":["std","process","ChildStderr"],"kind":"struct"},"17:10092:20966":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:23087:5915":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"17:15039:4372":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:8065:13728":{"crate_id":5,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:6895:5012":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:39642:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"5:8618:5538":{"crate_id":5,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"9:447:19882":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:597:3525":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:14723:4208":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:6775:7397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:39622:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:5146:6980":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"11:0:2465":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:38292:2504":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:6278:4896":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:44098:6013":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:21836:13420":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:8118:5195":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:13822:3399":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"17:15445:4472":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:4784:2637":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:46316:6096":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:6079:4705":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"11:2369:5313":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:22626:13500":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:42717:3027":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:15383:4457":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:22136:5884":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:44614:7693":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:12150:3816":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:16187:4682":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:32186:5097":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"16:7098:5041":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:12833:8035":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:45943:6068":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:12863:3882":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:43783:5999":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:46010:6072":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:14587:4199":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:2460:7668":{"crate_id":5,"path":["std","fs","metadata"],"kind":"function"},"4:3259:29239":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:15418:4465":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:6889:5814":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:44159:6016":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"5:951:2659":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:44594:7688":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:10412:13897":{"crate_id":5,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"4:7128:3373":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:5927:4836":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:2660:4739":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:14436:4181":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:46765:6159":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"4:1073:3325":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:15289:4428":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:15720:4564":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:2064:8214":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:4797:13821":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:10955:5595":{"crate_id":5,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"6:6915:7450":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:43701:5993":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:1517:6685":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:33644:2491":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:6880:7425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:6821:7413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:42598:5843":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:6895:7669":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"5:968:2661":{"crate_id":5,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"11:2383:2652":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"4:7630:3354":{"crate_id":4,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"14:202:13710":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:6698:7376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:30567:2548":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"5:3600:5414":{"crate_id":5,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:33711:2493":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:11307:7647":{"crate_id":5,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:497:6614":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:8207:145":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:13173:3918":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:3345:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:6782:20899":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:43835:6005":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:11026:20978":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:3582:254":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"4:3046:29208":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:21730:5885":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:8719:5558":{"crate_id":5,"path":["std","path","Prefix"],"kind":"enum"},"5:8005:2734":{"crate_id":5,"path":["std","thread","ThreadId"],"kind":"struct"},"16:5037:4804":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:9858:20960":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:11051:3683":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:44258:8363":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:15624:4537":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:6746:7387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"6:4870:6878":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"4:1536:2655":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:2885:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:10259:226":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"1:47197:6182":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:5329:7051":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"5:9413:3302":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"17:12289:3830":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:41806:7676":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:1510:6682":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:6872:5011":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:3842:4780":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:11634:3745":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:8229:2651":{"crate_id":5,"path":["std","hash","random","RandomState"],"kind":"struct"},"5:9714:5477":{"crate_id":5,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"5:4093:13817":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:46135:6087":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:11004:5438":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"17:15734:4566":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:3137:247":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"16:7857:5150":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:12329:1173":{"crate_id":5,"path":["std","never"],"kind":"primitive"},"1:12894:8349":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:6519:7285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:40723:5947":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:10185:3510":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:13624:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:44325:6027":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:7561:7581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"4:1489:2653":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:46164:6088":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"5:3426:5410":{"crate_id":5,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:12353:3841":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:6417:7236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:10346:5596":{"crate_id":5,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"5:11905:32706":{"crate_id":5,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"0:0:2231":{"crate_id":0,"path":["fastrand"],"kind":"module"},"16:4468:4786":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:14038:4096":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:1577:210":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:13512:5878":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:12879:5839":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:5588:7161":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"4:4248:3279":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:5846:4826":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:6874:7424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:43257:5985":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:12824:20968":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:15769:4579":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"9:357:19897":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:45811:6054":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"18:598:34329":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:11081:3313":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:7168:5586":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"4:7641:243":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"5:3998:5418":{"crate_id":5,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:15426:4467":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:2458:4730":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:12302:13729":{"crate_id":5,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:42068:2801":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:22949:26890":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"5:5833:3292":{"crate_id":5,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:7686:5137":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:10677:3387":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:5266:7025":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:22361:13505":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"4:6608:3325":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:41197:5449":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"4:304:2553":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"5:4684:13848":{"crate_id":5,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"18:515:3457":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:7575:7590":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:2175:21023":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:40401:3097":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:11657:5464":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:8197:5480":{"crate_id":5,"path":["std","fs","Permissions"],"kind":"struct"},"6:5630:7186":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:4979:6929":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:7397:34307":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:7412:7509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:150:3256":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"11:1582:5305":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:43235:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"11:742:2658":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:12313:32615":{"crate_id":5,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:3519:5412":{"crate_id":5,"path":["std","io","util","Repeat"],"kind":"struct"},"5:6271:3284":{"crate_id":5,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"15:306:19987":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:11497:3723":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:403:3521":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:6047:4851":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:6738:7386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"5:8187:5479":{"crate_id":5,"path":["std","fs","FileTimes"],"kind":"struct"},"17:3264:3537":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:9164:5573":{"crate_id":5,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:2528:4733":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:2894:258":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"17:12695:3870":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"5:12355:1911":{"crate_id":5,"path":["std","usize"],"kind":"primitive"},"1:3358:2506":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:4985:6932":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:14516:4189":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:11621:3743":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:8301:5213":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:15176:4404":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:564:6656":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"11:844:2660":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"4:6047:3353":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"6:4891:6887":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:12300:21089":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:16079:4654":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:1999:1357":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:13089:3900":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:4932:6907":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:6335:4928":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:14414:4170":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:3593:2516":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"4:6954:2563":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"4:5725:2562":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:12399:3844":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:8790:5561":{"crate_id":5,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:15324:4439":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"4:5930:2558":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"16:7656:20903":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:14575:3848":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:2535:8200":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"16:6120:20895":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:3179:3047":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:39602:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:8341:7637":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:13399:3967":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:22876:26898":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:5831:4824":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:12342:3837":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"5:426:185":{"crate_id":5,"path":["std","thread","local","LocalKey"],"kind":"struct"},"18:573:3460":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"14:220:5298":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:46505:6119":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:6347:3288":{"crate_id":5,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:12344:908":{"crate_id":5,"path":["std","i8"],"kind":"primitive"},"1:4775:2636":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:4986:3548":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:16032:3937":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"5:11616:5616":{"crate_id":5,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:11293:20996":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:1692:6799":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:6721:7383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:39712:5932":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:10309:128":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:47019:6165":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:6813:4998":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:5236:7010":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:14933:4356":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:32207:5928":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"17:11524:3725":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:12634:5866":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:8610:5545":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"11:800:2558":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:2234:3536":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:15266:4425":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"13:110:34285":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:44793:150":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"18:735:25151":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:6788:13908":{"crate_id":5,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:40973:5532":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"4:5418:3325":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"14:7:5291":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"4:952:2652":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:4915:13834":{"crate_id":5,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:7324:3304":{"crate_id":5,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"5:2734:5404":{"crate_id":5,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:4885:6885":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"15:394:19996":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:2733:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:15608:4533":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:4876:6880":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:44622:7695":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:16176:4681":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"5:12350:1832":{"crate_id":5,"path":["std","u16"],"kind":"primitive"},"17:2037:3529":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:23028:13777":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:12899:8348":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:44193:3096":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:6629:7348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"4:6930:2562":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:2438:4729":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:44503:5872":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:5546:7146":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:538:6643":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:10573:34317":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:15342:4443":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:23109:5917":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"5:12116:3322":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:6574:4770":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:6940:5018":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"11:434:34279":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:11753:3318":{"crate_id":5,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:16259:3964":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:4531:4788":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:8051:13727":{"crate_id":5,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:11816:5417":{"crate_id":5,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:47274:6200":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:15646:4543":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:5742:4811":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:957:2660":{"crate_id":5,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:8170:3597":{"crate_id":5,"path":["std","fs","Metadata"],"kind":"struct"},"5:9462:2675":{"crate_id":5,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:5528:7135":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:0:2469":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:2338:4718":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:15126:4387":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:9737:20943":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:12647:3866":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:13116:3906":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:7330:7474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:26038:267":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:261:3519":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:2374:4726":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:43803:6001":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:8175:5201":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:5289:976":{"crate_id":1,"path":["core","iter"],"kind":"module"},"18:531:3464":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:11224:6263":{"crate_id":5,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"16:5686:4751":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"4:7562:2736":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:32140:2475":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"11:123:3258":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:22976:7673":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:22534:13509":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:43450:5987":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"4:3247:2652":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:7741:4769":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:39699:5931":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"14:0:2467":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"11:2423:2197":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:523:6634":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:11647:3746":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"9:0:2463":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:14147:4112":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:38127:2501":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:45928:6067":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"4:3293:29241":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:6706:7379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:5247:5798":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"16:8155:5200":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"18:521:25153":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:40685:5945":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:11419:5855":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:5248:5429":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"11:2569:2554":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:10018:20945":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:13899:4076":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:11242:2674":{"crate_id":5,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"7:0:1901":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:12420:8350":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:22996:5909":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"5:9258:5575":{"crate_id":5,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:7144:20901":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:9719:3311":{"crate_id":5,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"11:1887:2197":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:5536:7140":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:6532:4946":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:42323:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:2274:5663":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:6763:7395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"6:5174:6982":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:878:2653":{"crate_id":5,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:3374:2372":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"4:2216:5634":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"11:1883:2652":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"18:698:3494":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:2521:672":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:570:6659":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:4720:2634":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:42559:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:13485:3983":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:22890:5895":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:13753:4052":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:1639:6771":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:47098:6170":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:9122:5569":{"crate_id":5,"path":["std","process","ExitStatus"],"kind":"struct"},"1:7533:2934":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"4:741:118":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"4:40:2555":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:32182:5926":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"6:1621:6759":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:13986:4090":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:11605:3741":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"4:6429:13720":{"crate_id":4,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:15273:4426":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:11269:20995":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"11:2498:19956":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"17:15463:4475":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"5:6026:3282":{"crate_id":5,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:40695:133":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"4:1474:2652":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:8534:5534":{"crate_id":5,"path":["std","io","Split"],"kind":"struct"},"18:581:2902":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:11256:3701":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:33510:2494":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:15376:4456":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"4:1365:2667":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:6788:7404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:47040:6166":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:44140:6014":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:11350:5852":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:41746:5831":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:4952:6916":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:42520:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"4:0:309":{"crate_id":4,"path":["alloc"],"kind":"module"},"5:1092:2666":{"crate_id":5,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:11661:3747":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"4:4158:2653":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:15151:4396":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:41778:8280":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:43711:5994":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:8218:165":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"5:8604:13846":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"4:7372:2552":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"1:3599:2518":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:42109:2737":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:22621:13502":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"4:3254:5308":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:6441:7252":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:9671:20944":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:8328:7633":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"5:8223:127":{"crate_id":5,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:40799:5953":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"18:754:3509":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:1585:6729":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:872:3519":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"16:7695:5138":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:4157:13821":{"crate_id":5,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"11:700:2197":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:12659:3867":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:7926:3505":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:3475:4776":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:3055:226":{"crate_id":5,"path":["std","io","error","Result"],"kind":"type_alias"},"5:11577:2746":{"crate_id":5,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"4:7453:210":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:40808:5815":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:42284:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:43793:6000":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:10170:3653":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:12584:3669":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:32275:2872":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:40297:3097":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:22758:5887":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"4:7421:5649":{"crate_id":4,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:437:3523":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:15655:4545":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"4:2318:7663":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:1653:6782":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:2773:5405":{"crate_id":5,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:10818:3669":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:7473:4862":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:5367:20891":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"4:4278:3279":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:13855:4068":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:21639:25220":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"18:538:3467":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:43012:3034":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:43210:2670":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"11:1142:5304":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:47078:6168":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:4942:6913":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"4:7461:5650":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:2966:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:30350:3066":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:16165:4676":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"5:3057:137":{"crate_id":5,"path":["std","io","error","Error"],"kind":"struct"},"17:513:3524":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:1636:5310":{"crate_id":5,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:43761:5997":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"4:3038:7660":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:15168:4401":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:465:6600":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:1886:3279":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:14876:4322":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:42710:3026":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:5279:5429":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:43265:5986":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:46593:6123":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"17:15582:4524":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:11702:3750":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"4:7606:5654":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:5400:3653":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:5376:7065":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:32216:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"17:11764:3758":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:10315:3026":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:15760:4575":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"4:7723:2556":{"crate_id":4,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"5:1914:5394":{"crate_id":5,"path":["std","env","Args"],"kind":"struct"},"17:12371:3886":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:6263:4894":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:47159:6175":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:13538:3996":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:6842:5455":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"17:14463:4183":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:40548:5938":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:8093:5192":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:3549:3279":{"crate_id":5,"path":["std","io","Guard"],"kind":"struct"},"17:13292:3948":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:10260:3023":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:11239:5849":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:11865:3773":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:5212:7002":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:2657:112":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"16:7813:5142":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:16223:4689":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:2727:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"17:11493:3722":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:43876:5534":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"16:4424:4785":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"13:229:6581":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"11:687:2653":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:4856:4798":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:10710:3667":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:42703:3024":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:23153:5921":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"11:1087:34275":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:8258:5484":{"crate_id":5,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:5617:7180":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:40676:5944":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"11:2536:6588":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:980:2663":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:8673:149":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:44462:6031":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:10954:20976":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:9755:20941":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:11574:3733":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:2708:4741":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:8073:5191":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:2203:3533":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:3268:2498":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:41221:3385":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:12485:21091":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:46348:6098":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:5112:6977":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:21838:5885":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:22865:5894":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:13779:115":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:44168:5868":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:5502:7133":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:32217:2871":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"16:6300:4911":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:4560:4789":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:6700:5807":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:11019:32620":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:6471:7262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:21625:25224":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:15410:4464":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:1565:6715":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:5407:1242":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:42401:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"4:3750:3325":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:15313:4435":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:42245:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:6532:7291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:44610:7692":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:11776:5416":{"crate_id":5,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:42975:5169":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:11405:5854":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:6077:5804":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:12404:5859":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:5219:7003":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:14025:4094":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:22148:25213":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:4323:13843":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:40714:5803":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:4205:13824":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"18:96:25141":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:10486:113":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"6:5336:7052":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"6:586:6668":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:11392:3715":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"11:2548:6590":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:12175:3818":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:15058:4373":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:42079:2803":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:5188:435":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"5:4151:13820":{"crate_id":5,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:559:6654":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:30605:3079":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:44626:6263":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:7446:7515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:373:2744":{"crate_id":5,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:12443:3850":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:4377:5795":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"4:4477:3279":{"crate_id":4,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:12238:3826":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:5565:7154":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:4897:6890":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"4:7547:2650":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:22467:13777":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"5:9289:32489":{"crate_id":5,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:12572:3668":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"18:80:25140":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:5802:20892":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:4830:4797":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:9408:235":{"crate_id":5,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:12189:3822":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:553:6651":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"11:1025:2665":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:7339:7480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:5385:3652":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:5515:7134":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"5:12351:1838":{"crate_id":5,"path":["std","u32"],"kind":"primitive"},"6:6542:7298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:3657:13775":{"crate_id":5,"path":["std","io","Seek"],"kind":"trait"},"17:13526:3993":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:8511:5527":{"crate_id":5,"path":["std","io","Chain"],"kind":"struct"},"5:8242:5482":{"crate_id":5,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:3218:2510":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"16:5781:4755":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:5489:7128":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"16:4718:4793":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"4:839:3328":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"4:3670:2653":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"11:2124:2664":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:4201:13823":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:2768:4744":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:14402:4168":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:10218:3511":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:7379:34308":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:7868:3525":{"crate_id":5,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:6450:3292":{"crate_id":5,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:45995:6071":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:3287:33298":{"crate_id":5,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:13509:3985":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"11:673:2652":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:3188:2489":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:43673:5989":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:9343:2802":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"11:351:34276":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"4:4113:3325":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:8029:7614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:9777:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:9322:5583":{"crate_id":5,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:42991:27694":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"11:811:2556":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"6:545:6646":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:6678:7367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"18:0:2471":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:11898:3776":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:21581:25226":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"6:5277:7033":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"14:31:5291":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:8643:5549":{"crate_id":5,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:1607:2197":{"crate_id":5,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:12348:883":{"crate_id":5,"path":["std","i128"],"kind":"primitive"},"9:178:7768":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:14298:4151":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:8234:2381":{"crate_id":5,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"6:5306:7044":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:7348:7481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:3172:3045":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"5:8592:5419":{"crate_id":5,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:10918:5478":{"crate_id":5,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"10:44:5316":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:14051:4098":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:3210:2508":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:44920:5315":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:44909:6049":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:4396:5420":{"crate_id":5,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}