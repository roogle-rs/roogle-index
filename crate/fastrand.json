{"root":"0:0:2610","crate_version":"2.1.0","includes_private":false,"index":{"4:5715:30631":{"id":"4:5715:30631","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163:939":{"id":"0:163:939","crate_id":0,"name":"i8","span":{"filename":"src/lib.rs","begin":[419,4],"end":[425,5]},"visibility":"public","docs":"Generates a random `i8` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i8"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i8>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[134,0],"end":[139,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:75:496"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:110:2584":{"id":"0:110:2584","crate_id":0,"name":"fill","span":{"filename":"src/lib.rs","begin":[536,4],"end":[556,5]},"visibility":"public","docs":"Fill a byte slice with random data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["slice",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13794:29857":{"id":"1:13794:29857","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44987:5861","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:2567":{"id":"0:46:2567","crate_id":0,"name":"lowercase","span":{"filename":"src/global_rng.rs","begin":[102,0],"end":[104,1]},"visibility":"public","docs":"Generates a random `char` in range a-z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3105-0:153:2440":{"id":"b:1:3105-0:153:2440","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3075:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3108:150","1:3109:1858"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:106:2520":{"id":"0:106:2520","crate_id":0,"name":"choice","span":{"filename":"src/lib.rs","begin":[509,4],"end":[524,5]},"visibility":"public","docs":"Choose an item from an iterator at random.\n\nThis function may have an unexpected result if the `len()` property of the\niterator does not match the actual number of items in the iterator. If\nthe iterator is empty, this returns `None`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8325:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8325:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8325:177","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8446:2578","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13764:29844":{"id":"1:13764:29844","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3322:261-0:153:2440":{"id":"a:1:3322:261-0:153:2440","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:22:1212":{"id":"0:22:1212","crate_id":0,"name":"new","span":{"filename":"src/global_rng.rs","begin":[25,4],"end":[27,5]},"visibility":"public","docs":"Creates a new random number generator.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Rng","id":"0:153:2440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13785:29853":{"id":"1:13785:29853","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13784:29852","str::split_at_mut_checked":"1:13787:29855"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13872:29886":{"id":"1:13872:29886","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40629:8529","Self::is_ascii":"1:13871:29885"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40629:8529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,16],"end":[131,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:147:1966":{"id":"0:147:1966","crate_id":0,"name":"usize","span":{"filename":"src/global_rng.rs","begin":[164,0],"end":[164,65]},"visibility":"public","docs":"Generates a random `usize` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<usize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:145:914":{"id":"0:145:914","crate_id":0,"name":"i128","span":{"filename":"src/global_rng.rs","begin":[163,0],"end":[163,63]},"visibility":"public","docs":"Generates a random `i128` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i128"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i128>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:2581":{"id":"0:108:2581","crate_id":0,"name":"shuffle","span":{"filename":"src/lib.rs","begin":[528,4],"end":[532,5]},"visibility":"public","docs":"Shuffles a slice randomly.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["slice",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2610":{"id":"0:0:2610","crate_id":0,"name":"fastrand","span":{"filename":"src/lib.rs","begin":[1,0],"end":[696,1]},"visibility":"public","docs":"A simple and fast random number generator.\n\nThe implementation uses [Wyrand](https://github.com/wangyi-fudan/wyhash), a simple and fast\ngenerator but **not** cryptographically secure.\n\n# Examples\n\nFlip a coin:\n\n```\nif fastrand::bool() {\n    println!(\"heads\");\n} else {\n    println!(\"tails\");\n}\n```\n\nGenerate a random `i32`:\n\n```\nlet num = fastrand::i32(..);\n```\n\nChoose a random element in an array:\n\n```\nlet v = vec![1, 2, 3, 4, 5];\nlet i = fastrand::usize(..v.len());\nlet elem = v[i];\n```\n\nSample values from an array with `O(n)` complexity (`n` is the length of array):\n\n```\nfastrand::choose_multiple(vec![1, 4, 5].iter(), 2);\nfastrand::choose_multiple(0..20, 12);\n```\n\n\nShuffle an array:\n\n```\nlet mut v = vec![1, 2, 3, 4, 5];\nfastrand::shuffle(&mut v);\n```\n\nGenerate a random [`Vec`] or [`String`]:\n\n```\nuse std::iter::repeat_with;\n\nlet v: Vec<i32> = repeat_with(|| fastrand::i32(..)).take(10).collect();\nlet s: String = repeat_with(fastrand::alphanumeric).take(10).collect();\n```\n\nTo get reproducible results on every run, initialize the generator with a seed:\n\n```\n// Pick an arbitrary number as seed.\nfastrand::seed(7);\n\n// Now this prints the same number on every run:\nprintln!(\"{}\", fastrand::u32(..));\n```\n\nTo be more efficient, create a new [`Rng`] instance instead of using the thread-local\ngenerator:\n\n```\nuse std::iter::repeat_with;\n\nlet mut rng = fastrand::Rng::new();\nlet mut bytes: Vec<u8> = repeat_with(|| rng.u8(..)).take(10_000).collect();\n```\n\nThis crate aims to expose a core set of useful randomness primitives. For more niche algorithms,\nconsider using the [`fastrand-contrib`] crate alongside this one.\n\n# Features\n\n- `std` (enabled by default): Enables the `std` library. This is required for the global\n  generator and global entropy. Without this feature, [`Rng`] can only be instantiated using\n  the [`with_seed`](Rng::with_seed) method.\n- `js`: Assumes that WebAssembly targets are being run in a JavaScript environment. See the\n  [WebAssembly Notes](#webassembly-notes) section for more information.\n\n# WebAssembly Notes\n\nFor non-WASI WASM targets, there is additional sublety to consider when utilizing the global RNG.\nBy default, `std` targets will use entropy sources in the standard library to seed the global RNG.\nHowever, these sources are not available by default on WASM targets outside of WASI.\n\nIf the `js` feature is enabled, this crate will assume that it is running in a JavaScript\nenvironment. At this point, the [`getrandom`] crate will be used in order to access the available\nentropy sources and seed the global RNG. If the `js` feature is not enabled, the global RNG will\nuse a predefined seed.\n\n[`fastrand-contrib`]: https://crates.io/crates/fastrand-contrib\n[`getrandom`]: https://crates.io/crates/getrandom","links":{"`Rng`":"0:153:2440","Rng::with_seed":"0:90:2442","`Vec`":"4:7200:280"},"attrs":["#![no_std]","#![forbid(unsafe_code)]","#![warn(missing_docs, missing_debug_implementations, rust_2018_idioms)]","#![doc(html_favicon_url =\n\"https://raw.githubusercontent.com/smol-rs/smol/master/assets/images/logo_fullsize_transparent.png\")]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/smol-rs/smol/master/assets/images/logo_fullsize_transparent.png\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:153:2440","0:73-0:13:2438"],"is_stripped":false}}},"1:13881:8551":{"id":"1:13881:8551","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5069:8551"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:45041:3388","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13761":{"id":"1:13761","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13762:1027","1:13763:2593","1:13764:29844","1:13765:29845","1:13767:29846","1:13770:29847","1:13771:29848","1:13772:352","1:13773:29849","1:13774:3135","1:13776:2557","1:13778:28912","1:13780:28913","1:13782:29850","1:13783:29851","1:13784:29852","1:13785:29853","1:13786:29854","1:13787:29855","1:13789:6200","1:13790:6353","1:13791:5787","1:13792:25777","1:13793:25778","1:13794:29857","1:13795:29858","1:13796:25779","1:13797:3221","1:13799:29859","1:13801:29860","1:13804:3266","1:13807:3230","1:13811:29861","1:13813:25766","1:13815:29862","1:13818:29863","1:13820:29864","1:13823:29865","1:13825:29866","1:13828:29867","1:13830:29868","1:13833:2821","1:13835:29869","1:13838:29870","1:13840:29871","1:13843:29872","1:13845:29873","1:13847:29874","1:13849:29875","1:13850:29876","1:13851:29877","1:13854:29878","1:13856:29879","1:13858:29880","1:13861:29881","1:13864:29882","1:13866:29883","1:13869:29884","1:13871:29885","1:13872:29886","1:13873:29887","1:13874:29888","1:13875:29889","1:13876:29890","1:13877:29891","1:13878:29892","1:13879:29893","1:13881:8551","1:13882:29894","1:13883:29895"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13815:29862":{"id":"1:13815:29862","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:13452:8655","`DoubleEndedIterator`":"1:8393:134","prim@char":"5:12642:492","str::split":"1:13811:29861"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44751:6182","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:8661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:33002:3142-0:153:2440":{"id":"a:1:33002:3142-0:153:2440","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:33002:3142","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13818:29863":{"id":"1:13818:29863","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:13452:8655","str::split":"1:13811:29861","prim@char":"5:12642:492","`DoubleEndedIterator`":"1:8393:134","str::rsplit_terminator":"1:13820:29864"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44783:6336","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:158":{"id":"0:158","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,16],"end":[131,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32946:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13830:29868":{"id":"1:13830:29868","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:8661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183:1878":{"id":"0:183:1878","crate_id":0,"name":"u128","span":{"filename":"src/lib.rs","begin":[590,4],"end":[596,5]},"visibility":"public","docs":"Generates a random `u128` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u128>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5729:30636":{"id":"4:5729:30636","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13875:29889"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2795:25579":{"id":"1:2795:25579","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13820:29864":{"id":"1:13820:29864","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:13452:8655","str::split":"1:13811:29861","prim@char":"5:12642:492","str::split_terminator":"1:13818:29863"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44801:6337","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:8661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:725":{"id":"0:160:725","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[131,16],"end":[131,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Rng","id":"0:153:2440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129:939":{"id":"0:129:939","crate_id":0,"name":"i8","span":{"filename":"src/global_rng.rs","begin":[155,0],"end":[155,59]},"visibility":"public","docs":"Generates a random `i8` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i8"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i8>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2522":{"id":"0:44:2522","crate_id":0,"name":"alphanumeric","span":{"filename":"src/global_rng.rs","begin":[96,0],"end":[98,1]},"visibility":"public","docs":"Generates a random `char` in ranges a-z, A-Z and 0-9.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13877:29891":{"id":"1:13877:29891","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1148:37895"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:171:914":{"id":"0:171:914","crate_id":0,"name":"i128","span":{"filename":"src/lib.rs","begin":[451,4],"end":[457,5]},"visibility":"public","docs":"Generates a random `i128` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i128"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i128>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13873:29887":{"id":"1:13873:29887","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137:927":{"id":"0:137:927","crate_id":0,"name":"i32","span":{"filename":"src/global_rng.rs","begin":[159,0],"end":[159,61]},"visibility":"public","docs":"Generates a random `i32` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i32>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3969:1871":{"id":"1:3969:1871","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:40445:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13838:29870":{"id":"1:13838:29870","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:13452:8655","`DoubleEndedIterator`":"1:8393:134","prim@char":"5:12642:492","str::rmatch_indices":"1:13840:29871"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44883:6338","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13869:29884":{"id":"1:13869:29884","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:13411:149","`FromStr`":"1:13410:8339"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:43001:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:13410:8339","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13410:8339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:785:25585":{"id":"4:785:25585","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13765:29845":{"id":"1:13765:29845","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13871:29885":{"id":"1:13871:29885","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3114:1856":{"id":"1:3114:1856","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:43001:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13784:29852":{"id":"1:13784:29852","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13786:29854","str::split_at_mut":"1:13785:29853"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:2567":{"id":"0:102:2567","crate_id":0,"name":"lowercase","span":{"filename":"src/lib.rs","begin":[486,4],"end":[489,5]},"visibility":"public","docs":"Generates a random `char` in range a-z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13858:29880":{"id":"1:13858:29880","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:12642:492","self::pattern":"1:13452:8655"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:8661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:177:1884":{"id":"0:177:1884","crate_id":0,"name":"u16","span":{"filename":"src/lib.rs","begin":[566,4],"end":[572,5]},"visibility":"public","docs":"Generates a random `u16` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2822-0:153:2440":{"id":"b:1:2822-0:153:2440","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2820:8528","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2824:25584"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:92:2517":{"id":"0:92:2517","crate_id":0,"name":"alphabetic","span":{"filename":"src/lib.rs","begin":[328,4],"end":[331,5]},"visibility":"public","docs":"Generates a random `char` in ranges a-z and A-Z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:2528":{"id":"0:97:2528","crate_id":0,"name":"digit","span":{"filename":"src/lib.rs","begin":[352,4],"end":[365,5]},"visibility":"public","docs":"Generates a random digit in the given `base`.\n\nDigits are represented by `char`s in ranges 0-9 and a-z.\n\nPanics if the base is zero or greater than 36.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["base",{"primitive":"u32"}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13782:29850":{"id":"1:13782:29850","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"5:12648:1771","str::slice_mut_unchecked":"1:13783:29851","crate::ops::Index":"1:40276:2896"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:2581":{"id":"0:55:2581","crate_id":0,"name":"shuffle","span":{"filename":"src/global_rng.rs","begin":[138,0],"end":[140,1]},"visibility":"public","docs":"Shuffles a slice randomly.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2792:2777":{"id":"1:2792:2777","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:173:996":{"id":"0:173:996","crate_id":0,"name":"isize","span":{"filename":"src/lib.rs","begin":[476,4],"end":[482,5]},"visibility":"public","docs":"Generates a random `isize` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"isize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"isize"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<isize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"isize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:175:1902":{"id":"0:175:1902","crate_id":0,"name":"u8","span":{"filename":"src/lib.rs","begin":[558,4],"end":[564,5]},"visibility":"public","docs":"Generates a random `u8` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u8>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2790-0:153:2440":{"id":"b:1:2790-0:153:2440","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2792:2777"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3110-0:153:2440":{"id":"b:1:3110-0:153:2440","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3113:150","1:3114:1856"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:139:1896":{"id":"0:139:1896","crate_id":0,"name":"u64","span":{"filename":"src/global_rng.rs","begin":[160,0],"end":[160,61]},"visibility":"public","docs":"Generates a random `u64` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u64>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167:927":{"id":"0:167:927","crate_id":0,"name":"i32","span":{"filename":"src/lib.rs","begin":[435,4],"end":[441,5]},"visibility":"public","docs":"Generates a random `i32` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i32>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13796:25779":{"id":"1:13796:25779","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:45025:6199","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13866:29883":{"id":"1:13866:29883","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:12642:492","self::pattern":"1:13452:8655"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:8661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2793-0:153:2440":{"id":"b:1:2793-0:153:2440","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2795:25579"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:149:996":{"id":"0:149:996","crate_id":0,"name":"isize","span":{"filename":"src/global_rng.rs","begin":[165,0],"end":[165,65]},"visibility":"public","docs":"Generates a random `isize` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"isize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"isize"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<isize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"isize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:156":{"id":"0:156","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,9],"end":[131,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10655:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:157:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13823:29865":{"id":"1:13823:29865","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby a pattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"5:12642:492","self::pattern":"1:13452:8655","str::rsplitn":"1:13825:29866"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44837:6184","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13789:6200":{"id":"1:13789:6200","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"5:12642:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44703:6192","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13875:29889":{"id":"1:13875:29889","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13795:29858":{"id":"1:13795:29858","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44997:6342","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3099-0:153:2440":{"id":"b:1:3099-0:153:2440","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3101:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/global_rng.rs","begin":[12,0],"end":[20,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3147:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Rng","id":"0:153:2440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:20:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:5712:30630":{"id":"4:5712:30630","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:299:2933","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"4:299:2933","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3357:3336-0:153:2440":{"id":"a:1:3357:3336-0:153:2440","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3357:3336","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13770:29847":{"id":"1:13770:29847","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12975:8662"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5728:30635":{"id":"4:5728:30635","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13874:29888"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111:2601":{"id":"0:111:2601","crate_id":0,"name":"uppercase","span":{"filename":"src/lib.rs","begin":[633,4],"end":[636,5]},"visibility":"public","docs":"Generates a random `char` in range A-Z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13850:29876":{"id":"1:13850:29876","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5726:30634":{"id":"4:5726:30634","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"4:299:2933","`String`":"4:7774:257"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:299:2933","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:2545":{"id":"0:100:2545","crate_id":0,"name":"choose_multiple","span":{"filename":"src/lib.rs","begin":[390,4],"end":[417,5]},"visibility":"public","docs":"Collects `amount` values at random from the iterator into a vector.\n\nThe length of the returned vector equals `amount` unless the iterator\ncontains insufficient elements, in which case it equals the number of\nelements available.\n\nComplexity is `O(n)` where `n` is the length of the iterator.","links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"generic":"T"}],["amount",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Vec","id":"4:7200:280","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"","id":"1:8498:190","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8498:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:2515":{"id":"0:91:2515","crate_id":0,"name":"fork","span":{"filename":"src/lib.rs","begin":[322,4],"end":[324,5]},"visibility":"public","docs":"Clones the generator by deterministically deriving a new generator based on the initial\nseed.\n\nThis function can be used to create a new generator that is a \"spinoff\" of the old\ngenerator. The new generator will not produce the same sequence of values as the\nold generator.\n\n# Example\n\n```\n// Seed two generators equally, and clone both of them.\nlet mut base1 = fastrand::Rng::with_seed(0x4d595df4d0f33173);\nbase1.bool(); // Use the generator once.\n\nlet mut base2 = fastrand::Rng::with_seed(0x4d595df4d0f33173);\nbase2.bool(); // Use the generator once.\n\nlet mut rng1 = base1.fork();\nlet mut rng2 = base2.fork();\n\nprintln!(\"rng1 returns {}\", rng1.u32(..));\nprintln!(\"rng2 returns {}\", rng2.u32(..));\n```","links":{},"attrs":["#[inline]","#[must_use = \"this creates a new instance of `Rng`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161":{"id":"0:161","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,27],"end":[131,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2877:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:94:2522":{"id":"0:94:2522","crate_id":0,"name":"alphanumeric","span":{"filename":"src/lib.rs","begin":[335,4],"end":[338,5]},"visibility":"public","docs":"Generates a random `char` in ranges a-z, A-Z and 0-9.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:141:933":{"id":"0:141:933","crate_id":0,"name":"i64","span":{"filename":"src/global_rng.rs","begin":[161,0],"end":[161,61]},"visibility":"public","docs":"Generates a random `i64` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i64>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13780:28913":{"id":"1:13780:28913","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13790:6353":{"id":"1:13790:6353","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"5:12642:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44709:6334","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13778:28912":{"id":"1:13778:28912","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3967-0:153:2440":{"id":"b:1:3967-0:153:2440","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3969:1871"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13876:29890":{"id":"1:13876:29890","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1148:37895"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40:436":{"id":"0:40:436","crate_id":0,"name":"bool","span":{"filename":"src/global_rng.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"Generates a random `bool`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13813:25766":{"id":"1:13813:25766","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nDiffers from the iterator produced by `split` in that `split_inclusive`\nleaves the matched part as the terminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"5:12642:492","self::pattern":"1:13452:8655"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:13239:6179","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:1902":{"id":"0:127:1902","crate_id":0,"name":"u8","span":{"filename":"src/global_rng.rs","begin":[154,0],"end":[154,59]},"visibility":"public","docs":"Generates a random `u8` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u8>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73-0:13:2438":{"id":"0:73-0:13:2438","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,22]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"global_rng","name":"global_rng","id":"0:13:2438","glob":true}}},"4:786:25586":{"id":"4:786:25586","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:179:1890":{"id":"0:179:1890","crate_id":0,"name":"u32","span":{"filename":"src/lib.rs","begin":[574,4],"end":[580,5]},"visibility":"public","docs":"Generates a random `u32` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u32>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13773:29849":{"id":"1:13773:29849","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"5:12661:1902"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13767:29846":{"id":"1:13767:29846","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13765:29845"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13861:29881":{"id":"1:13861:29881","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:12642:492","self::pattern":"1:13452:8655"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:8661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:2571":{"id":"0:105:2571","crate_id":0,"name":"get_seed","span":{"filename":"src/lib.rs","begin":[499,4],"end":[501,5]},"visibility":"public","docs":"Gives back **current** seed that is being held by this generator.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13879:29893":{"id":"1:13879:29893","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5068:29893"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:45032:3389","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:1884":{"id":"0:131:1884","crate_id":0,"name":"u16","span":{"filename":"src/global_rng.rs","begin":[156,0],"end":[156,61]},"visibility":"public","docs":"Generates a random `u16` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2824:25584":{"id":"1:2824:25584","crate_id":1,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:181:1896":{"id":"0:181:1896","crate_id":0,"name":"u64","span":{"filename":"src/lib.rs","begin":[582,4],"end":[588,5]},"visibility":"public","docs":"Generates a random `u64` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u64>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:2517":{"id":"0:42:2517","crate_id":0,"name":"alphabetic","span":{"filename":"src/global_rng.rs","begin":[90,0],"end":[92,1]},"visibility":"public","docs":"Generates a random `char` in ranges a-z and A-Z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133:921":{"id":"0:133:921","crate_id":0,"name":"i16","span":{"filename":"src/global_rng.rs","begin":[157,0],"end":[157,61]},"visibility":"public","docs":"Generates a random `i16` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i16"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169:933":{"id":"0:169:933","crate_id":0,"name":"i64","span":{"filename":"src/lib.rs","begin":[443,4],"end":[449,5]},"visibility":"public","docs":"Generates a random `i64` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i64>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13771:29848":{"id":"1:13771:29848","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13774:3135":{"id":"1:13774:3135","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42735:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13797:3221":{"id":"1:13797:3221","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"5:12642:492","self::pattern":"1:13452:8655"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13801:29860":{"id":"1:13801:29860","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"5:12642:492","self::pattern":"1:13452:8655"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:8661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13:2438":{"id":"0:13:2438","crate_id":0,"name":"global_rng","span":{"filename":"src/global_rng.rs","begin":[1,0],"end":[218,1]},"visibility":"crate","docs":"A global, thread-local random number generator.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:36:2498","0:38:2571","0:40:436","0:42:2517","0:44:2522","0:46:2567","0:48:2601","0:50:2520","0:53:2528","0:55:2581","0:127:1902","0:129:939","0:131:1884","0:133:921","0:135:1890","0:137:927","0:139:1896","0:141:933","0:143:1878","0:145:914","0:147:1966","0:149:996","0:151:492","0:59:766","0:61:782","0:63:2545"],"is_stripped":true}}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[289,0],"end":[696,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Rng","id":"0:153:2440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:90:2442","0:91:2515","0:92:2517","0:94:2522","0:96:436","0:97:2528","0:98:766","0:99:782","0:100:2545","0:163:939","0:165:921","0:167:927","0:169:933","0:171:914","0:173:996","0:102:2567","0:104:2498","0:105:2571","0:106:2520","0:108:2581","0:110:2584","0:175:1902","0:177:1884","0:179:1890","0:181:1896","0:183:1878","0:185:1966","0:111:2601","0:113:492"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13763:2593":{"id":"1:13763:2593","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13854:29878":{"id":"1:13854:29878","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:12642:492","self::pattern":"1:13452:8655"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13878:29892":{"id":"1:13878:29892","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1148:37895"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13883:29895":{"id":"1:13883:29895","crate_id":1,"name":"substr_range","span":null,"visibility":"public","docs":"Returns the range that a substring points to.\n\nReturns `None` if `substr` does not point within `self`.\n\nUnlike [`str::find`], **this does not search through the string**.\nInstead, it uses pointer arithmetic to find where in the string\n`substr` is derived from.\n\nThis is useful for extending [`str::split`] and similar methods.\n\nNote that this method may return false positives (typically either\n`Some(0..0)` or `Some(self.len()..self.len())`) if `substr` is a\nzero-length `str` that points at the beginning or end of another,\nindependent, `str`.\n\n# Examples\n```\n#![feature(substr_range)]\n\nlet data = \"a, b, b, a\";\nlet mut iter = data.split(\", \").map(|s| data.substr_range(s).unwrap());\n\nassert_eq!(iter.next(), Some(0..1));\nassert_eq!(iter.next(), Some(3..4));\nassert_eq!(iter.next(), Some(6..7));\nassert_eq!(iter.next(), Some(9..10));\n```","links":{"`str::split`":"1:13811:29861","`str::find`":"1:13804:3266"},"attrs":["#[must_use]","#[unstable(feature = \"substr_range\", issue = \"126769\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["substr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Range","id":"1:40308:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5727:8540":{"id":"4:5727:8540","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:143:1878":{"id":"0:143:1878","crate_id":0,"name":"u128","span":{"filename":"src/global_rng.rs","begin":[162,0],"end":[162,63]},"visibility":"public","docs":"Generates a random `u128` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u128>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3108:150":{"id":"1:3108:150","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"1:13762:1027":{"id":"1:13762:1027","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"5:12642:492"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13807:3230":{"id":"1:13807:3230","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42735:203","prim@char":"5:12642:492","self::pattern":"1:13452:8655"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:8661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42829:3169-0:153:2440":{"id":"a:1:42829:3169-0:153:2440","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42829:3169","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"4:5711":{"id":"4:5711","crate_id":4,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["4:5712:30630","4:5713:2749","4:5715:30631","4:5717:30632","4:5725:30633","4:5726:30634","4:5727:8540","4:5728:30635","4:5729:30636"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:157:830":{"id":"0:157:830","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[131,9],"end":[131,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10622:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10603:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13786:29854":{"id":"1:13786:29854","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13787:29855"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:185:1966":{"id":"0:185:1966","crate_id":0,"name":"usize","span":{"filename":"src/lib.rs","begin":[615,4],"end":[621,5]},"visibility":"public","docs":"Generates a random `usize` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<usize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13772:352":{"id":"1:13772:352","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13773:29849","`u8`":"5:12661:1902"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13811:29861":{"id":"1:13811:29861","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:13452:8655","`DoubleEndedIterator`":"1:8393:134","prim@char":"5:12642:492","str::split_whitespace":"1:13792:25777","str::rsplit":"1:13815:29862"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44733:5858","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:2545":{"id":"0:63:2545","crate_id":0,"name":"choose_multiple","span":{"filename":"src/global_rng.rs","begin":[179,0],"end":[181,1]},"visibility":"public","docs":"Collects `amount` values at random from the iterator into a vector.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["source",{"generic":"T"}],["amount",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"std::vec::Vec","id":"4:7200:280","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"","id":"1:8498:190","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8498:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13874:29888":{"id":"1:13874:29888","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:165:921":{"id":"0:165:921","crate_id":0,"name":"i16","span":{"filename":"src/lib.rs","begin":[427,4],"end":[433,5]},"visibility":"public","docs":"Generates a random `i16` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i16"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13845:29873":{"id":"1:13845:29873","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13787:29855":{"id":"1:13787:29855","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13786:29854"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3113:150":{"id":"1:3113:150","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32868:2857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:13783:29851":{"id":"1:13783:29851","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"5:12648:1771","crate::ops::IndexMut":"1:3628:2897","str::slice_unchecked":"1:13782:29850"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:2498":{"id":"0:36:2498","crate_id":0,"name":"seed","span":{"filename":"src/global_rng.rs","begin":[72,0],"end":[74,1]},"visibility":"public","docs":"Initializes the thread-local generator with the given seed.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["seed",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:784:5957":{"id":"4:784:5957","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:13791:5787":{"id":"1:13791:5787","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"Returns an iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44719:3816","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:766":{"id":"0:59:766","crate_id":0,"name":"f32","span":{"filename":"src/global_rng.rs","begin":[169,0],"end":[171,1]},"visibility":"public","docs":"Generates a random `f32` in range `0..1`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13847:29874":{"id":"1:13847:29874","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:436":{"id":"0:96:436","crate_id":0,"name":"bool","span":{"filename":"src/lib.rs","begin":[342,4],"end":[344,5]},"visibility":"public","docs":"Generates a random `bool`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:496":{"id":"0:75:496","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[136,4],"end":[138,5]},"visibility":"default","docs":"Clones the generator by creating a new generator with the same seed.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Rng","id":"0:153:2440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:2571":{"id":"0:38:2571","crate_id":0,"name":"get_seed","span":{"filename":"src/global_rng.rs","begin":[78,0],"end":[80,1]},"visibility":"public","docs":"Gives back **current** seed that is being held by the thread-local generator.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13776:2557":{"id":"1:13776:2557","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42735:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:2498":{"id":"0:104:2498","crate_id":0,"name":"seed","span":{"filename":"src/lib.rs","begin":[493,4],"end":[495,5]},"visibility":"public","docs":"Initializes this generator with the given seed.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["seed",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13835:29869":{"id":"1:13835:29869","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this\nstring slice, yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:13452:8655","`DoubleEndedIterator`":"1:8393:134","prim@char":"5:12642:492","str::matches":"1:13833:2821"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44955:6341","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:8661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13856:29879":{"id":"1:13856:29879","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:12642:492","self::pattern":"1:13452:8655"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13793:25778":{"id":"1:13793:25778","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13792:25777"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:45016:6344","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32944:249-0:153:2440":{"id":"a:1:32944:249-0:153:2440","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32944:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:61:782":{"id":"0:61:782","crate_id":0,"name":"f64","span":{"filename":"src/global_rng.rs","begin":[174,0],"end":[176,1]},"visibility":"public","docs":"Generates a random `f64` in range `0..1`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99:782":{"id":"0:99:782","crate_id":0,"name":"f64","span":{"filename":"src/lib.rs","begin":[375,4],"end":[379,5]},"visibility":"public","docs":"Generates a random `f64` in range `0..1`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:113:492":{"id":"0:113:492","crate_id":0,"name":"char","span":{"filename":"src/lib.rs","begin":[642,4],"end":[695,5]},"visibility":"public","docs":"Generates a random `char` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<char>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3109:1858":{"id":"1:3109:1858","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:43001:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21":{"id":"0:21","crate_id":0,"name":null,"span":{"filename":"src/global_rng.rs","begin":[22,0],"end":[28,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Rng","id":"0:153:2440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:22:1212"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:5725:30633":{"id":"4:5725:30633","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"4:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13840:29871":{"id":"1:13840:29871","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13452:8655","`DoubleEndedIterator`":"1:8393:134","prim@char":"5:12642:492","str::match_indices":"1:13838:29870"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44901:6339","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:8661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13833:2821":{"id":"1:13833:2821","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within the\ngiven string slice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:13452:8655","`DoubleEndedIterator`":"1:8393:134","prim@char":"5:12642:492","str::rmatches":"1:13835:29869"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44937:6340","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42830:3168-0:153:2440":{"id":"a:1:42830:3168-0:153:2440","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42830:3168","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:90:2442":{"id":"0:90:2442","crate_id":0,"name":"with_seed","span":{"filename":"src/lib.rs","begin":[293,4],"end":[295,5]},"visibility":"public","docs":"Creates a new random number generator with the initial seed.","links":{},"attrs":["#[inline]","#[must_use =\n\"this creates a new instance of `Rng`; if you want to initialize the thread-local generator, use `fastrand::seed()` instead\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["seed",{"primitive":"u64"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3095-0:153:2440":{"id":"b:1:3095-0:153:2440","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3098:3224"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:5717:30632":{"id":"4:5717:30632","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13799:29859":{"id":"1:13799:29859","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"5:12642:492","self::pattern":"1:13452:8655"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13851:29877":{"id":"1:13851:29877","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"5:12642:492","self::pattern":"1:13452:8655"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13481:8660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50:2520":{"id":"0:50:2520","crate_id":0,"name":"choice","span":{"filename":"src/global_rng.rs","begin":[118,0],"end":[124,1]},"visibility":"public","docs":"Choose an item from an iterator at random.\n\nThis function may have an unexpected result if the `len()` property of the\niterator does not match the actual number of items in the iterator. If\nthe iterator is empty, this returns `None`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8325:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8325:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8325:177","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8446:2578","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13828:29867":{"id":"1:13828:29867","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:2601":{"id":"0:48:2601","crate_id":0,"name":"uppercase","span":{"filename":"src/global_rng.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Generates a random `char` in range A-Z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3098:3224":{"id":"1:3098:3224","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:3072:157"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2528":{"id":"0:53:2528","crate_id":0,"name":"digit","span":{"filename":"src/global_rng.rs","begin":[132,0],"end":[134,1]},"visibility":"public","docs":"Generates a random digit in the given `base`.\n\nDigits are represented by `char`s in ranges 0-9 and a-z.\n\nPanics if the base is zero or greater than 36.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["base",{"primitive":"u32"}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151:492":{"id":"0:151:492","crate_id":0,"name":"char","span":{"filename":"src/global_rng.rs","begin":[166,0],"end":[166,63]},"visibility":"public","docs":"Generates a random `char` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<char>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3101:860":{"id":"1:3101:860","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:782-0:153:2440":{"id":"b:4:782-0:153:2440","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:778:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:784:5957","4:785:25585","4:786:25586"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:20:60":{"id":"0:20:60","crate_id":0,"name":"default","span":{"filename":"src/global_rng.rs","begin":[17,4],"end":[19,5]},"visibility":"default","docs":"Initialize the `Rng` from the system's random number generator.\n\nThis is equivalent to [`Rng::new()`].","links":{"`Rng::new()`":"0:22:1212"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Rng","id":"0:153:2440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153:2440":{"id":"0:153:2440","crate_id":0,"name":"Rng","span":{"filename":"src/lib.rs","begin":[132,0],"end":[132,20]},"visibility":"public","docs":"A random number generator.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:21","0:89","a:1:32944:249-0:153:2440","a:1:3322:261-0:153:2440","a:1:3357:3336-0:153:2440","a:1:33002:3142-0:153:2440","a:1:42829:3169-0:153:2440","a:1:42830:3168-0:153:2440","b:1:2790-0:153:2440","b:1:2793-0:153:2440","b:1:2822-0:153:2440","b:1:3095-0:153:2440","b:1:3099-0:153:2440","b:1:3105-0:153:2440","b:1:3110-0:153:2440","b:1:3967-0:153:2440","b:4:782-0:153:2440","0:19","0:156","0:158","0:159","0:161","0:74"]}}},"0:135:1890":{"id":"0:135:1890","crate_id":0,"name":"u32","span":{"filename":"src/global_rng.rs","begin":[158,0],"end":[158,61]},"visibility":"public","docs":"Generates a random `u32` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u32>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:766":{"id":"0:98:766","crate_id":0,"name":"f32","span":{"filename":"src/lib.rs","begin":[368,4],"end":[372,5]},"visibility":"public","docs":"Generates a random `f32` in range `0..1`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13792:25777":{"id":"1:13792:25777","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13793:25778"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:45007:6343","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13843:29872":{"id":"1:13843:29872","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13849:29875":{"id":"1:13849:29875","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13882:29894":{"id":"1:13882:29894","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5066:29894"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:45050:3387","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13825:29866":{"id":"1:13825:29866","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning at\nmost `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"5:12642:492","str::splitn":"1:13823:29865","self::pattern":"1:13452:8655"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44855:6185","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:8661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5713:2749":{"id":"4:5713:2749","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13864:29882":{"id":"1:13864:29882","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:12642:492","self::pattern":"1:13452:8655"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13804:3266":{"id":"1:13804:3266","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42735:203","prim@char":"5:12642:492","self::pattern":"1:13452:8655"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:6170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:8294:7887":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"18:80:25562":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:14178:4335":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:11590:4007":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:2770:5057":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:12647:1737":{"crate_id":5,"path":["std","slice"],"kind":"primitive"},"1:2908:207":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:9483:3167":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:2043:3574":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:11901:4034":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"18:698:3794":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"4:4990:229":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"1:4850:3015":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"6:4921:7158":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:8028:3602":{"crate_id":5,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"4:1612:3037":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:2548:5047":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:16717:4987":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:13344:4198":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:43071:208":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"4:6700:2937":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:12397:4094":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:5271:7280":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:44783:6336":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:6896:5773":{"crate_id":5,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:23495:7926":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:45771:6376":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:14521:4405":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:6792:7665":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:14811:4466":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"4:7750:5984":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:22924:13818":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"10:36:6849":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:6040:5072":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:969:3035":{"crate_id":5,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:14373:4380":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:23617:6247":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"6:4842:7109":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:11080:5918":{"crate_id":5,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"17:15763:4722":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:13436:4204":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:12641:1208":{"crate_id":5,"path":["std","never"],"kind":"primitive"},"1:44569:6321":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:491:6866":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"5:1643:2930":{"crate_id":5,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"5:6088:5768":{"crate_id":5,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:5253:5119":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:2914:214":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:40368:226":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:8325:177":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"5:8872:6310":{"crate_id":5,"path":["std","path","State"],"kind":"enum"},"17:15861:4745":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:10255:21360":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:7820:33456":{"crate_id":5,"path":["std","panicking","Hook"],"kind":"enum"},"11:2414:2937":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:3803:2900":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:10756:5898":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"4:7679:3024":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"4:7797:5986":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:8260:7879":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:9458:32704":{"crate_id":5,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:22384:6216":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:42769:3032":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:42851:3351":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"18:113:25564":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:11728:4016":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:15062:4507":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:44937:6340":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:22372:14180":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:41955:6155":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:4363:14246":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:2772:5726":{"crate_id":5,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:0:1763":{"crate_id":5,"path":["std"],"kind":"module"},"1:43844:5491":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:15640:4693":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:6054:5764":{"crate_id":5,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"9:435:20284":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:4914:7154":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:47662:6454":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:5405:7334":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"15:327:8021":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:8595:5526":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:1690:7053":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:3423:2877":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"4:4552:3574":{"crate_id":4,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"6:6756:7652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:13836:4259":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:5428:7344":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"4:2344:29514":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:13162:6196":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:5170:5116":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:16766:5002":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:23694:6254":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"18:718:3800":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"4:1397:3044":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:12201:4068":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:16417:4911":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"4:5960:265":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"11:0:2847":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:47307:6425":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:3327:2926":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:44135:6315":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:4967:14238":{"crate_id":5,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:42555:7929":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:46902:6395":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:42733:206":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"5:9445:5916":{"crate_id":5,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:11358:3693":{"crate_id":1,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"1:11221:3692":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"1:13529:8669":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:12643:3981":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"11:1136:3046":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"4:4519:3574":{"crate_id":4,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"4:7723:8574":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:14924:4479":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:33917:2870":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:7398:34870":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:5375:7319":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:10507:5926":{"crate_id":5,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:10815:3962":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"17:13399:4201":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:909:8341":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:0:527":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"5:8087:14180":{"crate_id":5,"path":["std","sealed","Sealed"],"kind":"trait"},"6:1539:6951":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:40408:2437":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"5:1114:3044":{"crate_id":5,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:10664:3317":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:48133:6502":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:41116:3395":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:35121:2884":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:3576:2894":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"5:4922:14272":{"crate_id":5,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:3965:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"5:1132:3046":{"crate_id":5,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:14122:4318":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:2964:5066":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:12035:4044":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:12969:4168":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"4:6547:14122":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"1:12975:8662":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:12958:4166":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:22685:29164":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:6472:7528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:15951:4770":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:46917:6396":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:2424:5993":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"14:0:2849":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:45808:5637":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"11:2115:3044":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:47290:6424":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:34775:2881":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:11997:5786":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:16269:4878":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:562:3126":{"crate_id":5,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"4:7200:280":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"6:5557:7409":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:5117:7232":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"18:613:34891":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:48081:6498":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:2898:5063":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:6416:7504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:3707:14198":{"crate_id":5,"path":["std","io","BufRead"],"kind":"trait"},"1:47529:6449":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:12588:4132":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:45739:6371":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:42868:6303":{"crate_id":1,"path":["core","range","iter","IterRange"],"kind":"struct"},"16:0:2851":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:42752:185":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:4171:2577":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:15448:4632":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:44801:6337":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:48072:6497":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"9:412:20286":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:16744:4996":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"5:978:3037":{"crate_id":5,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:5249:7269":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:5349:7308":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"16:6711:5241":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:32928:3015":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:33493:2868":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:41557:6146":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:7786:34872":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:1494:6929":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:15677:4702":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:8304:7888":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:894:5030":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:12298:21476":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"16:7880:5181":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:8272:7881":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:6398:7491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:13575:4168":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:12022:4043":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:7551:21303":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:15928:4762":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:6197:6135":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:47993:6492":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"11:292:6838":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:2810:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"6:4896:7142":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:650:14126":{"crate_id":5,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:11420:3053":{"crate_id":5,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:16040:4792":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:5687:5127":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:7189:21301":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:7256:5335":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:12385:4093":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:16403:4908":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"5:4255:14229":{"crate_id":5,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:11690:4013":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:47208:6420":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:8569:5848":{"crate_id":5,"path":["std","io","util","Sink"],"kind":"struct"},"1:9446:3166":{"crate_id":1,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"11:718:3037":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:6729:5251":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:47641:6453":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"17:14476:4399":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:6280:3587":{"crate_id":5,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:7515:7826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:1011:3042":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:16730:4993":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:8498:190":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:13909:4276":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:5036:7211":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:9552:174":{"crate_id":5,"path":["std","time","Instant"],"kind":"struct"},"1:44333:7941":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:12669:13":{"crate_id":5,"path":["std","fn"],"kind":"primitive"},"17:15102:4512":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:12229:32715":{"crate_id":5,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"7:31:20271":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:12725:4142":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:2872:213":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:48156:6508":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"11:2354:3031":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:13673:4222":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:23221:6217":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:8582:5523":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:2834:3677":{"crate_id":1,"path":["core","clone","InitializingSlice"],"kind":"struct"},"18:96:25563":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:16848:4291":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:38983:2888":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:927:3033":{"crate_id":5,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:11775:3032":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:570:6914":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:43572:3316":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:545:6901":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:6459:7519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:14834:4467":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:1696:7054":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:9220:5898":{"crate_id":5,"path":["std","process","CommandArgs"],"kind":"struct"},"16:8206:5075":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:6998:6145":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:15513:4672":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:7220:5323":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:13648:4221":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:7562:7848":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:6995:5274":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:9263:5901":{"crate_id":5,"path":["std","process","ExitCode"],"kind":"struct"},"1:48209:6511":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:43243:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:4703:14250":{"crate_id":5,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:10860:3820":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:2534:14177":{"crate_id":5,"path":["std","fs","exists"],"kind":"function"},"6:1675:7044":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:15884:4748":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"18:670:3790":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:3043:2858":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"5:5940:3587":{"crate_id":5,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:33003:3340":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:6419:5023":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:1727:7066":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:4906:3017":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"6:1597:6989":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:11014:34881":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:22151:29153":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"5:9386:5906":{"crate_id":5,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"9:226:6310":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:41597:6284":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:14650:4422":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:6873:5266":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:45688:231":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"5:4199:14224":{"crate_id":5,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:6850:5263":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"4:7668:2934":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:15659:4694":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:23065:8507":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1:40196:2891":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:2722:5055":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"4:3699:3031":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:13608:21342":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:8633:21308":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:5222:5118":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"11:808:3035":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:7916:5442":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:6968:3595":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"6:8231:7872":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:43899:150":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:26659:283":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:3792:268":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"4:6116:72":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"1:7635:3240":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:2032:813":{"crate_id":5,"path":["std","ffi"],"kind":"module"},"17:10898:151":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:48052:6495":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:41988:6158":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:47739:6486":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:2484:5044":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:12774:4146":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:13795:4255":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"4:6566:14124":{"crate_id":4,"path":["alloc","task","LocalWake"],"kind":"trait"},"5:3328:33740":{"crate_id":5,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:11794:21405":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:31357:25606":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:13757:4240":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:41140:3387":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:13687:123":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"4:3262:101":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:47612:6452":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"17:15074:4508":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:44088:6308":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:8525:5517":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:12409:4095":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:11575:7906":{"crate_id":5,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"4:5515:3621":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:15699:4706":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:3139:3851":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:34256:2876":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:46800:6383":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:6366:5016":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:32944:249":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:47240:6422":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:42789:3164":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"5:12100:5738":{"crate_id":5,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:8720:5871":{"crate_id":5,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"4:4127:2937":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:2511:14170":{"crate_id":5,"path":["std","fs","canonicalize"],"kind":"function"},"17:12045:3899":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"4:5414:3654":{"crate_id":4,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"5:5139:14270":{"crate_id":5,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:41202:3391":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:36997:2885":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:16116:4837":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:2671:697":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:1551:6960":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"18:573:3760":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:22162:29156":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:702:5708":{"crate_id":5,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:7004:7922":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"4:6274:3574":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:13470:3796":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:5083:5113":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"18:581:3207":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:6438:21296":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:45565:8686":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:7977:5083":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"9:168:8034":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:3599:155":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:9501:199":{"crate_id":5,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:519:3823":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:2685:8507":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1:31346:3326":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:6669:198":{"crate_id":5,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:14845:4469":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:45371:6367":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:16613:4259":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:5316:5121":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:12008:4042":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:7935:5450":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:14186:217":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:45138:6346":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:46969:6399":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:11564:4005":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:44080:3049":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"3:0:2842":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"16:6237:5149":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"4:7559:5977":{"crate_id":4,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"5:699:5706":{"crate_id":5,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:7209:5322":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:15469:4642":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:12065:4048":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"14:159:5613":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:9596:6170":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"4:1122:3621":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:44590:6323":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:3517:14206":{"crate_id":5,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:537:3101":{"crate_id":5,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:14558:4409":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:2394:21432":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:11318:3983":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"18:515:3757":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:44642:6327":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:10700:3813":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:10965:3977":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:23672:6252":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:41732:6150":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:15001:4492":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:9864:131":{"crate_id":5,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:14137:4324":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:32868:2857":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:41980:6156":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"11:427:34847":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:8102:5460":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:47109:6415":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:14571:4102":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:1632:7018":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:45496:7947":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:6841:5262":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:5301:7296":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:8654:14217":{"crate_id":5,"path":["std","net","Shutdown"],"kind":"enum"},"1:22256:14180":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:43920:3327":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"6:6878:7694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:10553:21370":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:4927:5109":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:48171:6509":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:5196:5117":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:14190:4338":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:12655:761":{"crate_id":5,"path":["std","f128"],"kind":"primitive"},"1:23384:6225":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:8063:21305":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"5:8807:14281":{"crate_id":5,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:12979:4169":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:7367:7763":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:3937:5739":{"crate_id":5,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:1489:6927":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:7344:7745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:10108:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:41416:6273":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"5:9215:5897":{"crate_id":5,"path":["std","pipe","PipeWriter"],"kind":"struct"},"5:9293:5762":{"crate_id":5,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:10647:116":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:14350:4376":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"1:3063:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:5375:6129":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:14624:4418":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:3147:127":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:44127:6314":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:1569:6970":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:11099:152":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:39617:2890":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:5154:3846":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:13044:4177":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:10479:21368":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:48248:6527":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:5139:7234":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:12836:21501":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:2528:5046":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:43467:6174":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"5:9337:14316":{"crate_id":5,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:23094:14180":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"18:481:3758":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:13185:6197":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:14859:4471":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:12103:4059":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:1944:5717":{"crate_id":5,"path":["std","env","ArgsOs"],"kind":"struct"},"5:1506:168":{"crate_id":5,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:999:3040":{"crate_id":5,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:10524:21369":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"5:1996:5718":{"crate_id":5,"path":["std","error","Report"],"kind":"struct"},"5:8688:5741":{"crate_id":5,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:8587:14179":{"crate_id":5,"path":["std","io","SeekFrom"],"kind":"enum"},"6:5539:7401":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:13459:6170":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:7390:7764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:15896:4754":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:13892:4274":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"18:538:3767":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:2129:3191":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:40:2935":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"18:563:3769":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:7946:5082":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:11552:4002":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:4848:7756":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"11:2507:6843":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"4:7619:2577":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:5749:116":{"crate_id":5,"path":["std","process","Command"],"kind":"struct"},"11:1871:2930":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:12263:4075":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:13529:4209":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:4869:7132":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:41300:6268":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:8173:14151":{"crate_id":5,"path":["std","env","VarError"],"kind":"enum"},"4:1632:5959":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:16058:4795":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:10918:3048":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:22652:13737":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:15792:4729":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:14665:4425":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:40308:222":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"6:497:6869":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:5488:7381":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:6631:7615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:8960:3031":{"crate_id":5,"path":["std","path","Iter"],"kind":"struct"},"1:22787:14180":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:10655:123":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"5:4185:14222":{"crate_id":5,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:3622:5865":{"crate_id":5,"path":["std","io","Read"],"kind":"trait"},"16:3693:5095":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:11576:252":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"4:3079:5957":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:5604:7435":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:5356:454":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:11563:14180":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:2122:696":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:42661:6299":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:9544:3598":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"16:5058:5112":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"4:1520:3031":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:23051:13821":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:15868:4746":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:7987:5455":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"14:164:20368":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:46770:6379":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:6638:7616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:3315:277":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:46817:6386":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:6558:3587":{"crate_id":5,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:14071:6209":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"17:15908:4755":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:9250:5900":{"crate_id":5,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:586:6923":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:2588:5049":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:12608:4133":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:15876:4747":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:7997:5084":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:42829:3169":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:23000:13820":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"4:5821:2941":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:40629:8529":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:5740:3961":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:41961:5734":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:48092:6499":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:4371:14247":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:3797:159":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:8708:5535":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:11667:4012":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:7337:7741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"11:1652:3559":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:44633:6326":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:532:6895":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:48186:6510":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:32910:6257":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"16:3439:5093":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:41285:8574":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10176:21358":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:39038:2889":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:3934:5738":{"crate_id":5,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"4:3090:29628":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:47861:6488":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:6939:5272":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"11:321:6841":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:12898:4162":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:5503:7388":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:8314:158":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:11757:4019":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:45512:6558":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:11328:34886":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:12666:996":{"crate_id":5,"path":["std","isize"],"kind":"primitive"},"17:16315:4886":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:5179:7237":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:1639:2937":{"crate_id":5,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:3012:20434":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:44733:5858":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"4:6513:3658":{"crate_id":4,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"1:43095:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:47176:6418":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:45117:8675":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:12254:4074":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:40232:2893":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:11743:4017":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"18:635:3783":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:45747:6373":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:16700:4985":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:4182:5099":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"4:7527:5976":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:43565:3317":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:15817:4734":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:44541:6317":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:11214:3691":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"4:3448:2930":{"crate_id":4,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"11:2440:2930":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:22164:29158":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:16538:4929":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"5:7902:32745":{"crate_id":5,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"5:940:3034":{"crate_id":5,"path":["std","collections","hash","map","Values"],"kind":"struct"},"4:1247:32489":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:44692:6333":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:6687:7634":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:23361:6220":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:13630:4218":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:8277:5801":{"crate_id":5,"path":["std","fs","ReadDir"],"kind":"struct"},"5:8311:152":{"crate_id":5,"path":["std","fs","FileType"],"kind":"struct"},"2:2062:5987":{"crate_id":2,"path":["compiler_builtins","int","big","u256"],"kind":"struct"},"11:2374:3032":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:14955:4485":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:16219:4857":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:45504:7949":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:11939:4038":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:7421:21302":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:15198:4527":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:11770:21404":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:11576:4006":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:7502:3600":{"crate_id":5,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"11:2323:3045":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:15115:4513":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:5381:7320":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:3426:5731":{"crate_id":5,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:12652:763":{"crate_id":5,"path":["std","f16"],"kind":"primitive"},"17:11825:4027":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:5415:5124":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:12579:6189":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"5:11749:3609":{"crate_id":5,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"1:2235:5990":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:8153:14130":{"crate_id":5,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"13:110:34853":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:12657:921":{"crate_id":5,"path":["std","i16"],"kind":"primitive"},"1:44579:6322":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"4:1781:3621":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:13066:4181":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:16005:4784":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:8249:7875":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:42981:224":{"crate_id":1,"path":["core","range","RangeFrom"],"kind":"struct"},"5:7472:3599":{"crate_id":5,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"5:4725:14251":{"crate_id":5,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"11:2099:3043":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"11:423:34846":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:7284:7712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:11616:4010":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:14443:4391":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:12889:4161":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:12649:1861":{"crate_id":5,"path":["std","tuple"],"kind":"primitive"},"5:8560:3805":{"crate_id":5,"path":["std","io","util","Empty"],"kind":"struct"},"11:1001:3044":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:11855:4031":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:919:2577":{"crate_id":5,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:42830:3168":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:16177:4844":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:2448:5036":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:6670:7625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:10295:28698":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:9432:5912":{"crate_id":5,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:1919:5715":{"crate_id":5,"path":["std","env","SplitPaths"],"kind":"struct"},"11:832:3040":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:22205:13735":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"5:3371:5728":{"crate_id":5,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:11063:34882":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:6623:5214":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:3679:3315":{"crate_id":5,"path":["std","io","Write"],"kind":"trait"},"16:8055:5458":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:11395:21382":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:14069:4305":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"4:2579:6743":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:6310:6136":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:5683:5752":{"crate_id":5,"path":["std","process","Child"],"kind":"struct"},"5:3688:33509":{"crate_id":5,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"4:7539:2937":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:10601:3810":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"18:507:3760":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:11259:3982":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"4:3332:5629":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:15:2822":{"crate_id":1,"path":["core","write"],"kind":"macro"},"5:953:2937":{"crate_id":5,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:11210:34885":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:40330:224":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"4:7583:2577":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:1227:29626":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:8040:34876":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"19:0:1327":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:707:14128":{"crate_id":5,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:23526:8340":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:11654:3982":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:22264:13734":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:5733:5759":{"crate_id":5,"path":["std","process","ChildStderr"],"kind":"struct"},"18:680:3791":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:22962:13819":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:7494:7812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:8325:131":{"crate_id":5,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:4829:7099":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:16013:4785":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"4:2251:3101":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:15809:4732":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:5107:7231":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:3874:132":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:15144:4516":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:5377:5123":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:6656:5230":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:47816:6487":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:12260:3616":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"1:41486:6280":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:6500:20405":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:7904:5441":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"11:983:3043":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:10876:5728":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:45492:7946":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:5265:7277":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"4:724:5955":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:45820:6378":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:6082:5130":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:14883:4474":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:44105:169":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:31331:3194":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:8134:5086":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:41525:6144":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"5:12646:351":{"crate_id":5,"path":["std","array"],"kind":"primitive"},"17:15971:4776":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:5295:7293":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"9:345:20299":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:6810:6138":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:10333:21363":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"11:851:3041":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:5323:26598":{"crate_id":1,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"16:4900:5108":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:10440:3330":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:16211:4856":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:6610:7603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:5142:5115":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:6335:5164":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:11842:4030":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:6121:3574":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"5:4963:14235":{"crate_id":5,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:7369:5079":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:8030:3805":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:42820:3165":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:31325:2928":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:6835:5261":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"4:4202:3032":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:12663:1890":{"crate_id":5,"path":["std","u32"],"kind":"primitive"},"6:5477:7378":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"5:8895:5889":{"crate_id":5,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:10586:3961":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:12621:4134":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:23547:14180":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"4:4292:3574":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"14:213:5618":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"4:1591:3035":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:6441:7509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:3585:5094":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"4:5134:3574":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:14971:4486":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:42511:6164":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"11:357:3555":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:2344:3675":{"crate_id":5,"path":["std","fs","read"],"kind":"function"},"5:6061:5767":{"crate_id":5,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:12656:939":{"crate_id":5,"path":["std","i8"],"kind":"primitive"},"1:47479:6447":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"4:7872:2936":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:7279:5336":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:11993:6183":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:6387:5170":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:11920:6181":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:11106:5925":{"crate_id":5,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:44117:6310":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"17:12878:4157":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"5:8282:5802":{"crate_id":5,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:43579:3318":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:12562:4129":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:8439:14211":{"crate_id":5,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:12229:4071":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:6500:7540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:14093:4307":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"11:820:3039":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:43354:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:6645:7617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"4:7774:257":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"1:23661:6251":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"4:3925:2930":{"crate_id":4,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:14388:3695":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"16:7383:5345":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:41463:6134":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"0:0:2610":{"crate_id":0,"path":["fastrand"],"kind":"module"},"16:6792:5255":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"6:5568:7414":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:14940:4481":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:42713:6167":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:6736:34869":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:8118:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"4:7519:2577":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:45508:7950":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:9287:2577":{"crate_id":5,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:8316:7892":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:11502:3998":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"17:14637:4420":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:3396:2866":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"6:7984:7858":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:8295:5476":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:1919:8459":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"1:43280:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:42639:25628":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"14:7:5613":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:13876:4270":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:9425:5911":{"crate_id":5,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"5:9835:151":{"crate_id":5,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:13423:4202":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:3872:14218":{"crate_id":5,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:15477:4643":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:11800:5858":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:22133:3207":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:9373:5905":{"crate_id":5,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:12711:4138":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:12864:4152":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"5:9279:5903":{"crate_id":5,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:12664:1896":{"crate_id":5,"path":["std","u64"],"kind":"primitive"},"5:2750:3565":{"crate_id":5,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:383:3125":{"crate_id":5,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"4:7074:2941":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:6379:3579":{"crate_id":5,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:14054:6206":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"17:12187:4067":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:13481:8660":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:5462:7369":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:3628:2897":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:2784:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"17:14678:4426":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"4:5564:14106":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"17:14611:4417":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:4591:5744":{"crate_id":5,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:12133:4063":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:16658:4974":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"16:8480:5513":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:14870:4472":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"4:1483:100":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"5:9675:5716":{"crate_id":5,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:13125:6193":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:6026:5069":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:5576:133":{"crate_id":5,"path":["std","path","Display"],"kind":"struct"},"6:5357:7309":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:13000:21502":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:6523:7553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:538:6898":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:11437:6559":{"crate_id":5,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"4:7738:5982":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:43169:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:4692:5103":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:7156:5309":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:5471:7375":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:8175:7870":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"11:2126:3045":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:6911:5270":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:23606:6246":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:4621:3021":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:45476:7942":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:45337:8676":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:41403:5851":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"11:776:2937":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"4:4362:3031":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:47013:6402":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:619:3110":{"crate_id":5,"path":["std","thread","JoinHandle"],"kind":"struct"},"14:219:5620":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:14431:4389":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:7013:5281":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:3469:5733":{"crate_id":5,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:8090:3005":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"17:14152:4330":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:44662:6329":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:13195:4186":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:13947:4282":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:9437:5913":{"crate_id":5,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:5241:7265":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:1625:7014":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:12243:5790":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:9534:247":{"crate_id":5,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"4:7248:3671":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:11603:4008":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:12618:8519":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"5:8360:5808":{"crate_id":5,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:1507:6935":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:15587:4683":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:5282:7288":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:2988:5067":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:4902:7145":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:1885:5714":{"crate_id":5,"path":["std","env","VarsOs"],"kind":"struct"},"5:12161:5740":{"crate_id":5,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:6858:7680":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:44837:6184":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:41264:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:7518:5369":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:14384:4383":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:14690:4427":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:1684:7050":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:8700:14249":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:8714:5862":{"crate_id":5,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:12668:1460":{"crate_id":5,"path":["std","reference"],"kind":"primitive"},"6:6710:7639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:42908:6304":{"crate_id":1,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"1:4555:8553":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"5:8352:5807":{"crate_id":5,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:4536:8552":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:8148:5087":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:6864:21299":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:5652:7455":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:3373:5729":{"crate_id":5,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"4:1411:3046":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:8007:7869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:5417:1007":{"crate_id":1,"path":["core","iter"],"kind":"module"},"17:16230:4862":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"4:1601:3036":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:6460:21297":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:4970:7176":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:8798:5874":{"crate_id":5,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"5:8607:5851":{"crate_id":5,"path":["std","io","Chain"],"kind":"struct"},"1:45323:6358":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:9588:3054":{"crate_id":5,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:15691:4705":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"4:3843:5808":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:41425:6274":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"11:1063:34851":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:47322:6426":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:0:2852":{"crate_id":17,"path":["object"],"kind":"module"},"5:6779:5772":{"crate_id":5,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:11868:4006":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"18:491:3759":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:12242:4072":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"11:1878:5629":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:6967:5071":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"4:2156:5960":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:14730:4431":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:5186:7238":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:44955:6341":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:7251:14319":{"crate_id":5,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:47508:6448":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:12814:4149":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:10672:3320":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:5640:7448":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"5:2025:14161":{"crate_id":5,"path":["std","error","Indented"],"kind":"struct"},"9:49:8024":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:23395:25594":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:3560:5734":{"crate_id":5,"path":["std","io","util","Repeat"],"kind":"struct"},"1:46998:6401":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:9847:3604":{"crate_id":5,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"6:0:1032":{"crate_id":6,"path":["libc"],"kind":"module"},"6:6590:7595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:42960:226":{"crate_id":1,"path":["core","range","RangeInclusive"],"kind":"struct"},"1:11955:6182":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:13157:4184":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"4:4473:281":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:4965:14237":{"crate_id":5,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:5390:216":{"crate_id":5,"path":["std","path","PathBuf"],"kind":"struct"},"1:2229:8496":{"crate_id":1,"path":["core","ptr","metadata","metadata"],"kind":"function"},"1:10670:218":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:45488:7945":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:47546:6450":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"4:2364:7919":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:13219:4188":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"16:3046:20435":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:9397:3107":{"crate_id":5,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:41970:3688":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:34457:2875":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:6744:7650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"4:4565:3644":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:7962:7857":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:4808:5105":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:8720:150":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:12660:914":{"crate_id":5,"path":["std","i128"],"kind":"primitive"},"16:5447:5125":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:11483:7902":{"crate_id":5,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:11256:3607":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:11102:3979":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:22141:29153":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:45698:239":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"4:4322:3574":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:3837:115":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"9:490:5691":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:23012:29384":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:11269:21385":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:44997:6342":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:5450:7360":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:15963:4773":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:45050:3387":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"5:5045:14234":{"crate_id":5,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:2495:14165":{"crate_id":5,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:12609:8043":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:46849:6388":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:6806:5068":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"11:2275:3043":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"5:8272:3900":{"crate_id":5,"path":["std","fs","Metadata"],"kind":"struct"},"1:41444:146":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:24259:248":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:32935:6259":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"6:6390:7489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"4:2142:5808":{"crate_id":4,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:6296:232":{"crate_id":5,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"18:706:3796":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:4193:14223":{"crate_id":5,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:2663:5725":{"crate_id":5,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:5130:14269":{"crate_id":5,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:479:6863":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:8624:3816":{"crate_id":5,"path":["std","io","Bytes"],"kind":"struct"},"5:12625:32729":{"crate_id":5,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:16051:4793":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:3809:2903":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:16672:4978":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:14396:4385":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:4928:3018":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:47434:6446":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:7539:7836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:43832:7939":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"5:2348:14162":{"crate_id":5,"path":["std","fs","read_to_string"],"kind":"function"},"6:6452:7517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:912:202":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"5:11977:5947":{"crate_id":5,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:4384:14248":{"crate_id":5,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"4:2167:5961":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:15035:4505":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:7430:7772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"4:1382:3045":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:11143:5873":{"crate_id":5,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"6:5217:7257":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:12072:4051":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:595:3108":{"crate_id":5,"path":["std","thread","Packet"],"kind":"struct"},"5:2096:210":{"crate_id":5,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:7505:5366":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:10150:21357":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:3571:2895":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:11370:5899":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:13231:4189":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"6:5617:7441":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:42761:3031":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:42495:6162":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:15713:4707":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:4140:14219":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:2746:5056":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:10604:3315":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:42473:182":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:23639:6249":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"17:2243:3829":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:8695:7896":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:2918:5064":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:14307:4365":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:11882:6180":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:10821:3963":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"1:45480:7943":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:3322:261":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"11:1898:5632":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:7072:21300":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:8102:3114":{"crate_id":5,"path":["std","thread","Builder"],"kind":"struct"},"16:8093:5459":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"4:1001:3031":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:7728:3164":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:13452:8655":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"16:2413:20406":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:13360:21373":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:43041:3031":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"17:11423:21383":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:6121:5073":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:40445:5997":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:32914:5422":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"17:3524:3837":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:41103:3401":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:15746:4717":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:11083:3690":{"crate_id":1,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"5:8336:2764":{"crate_id":5,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"6:1657:7037":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:44337:6176":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"18:0:2853":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:1660:5631":{"crate_id":5,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:12642:492":{"crate_id":5,"path":["std","char"],"kind":"primitive"},"6:4929:7160":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"18:623:34892":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:12344:4087":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"1:2303:201":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:23453:25597":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:8220:5464":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:8806:3398":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"4:3358:5632":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:12546:6188":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"6:6769:7659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:11660:5688":{"crate_id":5,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:41377:6271":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:2794:5058":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:8765:5745":{"crate_id":5,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:1654:5630":{"crate_id":5,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:6142:21294":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:5154:14271":{"crate_id":5,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"11:481:166":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:15088:4509":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:13120:3982":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:8276:8589":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:1883:5713":{"crate_id":5,"path":["std","env","Vars"],"kind":"struct"},"6:4875:7133":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:7308:7729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:16068:4800":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:12146:4064":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:12236:5790":{"crate_id":5,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:23502:6239":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"11:344:34843":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"5:11155:5939":{"crate_id":5,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"18:643:3760":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:1514:6937":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:8803:162":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:1563:6968":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"11:2394:2577":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"5:8188:5800":{"crate_id":5,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:40293:225":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:12825:4150":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:7468:5362":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:40280:2898":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:6300:5162":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"14:186:20375":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:16777:5003":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:15995:4781":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:11394:32733":{"crate_id":5,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:23433:25596":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:6606:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"11:2533:6847":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:34390:2873":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:2838:5060":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:5366:7313":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"5:11383:5900":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:5341:7307":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"1:41587:6148":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:16301:4884":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:3590:3574":{"crate_id":5,"path":["std","io","Guard"],"kind":"struct"},"17:15771:4725":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:14788:4457":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:16650:4973":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"4:7599:5978":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:6954:5777":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"17:11494:3997":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"1:3431:2879":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:2077:5988":{"crate_id":2,"path":["compiler_builtins","int","big","i256"],"kind":"struct"},"5:8824:5886":{"crate_id":5,"path":["std","path","Prefix"],"kind":"enum"},"6:6428:7508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:4517:5743":{"crate_id":5,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:14910:4476":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:683:5705":{"crate_id":5,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:5387:7323":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:6893:7705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:13247:150":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:14897:4475":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:15785:4728":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:3334:33885":{"crate_id":5,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:41394:6272":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:988:3039":{"crate_id":5,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:4333:33476":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:8643:5862":{"crate_id":5,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:4767:233":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:43860:25763":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"5:9322:14317":{"crate_id":5,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:10668:3319":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:11458:3994":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:47138:6416":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"5:8578:5737":{"crate_id":5,"path":["std","io","IoSlice"],"kind":"struct"},"1:4776:3007":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:6981:5088":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"5:10882:5732":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"16:6062:5074":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:5494:7383":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:46864:6389":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:3887:3856":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"15:288:20387":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:6406:5177":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:14057:4302":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"5:11983:5785":{"crate_id":5,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"11:686:3036":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:13207:4187":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:41352:8560":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"16:5111:5114":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"11:787:2930":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:43805:7930":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:43001:238":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"17:16164:4838":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:2465:5038":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:4071:2937":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"17:13465:4205":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"5:8434:5810":{"crate_id":5,"path":["std","io","error","Custom"],"kind":"struct"},"5:6471:3586":{"crate_id":5,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"4:884:102":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:12575:4130":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:22382:13732":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:43815:3326":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:41251:3386":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:8331:3030":{"crate_id":5,"path":["std","hash","random","RandomState"],"kind":"struct"},"6:5395:7328":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:41454:6131":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:45153:6351":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:23331:6219":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:11915:3981":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:896:3031":{"crate_id":5,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:4959:3019":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:2787:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"5:7878:32742":{"crate_id":5,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"5:10505:5927":{"crate_id":5,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"5:3697:14178":{"crate_id":5,"path":["std","io","Seek"],"kind":"trait"},"1:10113:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:40276:2896":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:41516:6143":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:4265:5101":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:45238:6357":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:2433:20433":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:12081:4054":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:4842:5106":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:5127:7233":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:3411:2869":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"11:2206:4051":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"5:12140:5739":{"crate_id":5,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:43057:2577":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"16:7492:5363":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:14776:4455":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:6901:5269":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"4:7710:5979":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:12667:1966":{"crate_id":5,"path":["std","usize"],"kind":"primitive"},"17:15534:4677":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"9:380:20285":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:12924:4163":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:7524:7829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:12357:4090":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"11:859:3042":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:41932:6153":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:40456:6262":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:3317:121":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:44652:6328":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:4990:7187":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"4:984:3629":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:45041:3388":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"4:4488:3644":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:6486:7539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:11715:4015":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:9404:32703":{"crate_id":5,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:41472:6277":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:45681:163":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:23705:6255":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"6:5088:7230":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:22175:29159":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:9352:14318":{"crate_id":5,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:14008:4292":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"5:2339:151":{"crate_id":5,"path":["std","fs","File"],"kind":"struct"},"5:11164:5760":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"5:8092:2753":{"crate_id":5,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:23409:6226":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:48035:6494":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:43430:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:6694:5239":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:6455:3583":{"crate_id":5,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"12:0:2848":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:12854:3841":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"11:2513:6844":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:10622:156":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"16:7027:5283":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:6749:7651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"11:2297:3044":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"16:8623:5528":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:44550:6318":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:11064:7900":{"crate_id":5,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"5:1005:3041":{"crate_id":5,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:5334:7306":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:16838:4286":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:15324:4529":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:13133:4183":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"16:5725:3960":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:3357:3336":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:4771:3006":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:43393:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:7762:5402":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:31704:208":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"5:12665:1878":{"crate_id":5,"path":["std","u128"],"kind":"primitive"},"11:2340:5635":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:16684:4980":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"5:8107:3115":{"crate_id":5,"path":["std","thread","ThreadId"],"kind":"struct"},"16:2682:5053":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:10674:3321":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"4:7273:3674":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:14365:4378":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:3743:3839":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:13476:8661":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:23515:6240":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:23584:6244":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"10:0:2846":{"crate_id":10,"path":["adler"],"kind":"module"},"5:9310:5904":{"crate_id":5,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:44709:6334":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:4150:5098":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:33002:3142":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:3822:28216":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:10634:3811":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:2878:5062":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:41722:5856":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:5630:7447":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:12614:14132":{"crate_id":5,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"11:1558:5627":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:7334:5341":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:2568:5048":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:14094:6280":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"6:5051:7218":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"11:2525:34842":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:41148:3388":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:40388:228":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:4118:5097":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"4:7549:3632":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:6679:7631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:12173:4066":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"15:0:2850":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:11907:6310":{"crate_id":5,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"1:38873:2886":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:15624:4690":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:10486:5715":{"crate_id":5,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"16:2858:5061":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:6727:7642":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"13:229:6836":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:16631:4269":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:16828:5013":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"11:1542:20363":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:1665:5632":{"crate_id":5,"path":["std","collections","hash","set","Union"],"kind":"struct"},"4:7569:29511":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:2453:3836":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:42695:6165":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"5:7973:3825":{"crate_id":5,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:11112:34883":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:10202:21359":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:13959:4285":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:2493:8496":{"crate_id":5,"path":["std","fs","metadata"],"kind":"function"},"17:16191:4850":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:45684:176":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:42777:2577":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"6:4805:7081":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:7983:5791":{"crate_id":5,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:11485:3995":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:14211:6211":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:5647:5126":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:155:3551":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:5319:7302":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:14710:4430":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:48014:6493":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:6678:5236":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"5:8617:5856":{"crate_id":5,"path":["std","io","Take"],"kind":"struct"},"6:4881:7135":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:3426:2878":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:3782:2899":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:45484:7944":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:8743:7745":{"crate_id":5,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:12028:7911":{"crate_id":5,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:1785:238":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"11:1027:3045":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:6779:5254":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:1703:7057":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"11:1885:5630":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:40438:2901":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:13014:4172":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:34948:2882":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:8706:5869":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:596:3824":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:41243:3393":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"17:10405:21365":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:12761:4145":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:12160:4065":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:3124:20436":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:3558:128":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:12048:6185":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:5255:7271":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:14081:4306":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:4890:7140":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:13553:21374":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:4764:5104":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:544:5021":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:14426:164":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:15048:4506":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:45348:6359":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:2228:8522":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:47056:6412":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:10733:3814":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"7:78:20278":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:11262:3608":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:11161:34884":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:16380:4904":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:7317:7735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:5151:7235":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"4:6169:14114":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:7539:5371":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:7326:7736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:6503:5770":{"crate_id":5,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"5:2341:5722":{"crate_id":5,"path":["std","fs","DirEntry"],"kind":"struct"},"5:5506:215":{"crate_id":5,"path":["std","path","Path"],"kind":"struct"},"1:43586:3319":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:11751:3031":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:14985:4488":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:16288:4879":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"4:928:3627":{"crate_id":4,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:7713:34871":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"11:1083:5625":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:22177:29161":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:5022:3575":{"crate_id":5,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:12062:6186":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:473:6860":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:4954:5110":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:11241:3606":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:5550:7407":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:789:166":{"crate_id":5,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:22647:14180":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"5:8649:5864":{"crate_id":5,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"4:1573:3033":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"5:1867:722":{"crate_id":5,"path":["std","env"],"kind":"module"},"17:10431:21366":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"11:2469:20358":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"5:8299:5804":{"crate_id":5,"path":["std","fs","Permissions"],"kind":"struct"},"6:7439:7775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:4937:7162":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:33035:278":{"crate_id":1,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"1:12076:6187":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:8966:5894":{"crate_id":5,"path":["std","path","Ancestors"],"kind":"struct"},"5:8289:5803":{"crate_id":5,"path":["std","fs","FileTimes"],"kind":"struct"},"6:4947:7168":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:4838:14224":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:2818:5059":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:485:3821":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"4:7510:2932":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"17:15733:4711":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:0:585":{"crate_id":1,"path":["core"],"kind":"module"},"9:318:6850":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"4:2810:6741":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:32946:258":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"4:3686:194":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:34602:2880":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"10:44:5638":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:42673:5741":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:6254:5154":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:4243:14226":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"5:377:3124":{"crate_id":5,"path":["std","thread","scoped","Scope"],"kind":"struct"},"4:6030:2937":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"5:11971:5781":{"crate_id":5,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:8393:134":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:22203:14180":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:45167:6354":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:6578:7590":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:3331:33884":{"crate_id":5,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:8739:5873":{"crate_id":5,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:12447:21477":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"0:153:2440":{"crate_id":0,"path":["fastrand","Rng"],"kind":"struct"},"16:6887:5070":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:14746:4436":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:6737:7649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:46885:6394":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:12318:4083":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"4:7694:3647":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"4:3337:29624":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"13:0:2843":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:23346:7923":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:2811:5727":{"crate_id":5,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:8225:7871":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:12093:4058":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"5:12022:7910":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:45676:7951":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"1:44751:6182":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:41332:6269":{"crate_id":1,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"1:10923:3050":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:6543:7569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:41322:3681":{"crate_id":1,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"6:7445:7776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:5947:5761":{"crate_id":5,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:4413:3574":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"17:13928:4281":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:5420:7339":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:5346:5122":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:5521:7390":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:22674:6215":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:15937:4763":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:11629:3944":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:3540:2892":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:6513:7546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:12990:4170":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:45358:6363":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:38928:2887":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:23595:6245":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"17:11512:21385":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"5:11135:32732":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:11963:4039":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"5:9539:3597":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"16:7459:5359":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:45797:6377":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:3108:5090":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"4:1582:3034":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:10830:3966":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"6:1584:6982":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:321:3819":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:23417:6227":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"14:31:5613":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:465:6855":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:44679:6330":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:15611:4685":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:1123:3045":{"crate_id":5,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:909:3032":{"crate_id":5,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:13201:6198":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"11:1118:5626":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"4:3298:5630":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"4:7787:5985":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:41236:3392":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"5:5874:14300":{"crate_id":5,"path":["std","process","Termination"],"kind":"trait"},"5:10800:3605":{"crate_id":5,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:13239:6179":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:44855:6185":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"18:598:34890":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:11069:5802":{"crate_id":5,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:5136:3380":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:16814:5012":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"4:2291:7915":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:7580:7851":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:3075:272":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"17:12214:4069":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:16573:4959":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:41041:3388":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"18:735:25571":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:3832:5096":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:4981:5111":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:32921:6258":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:45272:6202":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"11:2540:2934":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:41370:6270":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"5:4355:14245":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:8851:28697":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:11346:3984":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"18:531:3764":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:41538:6282":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:12077:3612":{"crate_id":5,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:2736:3568":{"crate_id":5,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:4850:7758":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"16:8609:5089":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:2226:8521":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:5585:7421":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:7740:3399":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"17:16395:4905":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:41946:5771":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:45016:6344":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:15801:4730":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:22187:29162":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:45706:219":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"5:3467:5732":{"crate_id":5,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:8176:5462":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:5325:7303":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:47191:6419":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:16029:4788":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"4:3324:5631":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:14345:119":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:33032:3339":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"11:813:3038":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:2504:5045":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:44719:3816":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:1623:222":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:6186:5145":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:6950:5273":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:3042:14180":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"4:3082:7916":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:6659:7622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:901:3818":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"5:11594:5946":{"crate_id":5,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:15721:4708":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:6820:21298":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:47077:6413":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:12011:5789":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:6109:5139":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:6651:7620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"4:6915:3621":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:45025:6199":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:44703:6192":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"17:16525:4255":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"16:7956:5453":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:6817:3594":{"crate_id":5,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:1636:2577":{"crate_id":5,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:11469:21384":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:7463:7786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:22789:13733":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:42527:8594":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:4871:5107":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:7990:7860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:8630:5858":{"crate_id":5,"path":["std","io","Split"],"kind":"struct"},"1:42936:222":{"crate_id":1,"path":["core","range","Range"],"kind":"struct"},"1:7009:3687":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:10300:8045":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:11118:5737":{"crate_id":5,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:23276:6218":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:5412:1279":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:10132:21356":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"18:521:25573":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:5311:7299":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:41504:6281":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"4:284:3621":{"crate_id":4,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:33034:118":{"crate_id":1,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"17:11053:3978":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:13260:21371":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:10840:3816":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:8237:7873":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:7347:5343":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"4:3291:3031":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:1551:2577":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:5007:7197":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:6747:5028":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:4233:14225":{"crate_id":5,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:23141:13812":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:1589:6984":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:11402:6558":{"crate_id":5,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:15159:4520":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:12659:933":{"crate_id":5,"path":["std","i64"],"kind":"primitive"},"1:22276:6216":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:16512:4241":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:15174:4168":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"4:3303:29623":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:14585:4414":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:13996:4291":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:41274:6267":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:44622:6325":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:12331:4085":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:8280:8588":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:14598:4415":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:44559:6320":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:46931:6397":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:6157:5140":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:12120:4061":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:13052:4179":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"18:589:3770":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:4171:14221":{"crate_id":5,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:10571:3960":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:5512:7389":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:13509:3841":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:23468:25598":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"5:8637:5861":{"crate_id":5,"path":["std","io","Lines"],"kind":"struct"},"11:649:3031":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"11:1858:3031":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:5165:7236":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:15595:4684":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:43132:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:3364:3338":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"9:0:2845":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:6203:21295":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:508:3562":{"crate_id":5,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"4:5289:3652":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"11:389:3557":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:16250:4865":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:5205:7250":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:3079:271":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"11:1703:168":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:680:3825":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:8266:7880":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:2509:14169":{"crate_id":5,"path":["std","fs","read_link"],"kind":"function"},"16:6171:5143":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:2258:133":{"crate_id":5,"path":["std","ffi","os_str","Display"],"kind":"struct"},"11:676:2577":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"15:306:20388":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:8950:5746":{"crate_id":5,"path":["std","path","Components"],"kind":"struct"},"5:12653:766":{"crate_id":5,"path":["std","f32"],"kind":"primitive"},"5:3424:5730":{"crate_id":5,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:3877:3840":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:2877:147":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:13700:4228":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:8812:8587":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:11200:3981":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:7835:21304":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:6719:7641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"5:11089:5803":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"6:6505:7541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:14159:28784":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"4:1211:32488":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:13410:8339":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:7409:32741":{"crate_id":5,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"4:3858:5960":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:2638:5051":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:4925:14250":{"crate_id":5,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:12787:4147":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:4701:2733":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:43206:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:15919:4759":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:16341:4895":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:47027:6403":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:4239:5100":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:1643:7026":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:8162:5077":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"4:1885:2930":{"crate_id":4,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:4489:6125":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:5482:7380":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"11:123:3553":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"4:778:264":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:1500:6932":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:12428:3618":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:1530:6945":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:8167:14131":{"crate_id":5,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:5871:7666":{"crate_id":5,"path":["std","process","exit"],"kind":"function"},"17:10880:3967":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:1632:3031":{"crate_id":5,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:8264:5472":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:9570:3053":{"crate_id":5,"path":["std","time","SystemTime"],"kind":"struct"},"5:1942:5716":{"crate_id":5,"path":["std","env","Args"],"kind":"struct"},"16:2618:5050":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"11:2519:6845":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"15:394:20397":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:5224:7258":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:5057:7220":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:7165:5310":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:45500:7948":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:3596:154":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:47159:6417":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:1667:7043":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:34323:2874":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:4997:7190":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:11127:32730":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"14:40:4256":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:16802:5009":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:44883:6338":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:11196:5901":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:4513:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"6:4984:7184":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:14337:4374":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"5:10879:5730":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:44320:7940":{"crate_id":1,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"1:22258:13731":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"11:102:6837":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:10603:238":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"1:23108:13813":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"16:8317:21307":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:5044:7216":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:14368:3583":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"17:12272:4076":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:12944:4165":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:7741:3400":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:31061:3365":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"5:2521:14175":{"crate_id":5,"path":["std","fs","read_dir"],"kind":"function"},"6:5288:7291":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:5025:7206":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:3158:150":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"16:6586:5211":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"5:4803:14268":{"crate_id":5,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:43874:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"18:659:3784":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:15569:4678":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"11:1862:2577":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:6899:14312":{"crate_id":5,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:6422:7507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:7041:5076":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:6617:7604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:8025:5456":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:41312:3816":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"1:32945:251":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"17:16359:4901":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:46952:6398":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:45180:6355":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:16241:4863":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:6775:5771":{"crate_id":5,"path":["std","sync","once","Once"],"kind":"struct"},"6:7424:7770":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:12645:1352":{"crate_id":5,"path":["std","pointer"],"kind":"primitive"},"4:888:3624":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"4:7591:222":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"4:787:122":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:1233:3826":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"4:299:2933":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"4:3792:3621":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:8278:7882":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"4:3080:29629":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:13108:3981":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"5:3097:150":{"crate_id":5,"path":["std","io","error","Error"],"kind":"struct"},"11:750:3033":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:11540:4001":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"6:4792:7072":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:5344:5751":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:41434:6275":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:43882:3326":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"18:651:3760":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:8562:5522":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:3069:175":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:14482:2931":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:45389:6203":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:3072:157":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"6:5575:7416":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:5019:7203":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:5664:7460":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"4:7098:2942":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:9529:246":{"crate_id":5,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:12055:4046":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:12373:4092":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:3593:153":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:12034:6184":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:14322:4369":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:4897:3016":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:7916:32746":{"crate_id":5,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"5:11059:7898":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"17:14545:4406":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:47367:6443":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:485:6865":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:5328:3848":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:4653:3022":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:2099:209":{"crate_id":5,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:906:3819":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:3481:2883":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:44490:6316":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:46832:6387":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:3066:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:7806:28143":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:5803:5760":{"crate_id":5,"path":["std","process","Stdio"],"kind":"struct"},"17:16791:5007":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:44987:5861":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:23014:8507":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"17:13856:4269":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:44096:3051":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:15389:4580":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:9391:119":{"crate_id":5,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"11:663:3032":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:8977:5895":{"crate_id":5,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:7804:34873":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:4976:7179":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:15186:4523":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:31731:3207":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:42926:6305":{"crate_id":1,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"5:12217:5948":{"crate_id":5,"path":["std","alloc","System"],"kind":"struct"},"5:9842:5801":{"crate_id":5,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:2422:3833":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:3199:5994":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:4501:6126":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:10883:169":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"16:6571:5208":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:14413:4388":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:10664:33419":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"5:8429:5809":{"crate_id":5,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:2687:8508":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"1:34189:2872":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:10875:165":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"16:2702:5054":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:15985:4778":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:11151:5800":{"crate_id":5,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:33705:2867":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"5:5222:14277":{"crate_id":5,"path":["std","panic","always_abort"],"kind":"function"},"5:963:2930":{"crate_id":5,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:13093:4006":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:40348:227":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:41939:6154":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:11989:4040":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:13971:4286":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:12663:4135":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"4:0:325":{"crate_id":4,"path":["alloc"],"kind":"module"},"7:0:1956":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:15128:4514":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:11888:4033":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:47567:6451":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"6:6360:7464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:6267:5155":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:14039:4301":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"4:7627:2577":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"11:1042:20362":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:31293:2927":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:44901:6339":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:11356:34887":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:3306:5035":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:13030:4174":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:5280:5120":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:3640:5736":{"crate_id":5,"path":["std","io","IoSliceMut"],"kind":"struct"},"18:726:3803":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:4:1292":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"5:6606:232":{"crate_id":5,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:45530:135":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"4:6746:3621":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:13819:4256":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:6702:7638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"11:1866:2937":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:10369:21364":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:10667:3812":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:10975:34880":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:22880:13817":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"9:470:20283":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:47269:6423":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:3095:238":{"crate_id":5,"path":["std","io","error","Result"],"kind":"type_alias"},"4:6826:2577":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"5:12640:436":{"crate_id":5,"path":["std","bool"],"kind":"primitive"},"5:9514:3574":{"crate_id":5,"path":["std","sync","poison","Guard"],"kind":"struct"},"5:5933:232":{"crate_id":5,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:8243:7874":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"5:11179:32711":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"11:763:3034":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"18:765:25572":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:9237:5899":{"crate_id":5,"path":["std","process","ExitStatus"],"kind":"struct"},"1:48061:6496":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"5:982:3038":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:12935:4164":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:517:6886":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:10766:3815":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:14454:4392":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:553:6906":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"4:7856:2930":{"crate_id":4,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:15353:4549":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:12662:1884":{"crate_id":5,"path":["std","u16"],"kind":"primitive"},"1:41163:3390":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:45554:3055":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:8334:3141":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:12800:4148":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:13771:4241":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:5717:5758":{"crate_id":5,"path":["std","process","ChildStdout"],"kind":"struct"},"1:10662:3316":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"5:9271:3031":{"crate_id":5,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:47906:6489":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:8125:3113":{"crate_id":5,"path":["std","thread","Thread"],"kind":"struct"},"1:10666:3318":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:13585:4214":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"4:4157:3621":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:41495:6137":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:12658:927":{"crate_id":5,"path":["std","i32"],"kind":"primitive"},"5:10925:3113":{"crate_id":5,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:44611:6271":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:12593:5951":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:41746:6151":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:564:6911":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:16350:4899":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:6133:3577":{"crate_id":5,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:5611:7438":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"5:9506:3591":{"crate_id":5,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"4:7108:2943":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:15978:4777":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:41088:25623":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:9226:211":{"crate_id":5,"path":["std","process","Output"],"kind":"struct"},"17:13489:4207":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:8910:14294":{"crate_id":5,"path":["std","path","Component"],"kind":"enum"},"6:8326:7894":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:11455:174":{"crate_id":5,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"6:7553:7845":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:5069:7229":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:7890:32744":{"crate_id":5,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"17:10455:21367":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:2159:1397":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:46785:6382":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:12654:782":{"crate_id":5,"path":["std","f64"],"kind":"primitive"},"17:13592:4215":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"5:4039:5740":{"crate_id":5,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:8666:5422":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:14165:4334":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:5707:21293":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:13021:21503":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:10378:6296":{"crate_id":5,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"6:7407:7765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:13730:4232":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:7966:5454":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:13387:4200":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:6638:5216":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"1:12959:6190":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:316:3818":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:559:6909":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:523:6889":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:6802:7668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:2658:5052":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:22986:14180":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"4:7762:3653":{"crate_id":4,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:15013:4494":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"11:1892:5631":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:3719:223":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:41077:3394":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:23683:6253":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"6:5529:7395":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:16203:4853":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:11843:6179":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:4402:5102":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"4:214:3620":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:13983:4289":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:4134:14220":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:8011:5085":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:12945:8628":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:7575:5916":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:3985:3864":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"5:9210:5896":{"crate_id":5,"path":["std","pipe","PipeReader"],"kind":"struct"},"6:578:6919":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:6096:5134":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:2820:8528":{"crate_id":1,"path":["core","clone","CloneToUninit"],"kind":"trait"},"17:13243:4190":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:9478:6556":{"crate_id":5,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:11438:3991":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:5623:7444":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:23628:6248":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:11995:4041":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:41047:6263":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:47094:6414":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"18:689:3793":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:8230:21306":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:12648:1771":{"crate_id":5,"path":["std","str"],"kind":"primitive"},"6:6695:7637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:45007:6343":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:12907:4207":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:4852:7760":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:48118:6501":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"11:1579:5628":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:11643:3981":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:8344:5806":{"crate_id":5,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:47396:6444":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:16329:4893":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:41156:3389":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:15578:4682":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:13183:4185":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"6:4964:7174":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:8543:5519":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"18:754:3809":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:10311:21362":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:4957:7171":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:45032:3389":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:1100:3043":{"crate_id":5,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:2568:2781":{"crate_id":5,"path":["std","io"],"kind":"module"},"14:201:14111":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:12686:4136":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"4:2261:5962":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:1648:5629":{"crate_id":5,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:5196:7245":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:22:845":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"5:436:197":{"crate_id":5,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:5441:7354":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"4:3086:29627":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:3587:2757":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:7055:5285":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:7413:5348":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"4:6148:3652":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"1:47935:6490":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:7355:5078":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:11040:5936":{"crate_id":5,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:42860:3118":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"17:13079:4182":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"5:974:3036":{"crate_id":5,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:43317:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:4247:14227":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:4436:5742":{"crate_id":5,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:3061:3573":{"crate_id":5,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:3401:2871":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"18:608:3777":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"4:1366:3043":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:43049:3032":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"5:12643:1924":{"crate_id":5,"path":["std","unit"],"kind":"primitive"},"5:5313:5751":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:7292:7717":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:41126:3396":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:7023:245":{"crate_id":5,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:6602:7602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:45781:192":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:6852:7679":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:10660:133":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"17:16755:5001":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:47417:6445":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:1352:3828":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:48107:6500":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:7857:8580":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"17:15844:4738":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:14021:4293":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:12287:4080":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:5755:5128":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:15456:4635":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:5230:7261":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"18:548:165":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:46984:6400":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:1711:7061":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:2948:5065":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:10062:21355":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:8284:7883":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:41548:6283":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:45760:25851":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"4:3712:3032":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:12430:4097":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:11151:3980":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:13328:3919":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:16021:4787":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:7302:5337":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:23650:6250":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"17:14498:4400":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:5658:7457":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:12749:4144":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:12661:1902":{"crate_id":5,"path":["std","u8"],"kind":"primitive"},"16:8500:5514":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:8446:2578":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:10283:21361":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:47223:6421":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:14258:4340":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:11814:4025":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"8:0:2844":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"4:5560:14105":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"1:4840:3014":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:13304:21372":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:47964:6491":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:4816:7089":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:5697:5757":{"crate_id":5,"path":["std","process","ChildStdin"],"kind":"struct"},"1:23136:13814":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"6:1521:6940":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:41573:3781":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:7570:33477":{"crate_id":5,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:12737:4143":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"4:1535:3032":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:14110:4315":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":33}