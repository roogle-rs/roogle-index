{"root":"0:0:2579","crate_version":"2.1.0","includes_private":false,"index":{"0:149:985":{"id":"0:149:985","crate_id":0,"name":"isize","span":{"filename":"src/global_rng.rs","begin":[165,0],"end":[165,65]},"visibility":"public","docs":"Generates a random `isize` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"isize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"isize"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<isize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"isize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13717:29438":{"id":"1:13717:29438","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:12452:482","self::pattern":"1:13301:8625"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13740:30622":{"id":"1:13740:30622","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1126:37648"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[134,0],"end":[139,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2796:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:75:486"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:175:1884":{"id":"0:175:1884","crate_id":0,"name":"u8","span":{"filename":"src/lib.rs","begin":[558,4],"end":[564,5]},"visibility":"public","docs":"Generates a random `u8` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u8>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13645:30791":{"id":"1:13645:30791","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44645:6285","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129:928":{"id":"0:129:928","crate_id":0,"name":"i8","span":{"filename":"src/global_rng.rs","begin":[155,0],"end":[155,59]},"visibility":"public","docs":"Generates a random `i8` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i8"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i8>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:177:1866":{"id":"0:177:1866","crate_id":0,"name":"u16","span":{"filename":"src/lib.rs","begin":[566,4],"end":[572,5]},"visibility":"public","docs":"Generates a random `u16` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13656:3226":{"id":"1:13656:3226","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42513:194","prim@char":"5:12452:482","self::pattern":"1:13301:8625"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13679:29430":{"id":"1:13679:29430","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"5:12452:482","self::pattern":"1:13301:8625","str::rsplitn":"1:13682:29432"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44485:6129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13735:30615":{"id":"1:13735:30615","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40412:8500","Self::is_ascii":"1:13734:30614"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40412:8500","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13611":{"id":"1:13611","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13612:1016","1:13613:2562","1:13614:30784","1:13615:30785","1:13617:30786","1:13620:30577","1:13621:30787","1:13622:342","1:13623:29402","1:13624:3095","1:13626:2526","1:13628:29176","1:13630:29177","1:13632:30788","1:13633:30789","1:13634:29419","1:13635:29420","1:13636:29423","1:13637:29424","1:13639:6145","1:13640:6296","1:13641:5738","1:13642:25934","1:13643:25959","1:13644:30790","1:13645:30791","1:13646:25956","1:13647:3182","1:13650:29436","1:13653:29437","1:13656:3226","1:13660:3191","1:13664:29425","1:13667:25939","1:13670:29428","1:13673:30792","1:13676:30793","1:13679:29430","1:13682:29432","1:13685:29434","1:13688:29435","1:13691:2786","1:13694:30794","1:13697:30795","1:13700:30796","1:13703:30797","1:13705:30798","1:13707:30799","1:13709:30800","1:13710:30801","1:13711:30802","1:13714:30803","1:13717:29438","1:13720:29439","1:13723:30804","1:13726:30805","1:13729:30806","1:13732:30807","1:13734:30614","1:13735:30615","1:13736:30617","1:13737:30618","1:13738:30619","1:13739:30621","1:13740:30622","1:13741:30623","1:13742:30808","1:13744:8522","1:13745:30809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13623:29402":{"id":"1:13623:29402","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"5:12471:1884"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:171:903":{"id":"0:171:903","crate_id":0,"name":"i128","span":{"filename":"src/lib.rs","begin":[451,4],"end":[457,5]},"visibility":"public","docs":"Generates a random `i128` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i128"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i128>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13635:29420":{"id":"1:13635:29420","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13634:29419","str::split_at_mut_checked":"1:13637:29424"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:165:910":{"id":"0:165:910","crate_id":0,"name":"i16","span":{"filename":"src/lib.rs","begin":[427,4],"end":[433,5]},"visibility":"public","docs":"Generates a random `i16` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i16"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,16],"end":[131,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2858:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:40:426":{"id":"0:40:426","crate_id":0,"name":"bool","span":{"filename":"src/global_rng.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"Generates a random `bool`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2579":{"id":"0:0:2579","crate_id":0,"name":"fastrand","span":{"filename":"src/lib.rs","begin":[1,0],"end":[696,1]},"visibility":"public","docs":"A simple and fast random number generator.\n\nThe implementation uses [Wyrand](https://github.com/wangyi-fudan/wyhash), a simple and fast\ngenerator but **not** cryptographically secure.\n\n# Examples\n\nFlip a coin:\n\n```\nif fastrand::bool() {\n    println!(\"heads\");\n} else {\n    println!(\"tails\");\n}\n```\n\nGenerate a random `i32`:\n\n```\nlet num = fastrand::i32(..);\n```\n\nChoose a random element in an array:\n\n```\nlet v = vec![1, 2, 3, 4, 5];\nlet i = fastrand::usize(..v.len());\nlet elem = v[i];\n```\n\nSample values from an array with `O(n)` complexity (`n` is the length of array):\n\n```\nfastrand::choose_multiple(vec![1, 4, 5].iter(), 2);\nfastrand::choose_multiple(0..20, 12);\n```\n\n\nShuffle an array:\n\n```\nlet mut v = vec![1, 2, 3, 4, 5];\nfastrand::shuffle(&mut v);\n```\n\nGenerate a random [`Vec`] or [`String`]:\n\n```\nuse std::iter::repeat_with;\n\nlet v: Vec<i32> = repeat_with(|| fastrand::i32(..)).take(10).collect();\nlet s: String = repeat_with(fastrand::alphanumeric).take(10).collect();\n```\n\nTo get reproducible results on every run, initialize the generator with a seed:\n\n```\n// Pick an arbitrary number as seed.\nfastrand::seed(7);\n\n// Now this prints the same number on every run:\nprintln!(\"{}\", fastrand::u32(..));\n```\n\nTo be more efficient, create a new [`Rng`] instance instead of using the thread-local\ngenerator:\n\n```\nuse std::iter::repeat_with;\n\nlet mut rng = fastrand::Rng::new();\nlet mut bytes: Vec<u8> = repeat_with(|| rng.u8(..)).take(10_000).collect();\n```\n\nThis crate aims to expose a core set of useful randomness primitives. For more niche algorithms,\nconsider using the [`fastrand-contrib`] crate alongside this one.\n\n# Features\n\n- `std` (enabled by default): Enables the `std` library. This is required for the global\n  generator and global entropy. Without this feature, [`Rng`] can only be instantiated using\n  the [`with_seed`](Rng::with_seed) method.\n- `js`: Assumes that WebAssembly targets are being run in a JavaScript environment. See the\n  [WebAssembly Notes](#webassembly-notes) section for more information.\n\n# WebAssembly Notes\n\nFor non-WASI WASM targets, there is additional sublety to consider when utilizing the global RNG.\nBy default, `std` targets will use entropy sources in the standard library to seed the global RNG.\nHowever, these sources are not available by default on WASM targets outside of WASI.\n\nIf the `js` feature is enabled, this crate will assume that it is running in a JavaScript\nenvironment. At this point, the [`getrandom`] crate will be used in order to access the available\nentropy sources and seed the global RNG. If the `js` feature is not enabled, the global RNG will\nuse a predefined seed.\n\n[`fastrand-contrib`]: https://crates.io/crates/fastrand-contrib\n[`getrandom`]: https://crates.io/crates/getrandom","links":{"`Rng`":"0:153:2409","Rng::with_seed":"0:90:2411","`Vec`":"4:7214:270"},"attrs":["#![no_std]","#![forbid(unsafe_code)]","#![warn(missing_docs, missing_debug_implementations, rust_2018_idioms)]","#![doc(html_favicon_url =\n\"https://raw.githubusercontent.com/smol-rs/smol/master/assets/images/logo_fullsize_transparent.png\")]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/smol-rs/smol/master/assets/images/logo_fullsize_transparent.png\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:153:2409","0:73-0:13:2407"],"is_stripped":false}}},"a:1:32743:240-0:153:2409":{"id":"a:1:32743:240-0:153:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32743:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13640:6296":{"id":"1:13640:6296","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"5:12452:482"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44357:6277","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:2467":{"id":"0:104:2467","crate_id":0,"name":"seed","span":{"filename":"src/lib.rs","begin":[493,4],"end":[495,5]},"visibility":"public","docs":"Initializes this generator with the given seed.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["seed",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:2550":{"id":"0:55:2550","crate_id":0,"name":"shuffle","span":{"filename":"src/global_rng.rs","begin":[138,0],"end":[140,1]},"visibility":"public","docs":"Shuffles a slice randomly.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42604:3130-0:153:2409":{"id":"a:1:42604:3130-0:153:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42604:3130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:22:1200":{"id":"0:22:1200","crate_id":0,"name":"new","span":{"filename":"src/global_rng.rs","begin":[25,4],"end":[27,5]},"visibility":"public","docs":"Creates a new random number generator.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Rng","id":"0:153:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:158":{"id":"0:158","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,16],"end":[131,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32745:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:5722:31513":{"id":"4:5722:31513","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:296:2897","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"4:296:2897","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13644:30790":{"id":"1:13644:30790","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44635:5812","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13615:30785":{"id":"1:13615:30785","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3921-0:153:2409":{"id":"b:1:3921-0:153:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32744:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3919:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3923:1854"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13723:30804":{"id":"1:13723:30804","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:12452:482","self::pattern":"1:13301:8625"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:8631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5740:30689":{"id":"4:5740:30689","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13737:30618"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2781:25456":{"id":"1:2781:25456","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2497":{"id":"0:53:2497","crate_id":0,"name":"digit","span":{"filename":"src/global_rng.rs","begin":[132,0],"end":[134,1]},"visibility":"public","docs":"Generates a random digit in the given `base`.\n\nDigits are represented by `char`s in ranges 0-9 and a-z.\n\nPanics if the base is zero or greater than 36.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["base",{"primitive":"u32"}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13636:29423":{"id":"1:13636:29423","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13637:29424"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2491":{"id":"0:44:2491","crate_id":0,"name":"alphanumeric","span":{"filename":"src/global_rng.rs","begin":[96,0],"end":[98,1]},"visibility":"public","docs":"Generates a random `char` in ranges a-z, A-Z and 0-9.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13703:30797":{"id":"1:13703:30797","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13739:30621":{"id":"1:13739:30621","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1126:37648"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:185:1946":{"id":"0:185:1946","crate_id":0,"name":"usize","span":{"filename":"src/lib.rs","begin":[615,4],"end":[621,5]},"visibility":"public","docs":"Generates a random `usize` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<usize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:2536":{"id":"0:102:2536","crate_id":0,"name":"lowercase","span":{"filename":"src/lib.rs","begin":[486,4],"end":[489,5]},"visibility":"public","docs":"Generates a random `char` in range a-z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13620:30577":{"id":"1:13620:30577","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12848:8632"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13745:30809":{"id":"1:13745:30809","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5122:30809"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44698:3347","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13709:30800":{"id":"1:13709:30800","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:2536":{"id":"0:46:2536","crate_id":0,"name":"lowercase","span":{"filename":"src/global_rng.rs","begin":[102,0],"end":[104,1]},"visibility":"public","docs":"Generates a random `char` in range a-z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13653:29437":{"id":"1:13653:29437","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"5:12452:482","self::pattern":"1:13301:8625"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:8631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3087:849":{"id":"1:3087:849","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13682:29432":{"id":"1:13682:29432","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"5:12452:482","str::splitn":"1:13679:29430","self::pattern":"1:13301:8625"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44503:6130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:8631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42605:3129-0:153:2409":{"id":"a:1:42605:3129-0:153:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42605:3129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:3084:3185":{"id":"1:3084:3185","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:3058:148"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13613:2562":{"id":"1:13613:2562","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13707:30799":{"id":"1:13707:30799","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32802:3103-0:153:2409":{"id":"a:1:32802:3103-0:153:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32802:3103","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13742:30808":{"id":"1:13742:30808","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5124:30808"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44680:3349","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3099:141":{"id":"1:3099:141","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32667:2822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:169:922":{"id":"0:169:922","crate_id":0,"name":"i64","span":{"filename":"src/lib.rs","begin":[443,4],"end":[449,5]},"visibility":"public","docs":"Generates a random `i64` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i64>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5738:31517":{"id":"4:5738:31517","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"4:296:2897","`String`":"4:7801:248"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:296:2897","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"4:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5721":{"id":"4:5721","crate_id":4,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["4:5722:31513","4:5723:2714","4:5726:31514","4:5729:31515","4:5737:31516","4:5738:31517","4:5739:8511","4:5740:30689","4:5741:30690"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:42:2486":{"id":"0:42:2486","crate_id":0,"name":"alphabetic","span":{"filename":"src/global_rng.rs","begin":[90,0],"end":[92,1]},"visibility":"public","docs":"Generates a random `char` in ranges a-z and A-Z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13676:30793":{"id":"1:13676:30793","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:13301:8625","str::split":"1:13664:29425","prim@char":"5:12452:482","str::split_terminator":"1:13673:30792"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44449:6280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:8631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13691:2786":{"id":"1:13691:2786","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:13301:8625","`DoubleEndedIterator`":"1:8451:133","prim@char":"5:12452:482","str::rmatches":"1:13694:30794"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44585:6283","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:2497":{"id":"0:97:2497","crate_id":0,"name":"digit","span":{"filename":"src/lib.rs","begin":[352,4],"end":[365,5]},"visibility":"public","docs":"Generates a random digit in the given `base`.\n\nDigits are represented by `char`s in ranges 0-9 and a-z.\n\nPanics if the base is zero or greater than 36.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["base",{"primitive":"u32"}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92:2486":{"id":"0:92:2486","crate_id":0,"name":"alphabetic","span":{"filename":"src/lib.rs","begin":[328,4],"end":[331,5]},"visibility":"public","docs":"Generates a random `char` in ranges a-z and A-Z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153:2409":{"id":"0:153:2409","crate_id":0,"name":"Rng","span":{"filename":"src/lib.rs","begin":[132,0],"end":[132,20]},"visibility":"public","docs":"A random number generator.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:21","0:89","a:1:3304:252-0:153:2409","a:1:3339:3296-0:153:2409","a:1:42604:3130-0:153:2409","a:1:32743:240-0:153:2409","a:1:32802:3103-0:153:2409","a:1:42605:3129-0:153:2409","b:1:3085-0:153:2409","b:1:2776-0:153:2409","b:1:3921-0:153:2409","b:1:2808-0:153:2409","b:1:2779-0:153:2409","b:1:3091-0:153:2409","b:1:3081-0:153:2409","b:1:3096-0:153:2409","b:4:783-0:153:2409","0:159","0:74","0:161","0:19","0:156","0:158"]}}},"1:13621:30787":{"id":"1:13621:30787","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:147:1946":{"id":"0:147:1946","crate_id":0,"name":"usize","span":{"filename":"src/global_rng.rs","begin":[164,0],"end":[164,65]},"visibility":"public","docs":"Generates a random `usize` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<usize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:486":{"id":"0:75:486","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[136,4],"end":[138,5]},"visibility":"default","docs":"Clones the generator by creating a new generator with the same seed.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Rng","id":"0:153:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:2514":{"id":"0:100:2514","crate_id":0,"name":"choose_multiple","span":{"filename":"src/lib.rs","begin":[390,4],"end":[417,5]},"visibility":"public","docs":"Collects `amount` values at random from the iterator into a vector.\n\nThe length of the returned vector equals `amount` unless the iterator\ncontains insufficient elements, in which case it equals the number of\nelements available.\n\nComplexity is `O(n)` where `n` is the length of the iterator.","links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"generic":"T"}],["amount",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Vec","id":"4:7214:270","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"","id":"1:8559:181","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8559:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111:2570":{"id":"0:111:2570","crate_id":0,"name":"uppercase","span":{"filename":"src/lib.rs","begin":[633,4],"end":[636,5]},"visibility":"public","docs":"Generates a random `char` in range A-Z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:2489":{"id":"0:106:2489","crate_id":0,"name":"choice","span":{"filename":"src/lib.rs","begin":[509,4],"end":[524,5]},"visibility":"public","docs":"Choose an item from an iterator at random.\n\nThis function may have an unexpected result if the `len()` property of the\niterator does not match the actual number of items in the iterator. If\nthe iterator is empty, this returns `None`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8413:168","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8413:168","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8413:168","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8504:2547","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163:928":{"id":"0:163:928","crate_id":0,"name":"i8","span":{"filename":"src/lib.rs","begin":[419,4],"end":[425,5]},"visibility":"public","docs":"Generates a random `i8` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i8"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i8>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13:2407":{"id":"0:13:2407","crate_id":0,"name":"global_rng","span":{"filename":"src/global_rng.rs","begin":[1,0],"end":[218,1]},"visibility":"crate","docs":"A global, thread-local random number generator.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:36:2467","0:38:2540","0:40:426","0:42:2486","0:44:2491","0:46:2536","0:48:2570","0:50:2489","0:53:2497","0:55:2550","0:127:1884","0:129:928","0:131:1866","0:133:910","0:135:1872","0:137:916","0:139:1878","0:141:922","0:143:1860","0:145:903","0:147:1946","0:149:985","0:151:482","0:59:755","0:61:771","0:63:2514"],"is_stripped":true}}},"0:156":{"id":"0:156","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,9],"end":[131,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10530:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:157:819"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2810:25460":{"id":"1:2810:25460","crate_id":1,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13660:3191":{"id":"1:13660:3191","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42513:194","prim@char":"5:12452:482","self::pattern":"1:13301:8625"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:8631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:173:985":{"id":"0:173:985","crate_id":0,"name":"isize","span":{"filename":"src/lib.rs","begin":[476,4],"end":[482,5]},"visibility":"public","docs":"Generates a random `isize` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"isize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"isize"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<isize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"isize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/global_rng.rs","begin":[12,0],"end":[20,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3133:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Rng","id":"0:153:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:20:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13714:30803":{"id":"1:13714:30803","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:12452:482","self::pattern":"1:13301:8625"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167:916":{"id":"0:167:916","crate_id":0,"name":"i32","span":{"filename":"src/lib.rs","begin":[435,4],"end":[441,5]},"visibility":"public","docs":"Generates a random `i32` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i32>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:786:25461":{"id":"4:786:25461","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13643:25959":{"id":"1:13643:25959","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13642:25934"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44664:6287","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2778:2742":{"id":"1:2778:2742","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:2514":{"id":"0:63:2514","crate_id":0,"name":"choose_multiple","span":{"filename":"src/global_rng.rs","begin":[179,0],"end":[181,1]},"visibility":"public","docs":"Collects `amount` values at random from the iterator into a vector.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["source",{"generic":"T"}],["amount",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"std::vec::Vec","id":"4:7214:270","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"","id":"1:8559:181","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8559:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161":{"id":"0:161","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,27],"end":[131,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2863:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:108:2550":{"id":"0:108:2550","crate_id":0,"name":"shuffle","span":{"filename":"src/lib.rs","begin":[528,4],"end":[532,5]},"visibility":"public","docs":"Shuffles a slice randomly.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["slice",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:181:1878":{"id":"0:181:1878","crate_id":0,"name":"u64","span":{"filename":"src/lib.rs","begin":[582,4],"end":[588,5]},"visibility":"public","docs":"Generates a random `u64` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u64>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3096-0:153:2409":{"id":"b:1:3096-0:153:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3055:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3065:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3099:141","1:3100:1839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13726:30805":{"id":"1:13726:30805","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:12452:482","self::pattern":"1:13301:8625"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3095:1841":{"id":"1:3095:1841","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42643:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3065:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73-0:13:2407":{"id":"0:73-0:13:2407","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,22]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"global_rng","name":"global_rng","id":"0:13:2407","glob":true}}},"1:13633:30789":{"id":"1:13633:30789","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"5:12458:1754","crate::ops::IndexMut":"1:3583:2859","str::slice_unchecked":"1:13632:30788"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13697:30795":{"id":"1:13697:30795","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:13301:8625","`DoubleEndedIterator`":"1:8451:133","prim@char":"5:12452:482","str::rmatch_indices":"1:13700:30796"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44531:6281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2776-0:153:2409":{"id":"b:1:2776-0:153:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32744:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2770:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2778:2742"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:127:1884":{"id":"0:127:1884","crate_id":0,"name":"u8","span":{"filename":"src/global_rng.rs","begin":[154,0],"end":[154,59]},"visibility":"public","docs":"Generates a random `u8` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u8>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50:2489":{"id":"0:50:2489","crate_id":0,"name":"choice","span":{"filename":"src/global_rng.rs","begin":[118,0],"end":[124,1]},"visibility":"public","docs":"Choose an item from an iterator at random.\n\nThis function may have an unexpected result if the `len()` property of the\niterator does not match the actual number of items in the iterator. If\nthe iterator is empty, this returns `None`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8413:168","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8413:168","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8413:168","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8504:2547","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:2491":{"id":"0:94:2491","crate_id":0,"name":"alphanumeric","span":{"filename":"src/lib.rs","begin":[335,4],"end":[338,5]},"visibility":"public","docs":"Generates a random `char` in ranges a-z, A-Z and 0-9.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13630:29177":{"id":"1:13630:29177","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13646:25956":{"id":"1:13646:25956","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44673:6144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:139:1878":{"id":"0:139:1878","crate_id":0,"name":"u64","span":{"filename":"src/global_rng.rs","begin":[160,0],"end":[160,61]},"visibility":"public","docs":"Generates a random `u64` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u64>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:787:25462":{"id":"4:787:25462","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13711:30802":{"id":"1:13711:30802","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"5:12452:482","self::pattern":"1:13301:8625"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13327:8630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13612:1016":{"id":"1:13612:1016","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"5:12452:482"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13737:30618":{"id":"1:13737:30618","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13688:29435":{"id":"1:13688:29435","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:8631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5729:31515":{"id":"4:5729:31515","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5737:31516":{"id":"4:5737:31516","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"4:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:2484":{"id":"0:91:2484","crate_id":0,"name":"fork","span":{"filename":"src/lib.rs","begin":[322,4],"end":[324,5]},"visibility":"public","docs":"Clones the generator by deterministically deriving a new generator based on the initial\nseed.\n\nThis function can be used to create a new generator that is a \"spinoff\" of the old\ngenerator. The new generator will not produce the same sequence of values as the\nold generator.\n\n# Example\n\n```\n// Seed two generators equally, and clone both of them.\nlet mut base1 = fastrand::Rng::with_seed(0x4d595df4d0f33173);\nbase1.bool(); // Use the generator once.\n\nlet mut base2 = fastrand::Rng::with_seed(0x4d595df4d0f33173);\nbase2.bool(); // Use the generator once.\n\nlet mut rng1 = base1.fork();\nlet mut rng2 = base2.fork();\n\nprintln!(\"rng1 returns {}\", rng1.u32(..));\nprintln!(\"rng2 returns {}\", rng2.u32(..));\n```","links":{},"attrs":["#[inline]","#[must_use = \"this creates a new instance of `Rng`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13667:25939":{"id":"1:13667:25939","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"5:12452:482","self::pattern":"1:13301:8625"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:13116:6124","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[289,0],"end":[696,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Rng","id":"0:153:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:90:2411","0:91:2484","0:92:2486","0:94:2491","0:96:426","0:97:2497","0:98:755","0:99:771","0:100:2514","0:163:928","0:165:910","0:167:916","0:169:922","0:171:903","0:173:985","0:102:2536","0:104:2467","0:105:2540","0:106:2489","0:108:2550","0:110:2553","0:175:1884","0:177:1866","0:179:1872","0:181:1878","0:183:1860","0:185:1946","0:111:2570","0:113:482"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13632:30788":{"id":"1:13632:30788","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"5:12458:1754","str::slice_mut_unchecked":"1:13633:30789","crate::ops::Index":"1:40057:2858"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13628:29176":{"id":"1:13628:29176","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:135:1872":{"id":"0:135:1872","crate_id":0,"name":"u32","span":{"filename":"src/global_rng.rs","begin":[158,0],"end":[158,61]},"visibility":"public","docs":"Generates a random `u32` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u32>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:157:819":{"id":"0:157:819","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[131,9],"end":[131,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10494:147","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10475:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:113:482":{"id":"0:113:482","crate_id":0,"name":"char","span":{"filename":"src/lib.rs","begin":[642,4],"end":[695,5]},"visibility":"public","docs":"Generates a random `char` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<char>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13685:29434":{"id":"1:13685:29434","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:2570":{"id":"0:48:2570","crate_id":0,"name":"uppercase","span":{"filename":"src/global_rng.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Generates a random `char` in range A-Z.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137:916":{"id":"0:137:916","crate_id":0,"name":"i32","span":{"filename":"src/global_rng.rs","begin":[159,0],"end":[159,61]},"visibility":"public","docs":"Generates a random `i32` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i32>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3085-0:153:2409":{"id":"b:1:3085-0:153:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3058:148","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3087:849"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:3100:1839":{"id":"1:3100:1839","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42643:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:3065:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13647:3182":{"id":"1:13647:3182","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"5:12452:482","self::pattern":"1:13301:8625"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13720:29439":{"id":"1:13720:29439","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:12452:482","self::pattern":"1:13301:8625"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:8631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13738:30619":{"id":"1:13738:30619","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13673:30792":{"id":"1:13673:30792","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:13301:8625","str::split":"1:13664:29425","prim@char":"5:12452:482","`DoubleEndedIterator`":"1:8451:133","str::rsplit_terminator":"1:13676:30793"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44431:6279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:145:903":{"id":"0:145:903","crate_id":0,"name":"i128","span":{"filename":"src/global_rng.rs","begin":[163,0],"end":[163,63]},"visibility":"public","docs":"Generates a random `i128` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i128"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i128>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13736:30617":{"id":"1:13736:30617","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:143:1860":{"id":"0:143:1860","crate_id":0,"name":"u128","span":{"filename":"src/global_rng.rs","begin":[162,0],"end":[162,63]},"visibility":"public","docs":"Generates a random `u128` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u128>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13617:30786":{"id":"1:13617:30786","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13615:30785"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2808-0:153:2409":{"id":"b:1:2808-0:153:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2796:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2806:8499","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2810:25460"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13734:30614":{"id":"1:13734:30614","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151:482":{"id":"0:151:482","crate_id":0,"name":"char","span":{"filename":"src/global_rng.rs","begin":[166,0],"end":[166,63]},"visibility":"public","docs":"Generates a random `char` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<char>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5741:30690":{"id":"4:5741:30690","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13738:30619"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13622:342":{"id":"1:13622:342","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13623:29402","`u8`":"5:12471:1884"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13741:30623":{"id":"1:13741:30623","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1126:37648"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3091-0:153:2409":{"id":"b:1:3091-0:153:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3065:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3061:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3094:141","1:3095:1841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3339:3296-0:153:2409":{"id":"a:1:3339:3296-0:153:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3339:3296","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13641:5738":{"id":"1:13641:5738","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44367:3770","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13650:29436":{"id":"1:13650:29436","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"5:12452:482","self::pattern":"1:13301:8625"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13729:30806":{"id":"1:13729:30806","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:12452:482","self::pattern":"1:13301:8625"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:8631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5739:8511":{"id":"4:5739:8511","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13626:2526":{"id":"1:13626:2526","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42513:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3304:252-0:153:2409":{"id":"a:1:3304:252-0:153:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3304:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:59:755":{"id":"0:59:755","crate_id":0,"name":"f32","span":{"filename":"src/global_rng.rs","begin":[169,0],"end":[171,1]},"visibility":"public","docs":"Generates a random `f32` in range `0..1`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:2467":{"id":"0:36:2467","crate_id":0,"name":"seed","span":{"filename":"src/global_rng.rs","begin":[72,0],"end":[74,1]},"visibility":"public","docs":"Initializes the thread-local generator with the given seed.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["seed",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13639:6145":{"id":"1:13639:6145","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"5:12452:482"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44351:6137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5726:31514":{"id":"4:5726:31514","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:90:2411":{"id":"0:90:2411","crate_id":0,"name":"with_seed","span":{"filename":"src/lib.rs","begin":[293,4],"end":[295,5]},"visibility":"public","docs":"Creates a new random number generator with the initial seed.","links":{},"attrs":["#[inline]","#[must_use =\n\"this creates a new instance of `Rng`; if you want to initialize the thread-local generator, use `fastrand::seed()` instead\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["seed",{"primitive":"u64"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13705:30798":{"id":"1:13705:30798","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:141:922":{"id":"0:141:922","crate_id":0,"name":"i64","span":{"filename":"src/global_rng.rs","begin":[161,0],"end":[161,61]},"visibility":"public","docs":"Generates a random `i64` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i64>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:179:1872":{"id":"0:179:1872","crate_id":0,"name":"u32","span":{"filename":"src/lib.rs","begin":[574,4],"end":[580,5]},"visibility":"public","docs":"Generates a random `u32` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u32>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:714":{"id":"0:160:714","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[131,16],"end":[131,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Rng","id":"0:153:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3081-0:153:2409":{"id":"b:1:3081-0:153:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3058:148","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3055:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3084:3185"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:785:5905":{"id":"4:785:5905","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:13700:30796":{"id":"1:13700:30796","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13301:8625","`DoubleEndedIterator`":"1:8451:133","prim@char":"5:12452:482","str::match_indices":"1:13697:30795"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44549:6282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:8631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183:1860":{"id":"0:183:1860","crate_id":0,"name":"u128","span":{"filename":"src/lib.rs","begin":[590,4],"end":[596,5]},"visibility":"public","docs":"Generates a random `u128` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u128>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3094:141":{"id":"1:3094:141","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3065:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:61:771":{"id":"0:61:771","crate_id":0,"name":"f64","span":{"filename":"src/global_rng.rs","begin":[174,0],"end":[176,1]},"visibility":"public","docs":"Generates a random `f64` in range `0..1`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21":{"id":"0:21","crate_id":0,"name":null,"span":{"filename":"src/global_rng.rs","begin":[22,0],"end":[28,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Rng","id":"0:153:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:22:1200"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:99:771":{"id":"0:99:771","crate_id":0,"name":"f64","span":{"filename":"src/lib.rs","begin":[375,4],"end":[379,5]},"visibility":"public","docs":"Generates a random `f64` in range `0..1`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13637:29424":{"id":"1:13637:29424","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13636:29423"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3923:1854":{"id":"1:3923:1854","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:40226:6207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13642:25934":{"id":"1:13642:25934","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13643:25959"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44655:6286","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13710:30801":{"id":"1:13710:30801","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13664:29425":{"id":"1:13664:29425","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:13301:8625","`DoubleEndedIterator`":"1:8451:133","prim@char":"5:12452:482","str::split_whitespace":"1:13642:25934","str::rsplit":"1:13670:29428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44381:5809","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13732:30807":{"id":"1:13732:30807","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:13262:140","`FromStr`":"1:13261:8310"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42643:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:13261:8310","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13261:8310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13634:29419":{"id":"1:13634:29419","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13636:29423","str::split_at_mut":"1:13635:29420"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133:910":{"id":"0:133:910","crate_id":0,"name":"i16","span":{"filename":"src/global_rng.rs","begin":[157,0],"end":[157,61]},"visibility":"public","docs":"Generates a random `i16` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"i16"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<i16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2779-0:153:2409":{"id":"b:1:2779-0:153:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32744:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2773:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2781:25456"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:20:60":{"id":"0:20:60","crate_id":0,"name":"default","span":{"filename":"src/global_rng.rs","begin":[17,4],"end":[19,5]},"visibility":"default","docs":"Initialize the `Rng` from the system's random number generator.\n\nThis is equivalent to [`Rng::new()`].","links":{"`Rng::new()`":"0:22:1200"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Rng","id":"0:153:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:783-0:153:2409":{"id":"b:4:783-0:153:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2796:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:779:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rng","id":"0:153:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:785:5905","4:786:25461","4:787:25462"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13614:30784":{"id":"1:13614:30784","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:2540":{"id":"0:105:2540","crate_id":0,"name":"get_seed","span":{"filename":"src/lib.rs","begin":[499,4],"end":[501,5]},"visibility":"public","docs":"Gives back **current** seed that is being held by this generator.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13624:3095":{"id":"1:13624:3095","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42513:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13694:30794":{"id":"1:13694:30794","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:13301:8625","`DoubleEndedIterator`":"1:8451:133","prim@char":"5:12452:482","str::matches":"1:13691:2786"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44603:6284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:8631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:426":{"id":"0:96:426","crate_id":0,"name":"bool","span":{"filename":"src/lib.rs","begin":[342,4],"end":[344,5]},"visibility":"public","docs":"Generates a random `bool`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5723:2714":{"id":"4:5723:2714","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:755":{"id":"0:98:755","crate_id":0,"name":"f32","span":{"filename":"src/lib.rs","begin":[368,4],"end":[372,5]},"visibility":"public","docs":"Generates a random `f32` in range `0..1`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:2540":{"id":"0:38:2540","crate_id":0,"name":"get_seed","span":{"filename":"src/global_rng.rs","begin":[78,0],"end":[80,1]},"visibility":"public","docs":"Gives back **current** seed that is being held by the thread-local generator.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:110:2553":{"id":"0:110:2553","crate_id":0,"name":"fill","span":{"filename":"src/lib.rs","begin":[536,4],"end":[556,5]},"visibility":"public","docs":"Fill a byte slice with random data.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["slice",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:1866":{"id":"0:131:1866","crate_id":0,"name":"u16","span":{"filename":"src/global_rng.rs","begin":[156,0],"end":[156,61]},"visibility":"public","docs":"Generates a random `u16` in the given range.\n\nPanics if the range is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<u16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3674:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13744:8522":{"id":"1:13744:8522","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5125:8522"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44689:3348","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13670:29428":{"id":"1:13670:29428","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:13301:8625","`DoubleEndedIterator`":"1:8451:133","prim@char":"5:12452:482","str::split":"1:13664:29425"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44399:6127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:8631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:11319:34697":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:6623:7575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:43216:3278":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:10564:3764":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:12537:4081":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:5658:7421":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:11424:14061":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:553:6879":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"5:8559:5809":{"crate_id":5,"path":["std","io","Split"],"kind":"struct"},"17:13006:4128":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:3854:3794":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:4953:2980":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:42643:229":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"6:1727:7039":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:5482:7353":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:3677:14059":{"crate_id":5,"path":["std","io","Seek"],"kind":"trait"},"1:26472:273":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"11:2121:3007":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:40860:3355":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:5341:7280":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"6:1675:7017":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:8112:5751":{"crate_id":5,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:9425:3550":{"crate_id":5,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"4:3095:32249":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:13921:4236":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:2206:8492":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:46927:6387":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:959:3000":{"crate_id":5,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"11:830:2999":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:22045:26254":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:1625:6987":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:47603:6440":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:6652:7588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:22047:26252":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:11248:5848":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:6827:14193":{"crate_id":5,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"18:573:3714":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:16377:4856":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:14796:4418":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:8489:3759":{"crate_id":5,"path":["std","io","util","Empty"],"kind":"struct"},"17:14807:4420":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:46529:6344":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:16656:4929":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"5:8839:14175":{"crate_id":5,"path":["std","path","Component"],"kind":"enum"},"17:15641:4653":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:7085:3644":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"5:4680:14131":{"crate_id":5,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:12465:750":{"crate_id":5,"path":["std","f128"],"kind":"primitive"},"6:5603:7394":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:8572:5813":{"crate_id":5,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:12280:4034":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:6917:7678":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:6064:5025":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:8255:7845":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:15812:4689":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:3513:127":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"18:548:156":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"14:202:13990":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:12550:4083":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:7508:5317":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:32713:5373":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"16:4873:5058":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:6738:34692":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:2508:14056":{"crate_id":5,"path":["std","fs","read_dir"],"kind":"function"},"16:6098:5085":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:14832:4423":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:23543:6193":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"4:5526:3579":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:31145:3286":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:4589:8523":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:3052:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"5:9433:3533":{"crate_id":5,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:16145:4795":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"4:6284:3533":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:7463:7748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:3042:3532":{"crate_id":5,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:10938:34696":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:6443:7480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:7946:8549":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"5:9447:3556":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"5:3352:5680":{"crate_id":5,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:34037:2841":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:13943:6154":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:43519:3286":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"6:1584:6955":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:4221:14107":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:7563:7809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:5562:7380":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:5670:7428":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:8546:5470":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"12:0:2813":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:11129:3565":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:42683:2995":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"16:7883:5132":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:47638:6443":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:7212:5273":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:4937:7135":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:47740:6454":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:234:229":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:12467:910":{"crate_id":5,"path":["std","i16"],"kind":"primitive"},"17:13983:4244":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:46500:6342":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:41115:3638":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"4:3296:2995":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:6402:3545":{"crate_id":5,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:6159:5091":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:16613:4220":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"4:7777:5932":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:7521:5320":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"4:5571:13984":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"6:6823:7641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:41500:5807":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:3569:3533":{"crate_id":5,"path":["std","io","Guard"],"kind":"struct"},"17:12983:21385":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"4:7620:5926":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:6885:6083":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:14031:28848":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:15905:4714":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:11563:3568":{"crate_id":5,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"1:41212:6221":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:13926:6151":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"4:4998:220":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"1:23430:6185":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:46363:6330":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:6666:7590":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:10630:3766":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:5088:7203":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:11833:7882":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:938:2902":{"crate_id":5,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:1117:3010":{"crate_id":5,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"18:515:3711":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:12673:4089":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"9:328:6823":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:13028:4132":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"6:1696:7027":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:8179:5413":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:40226:6207":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"6:5395:7301":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:11434:243":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:8643:5813":{"crate_id":5,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:8268:5757":{"crate_id":5,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:546:4972":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:11291:34699":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"11:2539:6817":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:15679:4658":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:22573:6160":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"9:53:7995":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:5865:223":{"crate_id":5,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:15829:4696":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:5357:7282":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:13222:21253":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:15010:4457":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:16739:4952":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"4:1626:213":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:47143:6395":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"1:8451:133":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:15989:4738":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:3381:2856":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:22008:3168":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:10516:21252":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:42917:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:46838:6368":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:11910:5689":{"crate_id":5,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:22880:13789":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"16:2570:4999":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:11851:3984":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:5428:7317":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:45388:6319":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"7:79:20160":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:3126:20319":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:14375:4339":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"18:623:34704":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:11539:3957":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:22904:14061":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"5:5616:5703":{"crate_id":5,"path":["std","process","Child"],"kind":"struct"},"17:14072:4266":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:6881:5728":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:4161:2546":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:5426:6074":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"9:0:2810":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:4163:14103":{"crate_id":5,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:46690:6360":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:42699:2546":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"5:4225:14108":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"4:4528:3533":{"crate_id":4,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:8585:5474":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"18:754:3763":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"9:480:20165":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:12053:5741":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:45305:222":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:42530:176":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:22546:14061":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:15160:4478":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"11:1158:3010":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:10534:3911":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:4983:5062":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:42473:6110":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:15024:4458":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:9548:3128":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"15:394:20280":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:16494:4192":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:14773:4417":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"4:7706:2993":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:2858:204":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:4120:5048":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"18:698:3748":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"4:7648:2546":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:41365:6093":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"18:689:3747":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:13169:4138":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"16:6389:5121":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"11:671:2995":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:2920:5015":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:11016:3929":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:954:2999":{"crate_id":5,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:5069:7202":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:6740:7614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:45398:183":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:15602:4644":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"18:521:25448":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:40936:3349":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:42547:2996":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"6:1507:6908":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"4:39:2899":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:46965:6389":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:7765:5353":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:31124:2893":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:2480:8467":{"crate_id":5,"path":["std","fs","metadata"],"kind":"function"},"17:14933:4437":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:34383:2842":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:44399:6127":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:491:6839":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"5:1099:3008":{"crate_id":5,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:11581:2995":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:2900:5014":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"3:0:2807":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"17:13014:4130":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"6:5635:7414":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"4:4207:2996":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:46754:6364":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:13515:21256":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:40057:2858":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:41326:6229":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:8014:5036":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:4792:7045":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:881:8311":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:13491:4160":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:8875:8556":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:10539:3277":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"17:5131:3800":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"11:1674:3518":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:6144:21177":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:12711:4095":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:46462:6340":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:46515:6343":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:10549:3281":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:2530:4997":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:6376:6081":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:31130:3155":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"5:11085:5850":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:7454:7745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"4:1486:100":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"5:12453:1906":{"crate_id":5,"path":["std","unit"],"kind":"primitive"},"17:11386:21265":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:3764:2865":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:32834:117":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:13757:4206":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:40899:3356":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:4832:2971":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:44990:6310":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:23012:14061":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:10778:3913":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"1:10547:3280":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:42451:5692":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:11037:5824":{"crate_id":5,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"1:10168:26156":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:40061:2860":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"5:12451:1196":{"crate_id":5,"path":["std","never"],"kind":"primitive"},"17:16632:4924":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:12840:4108":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:13385:4153":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:6631:7576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:4899:14153":{"crate_id":5,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:12860:4113":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"4:1576:2997":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"5:8010:14061":{"crate_id":5,"path":["std","sealed","Sealed"],"kind":"trait"},"1:44298:6271":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:472:3775":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:11173:34701":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:42305:8565":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:41335:6091":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:6748:7615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"16:2796:5009":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"4:6560:14001":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"17:16198:4813":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:586:6896":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:32745:249":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:39398:2852":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:3496:14086":{"crate_id":5,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:2467:4989":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:8358:5760":{"crate_id":5,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:10115:21239":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:10950:3647":{"crate_id":1,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"1:3531:2854":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"4:6579:14003":{"crate_id":4,"path":["alloc","task","LocalWake"],"kind":"trait"},"19:0:1315":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:13322:21255":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:679:5657":{"crate_id":5,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:8635:5820":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:7168:5261":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"4:5425:3611":{"crate_id":4,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"16:7044:5027":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:23368:25647":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:8137:5037":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:8008:7831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:5301:7269":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:16520:4880":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:1220:3780":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:3313:33618":{"crate_id":5,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:8866:153":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:5186:7211":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:6302:5113":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:5804:7639":{"crate_id":5,"path":["std","process","exit"],"kind":"function"},"17:10296:21245":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:23576:6196":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:11553:3958":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:13316:3750":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:47270:6429":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:5285:5702":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:5172:5067":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:11075:34702":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:9256:14197":{"crate_id":5,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:6713:5192":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:5666:5710":{"crate_id":5,"path":["std","process","ChildStderr"],"kind":"struct"},"14:214:5569":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:23417:6184":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:9987:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:3310:33621":{"crate_id":5,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:9460:165":{"crate_id":5,"path":["std","time","Instant"],"kind":"struct"},"16:7542:5322":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:45111:7918":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"4:7765:5930":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"18:706:3750":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:10167:21241":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:2105:685":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"5:5986:5715":{"crate_id":5,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:5271:7253":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:9229:5853":{"crate_id":5,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"4:1523:2995":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:5230:7234":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:41044:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:5387:7296":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:22798:13787":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:46853:6369":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:12962:21384":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:11750:6126":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:16684:4936":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"5:10774:5681":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"6:5311:7272":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:12424:6134":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"16:2840:5011":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:46416:6337":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:15418:4586":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:13966:6226":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"18:581:3168":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:13692:4183":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:2227:3783":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"4:4574:3602":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:8077:14009":{"crate_id":5,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"14:0:2814":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:912:2997":{"crate_id":5,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:41316:6228":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:3834:5047":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:22273:13702":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:6262:6080":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:4674:2985":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:45123:7921":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:22:834":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"5:5114:14151":{"crate_id":5,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"6:8273:7848":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:3792:115":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"11:1140:5577":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:13818:4220":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"4:1585:2998":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:7938:5401":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:5282:7261":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:14299:4325":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"16:7462:5310":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:45173:3021":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"11:1049:3009":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:6691:7598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"6:7308:7685":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:12371:4046":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:11958:3992":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:10274:21244":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"7:0:1936":{"crate_id":7,"path":["unwind"],"kind":"module"},"4:3363:5583":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:2660:5003":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:663:5656":{"crate_id":5,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:42635:3080":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"16:6462:21180":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:5265:7250":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:12886:4114":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"16:2684:5004":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:46331:6326":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:12848:8632":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:45119:7920":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:8498:5799":{"crate_id":5,"path":["std","io","util","Sink"],"kind":"struct"},"5:3448:5684":{"crate_id":5,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:38709:2849":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:6890:5021":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:5682:7433":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:16507:4206":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:44288:6270":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:44216:6265":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:11401:3942":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:12424:14011":{"crate_id":5,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"11:2551:34656":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:12225:4026":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:45131:6531":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:22918:13790":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:15896:4713":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:7192:21184":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:14220:4291":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:4881:7108":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:6239:5100":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:45437:6321":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:11358:21264":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:13610:4172":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:1647:5582":{"crate_id":5,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"14:220:5571":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:13854:4225":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:8753:5837":{"crate_id":5,"path":["std","path","Prefix"],"kind":"enum"},"6:5477:7351":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:8298:5427":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:13909:4233":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"4:6758:3579":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:2880:5013":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:15315:4500":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:12066:4010":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:6564:7542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:11878:6130":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:8233:21189":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:5689:5078":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:9212:5713":{"crate_id":5,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:14627:4376":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:47702:6452":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:9139:5847":{"crate_id":5,"path":["std","process","CommandArgs"],"kind":"struct"},"5:9344:5860":{"crate_id":5,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:15410:4583":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"4:7113:2907":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"11:842:3003":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:47193:6397":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:44635:5812":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:43104:6119":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:22585:26255":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:10729:3769":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:11114:3931":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:5629:7411":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"6:5044:7189":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:42491:6112":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:5507:7361":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"5:8049:3075":{"crate_id":5,"path":["std","thread","Thread"],"kind":"struct"},"16:5224:5069":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:8320:21190":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:7401:34684":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:14708:4387":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:473:6833":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:7016:5232":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:44813:6297":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:16036:4751":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:15439:4594":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:23026:13783":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:44830:6298":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:7386:5296":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:3028:14061":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:5319:7275":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:13537:122":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"4:5142:3533":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:47623:6442":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:9397:6529":{"crate_id":5,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:7969:5405":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"4:7560:2902":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:14533:4053":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:7577:7818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:15351:4531":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:9442:238":{"crate_id":5,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:6588:5162":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"5:1907:5666":{"crate_id":5,"path":["std","env","SplitPaths"],"kind":"struct"},"1:43754:6253":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"17:13082:3933":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"16:7471:5313":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:507:3521":{"crate_id":5,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:13733:4192":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:10368:21247":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:16209:4814":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:2656:686":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:6173:5094":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:2521:14058":{"crate_id":5,"path":["std","fs","exists"],"kind":"function"},"17:317:3772":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:8091:14010":{"crate_id":5,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:8629:14130":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:15586:4641":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:7801:33117":{"crate_id":5,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"5:2482:14046":{"crate_id":5,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:10408:5875":{"crate_id":5,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:3542:2722":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:6902:7667":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:3055:166":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"16:4956:5061":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"11:430:34665":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:6852:5214":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:6843:5213":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"4:1414:3010":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:47437:6432":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:3987:3818":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"17:16264:4830":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"11:2301:3007":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"5:4902:14131":{"crate_id":5,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:41087:3770":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:15753:4679":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:15557:4635":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:11592:3895":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:3737:2861":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:10963:5753":{"crate_id":5,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"6:5541:7368":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:8363:5761":{"crate_id":5,"path":["std","io","error","Custom"],"kind":"struct"},"6:6758:7622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"17:11026:34700":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:47495:6434":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:578:6892":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:5366:7286":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"5:9751:3563":{"crate_id":5,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"4:4483:271":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:8711:5486":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"5:5105:14150":{"crate_id":5,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"4:1122:3579":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:7305:5288":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:7397:3558":{"crate_id":5,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"5:1930:5667":{"crate_id":5,"path":["std","env","Args"],"kind":"struct"},"1:44279:6269":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:12787:4101":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:44340:6276":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:8649:5822":{"crate_id":5,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"4:1538:2996":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:11717:6253":{"crate_id":5,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"4:1400:3008":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:8058:5409":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:22932:8478":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:44357:6277":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:11457:3948":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"1:23192:6163":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"13:110:34667":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:2770:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:45356:6314":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:16668:4931":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"6:8319:7860":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:2773:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"5:380:3086":{"crate_id":5,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:4542:6070":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:14358:4336":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:5462:7342":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:12475:1860":{"crate_id":5,"path":["std","u128"],"kind":"primitive"},"17:12249:4031":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"11:1064:20244":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:22096:13705":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:43717:3013":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:47098:6394":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"8:0:2809":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:7724:3200":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:40149:217":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:12463:755":{"crate_id":5,"path":["std","f32"],"kind":"primitive"},"5:4333:14126":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:11606:3932":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:13290:3870":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:45107:7917":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:5051:7191":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:2748:5007":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:5379:5074":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:16595:4210":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:15475:4623":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:5195:14158":{"crate_id":5,"path":["std","panic","always_abort"],"kind":"function"},"16:0:2816":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:44977:6306":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:6716:7610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"4:7590:31824":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:10696:3768":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:8553:3770":{"crate_id":5,"path":["std","io","Bytes"],"kind":"struct"},"5:11068:32472":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:15090:4465":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:11678:3966":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:3308:4986":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:11465:3949":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"17:16362:4855":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"18:481:3712":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:13945:4240":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:12920:4117":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:2950:5016":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"18:538:3721":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:3539:5685":{"crate_id":5,"path":["std","io","util","Repeat"],"kind":"struct"},"1:42251:173":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:46669:6359":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:12359:4045":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:3916:5690":{"crate_id":5,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:4869:7105":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:6256:5105":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:41710:6098":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"5:11782:5732":{"crate_id":5,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:14963:4443":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:44664:6287":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:13838:4221":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:16728:4947":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:14507:4357":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:6876:5217":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:6419:7464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:7316:7690":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:15064:4463":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:4842:7082":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:11363:7875":{"crate_id":5,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:9768:130":{"crate_id":5,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"16:8028:5407":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:11272:32495":{"crate_id":5,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:990:3005":{"crate_id":5,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:44531:6281":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:13301:8625":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"5:0:1746":{"crate_id":5,"path":["std"],"kind":"module"},"5:7906:5742":{"crate_id":5,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:12583:4085":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:564:6884":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:4608:8524":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"5:4997:3534":{"crate_id":5,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"11:0:2812":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:7487:7759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:2328:5673":{"crate_id":5,"path":["std","fs","DirEntry"],"kind":"struct"},"1:40169:219":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"5:10974:5867":{"crate_id":5,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"11:854:3004":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"4:3308:31834":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:7080:7894":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"4:888:3582":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:6866:21182":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:16750:4953":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"4:1615:3001":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:5198:5068":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:41510:6095":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:4970:7149":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:14335:4331":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:22263:14061":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:996:3006":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:11053:5711":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"5:11147:3567":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:10993:143":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"9:236:6253":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"5:3659:3275":{"crate_id":5,"path":["std","io","Write"],"kind":"trait"},"1:41060:8546":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:23598:6198":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:14257:3652":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"5:1630:2900":{"crate_id":5,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"18:491:3713":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:3602:5816":{"crate_id":5,"path":["std","io","Read"],"kind":"trait"},"6:5520:7362":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"5:8889:2995":{"crate_id":5,"path":["std","path","Iter"],"kind":"struct"},"1:41524:6096":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:5325:7276":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:14886:4430":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:4914:7127":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:10541:3278":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:5348:5073":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:12191:4022":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:3356:2836":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:43957:7912":{"crate_id":1,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"5:4171:14104":{"crate_id":5,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:42806:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:7980:5034":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:15864:4705":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:44680:3349":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:5736:5711":{"crate_id":5,"path":["std","process","Stdio"],"kind":"struct"},"6:5007:7170":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:3110:5041":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:16311:4844":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:3378:2855":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"5:1085:3007":{"crate_id":5,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:43725:6251":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"11:2559:6820":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:8196:3851":{"crate_id":5,"path":["std","fs","Metadata"],"kind":"struct"},"16:6408:5128":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:46739:6363":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:4311:33363":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:13062:6142":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:14975:4445":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:10928:3928":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:4890:7113":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:538:6871":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:38654:2848":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:42732:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:7058:5236":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:11864:3985":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"4:7883:2900":{"crate_id":4,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:5570:7382":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"4:4132:2902":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:11823:6128":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:2083:201":{"crate_id":5,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:0:2817":{"crate_id":17,"path":["object"],"kind":"module"},"16:5742:3912":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:12347:4044":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:2670:8478":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"17:15549:4634":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:23620:6200":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"4:3865:5908":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:23521:6191":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"17:10663:3767":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"15:327:7992":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:9310:118":{"crate_id":5,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"9:422:20168":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:13451:4158":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:12851:4112":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:12736:4097":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"11:102:6810":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:532:6868":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:6473:7490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:45008:6148":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"11:2137:3008":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:2450:4987":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:12204:4023":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:5195:3340":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:23276:6165":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:5224:7231":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:44503:6130":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:13157:4137":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:4962:2981":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:3777:25965":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"11:2545:6818":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:11280:6531":{"crate_id":5,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"16:7959:5404":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"18:608:3731":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:11232:21267":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:10861:142":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"6:1632:6991":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:6205:21178":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:9292:5854":{"crate_id":5,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:47592:6439":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:6953:5224":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:43030:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:9271:14199":{"crate_id":5,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"5:9739:142":{"crate_id":5,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"16:8723:141":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:7282:5287":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:1500:6905":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"11:1880:2995":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:8736:14162":{"crate_id":5,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:3526:2853":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:11605:2996":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:6790:7632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:4929:5060":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:1703:7030":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"5:6386:3542":{"crate_id":5,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:22842:13788":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:1711:7034":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:8296:7854":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:7341:7708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:6462:7482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:44206:6264":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:22275:6161":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"5:967:3002":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:4404:5053":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:3075:229":{"crate_id":5,"path":["std","io","error","Result"],"kind":"type_alias"},"17:11733:21286":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"15:288:20270":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"18:643:3714":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:11080:3648":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"5:12474:1878":{"crate_id":5,"path":["std","u64"],"kind":"primitive"},"17:10141:21240":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:6526:7514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:14750:4408":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:4906:2979":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:46483:6341":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:47466:6433":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:13307:6115":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:14872:4427":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:4947:7141":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"14:187:20258":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:13592:4169":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:41273:6082":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"4:3850:5759":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:11906:6132":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:11971:5691":{"crate_id":5,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:16701:4938":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:47649:6444":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:10442:21250":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:2640:5002":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"14:40:4207":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:7428:3559":{"crate_id":5,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:6746:3553":{"crate_id":5,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:5807:14180":{"crate_id":5,"path":["std","process","Termination"],"kind":"trait"},"5:11887:3570":{"crate_id":5,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:10280:6242":{"crate_id":5,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"6:5165:7209":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:4152:5049":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:41097:8532":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"11:1105:5576":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:10246:21243":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"4:211:3578":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:9198:5852":{"crate_id":5,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:2415:20289":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:2208:8493":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"17:16132:4789":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:46800:6366":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"11:1884:2546":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:8669:5373":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:14294:155":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:16179:4807":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:10657:5847":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"4:3303:5581":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:9581:5667":{"crate_id":5,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:45298:154":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"17:3503:3791":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:11566:3959":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:46380:6331":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:3674:214":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:15655:4656":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:39977:2868":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:12319:4041":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:3014:20317":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:10487:21251":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"1:23609:6199":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"5:8507:5688":{"crate_id":5,"path":["std","io","IoSlice"],"kind":"struct"},"1:45127:7922":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:5015:2983":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:1514:6910":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:44308:6272":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:6227:223":{"crate_id":5,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:5449:5076":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:40871:25628":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:16822:4237":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:41748:3645":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:30862:3325":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"16:8598:5477":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:8178:2969":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"4:4498:3602":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:31156:25651":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"4:1784:3579":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"4:7540:2546":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:43209:3276":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:5405:7307":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:4896:7115":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:32802:3103":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:44381:5809":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"5:12478:1447":{"crate_id":5,"path":["std","reference"],"kind":"primitive"},"4:4162:3579":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:6706:5722":{"crate_id":5,"path":["std","sync","once","Once"],"kind":"struct"},"4:3085:32256":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:12135:4017":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:11281:3934":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:10791:3012":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:15760:4680":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:9169:5849":{"crate_id":5,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:10530:122":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"6:6449:7481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:5494:7356":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"5:10817:3075":{"crate_id":5,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"5:439:188":{"crate_id":5,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:0:574":{"crate_id":1,"path":["core"],"kind":"module"},"17:14640:4377":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:3339:3296":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"6:8290:7853":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:15050:4460":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:4495:5694":{"crate_id":5,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:7743:34091":{"crate_id":5,"path":["std","panicking","Hook"],"kind":"enum"},"1:33698:2835":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:43469:7911":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"4:1369:3007":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"18:598:34707":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:7586:7821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:4875:7106":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:14917:4436":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:15148:4474":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"14:160:5564":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:16714:4944":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:11475:21267":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"17:15997:4739":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:12687:4093":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:485:6838":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:12122:4016":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:4810:5056":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:11785:6127":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"4:0:315":{"crate_id":4,"path":["alloc"],"kind":"module"},"16:7075:21183":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:11788:3978":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:46301:6322":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:14652:4378":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:41351:3735":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:16642:4925":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:14152:4289":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"0:0:2579":{"crate_id":0,"path":["fastrand"],"kind":"module"},"1:8913:26155":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"5:2793:5678":{"crate_id":5,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:4028:2902":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"16:7030:5234":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"4:7640:2546":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:2796:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"17:13547:4165":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"17:12570:4084":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:9511:3127":{"crate_id":1,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"1:44673:6144":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:16832:4242":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:3185:5940":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:24072:239":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:13002:6138":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:6680:5187":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"17:14127:4285":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"5:12403:5899":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"5:2648:5676":{"crate_id":5,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:11831:3957":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:5139:7207":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:12931:4119":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:6998:5225":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:40928:3348":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:386:3087":{"crate_id":5,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:14327:4329":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:14547:4365":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:5648:7420":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:8617:5692":{"crate_id":5,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:7839:33112":{"crate_id":5,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"5:12469:922":{"crate_id":5,"path":["std","i64"],"kind":"primitive"},"17:11878:3932":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:14019:4253":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:33970:2837":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"0:153:2409":{"crate_id":0,"path":["fastrand","Rng"],"kind":"struct"},"16:3889:3810":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:6672:7593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:3133:126":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:46316:6325":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:10565:33961":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:14438:4350":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"4:7814:5933":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:4766:5055":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:13554:4166":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"1:11224:3650":{"crate_id":1,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"5:12027:5896":{"crate_id":5,"path":["std","alloc","System"],"kind":"struct"},"17:12906:4116":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:5488:7354":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:7074:6090":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"16:2590:5000":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:8223:5755":{"crate_id":5,"path":["std","fs","Permissions"],"kind":"struct"},"18:113:25438":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"11:1085:34655":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:42539:2995":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"11:873:3005":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:11065:3930":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:22030:26258":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:6700:7604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"4:3091:32250":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:8546:5807":{"crate_id":5,"path":["std","io","Take"],"kind":"struct"},"16:6942:5223":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:10494:147":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"6:559:6882":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:8895:5845":{"crate_id":5,"path":["std","path","Ancestors"],"kind":"struct"},"6:5533:7363":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:5641:7417":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:47687:6451":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:13116:6124":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:12456:341":{"crate_id":5,"path":["std","array"],"kind":"primitive"},"1:3049:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:13327:8630":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"4:2161:5908":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:7604:7824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:44367:3770":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:15286:4480":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:32803:3300":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:1339:3782":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:8422:3102":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:45323:210":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"5:3851:14099":{"crate_id":5,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:13570:21257":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:1619:2995":{"crate_id":5,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:10218:21242":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:41031:3346":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:8824:5840":{"crate_id":5,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:47664:6445":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:11720:3970":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:14405:4342":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:47717:6453":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:13261:8310":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"4:6158:3609":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"5:8694:5696":{"crate_id":5,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:2437:3790":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:3058:148":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"5:12471:1884":{"crate_id":5,"path":["std","u8"],"kind":"primitive"},"17:14573:4368":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:46821:6367":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:6770:7624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:11712:6125":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:1898:8430":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"18:507:3714":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:5367:444":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"4:1249:31838":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:8365:8558":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:8043:34683":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:46587:6355":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:43557:3287":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"5:7180:14200":{"crate_id":5,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:23410:7898":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"4:3084:5905":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:6269:5106":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:14312:4327":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"5:9452:3557":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"6:8330:7861":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:44763:8645":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:5019:7176":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"11:1580:5578":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:884:193":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"6:1597:6962":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:5543:132":{"crate_id":5,"path":["std","path","Display"],"kind":"struct"},"4:7548:5924":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:8565:5473":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:45364:6316":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:10793:3917":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"17:12392:4048":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:10543:3279":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:6731:5202":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:2215:5936":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"18:680:3745":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:22155:13704":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:15785:4685":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:12260:21358":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"6:5196:7218":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:14612:4373":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:41264:6226":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:22706:13703":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:44967:6302":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:5179:7210":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:15689:4659":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:3687:14079":{"crate_id":5,"path":["std","io","BufRead"],"kind":"trait"},"17:12306:4038":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"5:12238:3576":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:16399:4862":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:7159:5260":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:9182:5850":{"crate_id":5,"path":["std","process","ExitCode"],"kind":"struct"},"17:15540:4633":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:22551:13707":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"5:12462:752":{"crate_id":5,"path":["std","f16"],"kind":"primitive"},"1:41303:6089":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:506:3777":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:3299:120":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:10796:3014":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:11673:6124":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:10958:7873":{"crate_id":5,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:43442:7902":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:6749:4979":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:322:3773":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:15836:4697":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:4566:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:8402:149":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:1667:7016":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:8503:5465":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:41203:6220":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:3495:2866":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:6708:7607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"16:5113:5065":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:3304:252":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"16:8528:5468":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"4:1888:2900":{"crate_id":4,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"5:4702:14132":{"crate_id":5,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:42564:3125":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"6:4984:7157":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:7416:5299":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:8879:5697":{"crate_id":5,"path":["std","path","Components"],"kind":"struct"},"1:44698:3347":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:43970:7913":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"11:708:3000":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:6824:5724":{"crate_id":5,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:3551:145":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:9156:5848":{"crate_id":5,"path":["std","process","ExitStatus"],"kind":"struct"},"1:45315:230":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"16:2435:20316":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:0:1021":{"crate_id":6,"path":["libc"],"kind":"module"},"5:8026:3076":{"crate_id":5,"path":["std","thread","Builder"],"kind":"struct"},"1:3029:2823":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:11952:3991":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:1635:5580":{"crate_id":5,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:6521:7513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:2406:3787":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:6188:5096":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:2966:5017":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:1657:7010":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:7539:7799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"18:651:3714":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:2013:14042":{"crate_id":5,"path":["std","error","Indented"],"kind":"struct"},"1:4753:2698":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:13266:21254":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"5:11788:5895":{"crate_id":5,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:10031:21237":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:41739:5685":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:40920:3347":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:7448:7743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:12470:903":{"crate_id":5,"path":["std","i128"],"kind":"primitive"},"5:5879:5712":{"crate_id":5,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:14416:4343":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:5316:5702":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:575:3070":{"crate_id":5,"path":["std","thread","Packet"],"kind":"struct"},"16:4844:5057":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:12462:8490":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:10823:3774":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:3758:2863":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:10394:21248":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:4957:7144":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"4:1385:3009":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:4816:7062":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"4:1554:2546":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:42691:2996":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:46722:6362":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:523:6862":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:10803:3770":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"4:7089:2906":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:32743:240":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"5:5630:5708":{"crate_id":5,"path":["std","process","ChildStdin"],"kind":"struct"},"1:23383:25638":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"5:1491:159":{"crate_id":5,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:16218:4816":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:46608:6356":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:11757:21287":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"4:7214:270":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"1:2672:8479":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"16:2486:4995":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:5060:5063":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:155:3510":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"4:3329:5582":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:11432:21266":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:15106:4467":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:11630:5809":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"5:4362:14129":{"crate_id":5,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:16008:4743":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:5450:7333":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:32734:6204":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"16:6625:5165":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:2894:198":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"16:7578:5865":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:16084:4788":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:7332:7702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:10474:14182":{"crate_id":5,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"6:5217:7230":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:11163:3932":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:6952:236":{"crate_id":5,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:4464:3533":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:46948:6388":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:44549:6282":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"11:835:3002":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:11777:3976":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"5:9496:3018":{"crate_id":5,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:14483:4356":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:6723:7611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:12056:4009":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:14560:4366":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:15136:4119":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:8869:3360":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:12976:4123":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:4827:7731":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"6:5381:7293":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:13871:4227":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:570:6887":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"7:32:20153":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"4:3799:3579":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:16341:4852":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:4921:7131":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:6638:7577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:22018:26258":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"11:434:34661":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:9364:5865":{"crate_id":5,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:7391:7736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:44178:6260":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"4:7789:3610":{"crate_id":4,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:3548:144":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:7750:8546":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:884:102":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:4825:7729":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:32667:2822":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"16:7424:21185":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:14346:4334":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:6185:3533":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:5417:5075":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:3752:150":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:12992:4125":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:13635:4173":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:15739:4676":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:11527:3956":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:7495:33364":{"crate_id":5,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:3144:141":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:42708:199":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:11630:3963":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:40074:216":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:41075:6214":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:13205:4141":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:2554:2746":{"crate_id":5,"path":["std","io"],"kind":"module"},"17:16187:4808":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:11822:5740":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:12458:1754":{"crate_id":5,"path":["std","str"],"kind":"primitive"},"16:6984:5039":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:6765:7623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"11:1920:5583":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:40189:2406":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"16:5144:5066":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:4823:224":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"5:1626:2902":{"crate_id":5,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:23139:6162":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:12776:4100":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:5468:996":{"crate_id":1,"path":["core","iter"],"kind":"module"},"16:7358:5029":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:12163:4019":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:5255:7244":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:5757:5079":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:12472:1866":{"crate_id":5,"path":["std","u16"],"kind":"primitive"},"6:8249:7844":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"4:3267:101":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:6914:5221":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:9323:32488":{"crate_id":5,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:23462:14061":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:23054:13784":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"5:7335:33110":{"crate_id":5,"path":["std","sys","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:32720:6203":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"5:4149:14102":{"crate_id":5,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:40909:3357":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:44878:6300":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:2704:5005":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"11:1900:5580":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:1563:6941":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:14214:118":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:44196:6263":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:4349:14128":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:7548:7802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:5305:3802":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"16:6421:4974":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:6731:7612":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:40830:6209":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:8906:5846":{"crate_id":5,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:16323:4846":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:12941:4120":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:1641:5581":{"crate_id":5,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:5288:7264":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:0:516":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:41016:3352":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"5:6600:189":{"crate_id":5,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"11:2380:2995":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"16:3141:3805":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:11902:3989":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:11309:3935":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:8727:5825":{"crate_id":5,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"4:7123:2908":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"4:2347:32182":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"11:2566:2898":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:15963:4732":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:34104:2839":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:682:5659":{"crate_id":5,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:6337:5115":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:15953:4729":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:12468:916":{"crate_id":5,"path":["std","i32"],"kind":"primitive"},"1:8369:8557":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:44127:6259":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:2724:5006":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:3668:33853":{"crate_id":5,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:3919:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:23510:6190":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:40013:2867":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:5249:7242":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:9206:2546":{"crate_id":5,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:34238:2840":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:8578:5815":{"crate_id":5,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:7259:5286":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"11:881:3006":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:15769:4681":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:46348:6329":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:10476:3275":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:45301:167":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:4984:2982":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:10535:132":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"5:10777:5683":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"9:390:20167":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:2863:138":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"5:8201:5752":{"crate_id":5,"path":["std","fs","ReadDir"],"kind":"struct"},"16:7495:5314":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:10771:5679":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:10756:160":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"16:4902:5059":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:15981:4736":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:7431:7738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:15876:4706":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:4119:14100":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"5:2331:3632":{"crate_id":5,"path":["std","fs","read"],"kind":"function"},"16:6781:5205":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:44784:6289":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:11029:32484":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:8031:7842":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:8165:5028":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:7919:5393":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:6028:5020":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:2772:5008":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"11:1725:159":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:14599:4371":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:3554:146":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:5128:14152":{"crate_id":5,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:10313:3294":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"5:881:2995":{"crate_id":5,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:36778:2847":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:46544:6345":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:7361:7714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:8267:5423":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"4:7801:248":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"9:176:8005":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:4939:14116":{"crate_id":5,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:896:4981":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:43223:3279":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:15939:4727":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:23059:13782":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:15919:4721":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:7372:5030":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:2029:3533":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"16:8121:213":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:46395:6332":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"4:928:3585":{"crate_id":4,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:42333:7901":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:41294:6088":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:12044:4005":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:22064:26249":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:8308:7856":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:5318:5072":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:7813:33114":{"crate_id":5,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"1:44603:6284":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:41125:6215":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"11:2323:3008":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:44431:6279":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:43742:160":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"4:1604:3000":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:14393:4340":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:14284:4320":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"18:718:3754":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:6310:3538":{"crate_id":5,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:12869:4158":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:5471:7348":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:7807:34693":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:6493:7501":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:14586:4369":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:12335:4043":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:10548:116":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:10418:21249":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"4:4329:3533":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:7469:7749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:8284:7852":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:9305:5855":{"crate_id":5,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:2378:21314":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:6710:5723":{"crate_id":5,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:40219:2862":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:2209:8467":{"crate_id":1,"path":["core","ptr","metadata","metadata"],"kind":"function"},"5:8672:7718":{"crate_id":5,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:2112:3152":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:12816:8598":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:6882:7653":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:1521:6913":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:44449:6280":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:15496:4628":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"11:488:157":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:11045:5751":{"crate_id":5,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"6:4990:7160":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:13933:4237":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:46771:6365":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:11141:3566":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"11:772:2997":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:12082:4012":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:1984:5669":{"crate_id":5,"path":["std","error","Report"],"kind":"struct"},"6:5295:7266":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:4177:14105":{"crate_id":5,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:43772:6258":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:1589:6957":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"4:2294:7887":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:8213:5754":{"crate_id":5,"path":["std","fs","FileTimes"],"kind":"struct"},"17:11421:3945":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:14692:4382":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"5:5362:207":{"crate_id":5,"path":["std","path","PathBuf"],"kind":"struct"},"1:3061:263":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"4:7570:3590":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:1569:6943":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:45095:7914":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"17:16786:4960":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"16:903:3772":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:16241:4829":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:15573:4636":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:14055:4258":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:3695:5046":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:13375:8639":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:12435:32478":{"crate_id":5,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:3913:5689":{"crate_id":5,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:14001:4252":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:47779:6470":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:12826:4103":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:10097:21238":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"6:8343:7865":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:33274:2833":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"11:2420:2546":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"4:6930:3579":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:11691:3967":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:4184:5050":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:5117:7205":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:8583:14098":{"crate_id":5,"path":["std","net","Shutdown"],"kind":"enum"},"1:41049:6213":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:41152:6217":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"4:3087:7888":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:15931:4724":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"14:165:20251":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"4:2147:5759":{"crate_id":4,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:6777:7625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:33486:2832":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:32727:2979":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:22969:13791":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:34729:2844":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:6534:7519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:45103:7916":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:23499:6189":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"1:42595:3126":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:15731:4673":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"5:9351:5861":{"crate_id":5,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:5709:21176":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:31092:2892":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:47039:6391":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"11:1601:5579":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:6489:3546":{"crate_id":5,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"5:10934:5885":{"crate_id":5,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"5:2496:14050":{"crate_id":5,"path":["std","fs","read_link"],"kind":"function"},"1:43733:3015":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:15531:4629":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:12046:5741":{"crate_id":5,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:47392:6431":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:3386:2857":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"16:4694:5054":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"11:1888:2902":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:16761:4954":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:32744:242":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"4:3930:2900":{"crate_id":4,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:12749:4098":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:41232:6076":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:4964:7147":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:6411:7462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:8516:14060":{"crate_id":5,"path":["std","io","SeekFrom"],"kind":"enum"},"17:16332:4850":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:7830:3362":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:9746:5752":{"crate_id":5,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"4:2367:7891":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:22983:8478":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1:44351:6137":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"11:123:3512":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:4569:5695":{"crate_id":5,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:1690:7026":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"11:685:2996":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:12798:21383":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:41250:6223":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:10387:5666":{"crate_id":5,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:41758:6101":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:16555:4910":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:34556:2843":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:12452:482":{"crate_id":5,"path":["std","char"],"kind":"primitive"},"1:32709:6202":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"17:11653:3964":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:5057:7193":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:4267:5052":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:12952:4121":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:3077:141":{"crate_id":5,"path":["std","io","error","Error"],"kind":"struct"},"5:9190:2995":{"crate_id":5,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:7716:34689":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"15:0:2815":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:5676:7430":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:12028:3999":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"5:5682:116":{"crate_id":5,"path":["std","process","Command"],"kind":"struct"},"1:41145:6216":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:3829:131":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:2900:205":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:8267:7847":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:10748:156":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"6:5349:7281":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"16:3441:5044":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:6599:7563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"11:299:6811":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:44253:6217":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:5593:7389":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:15844:4698":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"4:5575:13985":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"6:6437:7477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:9661:6115":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"4:6712:2902":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:42769:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:14237:3542":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"5:7951:3561":{"crate_id":5,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:8559:181":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:13041:4133":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:13662:4179":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:10549:3912":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:2020:802":{"crate_id":5,"path":["std","ffi"],"kind":"module"},"4:7737:5927":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:534:3064":{"crate_id":5,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:14083:6156":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"18:531:3718":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:23565:6195":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"6:5420:7312":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:12466:928":{"crate_id":5,"path":["std","i8"],"kind":"primitive"},"4:4297:3533":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:44585:6283":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"5:948:2900":{"crate_id":5,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:4241:5051":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:12473:1872":{"crate_id":5,"path":["std","u32"],"kind":"primitive"},"17:14140:4286":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"4:984:3587":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:3297:268":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"6:5622:7408":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:8105:5411":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:5649:5077":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:12035:4002":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:40111:215":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:41717:6099":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:14738:4406":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:44799:6294":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:11315:6532":{"crate_id":5,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"5:3620:5687":{"crate_id":5,"path":["std","io","IoSliceMut"],"kind":"struct"},"4:7531:2896":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"17:16019:4744":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:4943:14119":{"crate_id":5,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:8206:5753":{"crate_id":5,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:43481:5442":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:22076:26262":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"5:9316:3069":{"crate_id":5,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:31530:3168":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"5:8260:2729":{"crate_id":5,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"5:11839:7883":{"crate_id":5,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:4827:2970":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"4:7580:5925":{"crate_id":4,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"6:5241:7238":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:10784:3914":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"5:12479:13":{"crate_id":5,"path":["std","fn"],"kind":"primitive"},"1:42880:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:4829:7733":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:15665:4657":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:22704:14061":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:12018:3997":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:14672:4381":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:40943:3350":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:12625:4086":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:5441:7327":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:13322:8631":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:43452:3286":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:14269:4316":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:8209:5026":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"4:7721:3079":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"5:9437:237":{"crate_id":5,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:2990:5018":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"18:589:3724":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:15852:4699":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:6020:5719":{"crate_id":5,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"11:2400:2996":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:13055:3957":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:40129:218":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:11261:5849":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"18:613:34705":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:4233:14110":{"crate_id":5,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:46625:6357":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"4:296:2897":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"16:6368:4967":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:3350:5679":{"crate_id":5,"path":["std","io","stdio","Stdin"],"kind":"struct"},"11:798:2902":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:1684:7023":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:583:3778":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:43067:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:5255:5070":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:47612:6441":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:15121:4471":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:3346:3298":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"6:5586:7387":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:4113:14101":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:45115:7919":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:973:3003":{"crate_id":5,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:10597:3765":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:44655:6286":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:12762:4099":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"5:8536:5802":{"crate_id":5,"path":["std","io","Chain"],"kind":"struct"},"1:47545:6436":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:13471:3795":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"4:7262:3628":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:22930:27979":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"4:6179:13993":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:7949:5033":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:3446:5683":{"crate_id":5,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:12450:426":{"crate_id":5,"path":["std","bool"],"kind":"primitive"},"1:42439:6245":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:6658:5181":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"11:2148:3009":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:42954:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:4941:14118":{"crate_id":5,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:6808:5019":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:14058:208":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:45099:7915":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:22062:26265":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:8504:2547":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"10:0:2811":{"crate_id":10,"path":["adler"],"kind":"module"},"16:2506:4996":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:2806:8499":{"crate_id":1,"path":["core","clone","CloneToUninit"],"kind":"trait"},"5:599:3072":{"crate_id":5,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:1652:5583":{"crate_id":5,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:10406:5876":{"crate_id":5,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:5388:27966":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:15431:4593":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:47172:6396":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"10:44:5589":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:5085:5064":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"4:788:121":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:10545:209":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"6:7986:7830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:3403:5681":{"crate_id":5,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:12409:21359":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"4:4561:3533":{"crate_id":4,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"5:10953:7871":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"5:12459:1844":{"crate_id":5,"path":["std","tuple"],"kind":"primitive"},"1:47010:6390":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:2620:5001":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:44645:6285":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:13970:4243":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:14031:4256":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:12008:3850":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:10537:3276":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"4:1594:2999":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:3307:34588":{"crate_id":5,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:14997:4456":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:4705:2986":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:4414:5693":{"crate_id":5,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:40824:3348":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:44905:6147":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:5025:7179":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:768:157":{"crate_id":5,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:6659:7589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"11:396:3516":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:7731:3125":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:47524:6435":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:11926:3990":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:2403:5939":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:47060:6392":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"11:2495:20240":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"5:12455:1340":{"crate_id":5,"path":["std","pointer"],"kind":"primitive"},"18:96:25437":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:23245:6164":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:6611:7568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:6837:5212":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"5:8011:2718":{"crate_id":5,"path":["std","thread","local","AccessError"],"kind":"struct"},"18:735:25446":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"11:1023:3008":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:45149:134":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"16:6123:5024":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:23260:7895":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:11222:3933":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"4:2815:6714":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:11021:32492":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:14947:4439":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:10843:3918":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"4:725:5903":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:963:3001":{"crate_id":5,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:2326:142":{"crate_id":5,"path":["std","fs","File"],"kind":"struct"},"1:13078:6143":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:38764:2850":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:13361:4152":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:13398:4155":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"14:31:5564":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:4554:6071":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:6573:5159":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:8235:143":{"crate_id":5,"path":["std","fs","FileType"],"kind":"struct"},"1:34171:2838":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:12293:4036":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:13719:4191":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:41172:6218":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:46707:6361":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:8624:7869":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:7368:7718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:42991:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:42417:26243":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:12234:4027":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:11087:3649":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"17:13890:4232":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"4:3337:5580":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:11794:5736":{"crate_id":5,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:12095:4014":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"4:3693:185":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:14349:2895":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"17:14460:4351":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:34902:2846":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:8000:5035":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:6794:5206":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"16:8612:5040":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:42273:6107":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:7895:26308":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:23332:6172":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"18:659:3738":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:7554:21186":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"4:7824:5934":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:41724:5722":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"18:563:3723":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:6111:5090":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:6970:5022":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:3747:259":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:45377:28318":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:22147:14061":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:2142:1385":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"17:12897:4115":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:6822:21181":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:42604:3130":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:8223:5415":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"4:2255:3064":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:667:3779":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:46433:6338":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"4:7612:213":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:47583:6438":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:2820:3634":{"crate_id":1,"path":["core","clone","InitializingSlice"],"kind":"struct"},"5:11407:5894":{"crate_id":5,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"16:5282:5071":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:1643:6999":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:43497:25633":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"1:42605:3129":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:12524:4080":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:41222:137":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:2732:3524":{"crate_id":5,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:14859:4426":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:1539:6924":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:2335:14043":{"crate_id":5,"path":["std","fs","read_to_string"],"kind":"function"},"1:22167:6161":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:8368:14091":{"crate_id":5,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:45184:8656":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:10332:21246":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:13039:6141":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:9377:32491":{"crate_id":5,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:12605:3932":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:23310:26212":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:3366:2834":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:43536:141":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"11:328:6814":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:41375:6230":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:15:2787":{"crate_id":1,"path":["core","write"],"kind":"macro"},"17:12108:4015":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:47566:6437":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"4:7695:2898":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:11706:3968":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"4:1229:32255":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:4896:2978":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:42626:3311":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:12149:4018":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:6640:5167":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"5:5993:5718":{"crate_id":5,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:4:1280":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"5:6065:3536":{"crate_id":5,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:14114:4281":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:4976:7152":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:4929:7133":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:15621:4645":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:2282:192":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"4:6526:3615":{"crate_id":4,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"16:8636:21191":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:2754:5677":{"crate_id":5,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:14845:4425":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:10173:8016":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:23299:6170":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:12477:1946":{"crate_id":5,"path":["std","usize"],"kind":"primitive"},"17:11448:3946":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:545:6874":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:11805:3981":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:45414:6320":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:11473:5639":{"crate_id":5,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"5:2498:14051":{"crate_id":5,"path":["std","fs","canonicalize"],"kind":"function"},"1:41733:6100":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"4:3455:2900":{"crate_id":4,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:1623:2546":{"crate_id":5,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:15036:4459":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:43764:6257":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:5334:7279":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:14902:4432":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:4341:14127":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:16283:4835":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:894:2996":{"crate_id":5,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:15077:4464":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:6876:7652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:12070:3574":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"17:13306:4149":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:12723:4096":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:40089:213":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"11:1914:5582":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:6440:21179":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:16775:4958":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:15701:4662":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:5650:5709":{"crate_id":5,"path":["std","process","ChildStdout"],"kind":"struct"},"5:2245:132":{"crate_id":5,"path":["std","ffi","os_str","Display"],"kind":"struct"},"6:5205:7223":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"4:2584:6716":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:5127:7206":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"11:2533:6816":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:5727:3911":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:1551:6933":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:44327:6273":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:5551:7374":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"5:8566:5812":{"crate_id":5,"path":["std","io","Lines"],"kind":"struct"},"5:8097:14032":{"crate_id":5,"path":["std","env","VarError"],"kind":"enum"},"1:44942:6301":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"11:698:2546":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:16026:4746":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"5:11808:5737":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:5036:7184":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:22149:13701":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:5872:3546":{"crate_id":5,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"4:5972:256":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"11:1893:2900":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"4:2172:5909":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:44227:6266":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:6904:5220":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"11:1564:20245":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:5020:14115":{"crate_id":5,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:13209:141":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"11:2228:4002":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"5:8249:130":{"crate_id":5,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:38819:2851":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:8353:7867":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"4:1213:31842":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:6507:7512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:6895:3554":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"17:12699:4094":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:23324:6171":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:12832:6135":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:11818:3982":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:8626:5479":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:11950:5690":{"crate_id":5,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:13537:4119":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"11:2349:3009":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:11503:3952":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"9:355:20181":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:41023:3353":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"16:3048:20318":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:2820:5010":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"11:351:34658":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"11:2440:2902":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:4829:7072":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:7825:33111":{"crate_id":5,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"5:2086:200":{"crate_id":5,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:8302:7855":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:12648:4087":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:5375:7292":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:3583:2859":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:16385:4859":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:5151:7208":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"5:8801:6253":{"crate_id":5,"path":["std","path","State"],"kind":"enum"},"17:16297:4837":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:9356:5862":{"crate_id":5,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"16:7838:21187":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:8118:3759":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"11:364:3514":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:687:14007":{"crate_id":5,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:41181:5802":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:9145:202":{"crate_id":5,"path":["std","process","Output"],"kind":"struct"},"6:1489:6900":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:479:6836":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:41766:6103":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:12391:6133":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"4:1001:2995":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:13781:4207":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:7414:7737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:8096:5410":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:7337:5292":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:43202:3277":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:5475:206":{"crate_id":5,"path":["std","path","Path"],"kind":"struct"},"5:630:14005":{"crate_id":5,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:42555:2546":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"5:8668:5824":{"crate_id":5,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"4:281:3579":{"crate_id":4,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:7829:3361":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:31503:199":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:3436:2845":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:23348:25620":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:7789:34691":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:13119:4135":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"4:2265:5910":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"9:500:5642":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"4:779:255":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:1854:711":{"crate_id":5,"path":["std","env"],"kind":"module"},"17:11998:3995":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"4:5835:2906":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:6544:7526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:2550:4998":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:925:2998":{"crate_id":5,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:13145:4136":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"5:9478:3017":{"crate_id":5,"path":["std","time","SystemTime"],"kind":"struct"},"13:0:2808":{"crate_id":13,"path":["std_detect"],"kind":"module"},"5:8276:5758":{"crate_id":5,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"15:306:20271":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:12419:8014":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:13349:4151":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:12816:3795":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:13427:4156":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"6:8199:7843":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:4780:14149":{"crate_id":5,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:43974:6121":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:40982:3351":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:23587:6197":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"17:13181:4139":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:15973:4735":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"4:6042:2902":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"1:3065:262":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"16:8483:5464":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:8066:21188":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"5:11298:3017":{"crate_id":5,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:14043:4257":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:9420:190":{"crate_id":5,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:6608:209":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:11892:6131":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:11333:165":{"crate_id":5,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"11:1907:5581":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:13193:4140":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:15946:4728":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"10:36:6822":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"11:785:2998":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:42843:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:16798:4963":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"4:3706:2995":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:6381:7437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"4:4369:2995":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:41282:6227":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:15777:4683":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"18:0:2818":{"crate_id":18,"path":["memchr"],"kind":"module"},"11:2366:5586":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:9982:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:6502:20288":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:22094:14061":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"16:7350:5294":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:16159:4801":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"14:7:5564":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:1494:6902":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:4902:7118":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:7990:5406":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:984:3004":{"crate_id":5,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"9:445:20166":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:41241:6079":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:32832:3299":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"17:3720:3793":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:14084:4269":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:46558:6346":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:4815:14105":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:3351:2831":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"4:3342:31827":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:11971:3993":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:8255:2994":{"crate_id":5,"path":["std","hash","random","RandomState"],"kind":"struct"},"5:1869:5664":{"crate_id":5,"path":["std","env","Vars"],"kind":"struct"},"1:42289:6109":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"5:10983:5754":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:10475:229":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"5:1871:5665":{"crate_id":5,"path":["std","env","VarsOs"],"kind":"struct"},"4:5301:3609":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"5:6434:5721":{"crate_id":5,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:23532:6192":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:42511:197":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"16:6696:5190":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:44956:8646":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:13070:3932":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"5:9241:14198":{"crate_id":5,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"4:6126:72":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"1:46640:6358":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:46448:6339":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:7350:7709":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:7518:7785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:16812:4964":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:40412:8500":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:5107:7204":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:7223:5274":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"18:670:3744":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:497:6842":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:1108:3009":{"crate_id":5,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:45293:7923":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"17:13958:4242":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:14520:4360":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"4:1635:5907":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"4:7604:2546":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:12464:771":{"crate_id":5,"path":["std","f64"],"kind":"primitive"},"5:4018:5691":{"crate_id":5,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:6084:5081":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:904:2546":{"crate_id":5,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:8014:7833":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:4997:7163":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:40239:6208":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:2860:5012":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:6211:3546":{"crate_id":5,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"18:765:25447":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:46898:6386":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"18:635:3737":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:11124:34698":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:8284:5759":{"crate_id":5,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:16171:4804":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"18:726:3757":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"11:2466:2900":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"6:465:6828":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:13095:4134":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"4:3719:2996":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"11:740:3001":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:7907:5392":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:908:3773":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"17:12176:4020":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"5:6537:223":{"crate_id":5,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:2718:3527":{"crate_id":5,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:23554:6194":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"11:1005:3007":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"13:229:6809":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:10700:3564":{"crate_id":5,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:41194:6219":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:14099:4275":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:47347:6430":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:11617:3933":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:43511:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:44689:3348":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:11579:3961":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:3405:5682":{"crate_id":5,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:4805:7054":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:6680:7595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:8151:5038":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:44187:6261":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:1932:5668":{"crate_id":5,"path":["std","env","ArgsOs"],"kind":"struct"},"5:8031:3077":{"crate_id":5,"path":["std","thread","ThreadId"],"kind":"struct"},"1:44485:6129":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:3587:5045":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"1:23441:8324":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"4:6839:2546":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:11864:6129":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"4:7287:3631":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:13798:4210":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:4211:14106":{"crate_id":5,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:44266:6268":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:15887:4710":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:47077:6393":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:12457:1720":{"crate_id":5,"path":["std","slice"],"kind":"primitive"},"17:11985:3994":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"18:80:25436":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:6480:7492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:14821:4422":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:8261:7846":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:10977:34703":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"5:12039:33358":{"crate_id":5,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:12216:4025":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"5:12476:985":{"crate_id":5,"path":["std","isize"],"kind":"primitive"},"1:45425:5588":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"6:6813:7638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"4:7899:2901":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:11012:5688":{"crate_id":5,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"11:809:2900":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"5:7896:3779":{"crate_id":5,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:11515:3953":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:1530:6918":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:40886:3354":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:11000:5874":{"crate_id":5,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:8413:168":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:517:6859":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:3309:2891":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"6:5412:1267":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:6042:5023":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:15714:4668":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":30}