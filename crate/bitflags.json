{"root":"0:0:1751","crate_version":"2.0.0-rc.1","includes_private":false,"index":{"0:42:2158":{"id":"0:42:2158","crate_id":0,"name":"Internal","span":{"filename":"src/traits.rs","begin":[147,4],"end":[147,18]},"visibility":"default","docs":"The type of the internal field on the generated flags type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:26:2004":{"id":"0:26:2004","crate_id":0,"name":"iter_names","span":{"filename":"src/traits.rs","begin":[48,4],"end":[48,44]},"visibility":"default","docs":"Iterate over the raw names and bits for enabled flag values.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"IterNames","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:14:1742","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:29:1829":{"id":"0:29:1829","crate_id":0,"name":"intersects","span":{"filename":"src/traits.rs","begin":[57,4],"end":[57,46]},"visibility":"default","docs":"Returns `true` if there are flags common to both `self` and `other`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:33:1841":{"id":"0:33:1841","crate_id":0,"name":"toggle","span":{"filename":"src/traits.rs","begin":[69,4],"end":[69,38]},"visibility":"default","docs":"Toggles the specified flags in-place.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:20:1790":{"id":"0:20:1790","crate_id":0,"name":"bits","span":{"filename":"src/traits.rs","begin":[23,4],"end":[23,33]},"visibility":"default","docs":"Returns the raw value of the flags currently stored.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Bits","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:14:1742","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:24:2007":{"id":"0:24:2007","crate_id":0,"name":"from_name","span":{"filename":"src/traits.rs","begin":[40,4],"end":[42,20]},"visibility":"default","docs":"Get the flag for a particular name.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48055:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2669:2125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:18:1806":{"id":"0:18:1806","crate_id":0,"name":"empty","span":{"filename":"src/traits.rs","begin":[17,4],"end":[17,23]},"visibility":"default","docs":"Returns an empty set of flags.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:5:1741":{"id":"0:5:1741","crate_id":0,"name":"traits","span":{"filename":"src/traits.rs","begin":[1,0],"end":[148,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:14:1742","0:36:2144","0:41:1955"],"is_stripped":true}},"0:0:1751":{"id":"0:0:1751","crate_id":0,"name":"bitflags","span":{"filename":"src/lib.rs","begin":[11,0],"end":[1430,1]},"visibility":"public","docs":"A typesafe bitmask flag generator useful for sets of C-style flags.\nIt can be used for creating ergonomic wrappers around C APIs.\n\nThe `bitflags!` macro generates `struct`s that manage a set of flags. The\ntype of those flags must be some primitive integer.\n\n# Examples\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n        const ABC = Self::A.bits() | Self::B.bits() | Self::C.bits();\n    }\n}\n\nfn main() {\n    let e1 = Flags::A | Flags::C;\n    let e2 = Flags::B | Flags::C;\n    assert_eq!((e1 | e2), Flags::ABC);   // union\n    assert_eq!((e1 & e2), Flags::C);     // intersection\n    assert_eq!((e1 - e2), Flags::A);     // set difference\n    assert_eq!(!e2, Flags::A);           // set complement\n}\n```\n\nSee [`example_generated::Flags`](./example_generated/struct.Flags.html) for documentation of code\ngenerated by the above `bitflags!` expansion.\n\n# Visibility\n\nThe `bitflags!` macro supports visibility, just like you'd expect when writing a normal\nRust `struct`:\n\n```\nmod example {\n    use bitflags::bitflags;\n\n    bitflags! {\n        #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n        pub struct Flags1: u32 {\n            const A = 0b00000001;\n        }\n\n        #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n#       pub\n        struct Flags2: u32 {\n            const B = 0b00000010;\n        }\n    }\n}\n\nfn main() {\n    let flag1 = example::Flags1::A;\n    let flag2 = example::Flags2::B; // error: const `B` is private\n}\n```\n\n# Attributes\n\nAttributes can be attached to the generated flags types and their constants as normal.\n\n# Representation\n\nIt's valid to add a `#[repr(C)]` or `#[repr(transparent)]` attribute to a generated flags type.\nThe generated flags type is always guaranteed to be a newtype where its only field has the same\nABI as the underlying integer type.\n\nIn this example, `Flags` has the same ABI as `u32`:\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    #[repr(transparent)]\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n    }\n}\n```\n\n# Extending\n\nGenerated flags types belong to you, so you can add trait implementations to them outside\nof what the `bitflags!` macro gives:\n\n```\nuse std::fmt;\n\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n    }\n}\n\nimpl Flags {\n    pub fn clear(&mut self) {\n        *self.0.bits_mut() = 0;\n    }\n}\n\nfn main() {\n    let mut flags = Flags::A | Flags::B;\n\n    flags.clear();\n    assert!(flags.is_empty());\n\n    assert_eq!(format!(\"{:?}\", Flags::A | Flags::B), \"Flags(A | B)\");\n    assert_eq!(format!(\"{:?}\", Flags::B), \"Flags(B)\");\n}\n```\n\n# What's implemented by `bitflags!`\n\nThe `bitflags!` trait adds some trait implementations and inherent methods\nto generated flags types, but leaves room for you to choose the semantics\nof others.\n\n## Iterators\n\nThe following iterator traits are implemented for generated flags types:\n\n- `Extend`: adds the union of the instances iterated over.\n- `FromIterator`: calculates the union.\n- `IntoIterator`: iterates over set flag values.\n\n## Formatting\n\nThe following formatting traits are implemented for generated flags types:\n\n- `Binary`.\n- `LowerHex` and `UpperHex`.\n- `Octal`.\n\n## Operators\n\nThe following operator traits are implemented for the generated `struct`s:\n\n- `BitOr` and `BitOrAssign`: union\n- `BitAnd` and `BitAndAssign`: intersection\n- `BitXor` and `BitXorAssign`: toggle\n- `Sub` and `SubAssign`: set difference\n- `Not`: set complement\n\n## Methods\n\nThe following methods are defined for the generated `struct`s:\n\n- `empty`: an empty set of flags\n- `all`: the set of all defined flags\n- `bits`: the raw value of the flags currently stored\n- `from_bits`: convert from underlying bit representation, unless that\n               representation contains bits that do not correspond to a\n               defined flag\n- `from_bits_truncate`: convert from underlying bit representation, dropping\n                        any bits that do not correspond to defined flags\n- `from_bits_retain`: convert from underlying bit representation, keeping\n                         all bits (even those not corresponding to defined\n                         flags)\n- `is_empty`: `true` if no flags are currently stored\n- `is_all`: `true` if currently set flags exactly equal all defined flags\n- `intersects`: `true` if there are flags common to both `self` and `other`\n- `contains`: `true` if all of the flags in `other` are contained within `self`\n- `insert`: inserts the specified flags in-place\n- `remove`: removes the specified flags in-place\n- `toggle`: the specified flags will be inserted if not present, and removed\n            if they are.\n- `set`: inserts or removes the specified flags depending on the passed value\n- `intersection`: returns a new set of flags, containing only the flags present\n                  in both `self` and `other` (the argument to the function).\n- `union`: returns a new set of flags, containing any flags present in\n           either `self` or `other` (the argument to the function).\n- `difference`: returns a new set of flags, containing all flags present in\n                `self` without any of the flags present in `other` (the\n                argument to the function).\n- `symmetric_difference`: returns a new set of flags, containing all flags\n                          present in either `self` or `other` (the argument\n                          to the function), but not both.\n- `complement`: returns a new set of flags, containing all flags which are\n                not set in `self`, but which are allowed for this type.\n\n# What's not implemented by `bitflags!`\n\nSome functionality is not automatically implemented for generated flags types\nby the `bitflags!` macro, even when it reasonably could be. This is so callers\nhave more freedom to decide on the semantics of their flags types.\n\n## `Clone` and `Copy`\n\nGenerated flags types are not automatically copyable, even though they can always\nderive both `Clone` and `Copy`.\n\n## `Default`\n\nThe `Default` trait is not automatically implemented for the generated structs.\n\nIf your default value is equal to `0` (which is the same value as calling `empty()`\non the generated struct), you can simply derive `Default`:\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    // Results in default value with bits: 0\n    #[derive(Default, Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n    }\n}\n\nfn main() {\n    let derived_default: Flags = Default::default();\n    assert_eq!(derived_default.bits(), 0);\n}\n```\n\nIf your default value is not equal to `0` you need to implement `Default` yourself:\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n    }\n}\n\n// explicit `Default` implementation\nimpl Default for Flags {\n    fn default() -> Flags {\n        Flags::A | Flags::C\n    }\n}\n\nfn main() {\n    let implemented_default: Flags = Default::default();\n    assert_eq!(implemented_default, (Flags::A | Flags::C));\n}\n```\n\n## `Debug` and `Display`\n\nThe `Debug` trait can be derived for a reasonable implementation.\n\n## `PartialEq` and `PartialOrd`\n\nEquality and ordering can be derived for a reasonable implementation, or implemented manually\nfor different semantics.\n\n# Edge cases\n\n## Zero Flags\n\nFlags with a value equal to zero will have some strange behavior that one should be aware of.\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const NONE = 0b00000000;\n        const SOME = 0b00000001;\n    }\n}\n\nfn main() {\n    let empty = Flags::empty();\n    let none = Flags::NONE;\n    let some = Flags::SOME;\n\n    // Zero flags are treated as always present\n    assert!(empty.contains(Flags::NONE));\n    assert!(none.contains(Flags::NONE));\n    assert!(some.contains(Flags::NONE));\n\n    // Zero flags will be ignored when testing for emptiness\n    assert!(none.is_empty());\n}\n```\n\nUsers should generally avoid defining a flag with a value of zero.\n\n# The `BitFlags` trait\n\nThis library defines a `BitFlags` trait that's implemented by all generated flags types.\nThe trait makes it possible to work with flags types generically:\n\n```\nfn count_unset_flags<F: bitflags::BitFlags>(flags: &F) -> usize {\n    // Find out how many flags there are in total\n    let total = F::all().iter().count();\n\n    // Find out how many flags are set\n    let set = flags.iter().count();\n\n    total - set\n}\n\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n    }\n}\n\nassert_eq!(2, count_unset_flags(&Flags::B));\n```","links":{},"attrs":["#![no_std]","#![doc(html_root_url = \"https://docs.rs/bitflags/2.0.0-rc.1\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:4","0:48:1751"],"is_stripped":false}},"0:55:1744":{"id":"0:55:1744","crate_id":0,"name":"external","span":{"filename":"src/external.rs","begin":[1,0],"end":[88,1]},"visibility":"crate","docs":"Conditional trait implementations for external libraries.","links":{},"attrs":["#[macro_use]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":true}},"0:4":{"id":"0:4","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[345,0],"end":[345,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"traits::BitFlags","name":"BitFlags","id":"0:14:1742","glob":false}},"0:48:1751":{"id":"0:48:1751","crate_id":0,"name":"bitflags","span":{"filename":"src/lib.rs","begin":[472,0],"end":[543,1]},"visibility":"public","docs":"The macro used to generate the flag structure.\n\nSee the [crate level docs](../bitflags/index.html) for complete documentation.\n\n# Example\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n        const ABC = Self::A.bits() | Self::B.bits() | Self::C.bits();\n    }\n}\n\nfn main() {\n    let e1 = Flags::A | Flags::C;\n    let e2 = Flags::B | Flags::C;\n    assert_eq!((e1 | e2), Flags::ABC);   // union\n    assert_eq!((e1 & e2), Flags::C);     // intersection\n    assert_eq!((e1 - e2), Flags::A);     // set difference\n    assert_eq!(!e2, Flags::A);           // set complement\n}\n```\n\nThe generated `struct`s can also be extended with type and trait\nimplementations:\n\n```\nuse std::fmt;\n\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n    }\n}\n\nimpl Flags {\n    pub fn clear(&mut self) {\n        *self.0.bits_mut() = 0;\n    }\n}\n\nfn main() {\n    let mut flags = Flags::A | Flags::B;\n\n    flags.clear();\n    assert!(flags.is_empty());\n\n    assert_eq!(format!(\"{:?}\", Flags::A | Flags::B), \"Flags(A | B)\");\n    assert_eq!(format!(\"{:?}\", Flags::B), \"Flags(B)\");\n}\n```","links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! bitflags {\n    (\n        $(#[$outer:meta])*\n        $vis:vis struct $BitFlags:ident: $T:ty {\n            $(\n                $(#[$inner:ident $($args:tt)*])*\n                const $Flag:ident = $value:expr;\n            )*\n        }\n\n        $($t:tt)*\n    ) => { ... };\n    () => { ... };\n}"},"0:22:1817":{"id":"0:22:1817","crate_id":0,"name":"from_bits_truncate","span":{"filename":"src/traits.rs","begin":[33,4],"end":[33,52]},"visibility":"default","docs":"Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["bits",{"kind":"qualified_path","inner":{"name":"Bits","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:14:1742","args":null}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:27:1823":{"id":"0:27:1823","crate_id":0,"name":"is_empty","span":{"filename":"src/traits.rs","begin":[51,4],"end":[51,31]},"visibility":"default","docs":"Returns `true` if no flags are currently stored.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1741","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i64"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1741","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u32"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:15:2115":{"id":"0:15:2115","crate_id":0,"name":"Bits","span":{"filename":"src/traits.rs","begin":[8,4],"end":[8,20]},"visibility":"default","docs":"The underlying integer type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Bits","id":"0:37:2115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:16:1764":{"id":"0:16:1764","crate_id":0,"name":"Iter","span":{"filename":"src/traits.rs","begin":[11,4],"end":[11,37]},"visibility":"default","docs":"An iterator over enabled flags in an instance of the type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7156:155","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Self"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:41:1955":{"id":"0:41:1955","crate_id":0,"name":"PublicFlags","span":{"filename":"src/traits.rs","begin":[145,0],"end":[148,1]},"visibility":"public","docs":"A trait for referencing the `bitflags`-owned internal type\nwithout exposing it publicly.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:42:2158"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:31:1836":{"id":"0:31:1836","crate_id":0,"name":"insert","span":{"filename":"src/traits.rs","begin":[63,4],"end":[63,38]},"visibility":"default","docs":"Inserts the specified flags in-place.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[353,4],"end":[353,17]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"core","name":"core","id":"1:0:484","glob":false}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1741","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i16"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1741","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u16"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:21:1812":{"id":"0:21:1812","crate_id":0,"name":"from_bits","span":{"filename":"src/traits.rs","begin":[27,4],"end":[29,20]},"visibility":"default","docs":"Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["bits",{"kind":"qualified_path","inner":{"name":"Bits","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:14:1742","args":null}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48055:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2669:2125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1741","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i128"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[351,33],"end":[351,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::traits","name":"traits","id":"0:5:1741","glob":true}},"0:30:1834":{"id":"0:30:1834","crate_id":0,"name":"contains","span":{"filename":"src/traits.rs","begin":[60,4],"end":[60,44]},"visibility":"default","docs":"Returns `true` all of the flags in `other` are contained within `self`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1741","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i32"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:23:1821":{"id":"0:23:1821","crate_id":0,"name":"from_bits_retain","span":{"filename":"src/traits.rs","begin":[37,4],"end":[37,50]},"visibility":"default","docs":"Convert from underlying bit representation, preserving all\nbits (even those not corresponding to a defined flag).","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["bits",{"kind":"qualified_path","inner":{"name":"Bits","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:14:1742","args":null}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:32:1839":{"id":"0:32:1839","crate_id":0,"name":"remove","span":{"filename":"src/traits.rs","begin":[66,4],"end":[66,38]},"visibility":"default","docs":"Removes the specified flags in-place.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:14:1742":{"id":"0:14:1742","crate_id":0,"name":"BitFlags","span":{"filename":"src/traits.rs","begin":[6,0],"end":[73,1]},"visibility":"public","docs":"A trait that is automatically implemented for all bitflags.\n\nIt should not be implemented manually.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:15:2115","0:16:1764","0:17:2119","0:18:1806","0:19:280","0:20:1790","0:21:1812","0:22:1817","0:23:1821","0:24:2007","0:25:772","0:26:2004","0:27:1823","0:28:1825","0:29:1829","0:30:1834","0:31:1836","0:32:1839","0:33:1841","0:34:1894"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ImplementedByBitFlagsMacro","id":"0:35:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:17:2119":{"id":"0:17:2119","crate_id":0,"name":"IterNames","span":{"filename":"src/traits.rs","begin":[14,4],"end":[14,58]},"visibility":"default","docs":"An iterator over the raw names and bits for enabled flags in an instance of the type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7156:155","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"generic","inner":"Self"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:36:2144":{"id":"0:36:2144","crate_id":0,"name":"Sealed","span":{"filename":"src/traits.rs","begin":[83,0],"end":[83,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:64","0:65","0:72","0:73","0:80","0:81","0:88","0:89","0:96","0:97"]}},"0:25:772":{"id":"0:25:772","crate_id":0,"name":"iter","span":{"filename":"src/traits.rs","begin":[45,4],"end":[45,33]},"visibility":"default","docs":"Iterate over enabled flag values.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Iter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:14:1742","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:28:1825":{"id":"0:28:1825","crate_id":0,"name":"is_all","span":{"filename":"src/traits.rs","begin":[54,4],"end":[54,29]},"visibility":"default","docs":"Returns `true` if all flags are currently set.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:88":{"id":"0:88","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1741","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u64"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1741","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u8"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:34:1894":{"id":"0:34:1894","crate_id":0,"name":"set","span":{"filename":"src/traits.rs","begin":[72,4],"end":[72,48]},"visibility":"default","docs":"Inserts or removes the specified flags depending on the passed value.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[351,20],"end":[351,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::external","name":"external","id":"0:55:1744","glob":true}},"0:19:280":{"id":"0:19:280","crate_id":0,"name":"all","span":{"filename":"src/traits.rs","begin":[20,4],"end":[20,21]},"visibility":"default","docs":"Returns the set containing all flags.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1741","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i8"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1741","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u128"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"paths":{"1:7737:7094":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:2987:2370":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:21777:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:21810:2909":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:2484:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:14:2247":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:47253:4382":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:47130:4372":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:21384:2908":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:2800:2360":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:21876:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:21711:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:48815:2171":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:46889:11347":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:21272:2986":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:9610:8733":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:51748:22405":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:51770:22406":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:20711:29373":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:4693:31620":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:46905:11348":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:54023:20854":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:10754:14841":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:51794:22407":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:20706:29350":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:50227:14832":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:46444:197":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:53429:22444":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:10791:14843":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:49085:108":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:3199:2382":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:223:206":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:21363:3008":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:58505:1447":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"1:2796:2358":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:58491:1016":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"1:19981:3778":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:52038:22417":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:8868:14137":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:54043:20856":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:47295:4368":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:4346:3273":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:47069:4362":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:58503:721":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"1:46547:31490":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"1:49891:8746":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:54063:20858":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:50945:191":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:3157:229":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:7042:148":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:3162:133":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:49155:6073":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:20971:29347":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:2444:2144":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:52179:22421":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:29570:67":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:7735:7096":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:50322:11348":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:49052:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:52468:22430":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:29748:29881":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:52885:22438":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:56999:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:3168:2377":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:2932:2367":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:7841:14813":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:11046:14813":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:47220:4366":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:21221:2968":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:20344:29349":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:2780:2355":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:51704:22403":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:21189:2935":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:47270:4383":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:9128:2144":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:58500:722":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"1:2232:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:7005:4360":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:56960:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8749:31497":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:2672:222":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:52546:22432":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:58321:31485":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:52019:22416":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:2788:2227":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:57025:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:58513:13":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"1:19994:32502":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:39339:9419":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:53883:22449":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:58499:629":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"1:54180:20865":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:50814:15325":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:20026:32527":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:57012:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:7426:4356":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:20875:32505":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:5845:4389":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:58506:1444":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"1:51724:22404":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:20295:2144":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:49803:8731":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:54089:20860":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:20303:29348":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:50927:201":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:11894:201":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"1:50127:8736":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:8609:2171":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:54219:20866":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:49034:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:2669:2125":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:8873:14138":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:47049:11464":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:53073:22442":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:2935:2368":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:52325:22425":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:49582:8755":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:52727:22435":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:1737:3574":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:50425:14877":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:4317:3402":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:50041:8738":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:29508:3290":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:1643:3287":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:8613:2942":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:4272:3401":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:11761:32439":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:21843:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:46806:11409":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:8605:2168":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:49171:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:10595:8727":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:9582:8732":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:2327:185":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:20456:29349":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:29642:29880":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:50023:8734":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:50618:14890":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:46488:2373":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:2843:2107":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:9596:8737":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:47522:4344":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:49331:14140":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:49933:8744":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:21318:2998":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:6610:4341":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:7079:119":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:46402:195":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:2851:2363":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:2758:2225":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:47336:4387":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:39348:3268":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:48292:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:58489:1463":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"1:46883:10871":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:20297:29346":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:21115:2921":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:46912:11349":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:52417:22429":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:10205:31602":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:53009:22440":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:48267:179":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:2817:2106":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:50440:14880":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:20428:29345":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:20049:32532":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:58488:407":{"crate_id":1,"path":["core","char"],"kind":"primitive"},"1:50331:10871":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:9454:8751":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:9568:8736":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:4086:3408":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:10579:8725":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:53223:22443":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:2847:2109":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:21975:165":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:47112:4364":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:4126:3391":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:48634:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:4200:3395":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:29333:2700":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:2774:2356":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:50793:120":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:2991:2371":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:29548:3291":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:51018:15582":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:2822:2108":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:51900:22411":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:58504:717":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"1:11267:110":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:20266:29344":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:38142:3778":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:54052:20857":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:2739:3270":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:2235:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:7102:2387":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:48106:2117":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:51001:157":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:50287:14829":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:21334:3009":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:11657:32618":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:58492:306":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"1:1751:9061":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:46378:194":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:50738:14804":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:50306:14837":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:48444:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:47150:4374":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:48140:7088":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:47039:11463":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:20009:32502":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:47578:4355":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:1636:575":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:49913:8745":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:11636:13089":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:5624:12042":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:4326:3403":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:54078:20859":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:9309:5933":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:50091:14830":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:46992:11467":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:7051:2229":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:47306:4385":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:8611:190":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:3908:10826":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:52371:22427":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:1825:3406":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:8603:2169":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:48558:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:5457:4337":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:2673:221":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:50145:8732":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:21909:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:7001:4361":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:2792:2359":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:46959:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:10095:8748":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:51949:22413":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:49981:14822":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:54005:22452":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:49119:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:2839:2105":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:21168:2979":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:20254:2144":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:8324:14062":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:2676:224":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:52803:22437":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:47234:4380":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:2490:131":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:11684:188":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:48808:2170":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:9334:8734":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:46836:11355":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:11066:14814":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:21678:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:2285:184":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:47191:4378":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:50770:14812":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:7038:132":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:50519:14885":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:2674:107":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:51848:22409":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:58507:1445":{"crate_id":1,"path":["core","u32"],"kind":"primitive"},"1:48794:2168":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:50762:14810":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:38125:179":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:49058:129":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:47121:4365":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:1919:3576":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:50340:11345":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:2481:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:58508:1446":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"1:3147:2375":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:50774:15323":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:53681:22446":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:58512:1090":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"1:46347:2372":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:3319:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:49339:31521":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:6430:2256":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:3616:2231":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:48173:7093":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:54104:20861":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:58510:766":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"1:9416:8735":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:22407:2905":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:52773:22436":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:12017:3779":{"crate_id":1,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"1:6759:3161":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:2768:2353":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:50980:15416":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:21297:3007":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:50073:14831":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:46822:11353":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:53571:22445":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:9377:8750":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:51030:15579":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:21645:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:46866:11346":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:50597:14888":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:46926:11351":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:2255:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:2812:2104":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:20178:29353":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:50608:14889":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:10865:8750":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:46919:11350":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:8615:6074":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:50191:14835":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:47545:4347":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:46606:10820":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:46422:198":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:49999:14825":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:11002:2904":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:7736:7095":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:4059:3407":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:4719:772":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:47090:4363":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:50742:14805":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:47200:4388":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:3184:10410":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:53967:22451":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:52295:22424":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:2753:2352":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:46527:7064":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:2805:2110":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:51878:22410":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:6563:12075":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:49821:8730":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:2662:216":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:51979:22414":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:48368:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:9489:8738":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:56590:29382":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:56973:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:47211:4379":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:47529:11775":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:48131:2231":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:49752:14453":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:3084:2374":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:8601:118":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:2578:126":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:46976:11558":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:54142:20863":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:58494:1351":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"1:47551:4349":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:50315:14836":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:8165:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:7433:4359":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:21370:2911":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:20447:2144":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:4672:11462":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:3382:7070":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"1:2726:2386":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:20863:8728":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:48520:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:47182:4377":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:48801:2169":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:50746:14806":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:58498:628":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"1:46554:31525":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:50758:14809":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:8607:2170":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:39299:3158":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:47244:4381":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:50403:14876":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:46362:196":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:50766:14811":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:47560:4351":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:48406:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:2856:2364":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:48250:5933":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:48182:12783":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:21205:31956":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:58509:1443":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"1:7156:155":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:49368:31517":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:50454:14883":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:47140:4373":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:4191:203":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"3:0:2342":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:50471:14884":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:52963:22439":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:9285:1764":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:58493:1321":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"1:20454:29351":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:2681:3265":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:48242:1764":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:50546:14886":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:50245:14833":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:48115:1764":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:7429:4358":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:53821:22448":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:50583:14887":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:49967:14823":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:11863:15414":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:46261:2384":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:49904:8742":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:49378:31515":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:0:431":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:50988:15417":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:48191:189":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:11061:14815":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:50826:15326":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:47099:4371":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:47321:4386":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:2904:115":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:58501:719":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"1:51816:22408":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:49923:8743":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:20215:29354":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:8819:139":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:4262:3400":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:20047:32529":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:29542:3010":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:52393:22428":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:20423:2144":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:2938:2369":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:52103:22419":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:48199:206":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:21280:3006":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:48672:3414":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:48055:177":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:47168:12040":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:46520:2376":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:49067:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:58300:31526":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:2154:576":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:53759:22447":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:49578:14790":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:52347:22426":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:4369:3404":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"0:0:1751":{"crate_id":0,"path":["bitflags"],"kind":"module"},"1:2763:2354":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:10830:14842":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:2833:2362":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:11623:134":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:5380:4376":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:47536:4345":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:3236:2383":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:58502:720":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"1:49347:14139":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:54032:20855":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:52149:22420":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:46779:10871":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:6819:3393":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:1760:3573":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:50937:207":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:52056:22418":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:52249:22423":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:48330:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:11852:10984":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:46561:3401":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"1:25217:2906":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:8556:130":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:10128:8749":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:53039:22441":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:49097:126":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:47159:4375":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:46945:11352":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:11112:14879":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:4195:3394":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:53929:22450":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:10814:14840":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:52001:22415":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:21245:2907":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:48482:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:58511:1500":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"1:3370:7066":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"1:49386:31502":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:2487:146":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:3174:2379":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:11975:15580":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:11709:13090":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:2290:123":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:8546:6069":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:48596:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:46794:11354":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:2445:2699":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:50750:14807":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:6516:4370":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:20969:2144":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:46858:11345":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:2670:3264":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:21257:2931":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:20028:32531":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:46785:10971":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:49831:8740":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:54157:20864":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:21062:2918":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:8596:110":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:52569:22433":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:9527:8739":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:2917:2365":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:48258:2231":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:2493:233":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:21744:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:4:982":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:21942:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:52515:22431":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:49812:8729":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:3980:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:48123:5933":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:50173:14834":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:21396:2912":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:22008:2910":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:3968:10877":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:50651:14818":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:50631:14817":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:50297:14828":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:8329:14063":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:52201:22422":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:4003:10968":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:49841:8741":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:46466:199":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:56986:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"0:48:1751":{"crate_id":0,"path":["bitflags","bitflags"],"kind":"macro"},"1:50009:14824":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:2321:178":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:56947:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:46300:2381":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:52649:22434":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:49356:143":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:8160:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:2497:232":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:46846:11356":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:29584:29879":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:47285:4384":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:20241:29355":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:58495:1429":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"1:58486:365":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"1:11055:14816":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:54127:20862":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:50277:14827":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:46964:11468":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:58487:911":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"1:50754:14808":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:51918:22412":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:49852:8747":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:0:484":{"crate_id":1,"path":["core"],"kind":"module"},"1:9138:218":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:49993:14826":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:39335:2158":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:47570:4353":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:2928:2366":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:1552:10826":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:2827:2361":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:49878:4362":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:8833:143":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:2969:2380":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:2564:114":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:3956:10876":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:2784:2357":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"}},"external_crates":{"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}