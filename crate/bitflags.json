{"root":"0:0:1834","crate_version":"2.2.1","includes_private":false,"index":{"0:33:786":{"id":"0:33:786","crate_id":0,"name":"iter","span":{"filename":"src/traits.rs","begin":[53,4],"end":[53,33]},"visibility":"default","docs":"Iterate over enabled flag values.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Iter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:22:1814","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:2545:126":{"id":"1:2545:126","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"1:31780:3836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:98":{"id":"0:98","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[143,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:44:2325","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u16"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:122":{"id":"0:122","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[143,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:44:2325","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u128"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:91":{"id":"0:91","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[143,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:44:2325","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i8"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:31:1917":{"id":"0:31:1917","crate_id":0,"name":"from_bits_retain","span":{"filename":"src/traits.rs","begin":[45,4],"end":[45,50]},"visibility":"default","docs":"Convert from underlying bit representation, preserving all\nbits (even those not corresponding to a defined flag).","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["bits",{"kind":"qualified_path","inner":{"name":"Bits","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:22:1814","args":null}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:70:1896":{"id":"0:70:1896","crate_id":0,"name":"ParseError","span":{"filename":"src/parser.rs","begin":[35,0],"end":[35,38]},"visibility":"public","docs":"An error encountered while parsing flags from text.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:7","a:1:8179:3951-0:70:1896","a:1:2672:217-0:70:1896","a:1:2736:2603-0:70:1896","a:1:2686:225-0:70:1896","a:1:8178:3952-0:70:1896","b:1:2531-0:70:1896","b:1:2542-0:70:1896","b:1:2527-0:70:1896","b:1:3331-0:70:1896","b:1:2240-0:70:1896","b:1:2537-0:70:1896","b:1:2237-0:70:1896","0:73","0:11"]}},"0:41:1937":{"id":"0:41:1937","crate_id":0,"name":"toggle","span":{"filename":"src/traits.rs","begin":[77,4],"end":[77,38]},"visibility":"default","docs":"Toggles the specified flags in-place.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:2736:2603-0:70:1896":{"id":"a:1:2736:2603-0:70:1896","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2736:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1896","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:2546:1456":{"id":"1:2546:1456","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40824:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"1:2511:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2531-0:70:1896":{"id":"b:1:2531-0:70:1896","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2504:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1896","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2533:685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2537-0:70:1896":{"id":"b:1:2537-0:70:1896","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2511:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1896","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2540:126","1:2541:1457"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:24:1848":{"id":"0:24:1848","crate_id":0,"name":"Iter","span":{"filename":"src/traits.rs","begin":[11,4],"end":[11,37]},"visibility":"default","docs":"An iterator over enabled flags in an instance of the type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7245:156","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Self"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:26:1902":{"id":"0:26:1902","crate_id":0,"name":"empty","span":{"filename":"src/traits.rs","begin":[17,4],"end":[17,23]},"visibility":"default","docs":"Returns an empty set of flags.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:37:1925":{"id":"0:37:1925","crate_id":0,"name":"intersects","span":{"filename":"src/traits.rs","begin":[65,4],"end":[65,46]},"visibility":"default","docs":"Returns `true` if there are flags common to both `self` and `other`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:35:1919":{"id":"0:35:1919","crate_id":0,"name":"is_empty","span":{"filename":"src/traits.rs","begin":[59,4],"end":[59,31]},"visibility":"default","docs":"Returns `true` if no flags are currently stored.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:2672:217-0:70:1896":{"id":"a:1:2672:217-0:70:1896","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2672:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1896","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2542-0:70:1896":{"id":"b:1:2542-0:70:1896","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2501:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2511:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1896","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2545:126","1:2546:1456"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:23:2294":{"id":"0:23:2294","crate_id":0,"name":"Bits","span":{"filename":"src/traits.rs","begin":[8,4],"end":[8,20]},"visibility":"default","docs":"The underlying integer type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Bits","id":"0:45:2294","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:114":{"id":"0:114","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[143,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:44:2325","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u64"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:10:2277":{"id":"0:10:2277","crate_id":0,"name":"empty_flag","span":{"filename":"src/parser.rs","begin":[85,4],"end":[87,5]},"visibility":"public","docs":"A hex or named flag wasn't found between separators.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2237-0:70:1896":{"id":"b:1:2237-0:70:1896","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2679:2306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2231:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1896","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2239:2501"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4-0:22:1814":{"id":"0:4-0:22:1814","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[429,0],"end":[429,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"traits::BitFlags","name":"BitFlags","id":"0:22:1814","glob":false}},"0:115":{"id":"0:115","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[143,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:44:2325","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i64"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:29:1908":{"id":"0:29:1908","crate_id":0,"name":"from_bits","span":{"filename":"src/traits.rs","begin":[31,4],"end":[33,20]},"visibility":"default","docs":"Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.\n\nNote that each [multi-bit flag] is treated as a unit for this comparison.\n\n[multi-bit flag]: index.html#multi-bit-flags","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["bits",{"kind":"qualified_path","inner":{"name":"Bits","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:22:1814","args":null}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40680:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2679:2306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:2530:2730":{"id":"1:2530:2730","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2504:131"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:131":{"id":"0:131","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[143,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:44:2325","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"isize"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:11":{"id":"0:11","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[90,0],"end":[120,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9074:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1896","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:12:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:42:1990":{"id":"0:42:1990","crate_id":0,"name":"set","span":{"filename":"src/traits.rs","begin":[80,4],"end":[80,48]},"visibility":"default","docs":"Inserts or removes the specified flags depending on the passed value.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:27:282":{"id":"0:27:282","crate_id":0,"name":"all","span":{"filename":"src/traits.rs","begin":[20,4],"end":[20,21]},"visibility":"default","docs":"Returns the set containing all flags.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:22:1814":{"id":"0:22:1814","crate_id":0,"name":"BitFlags","span":{"filename":"src/traits.rs","begin":[6,0],"end":[81,1]},"visibility":"public","docs":"A trait that is automatically implemented for all bitflags.\n\nIt should not be implemented manually.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:23:2294","0:24:1848","0:25:2298","0:26:1902","0:27:282","0:28:1874","0:29:1908","0:30:1913","0:31:1917","0:32:2135","0:33:786","0:34:2130","0:35:1919","0:36:1921","0:37:1925","0:38:1930","0:39:1932","0:40:1935","0:41:1937","0:42:1990"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ImplementedByBitFlagsMacro","id":"0:43:2292","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:123":{"id":"0:123","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[143,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:44:2325","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i128"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:38:1930":{"id":"0:38:1930","crate_id":0,"name":"contains","span":{"filename":"src/traits.rs","begin":[68,4],"end":[68,44]},"visibility":"default","docs":"Returns `true` if all of the flags in `other` are contained within `self`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:0:1834":{"id":"0:0:1834","crate_id":0,"name":"bitflags","span":{"filename":"src/lib.rs","begin":[11,0],"end":[1690,1]},"visibility":"public","docs":"A typesafe bitmask flag generator useful for sets of C-style flags.\nIt can be used for creating ergonomic wrappers around C APIs.\n\nThe `bitflags!` macro generates `struct`s that manage a set of flags. The\ntype of those flags must be some primitive integer.\n\n# Examples\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n        const ABC = Self::A.bits() | Self::B.bits() | Self::C.bits();\n    }\n}\n\nfn main() {\n    let e1 = Flags::A | Flags::C;\n    let e2 = Flags::B | Flags::C;\n    assert_eq!((e1 | e2), Flags::ABC);   // union\n    assert_eq!((e1 & e2), Flags::C);     // intersection\n    assert_eq!((e1 - e2), Flags::A);     // set difference\n    assert_eq!(!e2, Flags::A);           // set complement\n}\n```\n\nSee [`example_generated::Flags`](./example_generated/struct.Flags.html) for documentation of code\ngenerated by the above `bitflags!` expansion.\n\n# Visibility\n\nThe `bitflags!` macro supports visibility, just like you'd expect when writing a normal\nRust `struct`:\n\n```\nmod example {\n    use bitflags::bitflags;\n\n    bitflags! {\n        #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n        pub struct Flags1: u32 {\n            const A = 0b00000001;\n        }\n\n        #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n#       pub\n        struct Flags2: u32 {\n            const B = 0b00000010;\n        }\n    }\n}\n\nfn main() {\n    let flag1 = example::Flags1::A;\n    let flag2 = example::Flags2::B; // error: const `B` is private\n}\n```\n\n# Attributes\n\nAttributes can be attached to the generated flags types and their constants as normal.\n\n# Representation\n\nIt's valid to add a `#[repr(C)]` or `#[repr(transparent)]` attribute to a generated flags type.\nThe generated flags type is always guaranteed to be a newtype where its only field has the same\nABI as the underlying integer type.\n\nIn this example, `Flags` has the same ABI as `u32`:\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    #[repr(transparent)]\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n    }\n}\n```\n\n# Extending\n\nGenerated flags types belong to you, so you can add trait implementations to them outside\nof what the `bitflags!` macro gives:\n\n```\nuse std::fmt;\n\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n    }\n}\n\nimpl Flags {\n    pub fn clear(&mut self) {\n        *self.0.bits_mut() = 0;\n    }\n}\n\nfn main() {\n    let mut flags = Flags::A | Flags::B;\n\n    flags.clear();\n    assert!(flags.is_empty());\n\n    assert_eq!(format!(\"{:?}\", Flags::A | Flags::B), \"Flags(A | B)\");\n    assert_eq!(format!(\"{:?}\", Flags::B), \"Flags(B)\");\n}\n```\n\n# What's implemented by `bitflags!`\n\nThe `bitflags!` macro adds some trait implementations and inherent methods\nto generated flags types, but leaves room for you to choose the semantics\nof others.\n\n## Iterators\n\nThe following iterator traits are implemented for generated flags types:\n\n- `Extend`: adds the union of the instances iterated over.\n- `FromIterator`: calculates the union.\n- `IntoIterator`: iterates over set flag values.\n\n## Formatting\n\nThe following formatting traits are implemented for generated flags types:\n\n- `Binary`.\n- `LowerHex` and `UpperHex`.\n- `Octal`.\n\nAlso see the _Debug and Display_ section for details about standard text\nrepresentations for flags types.\n\n## Operators\n\nThe following operator traits are implemented for the generated `struct`s:\n\n- `BitOr` and `BitOrAssign`: union\n- `BitAnd` and `BitAndAssign`: intersection\n- `BitXor` and `BitXorAssign`: toggle\n- `Sub` and `SubAssign`: set difference\n- `Not`: set complement\n\n## Methods\n\nThe following methods are defined for the generated `struct`s:\n\n- `empty`: an empty set of flags\n- `all`: the set of all defined flags\n- `bits`: the raw value of the flags currently stored\n- `from_bits`: convert from underlying bit representation, unless that\n               representation contains bits that do not correspond to a\n               defined flag\n- `from_bits_truncate`: convert from underlying bit representation, dropping\n                        any bits that do not correspond to defined flags\n- `from_bits_retain`: convert from underlying bit representation, keeping\n                         all bits (even those not corresponding to defined\n                         flags)\n- `is_empty`: `true` if no flags are currently stored\n- `is_all`: `true` if currently set flags exactly equal all defined flags\n- `intersects`: `true` if there are flags common to both `self` and `other`\n- `contains`: `true` if all of the flags in `other` are contained within `self`\n- `insert`: inserts the specified flags in-place\n- `remove`: removes the specified flags in-place\n- `toggle`: the specified flags will be inserted if not present, and removed\n            if they are.\n- `set`: inserts or removes the specified flags depending on the passed value\n- `intersection`: returns a new set of flags, containing only the flags present\n                  in both `self` and `other` (the argument to the function).\n- `union`: returns a new set of flags, containing any flags present in\n           either `self` or `other` (the argument to the function).\n- `difference`: returns a new set of flags, containing all flags present in\n                `self` without any of the flags present in `other` (the\n                argument to the function).\n- `symmetric_difference`: returns a new set of flags, containing all flags\n                          present in either `self` or `other` (the argument\n                          to the function), but not both.\n- `complement`: returns a new set of flags, containing all flags which are\n                not set in `self`, but which are allowed for this type.\n\n# What's not implemented by `bitflags!`\n\nSome functionality is not automatically implemented for generated flags types\nby the `bitflags!` macro, even when it reasonably could be. This is so callers\nhave more freedom to decide on the semantics of their flags types.\n\n## `Clone` and `Copy`\n\nGenerated flags types are not automatically copyable, even though they can always\nderive both `Clone` and `Copy`.\n\n## `Default`\n\nThe `Default` trait is not automatically implemented for the generated structs.\n\nIf your default value is equal to `0` (which is the same value as calling `empty()`\non the generated struct), you can simply derive `Default`:\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    // Results in default value with bits: 0\n    #[derive(Default, Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n    }\n}\n\nfn main() {\n    let derived_default: Flags = Default::default();\n    assert_eq!(derived_default.bits(), 0);\n}\n```\n\nIf your default value is not equal to `0` you need to implement `Default` yourself:\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n    }\n}\n\n// explicit `Default` implementation\nimpl Default for Flags {\n    fn default() -> Flags {\n        Flags::A | Flags::C\n    }\n}\n\nfn main() {\n    let implemented_default: Flags = Default::default();\n    assert_eq!(implemented_default, (Flags::A | Flags::C));\n}\n```\n\n## `Debug` and `Display`\n\nThe `Debug` trait can be derived for a reasonable implementation. This library defines a standard\ntext-based representation for flags that generated flags types can use. For details on the exact\ngrammar, see the [`parser`] module.\n\nTo support formatting and parsing your generated flags types using that representation, you can implement\nthe standard `Display` and `FromStr` traits in this fashion:\n\n```\nuse bitflags::bitflags;\nuse std::{fmt, str};\n\nbitflags::bitflags! {\n    pub struct Flags: u32 {\n        const A = 1;\n        const B = 2;\n        const C = 4;\n        const D = 8;\n    }\n}\n\nimpl fmt::Debug for Flags {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        fmt::Debug::fmt(&self.0, f)\n    }\n}\n\nimpl fmt::Display for Flags {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        fmt::Display::fmt(&self.0, f)\n    }\n}\n\nimpl str::FromStr for Flags {\n    type Err = bitflags::parser::ParseError;\n\n    fn from_str(flags: &str) -> Result<Self, Self::Err> {\n        Ok(Self(flags.parse()?))\n    }\n}\n```\n\n## `PartialEq` and `PartialOrd`\n\nEquality and ordering can be derived for a reasonable implementation, or implemented manually\nfor different semantics.\n\n# Edge cases\n\n## Zero Flags\n\nFlags with a value equal to zero will have some strange behavior that one should be aware of.\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const NONE = 0b00000000;\n        const SOME = 0b00000001;\n    }\n}\n\nfn main() {\n    let empty = Flags::empty();\n    let none = Flags::NONE;\n    let some = Flags::SOME;\n\n    // Zero flags are treated as always present\n    assert!(empty.contains(Flags::NONE));\n    assert!(none.contains(Flags::NONE));\n    assert!(some.contains(Flags::NONE));\n\n    // Zero flags will be ignored when testing for emptiness\n    assert!(none.is_empty());\n}\n```\n\nUsers should generally avoid defining a flag with a value of zero.\n\n## Multi-bit Flags\n\nIt is allowed to define a flag with multiple bits set, however such\nflags are _not_ treated as a set where any of those bits is a valid\nflag. Instead, each flag is treated as a unit when converting from\nbits with [`from_bits`] or [`from_bits_truncate`].\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u8 {\n        const F3 = 0b00000011;\n    }\n}\n\nfn main() {\n    // This bit pattern does not set all the bits in `F3`, so it is rejected.\n    assert!(Flags::from_bits(0b00000001).is_none());\n    assert!(Flags::from_bits_truncate(0b00000001).is_empty());\n}\n```\n\n[`from_bits`]: BitFlags::from_bits\n[`from_bits_truncate`]: BitFlags::from_bits_truncate\n\n# The `BitFlags` trait\n\nThis library defines a `BitFlags` trait that's implemented by all generated flags types.\nThe trait makes it possible to work with flags types generically:\n\n```\nfn count_unset_flags<F: bitflags::BitFlags>(flags: &F) -> usize {\n    // Find out how many flags there are in total\n    let total = F::all().iter().count();\n\n    // Find out how many flags are set\n    let set = flags.iter().count();\n\n    total - set\n}\n\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n    }\n}\n\nassert_eq!(2, count_unset_flags(&Flags::B));\n```\n\n# The internal field\n\nThis library generates newtypes like:\n\n```\n# pub struct Field0;\npub struct Flags(Field0);\n```\n\nYou can freely use methods and trait implementations on this internal field as `.0`.\nFor details on exactly what's generated for it, see the [`Field0`](example_generated/struct.Field0.html)\nexample docs.","links":{"`parser`":"0:5:1815","BitFlags::from_bits_truncate":"0:30:1913","BitFlags::from_bits":"0:29:1908"},"attrs":["#![no_std]","#![forbid(unsafe_code)]","#![doc(html_root_url = \"https://docs.rs/bitflags/2.2.1\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:5:1815","0:4-0:22:1814","0:56:1834"],"is_stripped":false}},"a:1:8178:3952-0:70:1896":{"id":"a:1:8178:3952-0:70:1896","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8178:3952","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1896","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:2541:1457":{"id":"1:2541:1457","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40824:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2511:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:8179:3951-0:70:1896":{"id":"a:1:8179:3951-0:70:1896","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8179:3951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1896","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:8:2272":{"id":"0:8:2272","crate_id":0,"name":"invalid_hex_flag","span":{"filename":"src/parser.rs","begin":[57,4],"end":[68,5]},"visibility":"public","docs":"An invalid hex flag was encountered.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["flag",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:9074:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl fmt::Display","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:9074:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[143,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:44:2325","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u32"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[143,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:44:2325","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i16"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[34,9],"end":[34,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9069:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1896","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:74:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:25:2298":{"id":"0:25:2298","crate_id":0,"name":"IterNames","span":{"filename":"src/traits.rs","begin":[14,4],"end":[14,58]},"visibility":"default","docs":"An iterator over the raw names and bits for enabled flags in an instance of the type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7245:156","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"generic","inner":"Self"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[143,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:44:2325","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"usize"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[143,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:44:2325","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i32"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:2242:9518":{"id":"1:2242:9518","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:36:1921":{"id":"0:36:1921","crate_id":0,"name":"is_all","span":{"filename":"src/traits.rs","begin":[62,4],"end":[62,29]},"visibility":"default","docs":"Returns `true` if all flags are currently set.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:50:2339":{"id":"0:50:2339","crate_id":0,"name":"Internal","span":{"filename":"src/traits.rs","begin":[156,4],"end":[156,18]},"visibility":"default","docs":"The type of the internal field on the generated flags type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:34:2130":{"id":"0:34:2130","crate_id":0,"name":"iter_names","span":{"filename":"src/traits.rs","begin":[56,4],"end":[56,44]},"visibility":"default","docs":"Iterate over the raw names and bits for enabled flag values.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"IterNames","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:22:1814","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:39:1932":{"id":"0:39:1932","crate_id":0,"name":"insert","span":{"filename":"src/traits.rs","begin":[71,4],"end":[71,38]},"visibility":"default","docs":"Inserts the specified flags in-place.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:12:659":{"id":"0:12:659","crate_id":0,"name":"fmt","span":{"filename":"src/parser.rs","begin":[91,4],"end":[119,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:9044:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:9033:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:28:1874":{"id":"0:28:1874","crate_id":0,"name":"bits","span":{"filename":"src/traits.rs","begin":[23,4],"end":[23,33]},"visibility":"default","docs":"Returns the raw value of the flags currently stored.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Bits","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:22:1814","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:2239:2501":{"id":"1:2239:2501","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2540:126":{"id":"1:2540:126","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2511:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"0:32:2135":{"id":"0:32:2135","crate_id":0,"name":"from_name","span":{"filename":"src/traits.rs","begin":[48,4],"end":[50,20]},"visibility":"default","docs":"Get the flag for a particular name.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40680:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2679:2306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:2533:685":{"id":"1:2533:685","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:90":{"id":"0:90","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[143,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:44:2325","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u8"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:30:1913":{"id":"0:30:1913","crate_id":0,"name":"from_bits_truncate","span":{"filename":"src/traits.rs","begin":[41,4],"end":[41,52]},"visibility":"default","docs":"Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.\n\nNote that each [multi-bit flag] is treated as a unit for this comparison.\n\n[multi-bit flag]: index.html#multi-bit-flags","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["bits",{"kind":"qualified_path","inner":{"name":"Bits","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:22:1814","args":null}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:49:2081":{"id":"0:49:2081","crate_id":0,"name":"PublicFlags","span":{"filename":"src/traits.rs","begin":[154,0],"end":[157,1]},"visibility":"public","docs":"A trait for referencing the `bitflags`-owned internal type\nwithout exposing it publicly.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:50:2339"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:9:2275":{"id":"0:9:2275","crate_id":0,"name":"invalid_named_flag","span":{"filename":"src/parser.rs","begin":[71,4],"end":[82,5]},"visibility":"public","docs":"A named flag that doesn't correspond to any on the flags type was encountered.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["flag",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:9074:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl fmt::Display","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:9074:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2686:225-0:70:1896":{"id":"a:1:2686:225-0:70:1896","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2686:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1896","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2527-0:70:1896":{"id":"b:1:2527-0:70:1896","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2504:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2501:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1896","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2530:2730"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:7":{"id":"0:7","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[55,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1896","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:8:2272","0:9:2275","0:10:2277"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3331-0:70:1896":{"id":"b:1:3331-0:70:1896","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2679:2306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3329:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1896","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3333:1470"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2240-0:70:1896":{"id":"b:1:2240-0:70:1896","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2679:2306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2234:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1896","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2242:9518"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:74:659":{"id":"0:74:659","crate_id":0,"name":"fmt","span":{"filename":"src/parser.rs","begin":[34,9],"end":[34,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:9044:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:9033:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5:1815":{"id":"0:5:1815","crate_id":0,"name":"parser","span":{"filename":"src/parser.rs","begin":[1,0],"end":[123,40]},"visibility":"public","docs":"Parsing flags from text.\n\n`bitflags` defines the following *whitespace-insensitive*, *case-sensitive* grammar for flags formatted\nas text:\n\n- _Flags:_ (_Flag_)`|`*\n- _Flag:_ _Identifier_ | _HexNumber_\n- _Identifier:_ Any Rust identifier\n- _HexNumber_: `0x`([0-9a-fA-F])*\n\nAs an example, this is how `Flags::A | Flags::B | 0x0c` can be represented as text:\n\n```text\nA | B | 0x0c\n```\n\nAlternatively, it could be represented without whitespace:\n\n```text\nA|B|0x0C\n```\n\nNote that identifiers are *case-sensitive*, so the following is *not equivalent*:\n\n```text\na | b | 0x0c\n```","links":{},"attrs":["#![allow(clippy :: let_unit_value)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:70:1896"],"is_stripped":false}},"0:40:1935":{"id":"0:40:1935","crate_id":0,"name":"remove","span":{"filename":"src/traits.rs","begin":[74,4],"end":[74,38]},"visibility":"default","docs":"Removes the specified flags in-place.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:44:2325":{"id":"0:44:2325","crate_id":0,"name":"Sealed","span":{"filename":"src/traits.rs","begin":[91,0],"end":[91,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:123","0:106","0:99","0:131","0:114","0:107","0:90","0:98","0:122","0:130","0:91","0:115"]}},"0:56:1834":{"id":"0:56:1834","crate_id":0,"name":"bitflags","span":{"filename":"src/lib.rs","begin":[550,0],"end":[632,1]},"visibility":"public","docs":"The macro used to generate the flag structure.\n\nSee the [crate level docs](../bitflags/index.html) for complete documentation.\n\n# Example\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n        const ABC = Self::A.bits() | Self::B.bits() | Self::C.bits();\n    }\n}\n\nlet e1 = Flags::A | Flags::C;\nlet e2 = Flags::B | Flags::C;\nassert_eq!((e1 | e2), Flags::ABC);   // union\nassert_eq!((e1 & e2), Flags::C);     // intersection\nassert_eq!((e1 - e2), Flags::A);     // set difference\nassert_eq!(!e2, Flags::A);           // set complement\n```\n\nThe generated `struct`s can also be extended with type and trait\nimplementations:\n\n```\nuse std::fmt;\n\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n    }\n}\n\nimpl Flags {\n    pub fn clear(&mut self) {\n        *self.0.bits_mut() = 0;\n    }\n}\n\nlet mut flags = Flags::A | Flags::B;\n\nflags.clear();\nassert!(flags.is_empty());\n\nassert_eq!(format!(\"{:?}\", Flags::A | Flags::B), \"Flags(A | B)\");\nassert_eq!(format!(\"{:?}\", Flags::B), \"Flags(B)\");\n```","links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! bitflags {\n    (\n        $(#[$outer:meta])*\n        $vis:vis struct $BitFlags:ident: $T:ty {\n            $(\n                $(#[$inner:ident $($args:tt)*])*\n                const $Flag:ident = $value:expr;\n            )*\n        }\n\n        $($t:tt)*\n    ) => { ... };\n    () => { ... };\n}"},"1:3333:1470":{"id":"1:3333:1470","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"1:39008:3261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"1:42867:3389":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:41453:2351":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:40666:3165":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:39653:3140":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:46110:3529":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:42944:3283":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:39724:3144":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:39402:100":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:41991:3360":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:40867:1848":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:4028:3865":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:39662:3141":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:40529:3161":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:2829:2285":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"3:0:2560":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:31820:3252":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:10222:3190":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:21282:13616":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:46571:3538":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:6904:3867":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:50475:734":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"1:9084:191":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:39228:3265":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:39512:3295":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:20435:13989":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:2808:2576":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:22130:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:43223:4060":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:43234:3412":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:38742:2602":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:3329:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:2253:104":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:3209:2600":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:40631:3946":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:41719:1837":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:45968:3528":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:4169:2713":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:46468:3534":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:2507:235":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:38828:2590":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:2736:2603":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:7129:149":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:30226:9759":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:41679:10801":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:50460:926":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"1:14:2279":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:39049:3264":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:39388:3289":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:2997:2589":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:39694:3142":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:21607:3217":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:7245:156":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:2868:2582":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:11286:3196":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:9082:2352":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:2511:234":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:42511:3372":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:31780:3836":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:8767:10066":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:44595:3450":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:43244:3416":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:43664:3434":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:9754:219":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:42553:3376":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:41689:67":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:44577:3449":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:42909:3391":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:21756:3238":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:4246:3126":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:1625:3109":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:45266:3488":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:9897:1848":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:2684:107":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:42524:3373":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:50471:633":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"1:44886:3464":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:21666:3225":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:44540:3447":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:39332:3888":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:50480:1476":{"crate_id":1,"path":["core","u32"],"kind":"primitive"},"1:22196:3243":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:2770:2405":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:41744:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:43571:208":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:20454:13988":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:39963:3150":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:5914:3137":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:43452:4067":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:41999:3361":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:44932:3466":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:11323:3199":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:44740:3460":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:8285:3169":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:20710:9120":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:40765:3336":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:39008:3261":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:39249:9714":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:43652:3433":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:42451:3368":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:31829:3254":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:2993:2588":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:44263:3436":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:22229:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:6844:3148":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:20585:9124":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:50468:1460":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"1:39745:3318":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:45548:3493":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:4392:2717":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:4372:2715":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:4127:3124":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:39642:3309":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:20416:13618":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:7518:3934":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:42441:3367":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:38903:199":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:40883:2411":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:42937:3202":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:43066:3402":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:7092:3936":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:30624:3251":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:9297:143":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:21749:11324":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:42533:3374":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:2944:2587":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:9567:3029":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:39979:3151":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:44439:3443":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:10180:3187":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:46220:3530":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:39028:3262":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"1:39279:3270":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:50464:1037":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"1:43561:202":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:44243:3435":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:50461:411":{"crate_id":1,"path":["core","char"],"kind":"primitive"},"1:43622:3430":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:45054:3469":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:43080:3405":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:7088:3937":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:3936:3003":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:41317:3172":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:44355:3440":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:42461:3369":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:2682:223":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:2343:186":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:39222:3119":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:46758:3549":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:42603:3380":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:4773:786":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:12365:105":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:3993:3122":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:41037:87":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:43635:158":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:43396:4037":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:2504:131":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:40731:2296":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:39610:3305":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:38969:2591":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:22031:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:43384:4041":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:20861:9122":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:46602:3541":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:0:488":{"crate_id":1,"path":["core"],"kind":"module"},"1:2691:2719":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:11534:1895":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:41944:3347":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:42543:3375":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:46681:3546":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:9921:3178":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:39710:3313":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:12155:134":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:1618:579":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"2:229:207":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:9552:3024":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:43277:3205":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:43364:4035":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:2812:2578":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:12488:4094":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:46617:3542":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:39773:3146":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:7515:3863":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:4241:3125":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:42631:3383":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:0:435":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:39985:3320":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:11799:110":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:43376:4039":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:20751:3211":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:2775:2572":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:20835:9117":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:21683:9687":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:9080:2351":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:9289:139":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:20863:3211":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:2337:179":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:50466:1350":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"1:10740:3192":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:3981:3121":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:40957:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:39237:3266":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:20673:9116":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:2839:2579":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:2723:3840":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:11598:4044":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:46591:3540":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:9033:207":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"1:46506:3535":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:39492:3294":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:5455:3133":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:8772:12397":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:21658:3224":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:46666:3545":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:41237:84":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:43419:120":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:39035:3263":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:42749:3187":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:50467:1380":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"1:20830:2325":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:11593:4045":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:48933:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:48920:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:12376:3034":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:42953:3119":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:3509:3005":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:2845:2580":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:12189:13381":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:46582:3539":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:45188:3472":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:30048:67":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:44688:3458":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:3169:133":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:2796:2575":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:2765:2570":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:6648:12292":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:2501:147":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:42199:9553":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:39624:3308":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:2934:2584":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:50465:309":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"1:46628:3543":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:30062:9664":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:43209:3409":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:39482:3011":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:2761:3827":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:21118:9144":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:22097:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:22361:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:20704:9118":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:6601:3940":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:29803:3625":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:2834:2287":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:39994:3018":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:44488:3445":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:2817:2289":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:38947:200":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:50459:368":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"1:25639:3106":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:22394:3244":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:7522:3935":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:43380:4043":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:11397:3182":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:8180:3168":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:3194:15521":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:2863:2581":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:43400:4066":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:2592:126":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:2792:2573":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:22829:3105":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:4747:13859":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:48946:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:43368:4038":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:5513:3135":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:2683:222":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:40756:2411":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:39970:3319":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:40997:80":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:39592:3129":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:20388:3251":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:20661:2325":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:43257:3422":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:44642:3451":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:12241:3209":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:44718:3459":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:11644:4053":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:43392:4036":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:2800:2407":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"0:56:1834":{"crate_id":0,"path":["bitflags","bitflags"],"kind":"macro"},"1:39301:3273":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:38843:197":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:41762:126":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:46422:3533":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:41784:72":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:42372:3363":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:29992:3247":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:31816:2339":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:39407:3290":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:11587:4046":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:43440:3425":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:10101:3185":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:41446:2350":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:22328:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:30026:3107":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:3164:231":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:22262:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:2938:2585":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:50476:735":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"1:50482:1474":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"1:1721:3830":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:9946:3179":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:41117:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:41197:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:21378:9119":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:45342:3490":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:3246:2601":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:11578:3169":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"0:0:1834":{"crate_id":0,"path":["bitflags"],"kind":"module"},"1:40012:3155":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:40680:178":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:40004:3153":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:44558:3448":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:3392:3118":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"1:2231:96":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:21270:3556":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:21770:3239":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:48972:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:42767:3188":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:45578:3494":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:50479:1475":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"1:39326:3119":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:30596:180":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:7559:10025":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:44309:3438":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:50486:13":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"1:2859:2288":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:8179:3951":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:4308:3009":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:9332:3990":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:50483:780":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"1:50481:1477":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"1:11127:3193":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:21720:9688":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:2975:2598":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:9034:2706":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:3380:3838":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"1:8604:85":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:2138:580":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:43614:3428":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:40618:3334":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:50477:731":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"1:41157:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:4363:3010":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:4418:2716":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:30032:3248":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:12216:189":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:21575:3216":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:20401:13618":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:48563:9153":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:45424:3491":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:20456:13986":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:42695:3384":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:8599:78":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:7125:132":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:48998:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:45085:3470":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:40798:3338":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:39582:3304":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:45612:3495":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:2786:2574":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:38859:195":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:21704:9709":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:2672:217":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:3091:2592":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:7167:119":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:41960:3350":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:39265:3269":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:22064:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:43579:192":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:10066:3184":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:44417:3442":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:50294:3558":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:39563:3301":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:42423:3364":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:50273:3557":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:43172:3204":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:2458:2325":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:2824:2283":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:50474:733":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"1:43372:4040":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:39572:3302":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:44518:3446":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:8178:3952":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:40816:190":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:39001:2594":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:21376:2325":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:39289:3271":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:2306:123":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:42498:3295":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:21631:3222":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:44333:3439":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:11362:3201":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:21469:3213":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:42795:3386":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:21591:11291":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:39956:3149":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:44834:3462":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:46562:3537":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:2234:97":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:41439:2349":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:9069:110":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:2941:2586":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:20648:9126":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:6512:2449":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:39541:3298":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:44864:3463":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:43145:3408":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:39362:3285":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:44910:3465":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:39734:3315":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:2851:2284":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:44287:3437":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:9989:3182":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"0:5:1815":{"crate_id":0,"path":["bitflags","parser"],"kind":"module"},"1:39685:3312":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:45108:3471":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:41277:91":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:50478:1478":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"1:1735:10792":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:40807:3957":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:41460:2352":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:39759:3145":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:20854:2325":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:2804:2577":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:4318:2714":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:48985:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:3154:2593":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:45007:3468":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:46719:3548":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:4:1002":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:11346:3200":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:20702:2325":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:46696:3547":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"0:70:1896":{"crate_id":0,"path":["bitflags","parser","ParseError"],"kind":"struct"},"1:1744:3110":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:42203:3177":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:42184:3362":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:46544:3536":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:9078:2349":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:10028:3183":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:41735:70":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:10194:3188":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:2910:115":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:4237:204":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:8746:659":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:40546:3945":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:50484:1531":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"1:12168:4091":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:40595:9665":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:39675:3310":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:46360:3532":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:42899:3390":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:40512:3159":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:42432:3365":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:12407:202":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"1:41981:3356":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:46298:3531":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:21522:3215":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:50472:634":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"1:46643:3544":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:50485:1112":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"1:40489:152":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:4096:3123":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:42621:3381":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:42663:3185":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:2498:73":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:41077:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:44956:3467":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:40575:10802":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:9086:2707":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:2680:3839":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:40824:207":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:40917:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:39309:3887":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:39633:3136":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:44788:3461":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:1809:3114":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:39369:3889":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:21643:9761":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:3181:2597":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:9088:2708":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:4726:3898":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:45762:3496":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:39554:3299":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:1534:3003":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:2923:2583":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:43029:4059":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:2780:2571":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:9076:2350":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:1903:3115":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:42713:3385":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:22295:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:7190:2604":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:42928:3393":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:3175:2595":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:38781:2599":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:11111:3998":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:20433:13991":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:30120:9708":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:2686:225":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:40892:180":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:48959:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:39419:9689":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:38883:196":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:2855:2286":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:39042:2714":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"1:38925:198":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:2749:3765":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:9337:3175":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:10139:3186":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:10707:3191":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:50473:736":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"1:9044:130":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:42615:3195":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:9535:3023":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:4005:102":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:44457:3444":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:45502:3492":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:9074:118":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:2495:74":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:41952:3349":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:3643:2411":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:43051:3395":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:41969:143":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:22163:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:9744:2325":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:7138:2409":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:42919:3392":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:45312:3489":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:40748:3178":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:39601:3132":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:2578:114":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:21782:3656":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:42645:3179":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:2459:3624":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:43388:4042":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:2679:2306":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:6695:3926":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:9453:3020":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:42813:3387":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:10208:3189":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:42849:3388":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:39532:3297":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:9222:3174":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:39355:3284":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:42962:3273":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:43097:3406":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:40654:3162":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:20622:9125":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:41707:108":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:39435:3293":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:40740:1848":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:2301:185":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:40875:3178":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:50462:1494":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"1:21113:9121":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:42472:3370":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:39348:3283":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:44387:3441":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:42589:3377":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"}},"external_crates":{"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}