{"root":"0:0:1847","crate_version":"2.2.1","includes_private":false,"index":{"1:2547:127":{"id":"1:2547:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"1:31893:3969","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:32:2148":{"id":"0:32:2148","crate_id":0,"name":"from_name","span":{"filename":"src/traits.rs","begin":[48,4],"end":[50,20]},"visibility":"default","docs":"Get the flag for a particular name.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2682:2320","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:2544-0:70:1909":{"id":"b:1:2544-0:70:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2503:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2513:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2547:127","1:2548:1468"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:10:2291":{"id":"0:10:2291","crate_id":0,"name":"empty_flag","span":{"filename":"src/parser.rs","begin":[85,4],"end":[87,5]},"visibility":"public","docs":"A hex or named flag wasn't found between separators.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:8203:4085-0:70:1909":{"id":"a:1:8203:4085-0:70:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8203:4085","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:29:1921":{"id":"0:29:1921","crate_id":0,"name":"from_bits","span":{"filename":"src/traits.rs","begin":[31,4],"end":[33,20]},"visibility":"default","docs":"Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.\n\nNote that each [multi-bit flag] is treated as a unit for this comparison.\n\n[multi-bit flag]: index.html#multi-bit-flags","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["bits",{"kind":"qualified_path","inner":{"name":"Bits","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:22:1827","args":null}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2682:2320","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:5:1828":{"id":"0:5:1828","crate_id":0,"name":"parser","span":{"filename":"src/parser.rs","begin":[1,0],"end":[123,40]},"visibility":"public","docs":"Parsing flags from text.\n\n`bitflags` defines the following *whitespace-insensitive*, *case-sensitive* grammar for flags formatted\nas text:\n\n- _Flags:_ (_Flag_)`|`*\n- _Flag:_ _Identifier_ | _HexNumber_\n- _Identifier:_ Any Rust identifier\n- _HexNumber_: `0x`([0-9a-fA-F])*\n\nAs an example, this is how `Flags::A | Flags::B | 0x0c` can be represented as text:\n\n```text\nA | B | 0x0c\n```\n\nAlternatively, it could be represented without whitespace:\n\n```text\nA|B|0x0C\n```\n\nNote that identifiers are *case-sensitive*, so the following is *not equivalent*:\n\n```text\na | b | 0x0c\n```","links":{},"attrs":["#![allow(clippy :: let_unit_value)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:70:1909"],"is_stripped":false}},"0:42:2003":{"id":"0:42:2003","crate_id":0,"name":"set","span":{"filename":"src/traits.rs","begin":[80,4],"end":[80,48]},"visibility":"default","docs":"Inserts or removes the specified flags depending on the passed value.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:98":{"id":"0:98","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[143,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:44:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u16"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:40:1948":{"id":"0:40:1948","crate_id":0,"name":"remove","span":{"filename":"src/traits.rs","begin":[74,4],"end":[74,38]},"visibility":"default","docs":"Removes the specified flags in-place.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:122":{"id":"0:122","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[143,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:44:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u128"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:91":{"id":"0:91","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[143,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:44:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i8"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:35:1932":{"id":"0:35:1932","crate_id":0,"name":"is_empty","span":{"filename":"src/traits.rs","begin":[59,4],"end":[59,31]},"visibility":"default","docs":"Returns `true` if no flags are currently stored.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:2692:227-0:70:1909":{"id":"a:1:2692:227-0:70:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2692:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:25:2312":{"id":"0:25:2312","crate_id":0,"name":"IterNames","span":{"filename":"src/traits.rs","begin":[14,4],"end":[14,58]},"visibility":"default","docs":"An iterator over the raw names and bits for enabled flags in an instance of the type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7272:158","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"generic","inner":"Self"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"1:2542:127":{"id":"1:2542:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2513:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"0:22:1827":{"id":"0:22:1827","crate_id":0,"name":"BitFlags","span":{"filename":"src/traits.rs","begin":[6,0],"end":[81,1]},"visibility":"public","docs":"A trait that is automatically implemented for all bitflags.\n\nIt should not be implemented manually.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:23:2308","0:24:1861","0:25:2312","0:26:1915","0:27:284","0:28:1887","0:29:1921","0:30:1926","0:31:1930","0:32:2148","0:33:793","0:34:2143","0:35:1932","0:36:1934","0:37:1938","0:38:1943","0:39:1945","0:40:1948","0:41:1950","0:42:2003"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ImplementedByBitFlagsMacro","id":"0:43:2306","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:44:2339":{"id":"0:44:2339","crate_id":0,"name":"Sealed","span":{"filename":"src/traits.rs","begin":[91,0],"end":[91,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:115","0:114","0:107","0:99","0:98","0:130","0:122","0:131","0:123","0:90","0:91","0:106"]}},"0:114":{"id":"0:114","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[143,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:44:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u64"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:12:666":{"id":"0:12:666","crate_id":0,"name":"fmt","span":{"filename":"src/parser.rs","begin":[91,4],"end":[119,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:9071:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:9060:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:70:1909":{"id":"0:70:1909","crate_id":0,"name":"ParseError","span":{"filename":"src/parser.rs","begin":[35,0],"end":[35,38]},"visibility":"public","docs":"An error encountered while parsing flags from text.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:7","a:1:8203:4085-0:70:1909","a:1:8204:4084-0:70:1909","a:1:2692:227-0:70:1909","a:1:2732:2618-0:70:1909","a:1:2675:219-0:70:1909","b:1:3308-0:70:1909","b:1:2539-0:70:1909","b:1:2544-0:70:1909","b:1:2533-0:70:1909","b:1:2529-0:70:1909","b:1:2239-0:70:1909","b:1:2242-0:70:1909","0:11","0:73"]}},"0:115":{"id":"0:115","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[143,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:44:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i64"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:11":{"id":"0:11","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[90,0],"end":[120,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9101:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:12:666"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2242-0:70:1909":{"id":"b:1:2242-0:70:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2682:2320","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2236:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2244:9710"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:131":{"id":"0:131","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[143,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:44:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"isize"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2675:219-0:70:1909":{"id":"a:1:2675:219-0:70:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2675:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2239-0:70:1909":{"id":"b:1:2239-0:70:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2682:2320","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2233:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2241:2515"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3310:1482":{"id":"1:3310:1482","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"1:39195:3275","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2241:2515":{"id":"1:2241:2515","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:23:2308":{"id":"0:23:2308","crate_id":0,"name":"Bits","span":{"filename":"src/traits.rs","begin":[8,4],"end":[8,20]},"visibility":"default","docs":"The underlying integer type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Bits","id":"0:45:2308","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:123":{"id":"0:123","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[143,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:44:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i128"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:24:1861":{"id":"0:24:1861","crate_id":0,"name":"Iter","span":{"filename":"src/traits.rs","begin":[11,4],"end":[11,37]},"visibility":"default","docs":"An iterator over enabled flags in an instance of the type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7272:158","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Self"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:50:2353":{"id":"0:50:2353","crate_id":0,"name":"Internal","span":{"filename":"src/traits.rs","begin":[156,4],"end":[156,18]},"visibility":"default","docs":"The type of the internal field on the generated flags type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:31:1930":{"id":"0:31:1930","crate_id":0,"name":"from_bits_retain","span":{"filename":"src/traits.rs","begin":[45,4],"end":[45,50]},"visibility":"default","docs":"Convert from underlying bit representation, preserving all\nbits (even those not corresponding to a defined flag).","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["bits",{"kind":"qualified_path","inner":{"name":"Bits","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:22:1827","args":null}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:74:666":{"id":"0:74:666","crate_id":0,"name":"fmt","span":{"filename":"src/parser.rs","begin":[34,9],"end":[34,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:9071:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:9060:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[143,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:44:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u32"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:8:2286":{"id":"0:8:2286","crate_id":0,"name":"invalid_hex_flag","span":{"filename":"src/parser.rs","begin":[57,4],"end":[68,5]},"visibility":"public","docs":"An invalid hex flag was encountered.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["flag",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:9101:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl fmt::Display","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:9101:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2543:1469":{"id":"1:2543:1469","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:41395:209","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2513:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2732:2618-0:70:1909":{"id":"a:1:2732:2618-0:70:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2732:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[34,9],"end":[34,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9096:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:74:666"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:27:284":{"id":"0:27:284","crate_id":0,"name":"all","span":{"filename":"src/traits.rs","begin":[20,4],"end":[20,21]},"visibility":"default","docs":"Returns the set containing all flags.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:28:1887":{"id":"0:28:1887","crate_id":0,"name":"bits","span":{"filename":"src/traits.rs","begin":[23,4],"end":[23,33]},"visibility":"default","docs":"Returns the raw value of the flags currently stored.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Bits","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:22:1827","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:2529-0:70:1909":{"id":"b:1:2529-0:70:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2506:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2503:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2532:2743"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:33:793":{"id":"0:33:793","crate_id":0,"name":"iter","span":{"filename":"src/traits.rs","begin":[53,4],"end":[53,33]},"visibility":"default","docs":"Iterate over enabled flag values.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Iter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:22:1827","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:36:1934":{"id":"0:36:1934","crate_id":0,"name":"is_all","span":{"filename":"src/traits.rs","begin":[62,4],"end":[62,29]},"visibility":"default","docs":"Returns `true` if all flags are currently set.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:2539-0:70:1909":{"id":"b:1:2539-0:70:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2513:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2509:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2542:127","1:2543:1469"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:2244:9710":{"id":"1:2244:9710","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:34:2143":{"id":"0:34:2143","crate_id":0,"name":"iter_names","span":{"filename":"src/traits.rs","begin":[56,4],"end":[56,44]},"visibility":"default","docs":"Iterate over the raw names and bits for enabled flag values.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"IterNames","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:22:1827","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:2533-0:70:1909":{"id":"b:1:2533-0:70:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2506:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2535:692"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:37:1938":{"id":"0:37:1938","crate_id":0,"name":"intersects","span":{"filename":"src/traits.rs","begin":[65,4],"end":[65,46]},"visibility":"default","docs":"Returns `true` if there are flags common to both `self` and `other`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:38:1943":{"id":"0:38:1943","crate_id":0,"name":"contains","span":{"filename":"src/traits.rs","begin":[68,4],"end":[68,44]},"visibility":"default","docs":"Returns `true` if all of the flags in `other` are contained within `self`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:39:1945":{"id":"0:39:1945","crate_id":0,"name":"insert","span":{"filename":"src/traits.rs","begin":[71,4],"end":[71,38]},"visibility":"default","docs":"Inserts the specified flags in-place.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:26:1915":{"id":"0:26:1915","crate_id":0,"name":"empty","span":{"filename":"src/traits.rs","begin":[17,4],"end":[17,23]},"visibility":"default","docs":"Returns an empty set of flags.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[143,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:44:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i32"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[143,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:44:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i16"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[143,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:44:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"usize"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:0:1847":{"id":"0:0:1847","crate_id":0,"name":"bitflags","span":{"filename":"src/lib.rs","begin":[11,0],"end":[1690,1]},"visibility":"public","docs":"A typesafe bitmask flag generator useful for sets of C-style flags.\nIt can be used for creating ergonomic wrappers around C APIs.\n\nThe `bitflags!` macro generates `struct`s that manage a set of flags. The\ntype of those flags must be some primitive integer.\n\n# Examples\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n        const ABC = Self::A.bits() | Self::B.bits() | Self::C.bits();\n    }\n}\n\nfn main() {\n    let e1 = Flags::A | Flags::C;\n    let e2 = Flags::B | Flags::C;\n    assert_eq!((e1 | e2), Flags::ABC);   // union\n    assert_eq!((e1 & e2), Flags::C);     // intersection\n    assert_eq!((e1 - e2), Flags::A);     // set difference\n    assert_eq!(!e2, Flags::A);           // set complement\n}\n```\n\nSee [`example_generated::Flags`](./example_generated/struct.Flags.html) for documentation of code\ngenerated by the above `bitflags!` expansion.\n\n# Visibility\n\nThe `bitflags!` macro supports visibility, just like you'd expect when writing a normal\nRust `struct`:\n\n```\nmod example {\n    use bitflags::bitflags;\n\n    bitflags! {\n        #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n        pub struct Flags1: u32 {\n            const A = 0b00000001;\n        }\n\n        #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n#       pub\n        struct Flags2: u32 {\n            const B = 0b00000010;\n        }\n    }\n}\n\nfn main() {\n    let flag1 = example::Flags1::A;\n    let flag2 = example::Flags2::B; // error: const `B` is private\n}\n```\n\n# Attributes\n\nAttributes can be attached to the generated flags types and their constants as normal.\n\n# Representation\n\nIt's valid to add a `#[repr(C)]` or `#[repr(transparent)]` attribute to a generated flags type.\nThe generated flags type is always guaranteed to be a newtype where its only field has the same\nABI as the underlying integer type.\n\nIn this example, `Flags` has the same ABI as `u32`:\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    #[repr(transparent)]\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n    }\n}\n```\n\n# Extending\n\nGenerated flags types belong to you, so you can add trait implementations to them outside\nof what the `bitflags!` macro gives:\n\n```\nuse std::fmt;\n\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n    }\n}\n\nimpl Flags {\n    pub fn clear(&mut self) {\n        *self.0.bits_mut() = 0;\n    }\n}\n\nfn main() {\n    let mut flags = Flags::A | Flags::B;\n\n    flags.clear();\n    assert!(flags.is_empty());\n\n    assert_eq!(format!(\"{:?}\", Flags::A | Flags::B), \"Flags(A | B)\");\n    assert_eq!(format!(\"{:?}\", Flags::B), \"Flags(B)\");\n}\n```\n\n# What's implemented by `bitflags!`\n\nThe `bitflags!` macro adds some trait implementations and inherent methods\nto generated flags types, but leaves room for you to choose the semantics\nof others.\n\n## Iterators\n\nThe following iterator traits are implemented for generated flags types:\n\n- `Extend`: adds the union of the instances iterated over.\n- `FromIterator`: calculates the union.\n- `IntoIterator`: iterates over set flag values.\n\n## Formatting\n\nThe following formatting traits are implemented for generated flags types:\n\n- `Binary`.\n- `LowerHex` and `UpperHex`.\n- `Octal`.\n\nAlso see the _Debug and Display_ section for details about standard text\nrepresentations for flags types.\n\n## Operators\n\nThe following operator traits are implemented for the generated `struct`s:\n\n- `BitOr` and `BitOrAssign`: union\n- `BitAnd` and `BitAndAssign`: intersection\n- `BitXor` and `BitXorAssign`: toggle\n- `Sub` and `SubAssign`: set difference\n- `Not`: set complement\n\n## Methods\n\nThe following methods are defined for the generated `struct`s:\n\n- `empty`: an empty set of flags\n- `all`: the set of all defined flags\n- `bits`: the raw value of the flags currently stored\n- `from_bits`: convert from underlying bit representation, unless that\n               representation contains bits that do not correspond to a\n               defined flag\n- `from_bits_truncate`: convert from underlying bit representation, dropping\n                        any bits that do not correspond to defined flags\n- `from_bits_retain`: convert from underlying bit representation, keeping\n                         all bits (even those not corresponding to defined\n                         flags)\n- `is_empty`: `true` if no flags are currently stored\n- `is_all`: `true` if currently set flags exactly equal all defined flags\n- `intersects`: `true` if there are flags common to both `self` and `other`\n- `contains`: `true` if all of the flags in `other` are contained within `self`\n- `insert`: inserts the specified flags in-place\n- `remove`: removes the specified flags in-place\n- `toggle`: the specified flags will be inserted if not present, and removed\n            if they are.\n- `set`: inserts or removes the specified flags depending on the passed value\n- `intersection`: returns a new set of flags, containing only the flags present\n                  in both `self` and `other` (the argument to the function).\n- `union`: returns a new set of flags, containing any flags present in\n           either `self` or `other` (the argument to the function).\n- `difference`: returns a new set of flags, containing all flags present in\n                `self` without any of the flags present in `other` (the\n                argument to the function).\n- `symmetric_difference`: returns a new set of flags, containing all flags\n                          present in either `self` or `other` (the argument\n                          to the function), but not both.\n- `complement`: returns a new set of flags, containing all flags which are\n                not set in `self`, but which are allowed for this type.\n\n# What's not implemented by `bitflags!`\n\nSome functionality is not automatically implemented for generated flags types\nby the `bitflags!` macro, even when it reasonably could be. This is so callers\nhave more freedom to decide on the semantics of their flags types.\n\n## `Clone` and `Copy`\n\nGenerated flags types are not automatically copyable, even though they can always\nderive both `Clone` and `Copy`.\n\n## `Default`\n\nThe `Default` trait is not automatically implemented for the generated structs.\n\nIf your default value is equal to `0` (which is the same value as calling `empty()`\non the generated struct), you can simply derive `Default`:\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    // Results in default value with bits: 0\n    #[derive(Default, Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n    }\n}\n\nfn main() {\n    let derived_default: Flags = Default::default();\n    assert_eq!(derived_default.bits(), 0);\n}\n```\n\nIf your default value is not equal to `0` you need to implement `Default` yourself:\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n    }\n}\n\n// explicit `Default` implementation\nimpl Default for Flags {\n    fn default() -> Flags {\n        Flags::A | Flags::C\n    }\n}\n\nfn main() {\n    let implemented_default: Flags = Default::default();\n    assert_eq!(implemented_default, (Flags::A | Flags::C));\n}\n```\n\n## `Debug` and `Display`\n\nThe `Debug` trait can be derived for a reasonable implementation. This library defines a standard\ntext-based representation for flags that generated flags types can use. For details on the exact\ngrammar, see the [`parser`] module.\n\nTo support formatting and parsing your generated flags types using that representation, you can implement\nthe standard `Display` and `FromStr` traits in this fashion:\n\n```\nuse bitflags::bitflags;\nuse std::{fmt, str};\n\nbitflags::bitflags! {\n    pub struct Flags: u32 {\n        const A = 1;\n        const B = 2;\n        const C = 4;\n        const D = 8;\n    }\n}\n\nimpl fmt::Debug for Flags {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        fmt::Debug::fmt(&self.0, f)\n    }\n}\n\nimpl fmt::Display for Flags {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        fmt::Display::fmt(&self.0, f)\n    }\n}\n\nimpl str::FromStr for Flags {\n    type Err = bitflags::parser::ParseError;\n\n    fn from_str(flags: &str) -> Result<Self, Self::Err> {\n        Ok(Self(flags.parse()?))\n    }\n}\n```\n\n## `PartialEq` and `PartialOrd`\n\nEquality and ordering can be derived for a reasonable implementation, or implemented manually\nfor different semantics.\n\n# Edge cases\n\n## Zero Flags\n\nFlags with a value equal to zero will have some strange behavior that one should be aware of.\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const NONE = 0b00000000;\n        const SOME = 0b00000001;\n    }\n}\n\nfn main() {\n    let empty = Flags::empty();\n    let none = Flags::NONE;\n    let some = Flags::SOME;\n\n    // Zero flags are treated as always present\n    assert!(empty.contains(Flags::NONE));\n    assert!(none.contains(Flags::NONE));\n    assert!(some.contains(Flags::NONE));\n\n    // Zero flags will be ignored when testing for emptiness\n    assert!(none.is_empty());\n}\n```\n\nUsers should generally avoid defining a flag with a value of zero.\n\n## Multi-bit Flags\n\nIt is allowed to define a flag with multiple bits set, however such\nflags are _not_ treated as a set where any of those bits is a valid\nflag. Instead, each flag is treated as a unit when converting from\nbits with [`from_bits`] or [`from_bits_truncate`].\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u8 {\n        const F3 = 0b00000011;\n    }\n}\n\nfn main() {\n    // This bit pattern does not set all the bits in `F3`, so it is rejected.\n    assert!(Flags::from_bits(0b00000001).is_none());\n    assert!(Flags::from_bits_truncate(0b00000001).is_empty());\n}\n```\n\n[`from_bits`]: BitFlags::from_bits\n[`from_bits_truncate`]: BitFlags::from_bits_truncate\n\n# The `BitFlags` trait\n\nThis library defines a `BitFlags` trait that's implemented by all generated flags types.\nThe trait makes it possible to work with flags types generically:\n\n```\nfn count_unset_flags<F: bitflags::BitFlags>(flags: &F) -> usize {\n    // Find out how many flags there are in total\n    let total = F::all().iter().count();\n\n    // Find out how many flags are set\n    let set = flags.iter().count();\n\n    total - set\n}\n\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n    }\n}\n\nassert_eq!(2, count_unset_flags(&Flags::B));\n```\n\n# The internal field\n\nThis library generates newtypes like:\n\n```\n# pub struct Field0;\npub struct Flags(Field0);\n```\n\nYou can freely use methods and trait implementations on this internal field as `.0`.\nFor details on exactly what's generated for it, see the [`Field0`](example_generated/struct.Field0.html)\nexample docs.","links":{"`parser`":"0:5:1828","BitFlags::from_bits_truncate":"0:30:1926","BitFlags::from_bits":"0:29:1921"},"attrs":["#![no_std]","#![forbid(unsafe_code)]","#![doc(html_root_url = \"https://docs.rs/bitflags/2.2.1\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:5:1828","0:4-0:22:1827","0:56:1847"],"is_stripped":false}},"b:1:3308-0:70:1909":{"id":"b:1:3308-0:70:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2682:2320","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3306:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3310:1482"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4-0:22:1827":{"id":"0:4-0:22:1827","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[429,0],"end":[429,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"traits::BitFlags","name":"BitFlags","id":"0:22:1827","glob":false}},"0:41:1950":{"id":"0:41:1950","crate_id":0,"name":"toggle","span":{"filename":"src/traits.rs","begin":[77,4],"end":[77,38]},"visibility":"default","docs":"Toggles the specified flags in-place.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:2548:1468":{"id":"1:2548:1468","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:41395:209","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"1:2513:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2535:692":{"id":"1:2535:692","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2532:2743":{"id":"1:2532:2743","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2506:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:90":{"id":"0:90","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[143,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:44:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u8"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:56:1847":{"id":"0:56:1847","crate_id":0,"name":"bitflags","span":{"filename":"src/lib.rs","begin":[550,0],"end":[632,1]},"visibility":"public","docs":"The macro used to generate the flag structure.\n\nSee the [crate level docs](../bitflags/index.html) for complete documentation.\n\n# Example\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n        const ABC = Self::A.bits() | Self::B.bits() | Self::C.bits();\n    }\n}\n\nlet e1 = Flags::A | Flags::C;\nlet e2 = Flags::B | Flags::C;\nassert_eq!((e1 | e2), Flags::ABC);   // union\nassert_eq!((e1 & e2), Flags::C);     // intersection\nassert_eq!((e1 - e2), Flags::A);     // set difference\nassert_eq!(!e2, Flags::A);           // set complement\n```\n\nThe generated `struct`s can also be extended with type and trait\nimplementations:\n\n```\nuse std::fmt;\n\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n    }\n}\n\nimpl Flags {\n    pub fn clear(&mut self) {\n        *self.0.bits_mut() = 0;\n    }\n}\n\nlet mut flags = Flags::A | Flags::B;\n\nflags.clear();\nassert!(flags.is_empty());\n\nassert_eq!(format!(\"{:?}\", Flags::A | Flags::B), \"Flags(A | B)\");\nassert_eq!(format!(\"{:?}\", Flags::B), \"Flags(B)\");\n```","links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! bitflags {\n    (\n        $(#[$outer:meta])*\n        $vis:vis struct $BitFlags:ident: $T:ty {\n            $(\n                $(#[$inner:ident $($args:tt)*])*\n                const $Flag:ident = $value:expr;\n            )*\n        }\n\n        $($t:tt)*\n    ) => { ... };\n    () => { ... };\n}"},"0:7":{"id":"0:7","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[55,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:8:2286","0:9:2289","0:10:2291"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:9:2289":{"id":"0:9:2289","crate_id":0,"name":"invalid_named_flag","span":{"filename":"src/parser.rs","begin":[71,4],"end":[82,5]},"visibility":"public","docs":"A named flag that doesn't correspond to any on the flags type was encountered.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["flag",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:9101:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl fmt::Display","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:9101:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:8204:4084-0:70:1909":{"id":"a:1:8204:4084-0:70:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8204:4084","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseError","id":"0:70:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:30:1926":{"id":"0:30:1926","crate_id":0,"name":"from_bits_truncate","span":{"filename":"src/traits.rs","begin":[41,4],"end":[41,52]},"visibility":"default","docs":"Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.\n\nNote that each [multi-bit flag] is treated as a unit for this comparison.\n\n[multi-bit flag]: index.html#multi-bit-flags","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["bits",{"kind":"qualified_path","inner":{"name":"Bits","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:22:1827","args":null}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:49:2094":{"id":"0:49:2094","crate_id":0,"name":"PublicFlags","span":{"filename":"src/traits.rs","begin":[154,0],"end":[157,1]},"visibility":"public","docs":"A trait for referencing the `bitflags`-owned internal type\nwithout exposing it publicly.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:50:2353"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"1:2974:2604":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:45525:3598":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:1738:12266":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:2757:2586":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:4800:793":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:2789:2593":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:40527:3162":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:40181:3440":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:2339:181":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:47262:3674":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:40063:3429":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:39070:198":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:2816:2594":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:11835:111":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:20715:9262":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:41369:3473":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:43531:3415":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:51299:740":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"1:2918:2601":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:43478:3525":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:42562:3495":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:4103:3136":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:12399:106":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:43965:4171":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:44148:194":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:2513:236":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:2828:2298":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:51311:13":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"1:43067:3430":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:43714:3543":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:4253:3139":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:11358:3212":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:9579:3037":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:20447:3265":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:47449:3685":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:20820:9264":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:39812:3132":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:43336:3201":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:43020:3503":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"0:0:1847":{"crate_id":0,"path":["bitflags"],"kind":"module"},"1:2822:2595":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:44009:3560":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:9249:3187":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:43418:3522":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:1812:3127":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:2806:2299":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:2500:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:10242:3202":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:39827:3408":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:10100:3197":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:0:441":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:45024:3575":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:3357:3971":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"1:41060:154":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:3369:3131":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"1:43214:3192":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:20895:9252":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:0:495":{"crate_id":1,"path":["core"],"kind":"module"},"1:46989:3667":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:40316:3453":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:40053:3024":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:45249:3584":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:4774:11704":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:43001:3500":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:20999:9251":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:43620:3530":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:39978:3425":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:20505:10172":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:42290:1850":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:2687:108":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:20752:9263":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:9115:2721":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:7194:120":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:39959:3424":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:4370:3023":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:21629:3229":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:45745:3605":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:39914:4022":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:43933:4169":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:3131:2608":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:40006:3428":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:47319:3679":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:2887:116":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:39030:199":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:42770:10282":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:4425:2729":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:39990:10709":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:11162:3206":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:38929:2617":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:39236:3278":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:6871:3161":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:6628:4073":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:43080:3507":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:2697:2732":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:4248:3138":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:9324:144":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:51298:743":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"1:3223:2616":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:4176:2726":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:25752:3119":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:12205:150":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:5482:3146":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:30737:3265":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:47051:3668":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:2675:219":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:21243:9255":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:51304:1487":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"1:45698:3604":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:46453:3632":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:9105:2363":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:40213:3444":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:22303:3257":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:51287:1506":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"1:45078:3577":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:2686:224":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:44204:160":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:43949:4177":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:21765:3238":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:22204:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:42552:3491":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:51284:370":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"1:2794:2303":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:39839:10667":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:40125:3434":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:41166:10684":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:43945:4173":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:12253:191":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:41446:3191":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:39855:3411":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:22138:177":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:2503:148":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:20653:9260":{"crate_id":1,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"1:8205:3181":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:43112:3510":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:39926:3419":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:41202:4079":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:2460:2339":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:46303:3631":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:8310:3182":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:44130:204":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"0:5:1828":{"crate_id":0,"path":["bitflags","parser"],"kind":"module"},"1:41251:180":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:51310:1121":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"1:41117:4078":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:10741:3204":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:39818:3407":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:45409:3595":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:39188:2609":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:42570:3496":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:2811:2301":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:2915:2600":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:12410:3047":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:42515:3482":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:40295:3157":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:2836:2302":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:2308:124":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:43282:3519":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:20780:9257":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:39046:197":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:2781:2592":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:40556:3455":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:10228:3201":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:11381:3213":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:47387:3683":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:43158:3512":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"0:70:1909":{"crate_id":0,"path":["bitflags","parser","ParseError"],"kind":"struct"},"1:43953:4175":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:47253:3673":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:51293:1472":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"1:46003:3625":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:40281:3448":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:11321:3209":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:2255:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:45231:3583":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:21682:3230":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:21750:10723":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:45623:3602":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:45148:3580":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:43778:3544":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:4325:2727":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:45179:3581":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:12192:135":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:39015:2605":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:41438:1861":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:8203:4085":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:12522:4227":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:10135:3198":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:3152:2610":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:20679:10728":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:39112:200":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:10214:3200":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:2594:127":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:51308:787":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"1:29916:3758":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:42531:3485":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:30175:11568":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"0:56:1847":{"crate_id":0,"path":["bitflags","bitflags"],"kind":"macro"},"1:9359:4123":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:47334:3680":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:9109:2366":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:30339:11537":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:4753:388":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:51301:742":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"1:43846:3218":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:22369:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:20681:3945":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:20833:2339":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:40083:3430":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:45647:3603":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:44191:3565":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:10256:3203":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:43232:3198":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:47235:3672":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:2785:2591":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:9107:2365":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:21863:3252":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:4:1011":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:47273:3675":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:1747:3123":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:41225:3175":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:51285:934":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"1:9364:3188":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:43649:3540":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:43122:3511":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:2763:2589":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:20915:3226":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:3186:2615":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:2769:2588":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:2729:3974":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:43522:3132":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:30161:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:41454:2425":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:1537:3016":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:44233:3569":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:9111:193":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:39222:3277":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:2738:3960":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:41311:1861":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:6675:10758":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:21790:10715":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:11397:3214":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:2732:2618":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:7152:133":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:7545:4067":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:20994:2339":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:2777:2421":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:9113:2720":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:7115:4070":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:30105:3261":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:43030:3504":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:43792:4195":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:22237:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:30709:182":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:43598:4194":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:4134:3137":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:51292:1392":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"1:22402:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:45431:3596":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:42017:2364":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:45268:3585":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:40550:3164":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:9594:3042":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:9773:2339":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:2461:3757":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:43666:3541":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:2497:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:51307:1486":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"1:7217:2619":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:43741:3217":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:30139:3120":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:3146:134":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:22270:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:8797:14280":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:12441:204":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"1:41528:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:4035:4000":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:2735:3898":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:21025:9258":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:41189:3469":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:39907:3416":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:43010:3502":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:40541:3454":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:43264:3518":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:39879:3413":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:9071:131":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:11629:4179":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:20640:9259":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:9980:3192":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:43102:3509":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:2921:2602":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:41083:3172":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:2840:2596":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:22501:3258":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:51309:1543":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"1:20849:9250":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:9103:2364":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:2345:188":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:41319:3191":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:47293:3677":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:40246:3445":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:39156:2606":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:42010:2363":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:40195:3443":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:45577:3600":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:40534:3163":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:40265:3155":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:10173:3199":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:14:2293":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:41688:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:22468:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:40305:3450":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:12226:10549":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:2580:115":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:8629:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:39940:4023":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:44934:3571":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:43382:3521":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:41568:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:9060:209":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"1:43988:121":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:42941:3498":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:30145:3262":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:9931:1861":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:42774:3190":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:3171:13754":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:44021:4202":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:42306:71":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:6539:2463":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:21027:3226":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:2509:237":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:40344:3159":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:21889:3789":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:11623:4180":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:45957:3624":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:7549:4068":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:44183:3563":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:21811:10708":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:2737:3977":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:10023:3195":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:44954:3572":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:43184:3208":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:47197:3671":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:5540:3148":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:11680:4188":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:3306:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:43937:4172":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:41608:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:40143:3437":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:9061:2719":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:20507:10174":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:22171:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:20488:10175":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:39933:3420":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:3068:2607":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:51306:1489":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"1:21773:3239":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:45209:3582":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:45130:3579":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:41808:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:9480:3033":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:41302:2310":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:41378:4090":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:20475:9949":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:47282:3676":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:42540:144":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:40224:3153":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:40565:3031":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:10774:3205":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:46239:3629":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:51297:641":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"1:47159:3670":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:4399:2730":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:39215:3276":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"1:43957:4176":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:2752:2587":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:43172:3515":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:22435:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:6722:4059":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:21877:3253":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:40134:3436":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:44221:3568":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:44140:210":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:42992:3499":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:2900:2598":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:51290:311":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"3:0:2575":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:39134:202":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:21018:2339":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:45108:3578":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:2832:2300":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:3497:3018":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:39869:3412":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:1628:3122":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:41327:2425":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:5941:3150":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:3924:3016":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:51302:738":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"1:47308:3678":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:22942:3118":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:42031:2366":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:39229:2727":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"1:49255:9268":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:7542:3999":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:43093:3508":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:9316:140":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:43513:3416":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:46801:3665":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:39409:10204":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:9096:111":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:1907:3128":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:40575:3166":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:41387:192":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:4315:3022":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:43826:3557":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:41100:3174":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:4379:2728":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:43813:3551":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:11569:1908":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:2303:187":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:45000:3574":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:43803:3547":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:31893:3969":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:45555:3599":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:45799:3607":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:31933:3266":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:41463:182":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:8204:4084":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:51286:417":{"crate_id":1,"path":["core","char"],"kind":"primitive"},"1:2154:3946":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:31998:3268":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:30233:11569":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:21738:3236":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:51291:1362":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"1:2685:225":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:43436:3523":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:6931:4002":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:2747:2419":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:45879:3608":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:3141:233":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:40330:3158":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:41728:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:1724:3963":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:40112:3433":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:42278:109":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:41848:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:4012:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:42250:12258":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:43497:3527":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:3988:3134":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:43969:4201":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:2233:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:12278:3222":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:43961:4170":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:21342:3224":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:45046:3576":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:40163:3142":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:41395:209":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:46193:3628":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:42333:127":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:51289:1046":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"1:21470:2339":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:8792:15131":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:11432:3195":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:45601:3601":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:2970:2603":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:20671:9256":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:20490:10177":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:43190:3516":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:44978:3573":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:21248:9265":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:20893:2339":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:11614:3182":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:40103:3432":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:8771:666":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:47372:3682":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:40204:3149":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:39090:201":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:43488:3526":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:46911:3666":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:21354:9945":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:46033:3626":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:229:209":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:43364:3520":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:21827:10670":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:45333:3587":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:39973:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:11634:4178":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:46659:3664":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:44246:3570":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:31929:2353":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:43468:3524":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:9562:3036":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:47410:3684":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:9101:119":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:42755:3497":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:4000:3135":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:47113:3669":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:2506:132":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:40256:3447":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:2682:2320":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:51300:741":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"1:10062:3196":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:21714:3231":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:45479:3597":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:51305:1488":{"crate_id":1,"path":["core","u32"],"kind":"primitive"},"1:4244:206":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:21698:12259":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:51303:1490":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"1:43041:3505":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:41768:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:41888:3185":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:7165:2423":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:2236:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:47357:3681":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:2952:2613":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:20901:9254":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:3631:2425":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:40172:3145":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:21576:3227":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:1621:586":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:39891:3415":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:2801:2297":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:43200:3417":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:21472:9253":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:46269:3630":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:46115:3627":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:3158:2612":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:42523:3484":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:7156:151":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:7119:4069":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:22336:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:9955:3191":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:40153:3439":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:42355:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:42315:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:41146:12275":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:41488:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:41336:3471":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:20790:3945":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:38968:2614":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:39899:3132":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:2142:587":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:2683:3973":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:7272:158":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:41648:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:2911:2599":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:2152:3945":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:42024:2365":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:45286:3586":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:9783:221":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:43941:4174":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:40583:3168":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:2773:2590":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:43635:3537":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:45379:3594":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:2845:2597":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:51296:640":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"1:42260:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:45776:3606":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:2742:2585":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:8624:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:2692:227":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:21856:12255":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:43506:3215":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:7586:15170":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:20460:9949":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:41237:3178":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:11146:4131":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:39195:3275":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:43318:3200":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:40233:3154":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"}},"external_crates":{"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":25}