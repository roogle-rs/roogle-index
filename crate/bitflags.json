{"root":"0:0:1748","crate_version":"2.0.0-rc.1","includes_private":false,"index":{"0:30:1831":{"id":"0:30:1831","crate_id":0,"name":"contains","span":{"filename":"src/traits.rs","begin":[60,4],"end":[60,44]},"visibility":"default","docs":"Returns `true` all of the flags in `other` are contained within `self`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:31:1833":{"id":"0:31:1833","crate_id":0,"name":"insert","span":{"filename":"src/traits.rs","begin":[63,4],"end":[63,38]},"visibility":"default","docs":"Inserts the specified flags in-place.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:20:1787":{"id":"0:20:1787","crate_id":0,"name":"bits","span":{"filename":"src/traits.rs","begin":[23,4],"end":[23,33]},"visibility":"default","docs":"Returns the raw value of the flags currently stored.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Bits","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:14:1739","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:55:1741":{"id":"0:55:1741","crate_id":0,"name":"external","span":{"filename":"src/external.rs","begin":[1,0],"end":[88,1]},"visibility":"crate","docs":"Conditional trait implementations for external libraries.","links":{},"attrs":["#[macro_use]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":true}},"0:17:2116":{"id":"0:17:2116","crate_id":0,"name":"IterNames","span":{"filename":"src/traits.rs","begin":[14,4],"end":[14,58]},"visibility":"default","docs":"An iterator over the raw names and bits for enabled flags in an instance of the type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7152:154","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"generic","inner":"Self"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:18:1803":{"id":"0:18:1803","crate_id":0,"name":"empty","span":{"filename":"src/traits.rs","begin":[17,4],"end":[17,23]},"visibility":"default","docs":"Returns an empty set of flags.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:26:2001":{"id":"0:26:2001","crate_id":0,"name":"iter_names","span":{"filename":"src/traits.rs","begin":[48,4],"end":[48,44]},"visibility":"default","docs":"Iterate over the raw names and bits for enabled flag values.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"IterNames","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:14:1739","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:16:1761":{"id":"0:16:1761","crate_id":0,"name":"Iter","span":{"filename":"src/traits.rs","begin":[11,4],"end":[11,37]},"visibility":"default","docs":"An iterator over enabled flags in an instance of the type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7152:154","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Self"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1738","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i16"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:36:2141":{"id":"0:36:2141","crate_id":0,"name":"Sealed","span":{"filename":"src/traits.rs","begin":[83,0],"end":[83,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:64","0:65","0:72","0:73","0:80","0:81","0:88","0:89","0:96","0:97"]}},"0:29:1826":{"id":"0:29:1826","crate_id":0,"name":"intersects","span":{"filename":"src/traits.rs","begin":[57,4],"end":[57,46]},"visibility":"default","docs":"Returns `true` if there are flags common to both `self` and `other`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1738","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u128"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1738","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i128"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1738","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u32"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:48:1748":{"id":"0:48:1748","crate_id":0,"name":"bitflags","span":{"filename":"src/lib.rs","begin":[472,0],"end":[543,1]},"visibility":"public","docs":"The macro used to generate the flag structure.\n\nSee the [crate level docs](../bitflags/index.html) for complete documentation.\n\n# Example\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n        const ABC = Self::A.bits() | Self::B.bits() | Self::C.bits();\n    }\n}\n\nfn main() {\n    let e1 = Flags::A | Flags::C;\n    let e2 = Flags::B | Flags::C;\n    assert_eq!((e1 | e2), Flags::ABC);   // union\n    assert_eq!((e1 & e2), Flags::C);     // intersection\n    assert_eq!((e1 - e2), Flags::A);     // set difference\n    assert_eq!(!e2, Flags::A);           // set complement\n}\n```\n\nThe generated `struct`s can also be extended with type and trait\nimplementations:\n\n```\nuse std::fmt;\n\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n    }\n}\n\nimpl Flags {\n    pub fn clear(&mut self) {\n        *self.0.bits_mut() = 0;\n    }\n}\n\nfn main() {\n    let mut flags = Flags::A | Flags::B;\n\n    flags.clear();\n    assert!(flags.is_empty());\n\n    assert_eq!(format!(\"{:?}\", Flags::A | Flags::B), \"Flags(A | B)\");\n    assert_eq!(format!(\"{:?}\", Flags::B), \"Flags(B)\");\n}\n```","links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! bitflags {\n    (\n        $(#[$outer:meta])*\n        $vis:vis struct $BitFlags:ident: $T:ty {\n            $(\n                $(#[$inner:ident $($args:tt)*])*\n                const $Flag:ident = $value:expr;\n            )*\n        }\n\n        $($t:tt)*\n    ) => { ... };\n    () => { ... };\n}"},"0:14:1739":{"id":"0:14:1739","crate_id":0,"name":"BitFlags","span":{"filename":"src/traits.rs","begin":[6,0],"end":[73,1]},"visibility":"public","docs":"A trait that is automatically implemented for all bitflags.\n\nIt should not be implemented manually.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:15:2112","0:16:1761","0:17:2116","0:18:1803","0:19:279","0:20:1787","0:21:1809","0:22:1814","0:23:1818","0:24:2004","0:25:769","0:26:2001","0:27:1820","0:28:1822","0:29:1826","0:30:1831","0:31:1833","0:32:1836","0:33:1838","0:34:1891"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ImplementedByBitFlagsMacro","id":"0:35:2110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:28:1822":{"id":"0:28:1822","crate_id":0,"name":"is_all","span":{"filename":"src/traits.rs","begin":[54,4],"end":[54,29]},"visibility":"default","docs":"Returns `true` if all flags are currently set.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:21:1809":{"id":"0:21:1809","crate_id":0,"name":"from_bits","span":{"filename":"src/traits.rs","begin":[27,4],"end":[29,20]},"visibility":"default","docs":"Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["bits",{"kind":"qualified_path","inner":{"name":"Bits","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:14:1739","args":null}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48046:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2673:2122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:34:1891":{"id":"0:34:1891","crate_id":0,"name":"set","span":{"filename":"src/traits.rs","begin":[72,4],"end":[72,48]},"visibility":"default","docs":"Inserts or removes the specified flags depending on the passed value.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1738","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i32"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:33:1838":{"id":"0:33:1838","crate_id":0,"name":"toggle","span":{"filename":"src/traits.rs","begin":[69,4],"end":[69,38]},"visibility":"default","docs":"Toggles the specified flags in-place.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:15:2112":{"id":"0:15:2112","crate_id":0,"name":"Bits","span":{"filename":"src/traits.rs","begin":[8,4],"end":[8,20]},"visibility":"default","docs":"The underlying integer type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Bits","id":"0:37:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[351,33],"end":[351,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::traits","name":"traits","id":"0:5:1738","glob":true}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[353,4],"end":[353,17]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"core","name":"core","id":"1:0:482","glob":false}},"0:0:1748":{"id":"0:0:1748","crate_id":0,"name":"bitflags","span":{"filename":"src/lib.rs","begin":[11,0],"end":[1430,1]},"visibility":"public","docs":"A typesafe bitmask flag generator useful for sets of C-style flags.\nIt can be used for creating ergonomic wrappers around C APIs.\n\nThe `bitflags!` macro generates `struct`s that manage a set of flags. The\ntype of those flags must be some primitive integer.\n\n# Examples\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n        const ABC = Self::A.bits() | Self::B.bits() | Self::C.bits();\n    }\n}\n\nfn main() {\n    let e1 = Flags::A | Flags::C;\n    let e2 = Flags::B | Flags::C;\n    assert_eq!((e1 | e2), Flags::ABC);   // union\n    assert_eq!((e1 & e2), Flags::C);     // intersection\n    assert_eq!((e1 - e2), Flags::A);     // set difference\n    assert_eq!(!e2, Flags::A);           // set complement\n}\n```\n\nSee [`example_generated::Flags`](./example_generated/struct.Flags.html) for documentation of code\ngenerated by the above `bitflags!` expansion.\n\n# Visibility\n\nThe `bitflags!` macro supports visibility, just like you'd expect when writing a normal\nRust `struct`:\n\n```\nmod example {\n    use bitflags::bitflags;\n\n    bitflags! {\n        #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n        pub struct Flags1: u32 {\n            const A = 0b00000001;\n        }\n\n        #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n#       pub\n        struct Flags2: u32 {\n            const B = 0b00000010;\n        }\n    }\n}\n\nfn main() {\n    let flag1 = example::Flags1::A;\n    let flag2 = example::Flags2::B; // error: const `B` is private\n}\n```\n\n# Attributes\n\nAttributes can be attached to the generated flags types and their constants as normal.\n\n# Representation\n\nIt's valid to add a `#[repr(C)]` or `#[repr(transparent)]` attribute to a generated flags type.\nThe generated flags type is always guaranteed to be a newtype where its only field has the same\nABI as the underlying integer type.\n\nIn this example, `Flags` has the same ABI as `u32`:\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    #[repr(transparent)]\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n    }\n}\n```\n\n# Extending\n\nGenerated flags types belong to you, so you can add trait implementations to them outside\nof what the `bitflags!` macro gives:\n\n```\nuse std::fmt;\n\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n    }\n}\n\nimpl Flags {\n    pub fn clear(&mut self) {\n        *self.0.bits_mut() = 0;\n    }\n}\n\nfn main() {\n    let mut flags = Flags::A | Flags::B;\n\n    flags.clear();\n    assert!(flags.is_empty());\n\n    assert_eq!(format!(\"{:?}\", Flags::A | Flags::B), \"Flags(A | B)\");\n    assert_eq!(format!(\"{:?}\", Flags::B), \"Flags(B)\");\n}\n```\n\n# What's implemented by `bitflags!`\n\nThe `bitflags!` trait adds some trait implementations and inherent methods\nto generated flags types, but leaves room for you to choose the semantics\nof others.\n\n## Iterators\n\nThe following iterator traits are implemented for generated flags types:\n\n- `Extend`: adds the union of the instances iterated over.\n- `FromIterator`: calculates the union.\n- `IntoIterator`: iterates over set flag values.\n\n## Formatting\n\nThe following formatting traits are implemented for generated flags types:\n\n- `Binary`.\n- `LowerHex` and `UpperHex`.\n- `Octal`.\n\n## Operators\n\nThe following operator traits are implemented for the generated `struct`s:\n\n- `BitOr` and `BitOrAssign`: union\n- `BitAnd` and `BitAndAssign`: intersection\n- `BitXor` and `BitXorAssign`: toggle\n- `Sub` and `SubAssign`: set difference\n- `Not`: set complement\n\n## Methods\n\nThe following methods are defined for the generated `struct`s:\n\n- `empty`: an empty set of flags\n- `all`: the set of all defined flags\n- `bits`: the raw value of the flags currently stored\n- `from_bits`: convert from underlying bit representation, unless that\n               representation contains bits that do not correspond to a\n               defined flag\n- `from_bits_truncate`: convert from underlying bit representation, dropping\n                        any bits that do not correspond to defined flags\n- `from_bits_retain`: convert from underlying bit representation, keeping\n                         all bits (even those not corresponding to defined\n                         flags)\n- `is_empty`: `true` if no flags are currently stored\n- `is_all`: `true` if currently set flags exactly equal all defined flags\n- `intersects`: `true` if there are flags common to both `self` and `other`\n- `contains`: `true` if all of the flags in `other` are contained within `self`\n- `insert`: inserts the specified flags in-place\n- `remove`: removes the specified flags in-place\n- `toggle`: the specified flags will be inserted if not present, and removed\n            if they are.\n- `set`: inserts or removes the specified flags depending on the passed value\n- `intersection`: returns a new set of flags, containing only the flags present\n                  in both `self` and `other` (the argument to the function).\n- `union`: returns a new set of flags, containing any flags present in\n           either `self` or `other` (the argument to the function).\n- `difference`: returns a new set of flags, containing all flags present in\n                `self` without any of the flags present in `other` (the\n                argument to the function).\n- `symmetric_difference`: returns a new set of flags, containing all flags\n                          present in either `self` or `other` (the argument\n                          to the function), but not both.\n- `complement`: returns a new set of flags, containing all flags which are\n                not set in `self`, but which are allowed for this type.\n\n# What's not implemented by `bitflags!`\n\nSome functionality is not automatically implemented for generated flags types\nby the `bitflags!` macro, even when it reasonably could be. This is so callers\nhave more freedom to decide on the semantics of their flags types.\n\n## `Clone` and `Copy`\n\nGenerated flags types are not automatically copyable, even though they can always\nderive both `Clone` and `Copy`.\n\n## `Default`\n\nThe `Default` trait is not automatically implemented for the generated structs.\n\nIf your default value is equal to `0` (which is the same value as calling `empty()`\non the generated struct), you can simply derive `Default`:\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    // Results in default value with bits: 0\n    #[derive(Default, Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n    }\n}\n\nfn main() {\n    let derived_default: Flags = Default::default();\n    assert_eq!(derived_default.bits(), 0);\n}\n```\n\nIf your default value is not equal to `0` you need to implement `Default` yourself:\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n    }\n}\n\n// explicit `Default` implementation\nimpl Default for Flags {\n    fn default() -> Flags {\n        Flags::A | Flags::C\n    }\n}\n\nfn main() {\n    let implemented_default: Flags = Default::default();\n    assert_eq!(implemented_default, (Flags::A | Flags::C));\n}\n```\n\n## `Debug` and `Display`\n\nThe `Debug` trait can be derived for a reasonable implementation.\n\n## `PartialEq` and `PartialOrd`\n\nEquality and ordering can be derived for a reasonable implementation, or implemented manually\nfor different semantics.\n\n# Edge cases\n\n## Zero Flags\n\nFlags with a value equal to zero will have some strange behavior that one should be aware of.\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const NONE = 0b00000000;\n        const SOME = 0b00000001;\n    }\n}\n\nfn main() {\n    let empty = Flags::empty();\n    let none = Flags::NONE;\n    let some = Flags::SOME;\n\n    // Zero flags are treated as always present\n    assert!(empty.contains(Flags::NONE));\n    assert!(none.contains(Flags::NONE));\n    assert!(some.contains(Flags::NONE));\n\n    // Zero flags will be ignored when testing for emptiness\n    assert!(none.is_empty());\n}\n```\n\nUsers should generally avoid defining a flag with a value of zero.\n\n# The `BitFlags` trait\n\nThis library defines a `BitFlags` trait that's implemented by all generated flags types.\nThe trait makes it possible to work with flags types generically:\n\n```\nfn count_unset_flags<F: bitflags::BitFlags>(flags: &F) -> usize {\n    // Find out how many flags there are in total\n    let total = F::all().iter().count();\n\n    // Find out how many flags are set\n    let set = flags.iter().count();\n\n    total - set\n}\n\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n    }\n}\n\nassert_eq!(2, count_unset_flags(&Flags::B));\n```","links":{},"attrs":["#![no_std]","#![doc(html_root_url = \"https://docs.rs/bitflags/2.0.0-rc.1\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:4","0:48:1748"],"is_stripped":false}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1738","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u8"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:88":{"id":"0:88","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1738","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u64"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:41:1952":{"id":"0:41:1952","crate_id":0,"name":"PublicFlags","span":{"filename":"src/traits.rs","begin":[145,0],"end":[148,1]},"visibility":"public","docs":"A trait for referencing the `bitflags`-owned internal type\nwithout exposing it publicly.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:42:2155"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:23:1818":{"id":"0:23:1818","crate_id":0,"name":"from_bits_retain","span":{"filename":"src/traits.rs","begin":[37,4],"end":[37,50]},"visibility":"default","docs":"Convert from underlying bit representation, preserving all\nbits (even those not corresponding to a defined flag).","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["bits",{"kind":"qualified_path","inner":{"name":"Bits","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:14:1739","args":null}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:32:1836":{"id":"0:32:1836","crate_id":0,"name":"remove","span":{"filename":"src/traits.rs","begin":[66,4],"end":[66,38]},"visibility":"default","docs":"Removes the specified flags in-place.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4":{"id":"0:4","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[345,0],"end":[345,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"traits::BitFlags","name":"BitFlags","id":"0:14:1739","glob":false}},"0:24:2004":{"id":"0:24:2004","crate_id":0,"name":"from_name","span":{"filename":"src/traits.rs","begin":[40,4],"end":[42,20]},"visibility":"default","docs":"Get the flag for a particular name.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48046:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2673:2122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:22:1814":{"id":"0:22:1814","crate_id":0,"name":"from_bits_truncate","span":{"filename":"src/traits.rs","begin":[33,4],"end":[33,52]},"visibility":"default","docs":"Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["bits",{"kind":"qualified_path","inner":{"name":"Bits","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:14:1739","args":null}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:19:279":{"id":"0:19:279","crate_id":0,"name":"all","span":{"filename":"src/traits.rs","begin":[20,4],"end":[20,21]},"visibility":"default","docs":"Returns the set containing all flags.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:25:769":{"id":"0:25:769","crate_id":0,"name":"iter","span":{"filename":"src/traits.rs","begin":[45,4],"end":[45,33]},"visibility":"default","docs":"Iterate over enabled flag values.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Iter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:14:1739","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1738","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u16"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5:1738":{"id":"0:5:1738","crate_id":0,"name":"traits","span":{"filename":"src/traits.rs","begin":[1,0],"end":[148,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:14:1739","0:36:2141","0:41:1952"],"is_stripped":true}},"0:27:1820":{"id":"0:27:1820","crate_id":0,"name":"is_empty","span":{"filename":"src/traits.rs","begin":[51,4],"end":[51,31]},"visibility":"default","docs":"Returns `true` if no flags are currently stored.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:42:2155":{"id":"0:42:2155","crate_id":0,"name":"Internal","span":{"filename":"src/traits.rs","begin":[147,4],"end":[147,18]},"visibility":"default","docs":"The type of the internal field on the generated flags type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[351,20],"end":[351,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::external","name":"external","id":"0:55:1741","glob":true}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1738","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i64"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1738","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i8"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"paths":{"1:46828:11320":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:5461:4334":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:22001:2907":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:20440:2141":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:46956:11433":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:47277:4381":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:50082:14795":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:21327:3006":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:10589:8696":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:47192:4385":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:49369:31523":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:2290:123":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:46458:198":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:9590:8706":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:48046:176":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:52459:22395":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:2676:221":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:4199:3391":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:50331:11310":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:54080:20825":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:48106:1761":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:57003:240":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:11106:14844":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:2826:2105":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:50784:120":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:2666:215":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:50297:14802":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:4130:3388":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:46814:11318":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:58491:2302":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"1:48164:7062":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:2485:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:53996:22417":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:8867:14103":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:50749:14774":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:11846:10950":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:6823:3390":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:48241:5922":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:46968:11523":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:20290:29311":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:21869:165":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:47245:4379":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:20247:2141":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:49322:14105":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:9562:8705":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:46911:11315":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:20421:29310":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:4373:3401":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:49025:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:48122:2228":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:9448:8720":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:39291:3155":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:8550:130":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:51715:22369":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:8597:2166":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:58490:2301":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"1:20021:32511":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:47558:4350":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:11755:31785":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:47183:4375":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:47174:4374":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:10859:8719":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:50574:14852":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:49895:8711":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:49330:31851":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:25210:2903":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:49958:14788":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:47203:4376":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:20040:32510":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:7075:119":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:29577:29844":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:1751:9030":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:20208:29319":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:2804:2357":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:49822:8709":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:8862:14102":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:4063:3404":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:5628:12007":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:46553:3398":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"1:47031:11428":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:3374:7035":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"1:47091:4368":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:21161:2976":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:2973:2377":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:46951:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:6763:3158":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:7098:2384":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:3960:10842":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:12010:3776":{"crate_id":1,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"1:48549:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:20259:29309":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:11040:14778":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:58496:2307":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"1:21356:3005":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:3166:133":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:52537:22397":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:2154:573":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:48131:7057":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:9483:8707":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:50268:14792":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:54118:20827":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:47521:4342":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:21055:2915":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:46394:194":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:58483:2296":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"1:50737:14771":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:7047:2226":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:3172:2374":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:53874:22414":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:49058:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:49088:126":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:9410:8704":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:3972:10843":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:53562:22410":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:50609:14855":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:21704:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:52954:22404":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:20288:2141":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:11678:187":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:50928:206":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:50064:14796":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:2285:183":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:8609:6063":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:46370:193":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:46798:11374":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:51891:22376":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:2809:2107":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:11055:14780":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:4266:3397":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:46546:31881":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:48511:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:48625:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:4090:3405":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:46897:11313":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:49743:14418":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:8599:2165":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:2678:107":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:50741:14772":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:49843:8716":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:48785:2165":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:50218:14797":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:49569:14755":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:50118:8705":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:9132:217":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:52876:22403":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:2939:2365":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:54043:20822":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:8607:2939":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:50599:14854":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:3386:7039":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"1:48321:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:21803:2906":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:2767:2351":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:56964:240":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:4195:202":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:58494:2305":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"1:50979:15382":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:2800:2355":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:2843:2102":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:48663:3411":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:47328:4384":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:21737:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:48182:188":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:54148:20829":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:49984:14791":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:46881:11312":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:47041:11429":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:47142:4371":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:5849:4386":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:6997:4358":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:5384:4373":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:48792:2166":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:20704:29338":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:11651:31784":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:0:430":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:21214:2965":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:50588:14853":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:8813:138":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:49043:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:9279:1761":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:47061:4359":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:46904:11314":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:9371:8719":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:50622:14782":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:2796:2356":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:21770:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:2488:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:20171:29318":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:50462:14849":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:58500:2311":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"1:11630:13053":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:50745:14773":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:53958:22416":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:50000:14789":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:4007:10934":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:50642:14783":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:11617:134":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:1919:3573":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:8605:189":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:58312:31838":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:2497:232":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:50278:14794":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:49076:108":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:2674:3261":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:58498:2309":{"crate_id":1,"path":["core","u32"],"kind":"primitive"},"1:21968:164":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:50431:14845":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:47514:4341":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:2235:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:50729:14769":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:58478:2292":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"1:21935:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:20296:29313":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:39331:9388":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:20447:29316":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:10808:14805":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:47122:4369":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:2788:2354":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:9303:5922":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:9604:8702":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:50936:190":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:21836:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:48799:2167":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:47313:4383":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:19987:32487":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:50510:14850":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:14:2244":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:20962:2141":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:2491:145":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:47530:4344":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:8601:2167":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:46875:10837":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:47539:4346":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:0:482":{"crate_id":1,"path":["core"],"kind":"module"},"1:4:979":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:53030:22406":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:4350:3270":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:1825:3403":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:4204:3392":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:9328:8703":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:7422:4353":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:2685:3262":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:2936:2364":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:48233:1761":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:51009:15547":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:10996:2901":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:50416:14842":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:52286:22389":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:2821:2103":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:52094:22384":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:46480:2370":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:10785:14808":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:49914:8712":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:51940:22378":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:8323:14028":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:49904:8714":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:2677:220":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:20042:32508":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:2730:2383":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:2680:223":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:58497:2308":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"1:20699:29315":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:6520:4367":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:2851:2106":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:2778:2353":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:49347:142":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:48397:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:58484:2297":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"1:7731:7065":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:49794:8700":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:2908:115":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:21290:3004":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:20234:29320":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:50445:14848":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:29741:29846":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:11968:15545":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:22400:2902":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:48173:12747":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:49803:8698":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:54069:20824":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:58492:2303":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"1:49049:129":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:52140:22385":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:58501:2312":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"1:49146:6062":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:3178:2376":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:50765:15288":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:10573:8694":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:2582:126":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:9576:8701":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:47298:4382":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:2449:2696":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:1636:572":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:48473:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:52240:22388":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:46292:2378":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:21311:2995":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:52316:22390":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:47082:4360":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:2762:2222":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:49832:8710":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:54133:20828":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:19974:3775":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:51021:15544":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:7425:4355":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:46777:10937":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:49812:8699":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:7732:7064":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:58479:2293":{"crate_id":1,"path":["core","char"],"kind":"primitive"},"1:3188:10376":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:53920:22415":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:46354:195":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:52506:22396":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:48283:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:51761:22371":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:58291:31804":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:58480:2294":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"1:52640:22399":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:50537:14851":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:7001:4357":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:46414:197":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:2837:2359":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:11887:200":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"1:53750:22412":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:56951:240":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:20416:2141":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:49573:8724":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:51970:22379":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:2568:114":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:46838:11321":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:48190:205":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:2816:2101":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:46539:31830":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"1:49882:8715":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:48359:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:54014:20819":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:50288:14793":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:50032:8707":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:10199:31877":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:2831:2358":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:2757:2349":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:58485:2298":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"1:48114:5922":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:48587:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:53000:22405":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:7038:147":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:3912:10792":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:46598:10786":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:50753:14775":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:46984:11432":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:52362:22392":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:52170:22386":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:11856:15379":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:8595:118":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:29635:29845":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:2932:2363":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:11703:13054":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:47548:4348":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:49377:31522":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:49162:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:39340:3265":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:11261:110":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:29563:67":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:50805:15290":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:2792:2224":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:20868:32485":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:46786:11319":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:2232:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:2255:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:49338:14104":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:54095:20826":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:9521:8708":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:46339:2369":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:2942:2366":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:50992:156":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:21363:2908":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:21273:3003":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:29541:3288":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:3151:2372":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:10824:14807":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:3323:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:3203:2379":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:11049:14781":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:52029:22382":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:50322:10837":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"0:0:1748":{"crate_id":0,"path":["bitflags"],"kind":"module"},"1:3620:2228":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:58504:2315":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"1:47236:4378":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:53420:22409":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:51839:22374":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:51807:22373":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:52764:22401":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:50817:15291":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:54023:20820":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:51992:22380":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:38118:178":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:53214:22408":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:1737:3571":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:21377:2905":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:10748:14806":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:48249:2228":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:2860:2361":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:46253:2381":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:52560:22398":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:57016:240":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:50757:14776":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:8160:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:21638:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:46918:11316":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:20449:29314":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"0:48:1748":{"crate_id":0,"path":["bitflags","bitflags"],"kind":"macro"},"1:2991:2367":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:46858:11311":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:53064:22407":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:51785:22372":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:7836:14778":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:54210:20831":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:48097:2114":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:47262:4380":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:49359:31843":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:10122:8718":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:58503:2314":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"1:46771:10837":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:6434:2253":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:50236:14798":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:47113:4362":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:1643:3284":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:48435:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:2921:2362":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:50761:14777":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:20002:32487":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:3984:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:2321:177":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:29535:3007":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:47212:4363":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:50394:14841":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:46512:2373":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:52794:22402":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:20964:29312":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:50306:14801":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:47132:4370":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:21108:2918":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:11060:14779":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:8590:110":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:2673:2122":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:56990:240":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:2772:2350":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:6614:4338":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:7034:132":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:58502:2313":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"1:52192:22387":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:52384:22393":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:47151:4372":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:20019:32513":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:52338:22391":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:58482:2295":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"1:7733:7063":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:50733:14770":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:3088:2371":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:6811:11740":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:21671:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:49110:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:47104:4361":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:51909:22377":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:53672:22411":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:8827:142":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:58493:2304":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"1:53812:22413":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:52010:22381":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:21182:2932":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:8155:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:58489:2300":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"1:29326:2697":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:52718:22400":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:58495:2306":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"1:52408:22394":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:21198:31825":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:47569:4352":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:8603:2168":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:50182:14800":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:2847:2104":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:49924:8713":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:58477:2291":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"1:4676:11427":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:7152:154":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:54171:20830":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:51869:22375":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:38135:3775":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:48258:178":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:51739:22370":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:49990:14790":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:56977:240":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8318:14027":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:51695:22368":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:56938:240":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:223:205":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:4321:3399":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:54054:20823":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:47287:4365":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:58486:2299":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"1:50136:8701":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:29501:3287":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:46937:11317":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:50971:15381":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:50014:8703":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:2995:2368":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:2494:131":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:50918:200":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:3240:2380":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:2501:231":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:4697:31894":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:49869:4359":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:1760:3570":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:50313:11313":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"3:0:2339":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:54034:20821":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:21238:2904":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:21265:2983":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:56581:29347":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:47226:4377":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:21902:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:2855:2360":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:21250:2928":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:7429:4356":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:46519:7033":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:20856:8697":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:3161:228":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:6567:12040":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:52047:22383":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:21389:2909":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:20337:29314":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:47160:12005":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:2327:184":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:58499:2310":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"1:49972:14787":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:2743:3267":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:4723:769":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:39327:2155":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:1552:10792":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:2784:2352":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:8540:6058":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:46436:196":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:4330:3400":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:9122:2141":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:50164:14799":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:2448:2141":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:10089:8717":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:48806:2168":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:4276:3398":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:46850:11310":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:8743:32259":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"}},"external_crates":{"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":23}