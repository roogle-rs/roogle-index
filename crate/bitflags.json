{"root":"0:0:1746","crate_version":"2.0.0-rc.1","includes_private":false,"index":{"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1736","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i64"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1736","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i32"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:41:1950":{"id":"0:41:1950","crate_id":0,"name":"PublicFlags","span":{"filename":"src/traits.rs","begin":[145,0],"end":[148,1]},"visibility":"public","docs":"A trait for referencing the `bitflags`-owned internal type\nwithout exposing it publicly.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:42:2153"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:14:1737":{"id":"0:14:1737","crate_id":0,"name":"BitFlags","span":{"filename":"src/traits.rs","begin":[6,0],"end":[73,1]},"visibility":"public","docs":"A trait that is automatically implemented for all bitflags.\n\nIt should not be implemented manually.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:15:2110","0:16:1759","0:17:2114","0:18:1801","0:19:278","0:20:1785","0:21:1807","0:22:1812","0:23:1816","0:24:2002","0:25:768","0:26:1999","0:27:1818","0:28:1820","0:29:1824","0:30:1829","0:31:1831","0:32:1834","0:33:1836","0:34:1889"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ImplementedByBitFlagsMacro","id":"0:35:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:55:1739":{"id":"0:55:1739","crate_id":0,"name":"external","span":{"filename":"src/external.rs","begin":[1,0],"end":[88,1]},"visibility":"crate","docs":"Conditional trait implementations for external libraries.","links":{},"attrs":["#[macro_use]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":true}},"0:34:1889":{"id":"0:34:1889","crate_id":0,"name":"set","span":{"filename":"src/traits.rs","begin":[72,4],"end":[72,48]},"visibility":"default","docs":"Inserts or removes the specified flags depending on the passed value.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1736","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u128"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:33:1836":{"id":"0:33:1836","crate_id":0,"name":"toggle","span":{"filename":"src/traits.rs","begin":[69,4],"end":[69,38]},"visibility":"default","docs":"Toggles the specified flags in-place.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1736","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u8"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[351,33],"end":[351,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::traits","name":"traits","id":"0:5:1736","glob":true}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1736","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i16"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:26:1999":{"id":"0:26:1999","crate_id":0,"name":"iter_names","span":{"filename":"src/traits.rs","begin":[48,4],"end":[48,44]},"visibility":"default","docs":"Iterate over the raw names and bits for enabled flag values.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"IterNames","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:14:1737","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:24:2002":{"id":"0:24:2002","crate_id":0,"name":"from_name","span":{"filename":"src/traits.rs","begin":[40,4],"end":[42,20]},"visibility":"default","docs":"Get the flag for a particular name.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48037:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2657:2120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:15:2110":{"id":"0:15:2110","crate_id":0,"name":"Bits","span":{"filename":"src/traits.rs","begin":[8,4],"end":[8,20]},"visibility":"default","docs":"The underlying integer type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Bits","id":"0:37:2110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:18:1801":{"id":"0:18:1801","crate_id":0,"name":"empty","span":{"filename":"src/traits.rs","begin":[17,4],"end":[17,23]},"visibility":"default","docs":"Returns an empty set of flags.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1736","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u16"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:16:1759":{"id":"0:16:1759","crate_id":0,"name":"Iter","span":{"filename":"src/traits.rs","begin":[11,4],"end":[11,37]},"visibility":"default","docs":"An iterator over enabled flags in an instance of the type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7143:154","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Self"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:28:1820":{"id":"0:28:1820","crate_id":0,"name":"is_all","span":{"filename":"src/traits.rs","begin":[54,4],"end":[54,29]},"visibility":"default","docs":"Returns `true` if all flags are currently set.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:36:2139":{"id":"0:36:2139","crate_id":0,"name":"Sealed","span":{"filename":"src/traits.rs","begin":[83,0],"end":[83,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:64","0:65","0:72","0:73","0:80","0:81","0:88","0:89","0:96","0:97"]}},"0:5:1736":{"id":"0:5:1736","crate_id":0,"name":"traits","span":{"filename":"src/traits.rs","begin":[1,0],"end":[148,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:14:1737","0:36:2139","0:41:1950"],"is_stripped":true}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1736","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i128"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:27:1818":{"id":"0:27:1818","crate_id":0,"name":"is_empty","span":{"filename":"src/traits.rs","begin":[51,4],"end":[51,31]},"visibility":"default","docs":"Returns `true` if no flags are currently stored.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:31:1831":{"id":"0:31:1831","crate_id":0,"name":"insert","span":{"filename":"src/traits.rs","begin":[63,4],"end":[63,38]},"visibility":"default","docs":"Inserts the specified flags in-place.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:23:1816":{"id":"0:23:1816","crate_id":0,"name":"from_bits_retain","span":{"filename":"src/traits.rs","begin":[37,4],"end":[37,50]},"visibility":"default","docs":"Convert from underlying bit representation, preserving all\nbits (even those not corresponding to a defined flag).","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["bits",{"kind":"qualified_path","inner":{"name":"Bits","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:14:1737","args":null}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:42:2153":{"id":"0:42:2153","crate_id":0,"name":"Internal","span":{"filename":"src/traits.rs","begin":[147,4],"end":[147,18]},"visibility":"default","docs":"The type of the internal field on the generated flags type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[351,20],"end":[351,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::external","name":"external","id":"0:55:1739","glob":true}},"0:19:278":{"id":"0:19:278","crate_id":0,"name":"all","span":{"filename":"src/traits.rs","begin":[20,4],"end":[20,21]},"visibility":"default","docs":"Returns the set containing all flags.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:17:2114":{"id":"0:17:2114","crate_id":0,"name":"IterNames","span":{"filename":"src/traits.rs","begin":[14,4],"end":[14,58]},"visibility":"default","docs":"An iterator over the raw names and bits for enabled flags in an instance of the type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7143:154","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"generic","inner":"Self"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1736","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i8"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:21:1807":{"id":"0:21:1807","crate_id":0,"name":"from_bits","span":{"filename":"src/traits.rs","begin":[27,4],"end":[29,20]},"visibility":"default","docs":"Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["bits",{"kind":"qualified_path","inner":{"name":"Bits","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:14:1737","args":null}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48037:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2657:2120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:25:768":{"id":"0:25:768","crate_id":0,"name":"iter","span":{"filename":"src/traits.rs","begin":[45,4],"end":[45,33]},"visibility":"default","docs":"Iterate over enabled flag values.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Iter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:14:1737","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:30:1829":{"id":"0:30:1829","crate_id":0,"name":"contains","span":{"filename":"src/traits.rs","begin":[60,4],"end":[60,44]},"visibility":"default","docs":"Returns `true` all of the flags in `other` are contained within `self`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4":{"id":"0:4","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[345,0],"end":[345,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"traits::BitFlags","name":"BitFlags","id":"0:14:1737","glob":false}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1736","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u32"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:0:1746":{"id":"0:0:1746","crate_id":0,"name":"bitflags","span":{"filename":"src/lib.rs","begin":[11,0],"end":[1430,1]},"visibility":"public","docs":"A typesafe bitmask flag generator useful for sets of C-style flags.\nIt can be used for creating ergonomic wrappers around C APIs.\n\nThe `bitflags!` macro generates `struct`s that manage a set of flags. The\ntype of those flags must be some primitive integer.\n\n# Examples\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n        const ABC = Self::A.bits() | Self::B.bits() | Self::C.bits();\n    }\n}\n\nfn main() {\n    let e1 = Flags::A | Flags::C;\n    let e2 = Flags::B | Flags::C;\n    assert_eq!((e1 | e2), Flags::ABC);   // union\n    assert_eq!((e1 & e2), Flags::C);     // intersection\n    assert_eq!((e1 - e2), Flags::A);     // set difference\n    assert_eq!(!e2, Flags::A);           // set complement\n}\n```\n\nSee [`example_generated::Flags`](./example_generated/struct.Flags.html) for documentation of code\ngenerated by the above `bitflags!` expansion.\n\n# Visibility\n\nThe `bitflags!` macro supports visibility, just like you'd expect when writing a normal\nRust `struct`:\n\n```\nmod example {\n    use bitflags::bitflags;\n\n    bitflags! {\n        #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n        pub struct Flags1: u32 {\n            const A = 0b00000001;\n        }\n\n        #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n#       pub\n        struct Flags2: u32 {\n            const B = 0b00000010;\n        }\n    }\n}\n\nfn main() {\n    let flag1 = example::Flags1::A;\n    let flag2 = example::Flags2::B; // error: const `B` is private\n}\n```\n\n# Attributes\n\nAttributes can be attached to the generated flags types and their constants as normal.\n\n# Representation\n\nIt's valid to add a `#[repr(C)]` or `#[repr(transparent)]` attribute to a generated flags type.\nThe generated flags type is always guaranteed to be a newtype where its only field has the same\nABI as the underlying integer type.\n\nIn this example, `Flags` has the same ABI as `u32`:\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    #[repr(transparent)]\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n    }\n}\n```\n\n# Extending\n\nGenerated flags types belong to you, so you can add trait implementations to them outside\nof what the `bitflags!` macro gives:\n\n```\nuse std::fmt;\n\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n    }\n}\n\nimpl Flags {\n    pub fn clear(&mut self) {\n        *self.0.bits_mut() = 0;\n    }\n}\n\nfn main() {\n    let mut flags = Flags::A | Flags::B;\n\n    flags.clear();\n    assert!(flags.is_empty());\n\n    assert_eq!(format!(\"{:?}\", Flags::A | Flags::B), \"Flags(A | B)\");\n    assert_eq!(format!(\"{:?}\", Flags::B), \"Flags(B)\");\n}\n```\n\n# What's implemented by `bitflags!`\n\nThe `bitflags!` trait adds some trait implementations and inherent methods\nto generated flags types, but leaves room for you to choose the semantics\nof others.\n\n## Iterators\n\nThe following iterator traits are implemented for generated flags types:\n\n- `Extend`: adds the union of the instances iterated over.\n- `FromIterator`: calculates the union.\n- `IntoIterator`: iterates over set flag values.\n\n## Formatting\n\nThe following formatting traits are implemented for generated flags types:\n\n- `Binary`.\n- `LowerHex` and `UpperHex`.\n- `Octal`.\n\n## Operators\n\nThe following operator traits are implemented for the generated `struct`s:\n\n- `BitOr` and `BitOrAssign`: union\n- `BitAnd` and `BitAndAssign`: intersection\n- `BitXor` and `BitXorAssign`: toggle\n- `Sub` and `SubAssign`: set difference\n- `Not`: set complement\n\n## Methods\n\nThe following methods are defined for the generated `struct`s:\n\n- `empty`: an empty set of flags\n- `all`: the set of all defined flags\n- `bits`: the raw value of the flags currently stored\n- `from_bits`: convert from underlying bit representation, unless that\n               representation contains bits that do not correspond to a\n               defined flag\n- `from_bits_truncate`: convert from underlying bit representation, dropping\n                        any bits that do not correspond to defined flags\n- `from_bits_retain`: convert from underlying bit representation, keeping\n                         all bits (even those not corresponding to defined\n                         flags)\n- `is_empty`: `true` if no flags are currently stored\n- `is_all`: `true` if currently set flags exactly equal all defined flags\n- `intersects`: `true` if there are flags common to both `self` and `other`\n- `contains`: `true` if all of the flags in `other` are contained within `self`\n- `insert`: inserts the specified flags in-place\n- `remove`: removes the specified flags in-place\n- `toggle`: the specified flags will be inserted if not present, and removed\n            if they are.\n- `set`: inserts or removes the specified flags depending on the passed value\n- `intersection`: returns a new set of flags, containing only the flags present\n                  in both `self` and `other` (the argument to the function).\n- `union`: returns a new set of flags, containing any flags present in\n           either `self` or `other` (the argument to the function).\n- `difference`: returns a new set of flags, containing all flags present in\n                `self` without any of the flags present in `other` (the\n                argument to the function).\n- `symmetric_difference`: returns a new set of flags, containing all flags\n                          present in either `self` or `other` (the argument\n                          to the function), but not both.\n- `complement`: returns a new set of flags, containing all flags which are\n                not set in `self`, but which are allowed for this type.\n\n# What's not implemented by `bitflags!`\n\nSome functionality is not automatically implemented for generated flags types\nby the `bitflags!` macro, even when it reasonably could be. This is so callers\nhave more freedom to decide on the semantics of their flags types.\n\n## `Clone` and `Copy`\n\nGenerated flags types are not automatically copyable, even though they can always\nderive both `Clone` and `Copy`.\n\n## `Default`\n\nThe `Default` trait is not automatically implemented for the generated structs.\n\nIf your default value is equal to `0` (which is the same value as calling `empty()`\non the generated struct), you can simply derive `Default`:\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    // Results in default value with bits: 0\n    #[derive(Default, Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n    }\n}\n\nfn main() {\n    let derived_default: Flags = Default::default();\n    assert_eq!(derived_default.bits(), 0);\n}\n```\n\nIf your default value is not equal to `0` you need to implement `Default` yourself:\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n    }\n}\n\n// explicit `Default` implementation\nimpl Default for Flags {\n    fn default() -> Flags {\n        Flags::A | Flags::C\n    }\n}\n\nfn main() {\n    let implemented_default: Flags = Default::default();\n    assert_eq!(implemented_default, (Flags::A | Flags::C));\n}\n```\n\n## `Debug` and `Display`\n\nThe `Debug` trait can be derived for a reasonable implementation.\n\n## `PartialEq` and `PartialOrd`\n\nEquality and ordering can be derived for a reasonable implementation, or implemented manually\nfor different semantics.\n\n# Edge cases\n\n## Zero Flags\n\nFlags with a value equal to zero will have some strange behavior that one should be aware of.\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const NONE = 0b00000000;\n        const SOME = 0b00000001;\n    }\n}\n\nfn main() {\n    let empty = Flags::empty();\n    let none = Flags::NONE;\n    let some = Flags::SOME;\n\n    // Zero flags are treated as always present\n    assert!(empty.contains(Flags::NONE));\n    assert!(none.contains(Flags::NONE));\n    assert!(some.contains(Flags::NONE));\n\n    // Zero flags will be ignored when testing for emptiness\n    assert!(none.is_empty());\n}\n```\n\nUsers should generally avoid defining a flag with a value of zero.\n\n# The `BitFlags` trait\n\nThis library defines a `BitFlags` trait that's implemented by all generated flags types.\nThe trait makes it possible to work with flags types generically:\n\n```\nfn count_unset_flags<F: bitflags::BitFlags>(flags: &F) -> usize {\n    // Find out how many flags there are in total\n    let total = F::all().iter().count();\n\n    // Find out how many flags are set\n    let set = flags.iter().count();\n\n    total - set\n}\n\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n    }\n}\n\nassert_eq!(2, count_unset_flags(&Flags::B));\n```","links":{},"attrs":["#![no_std]","#![doc(html_root_url = \"https://docs.rs/bitflags/2.0.0-rc.1\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:4","0:48:1746"],"is_stripped":false}},"0:29:1824":{"id":"0:29:1824","crate_id":0,"name":"intersects","span":{"filename":"src/traits.rs","begin":[57,4],"end":[57,46]},"visibility":"default","docs":"Returns `true` if there are flags common to both `self` and `other`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:48:1746":{"id":"0:48:1746","crate_id":0,"name":"bitflags","span":{"filename":"src/lib.rs","begin":[472,0],"end":[543,1]},"visibility":"public","docs":"The macro used to generate the flag structure.\n\nSee the [crate level docs](../bitflags/index.html) for complete documentation.\n\n# Example\n\n```\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n        const C = 0b00000100;\n        const ABC = Self::A.bits() | Self::B.bits() | Self::C.bits();\n    }\n}\n\nfn main() {\n    let e1 = Flags::A | Flags::C;\n    let e2 = Flags::B | Flags::C;\n    assert_eq!((e1 | e2), Flags::ABC);   // union\n    assert_eq!((e1 & e2), Flags::C);     // intersection\n    assert_eq!((e1 - e2), Flags::A);     // set difference\n    assert_eq!(!e2, Flags::A);           // set complement\n}\n```\n\nThe generated `struct`s can also be extended with type and trait\nimplementations:\n\n```\nuse std::fmt;\n\nuse bitflags::bitflags;\n\nbitflags! {\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n    struct Flags: u32 {\n        const A = 0b00000001;\n        const B = 0b00000010;\n    }\n}\n\nimpl Flags {\n    pub fn clear(&mut self) {\n        *self.0.bits_mut() = 0;\n    }\n}\n\nfn main() {\n    let mut flags = Flags::A | Flags::B;\n\n    flags.clear();\n    assert!(flags.is_empty());\n\n    assert_eq!(format!(\"{:?}\", Flags::A | Flags::B), \"Flags(A | B)\");\n    assert_eq!(format!(\"{:?}\", Flags::B), \"Flags(B)\");\n}\n```","links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! bitflags {\n    (\n        $(#[$outer:meta])*\n        $vis:vis struct $BitFlags:ident: $T:ty {\n            $(\n                $(#[$inner:ident $($args:tt)*])*\n                const $Flag:ident = $value:expr;\n            )*\n        }\n\n        $($t:tt)*\n    ) => { ... };\n    () => { ... };\n}"},"0:22:1812":{"id":"0:22:1812","crate_id":0,"name":"from_bits_truncate","span":{"filename":"src/traits.rs","begin":[33,4],"end":[33,52]},"visibility":"default","docs":"Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["bits",{"kind":"qualified_path","inner":{"name":"Bits","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:14:1737","args":null}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:20:1785":{"id":"0:20:1785","crate_id":0,"name":"bits","span":{"filename":"src/traits.rs","begin":[23,4],"end":[23,33]},"visibility":"default","docs":"Returns the raw value of the flags currently stored.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Bits","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:14:1737","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:88":{"id":"0:88","crate_id":0,"name":null,"span":{"filename":"src/traits.rs","begin":[135,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:5:1736","path":"::traits"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sealed","id":"0:36:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u64"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:32:1834":{"id":"0:32:1834","crate_id":0,"name":"remove","span":{"filename":"src/traits.rs","begin":[66,4],"end":[66,38]},"visibility":"default","docs":"Removes the specified flags in-place.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"generic","inner":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[353,4],"end":[353,17]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"core","name":"core","id":"1:0:481","glob":false}}},"paths":{"1:2741:2347":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:20847:8685":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:56981:239":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:58475:2295":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"1:58493:2311":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"1:46503:2371":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:46841:11300":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:48776:2163":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:49734:14410":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:56955:239":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:58469:2290":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"1:2657:2120":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:51012:15536":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:49873:8703":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:2433:2694":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:20438:29308":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:52277:22381":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:6992:4354":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:2481:231":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:47194:4373":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:50313:10827":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:52399:22386":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:10815:14799":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:2772:2352":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:9113:2139":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:2844:2359":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:52038:22375":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:56968:239":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:50209:14789":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:2831:2102":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:8594:2166":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:46942:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:52183:22379":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:3162:2374":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:21205:2963":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:8818:142":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:2923:2363":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:58494:2312":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"1:48790:2165":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:2472:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:7038:2224":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:49049:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:8541:130":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:10080:8705":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:47539:4345":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:53663:22403":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:47113:4366":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:50970:15374":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:2269:182":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:2239:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:2780:2354":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:47278:4362":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:21959:163":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:2793:2105":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:21256:2981":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:3370:7027":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"1:21827:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"0:48:1746":{"crate_id":0,"path":["bitflags","bitflags"],"kind":"macro"},"1:50748:14768":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:48783:2164":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:58484:2302":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"1:21241:2926":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:50023:8695":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:46789:11364":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:58490:2308":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"1:46895:11304":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:46768:10927":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:50127:8689":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:3358:7023":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"1:50909:199":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:29526:3005":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:38109:177":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:49794:8686":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:53021:22398":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:6601:4335":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:7143:154":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:50740:14766":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:9123:216":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:56929:239":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:0:481":{"crate_id":1,"path":["core"],"kind":"module"},"1:58303:31533":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:58488:2306":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"1:49101:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:49321:31532":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:49905:8700":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:50720:14761":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:9362:8707":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:10580:8684":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:9553:8693":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:2142:572":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:2957:2375":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:48097:1759":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:46777:11309":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:8734:32117":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:11959:15537":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:3944:10832":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:9512:8696":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:58468:2289":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"1:20162:29310":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:9270:1759":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:54139:20821":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:51752:22363":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:4360:3399":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:4253:3395":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:4047:3402":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:58485:2303":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"1:50962:15373":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:3150:133":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:53949:22408":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:11694:13046":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:58492:2310":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"1:56994:239":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:46762:10827":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:9474:8695":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:49813:8697":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:1919:3569":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:4077:3403":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:10739:14798":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:50983:155":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:58486:2304":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"1:46928:11307":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:2776:2222":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:47530:4343":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:47268:4378":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:54201:20823":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:58282:31546":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:50732:14764":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:20199:29311":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:48540:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:3991:10924":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"3:0:2337":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:3307:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:20953:2139":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:9567:8689":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:47505:4338":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:8598:2937":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:51000:15539":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:46405:196":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:49368:31467":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:54162:20822":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:48164:12739":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:8804:138":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:10190:31571":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:49860:4356":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:53553:22402":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:2478:131":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:3156:2372":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:52307:22382":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:47253:4377":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:49067:108":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:21281:3002":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:2756:2348":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:2566:126":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:48181:204":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:49963:14779":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:51776:22364":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:2305:176":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:53911:22407":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:21152:2974":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:50407:14834":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:50155:14791":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:49564:8714":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:49016:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:20407:2139":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:2821:2357":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:50259:14784":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:50579:14845":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:10564:8682":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:48088:2112":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:21347:3003":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:58495:2313":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"1:21173:2930":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:47022:11418":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:49834:8704":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:47052:4356":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:52785:22394":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:51900:22369":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:3145:227":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:54034:20814":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:2805:2101":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:48464:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:29532:3286":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:2979:2366":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:52450:22387":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:4117:3386":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:9439:8708":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:49895:8702":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:39318:2153":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:19965:3772":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:2660:220":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:22391:2900":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:49886:8699":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:11746:31563":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:21992:2905":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:29568:29836":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:47236:4376":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:53411:22401":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:50736:14765":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:7827:14770":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:2664:222":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:7089:2382":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:20412:29302":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:46902:11305":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:11621:13045":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:20238:2139":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:38126:3772":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:2552:114":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:54025:20813":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:29317:2695":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:48426:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:46975:11422":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:2658:3259":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:48037:175":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:7066:119":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:21860:164":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:2714:2381":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:39282:3153":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:3072:2369":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:2815:2356":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:49823:8698":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:20225:29312":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:2784:2353":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:51686:22360":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:1636:571":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:8151:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:12001:3773":{"crate_id":1,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"1:54071:20817":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:53987:22409":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:54005:20811":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:6988:4355":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:8314:14020":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:10799:14797":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:8600:6053":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:47165:4371":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:20033:32229":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:46244:2379":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:46888:11303":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:46427:195":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:58482:2300":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"1:48388:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:46361:192":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:10987:2899":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:21318:3004":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:46819:11310":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:4182:201":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:6814:3388":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:21302:2993":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:6421:2251":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:11878:199":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"1:47133:4368":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:50055:14788":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:223:204":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:8596:188":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:11608:134":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:20328:29306":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:46589:10776":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:49338:142":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:52161:22378":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:9401:8692":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:49949:14780":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:48654:3409":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:48502:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:11031:14770":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:50227:14790":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:21662:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:47183:4382":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:47549:4347":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:2788:2355":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:2475:145":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:50613:14774":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:46471:2368":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:7416:4352":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:49991:14781":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:3224:2378":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:3956:10833":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:21189:31442":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:46849:11301":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:52375:22385":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:8853:14094":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:9581:8694":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:48274:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:5448:4331":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:56572:29339":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:56942:239":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:49329:14096":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:7413:4350":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:1825:3401":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:50385:14833":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:2827:2100":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:11847:15371":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:49803:8687":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:49350:31400":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:2810:2103":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:53803:22405":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:8309:14019":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:48155:7050":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:52085:22376":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:46510:7021":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:54124:20820":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:48312:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:8146:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:50744:14767":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:2661:219":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:52131:22377":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:50756:15280":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:21380:2907":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:51961:22371":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:48240:2226":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:9595:8690":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:2926:2364":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:14:2242":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:58480:2298":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"1:20012:32227":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:47104:4359":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:52867:22395":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:48616:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:52353:22384":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:5615:11998":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:20955:29304":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:1552:10782":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:54086:20818":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:46829:11311":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:2727:3265":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:51706:22361":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:50322:11300":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:52709:22392":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:6754:3156":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:50422:14837":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:7025:132":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:21099:2916":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:7723:7052":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:2768:2350":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:46449:197":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:21761:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:48350:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:20431:2139":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:47319:4381":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:50724:14762":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:47095:4358":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:52528:22389":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:2800:2099":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:52945:22396":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:8590:2163":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:52020:22374":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:10850:8707":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:58477:2297":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"1:49981:14782":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:48797:2166":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:4337:3268":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:8592:2165":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:50297:14793":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:47151:11996":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:2274:123":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:51860:22367":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:29492:3285":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:21264:3001":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:58474:2294":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"1:2746:2220":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:52755:22393":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:50633:14775":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:21695:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:11669:186":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:20690:29307":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:50752:14769":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:46283:2376":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:49079:126":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:46330:2367":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:50919:205":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:49040:129":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:3968:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:50109:8693":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:6554:12031":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:50436:14840":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:20440:29306":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:1760:3566":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:3172:10366":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:4:978":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:7722:7053":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:47521:4341":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:2650:214":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:50073:14787":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:47082:4365":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:50728:14763":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:2432:2139":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:58483:2301":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"1:49915:8701":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:11040:14773":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:4186:3389":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:21354:2906":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:47227:4375":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:1737:3567":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:50528:14843":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:46530:31434":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"1:53055:22399":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:48224:1759":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:58487:2305":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"1:49360:31539":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:7420:4353":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:52991:22397":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:49034:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:51730:22362":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:52497:22388":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:50288:14794":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:4191:3390":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:5371:4370":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:2920:2362":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:47217:4374":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:50927:189":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:50600:14847":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:47560:4349":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:46872:11302":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:4684:31617":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:52001:22373":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:52551:22390":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:4710:768":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:57007:239":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:52631:22391":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:25201:2901":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:47123:4367":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:8531:6048":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:11837:10940":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:2762:2351":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:49560:14747":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:49137:6052":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:2469:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:48173:187":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:47289:4379":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:2892:115":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:29626:29837":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:10113:8706":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:2751:2349":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:50796:15282":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:50269:14786":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:47032:11419":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:50304:11303":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:47142:4369":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:58470:2291":{"crate_id":1,"path":["core","char"],"kind":"primitive"},"1:10776:14800":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:2835:2104":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:21368:2903":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:2219:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:46959:11513":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:6507:4364":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:51882:22368":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:46866:10827":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:52231:22380":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:50501:14842":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:58491:2309":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"1:5836:4383":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:48105:5912":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:50590:14846":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:2916:2361":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:11051:14771":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:2662:107":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:51931:22370":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:7724:7051":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:46805:11308":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:21728:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:20695:29330":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:50808:15283":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:8588:2164":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:2485:230":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:48232:5912":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:48249:177":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:48122:7045":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:54060:20816":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:47174:4372":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:11046:14772":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:54045:20815":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:9294:5912":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:4317:3398":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:47073:4357":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:49785:8688":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:8581:110":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:47512:4339":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:46544:3396":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"1:49313:14097":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:53865:22406":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:2216:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:47304:4380":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:7029:147":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:39331:3263":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:48113:2226":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:50453:14841":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:29554:67":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:20250:29301":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:2975:2365":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:50005:8691":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:20859:32180":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:21794:2904":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:19993:32182":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:47203:4360":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:53741:22404":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:48578:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:6802:11730":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:46345:194":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:2311:183":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:3187:2377":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:11642:31568":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:4663:11417":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"2:0:429":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:58489:2307":{"crate_id":1,"path":["core","u32"],"kind":"primitive"},"1:2905:2360":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:20279:2139":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:21893:165":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:54014:20812":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:58471:2292":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"1:39322:9378":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:21629:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:58476:2296":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"1:19978:32182":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:9319:8691":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:54109:20819":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:46909:11306":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:58473:2293":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"1:3896:10782":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:29732:29838":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:58481:2299":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"1:51830:22366":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:53205:22400":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:8586:118":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:1643:3282":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:4263:3396":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:11097:14836":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:20287:29305":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:49153:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:50565:14844":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:46947:11423":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"0:0:1746":{"crate_id":0,"path":["bitflags"],"kind":"module"},"1:21229:2902":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:8858:14095":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:51798:22365":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:50775:120":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:50173:14792":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:3604:2226":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:21926:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:52329:22383":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:11252:110":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:20010:32232":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:2669:3260":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:20031:32231":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:50279:14785":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:51983:22372":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:46537:31579":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:1751:9020":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:3135:2370":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:49975:14783":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:2839:2358":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:46385:193":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:21046:2913":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:20281:29303":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:4308:3397":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"}},"external_crates":{"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":23}