{"root":"0:0:1869","crate_version":"1.1.0","includes_private":false,"index":{"b:2:2537-0:23:1802":{"id":"b:2:2537-0:23:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1802","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2540:2414"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12177:22850":{"id":"2:12177:22850","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:11375"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9206:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:73:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:75:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12106:29890":{"id":"2:12106:29890","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43848:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12080:32822":{"id":"2:12080:32822","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12078:32821"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2681:220-0:23:1802":{"id":"a:2:2681:220-0:23:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2681:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2681:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2681:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1802","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8313:6146-0:76:1779":{"id":"a:2:8313:6146-0:76:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8313:6146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:76:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[448,0],"end":[462,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2929:1805","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:2919:1841","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1802","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:64:587"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12163:32834":{"id":"2:12163:32834","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:12:1766":{"id":"0:12:1766","crate_id":0,"name":"Strategy","span":{"filename":"src/lib.rs","begin":[201,0],"end":[205,1]},"visibility":"public","docs":"Controls in which cases the associated code should be run","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:13:1769"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:14","0:18","0:16"]}}},"0:42:1792":{"id":"0:42:1792","crate_id":0,"name":"guard_on_unwind","span":{"filename":"src/lib.rs","begin":[413,0],"end":[417,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.\n\n## Examples\n\nFor performance reasons, or to emulate ‚Äúonly run guard on unwind‚Äù in\nno-std environments, we can also use the default guard and simply manually\ndefuse it at the end of scope like the following example. (The performance\nreason would be if the [`OnUnwind`]'s call to [std::thread::panicking()] is\nan issue.)\n\n```\nextern crate scopeguard;\n\nuse scopeguard::ScopeGuard;\n# fn main() {\n{\n    let guard = scopeguard::guard((), |_| {});\n\n    // rest of the code here\n\n    // we reached the end of scope without unwinding - defuse it\n    ScopeGuard::into_inner(guard);\n}\n# }\n```","links":{"std::thread::panicking()":"1:495:1037","`OnUnwind`":"0:73:1777"},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1802","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"OnUnwind","id":"0:73:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2929:1805","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2552-0:70:1774":{"id":"b:2:2552-0:70:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:70:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1486"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2698:228-0:70:1774":{"id":"a:2:2698:228-0:70:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2698:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:70:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5428:33496":{"id":"5:5428:33496","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2192","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7016:4816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2192","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7016:4816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3317-0:76:1779":{"id":"b:2:3317-0:76:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3315:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:76:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3319:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2550:128":{"id":"2:2550:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9206:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:76:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2738:2118-0:23:1802":{"id":"a:2:2738:2118-0:23:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2738:2118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2738:2118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2738:2118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1802","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12095:32824":{"id":"2:12095:32824","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11984:1406","str::slice_mut_unchecked":"2:12096:32825","crate::ops::Index":"2:2978:2175"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8314:6145-0:70:1774":{"id":"a:2:8314:6145-0:70:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8314:6145","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:70:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2552-0:73:1777":{"id":"b:2:2552-0:73:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:73:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1486"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12148:32830":{"id":"2:12148:32830","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:11373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5445:6058":{"id":"5:5445:6058","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13:1769":{"id":"0:13:1769","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[204,4],"end":[204,28]},"visibility":"default","docs":"Return `true` if the guard‚Äôs associated code should run\n(in the context where this method is called).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:76:1779":{"id":"0:76:1779","crate_id":0,"name":"OnSuccess","span":{"filename":"src/lib.rs","begin":[227,0],"end":[227,21]},"visibility":"public","docs":"Run on regular scope exit, when not unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:8314:6145-0:76:1779","a:2:2698:228-0:76:1779","a:2:8313:6146-0:76:1779","a:2:2738:2118-0:76:1779","a:2:2681:220-0:76:1779","b:2:2541-0:76:1779","b:2:2250-0:76:1779","b:2:2537-0:76:1779","b:2:3317-0:76:1779","b:2:2247-0:76:1779","b:2:2552-0:76:1779","b:2:2547-0:76:1779","0:18","0:77"]}}},"a:2:2681:220-0:76:1779":{"id":"a:2:2681:220-0:76:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2681:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:76:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2250-0:76:1779":{"id":"b:2:2250-0:76:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:76:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:22550"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12101:4842":{"id":"2:12101:4842","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43542:3053","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2698:228-0:76:1779":{"id":"a:2:2698:228-0:76:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2698:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:76:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8314:6145-0:76:1779":{"id":"a:2:8314:6145-0:76:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8314:6145","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:76:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12098:26427":{"id":"2:12098:26427","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12097:26426"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5429:2136":{"id":"5:5429:2136","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18":{"id":"0:18","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[241,0],"end":[244,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:12:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:76:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:19:1769"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2698:228-0:73:1777":{"id":"a:2:2698:228-0:73:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2698:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:73:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8313:6146-0:70:1774":{"id":"a:2:8313:6146-0:70:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8313:6146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:70:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2541-0:23:1802":{"id":"b:2:2541-0:23:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1802","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2543:697"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:49":{"id":"0:49","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[428,0],"end":[437,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2929:1805","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:2895:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1802","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:53:230","0:54:551"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3319:1500":{"id":"2:3319:1500","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39418:4984","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12183:32841":{"id":"2:12183:32841","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:11375"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:11373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12084:32823":{"id":"2:12084:32823","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12201:5938":{"id":"2:12201:5938","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4537:5938"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43864:4854","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12078:32821":{"id":"2:12078:32821","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12083:23341":{"id":"2:12083:23341","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11343:11376"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12102:29922":{"id":"2:12102:29922","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12103:29911"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43830:5221","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12189:32843":{"id":"2:12189:32843","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:11375"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:11373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78:671":{"id":"0:78:671","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9181:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9170:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2250-0:70:1774":{"id":"b:2:2250-0:70:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:70:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:22550"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[229,0],"end":[232,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:12:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:70:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:15:1769"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12077:32820":{"id":"2:12077:32820","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2738:2118-0:73:1777":{"id":"a:2:2738:2118-0:73:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2738:2118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:73:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2551:1487":{"id":"2:2551:1487","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41731:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15:1769":{"id":"0:15:1769","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[231,4],"end":[231,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12142:26441":{"id":"2:12142:26441","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11978:418","str::splitn":"2:12139:26439","self::pattern":"2:11776:11375"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43678:4917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:11373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2540:2414":{"id":"2:2540:2414","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2514:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1777":{"id":"0:73:1777","crate_id":0,"name":"OnUnwind","span":{"filename":"src/lib.rs","begin":[220,0],"end":[220,20]},"visibility":"public","docs":"Run on scope exit through unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:8314:6145-0:73:1777","a:2:2698:228-0:73:1777","a:2:8313:6146-0:73:1777","a:2:2738:2118-0:73:1777","a:2:2681:220-0:73:1777","b:2:2541-0:73:1777","b:2:2250-0:73:1777","b:2:2537-0:73:1777","b:2:3317-0:73:1777","b:2:2247-0:73:1777","b:2:2552-0:73:1777","b:2:2547-0:73:1777","0:74","0:16"]}}},"2:12086:26404":{"id":"2:12086:26404","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11995:1509"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17:1769":{"id":"0:17:1769","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[237,4],"end":[237,56]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71":{"id":"0:71","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9206:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:70:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:72:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2247-0:73:1777":{"id":"b:2:2247-0:73:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:73:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:2080"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2250-0:73:1777":{"id":"b:2:2250-0:73:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:73:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:22550"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12136:32828":{"id":"2:12136:32828","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11776:11375","str::split":"2:12124:22561","prim@char":"1:11978:418","str::split_terminator":"2:12133:32827"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43624:5214","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:11373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12167:32836":{"id":"2:12167:32836","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12169:32837":{"id":"2:12169:32837","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:1812":{"id":"0:34:1812","crate_id":0,"name":"with_strategy","span":{"filename":"src/lib.rs","begin":[317,4],"end":[323,5]},"visibility":"public","docs":"Create a `ScopeGuard` that owns `v` (accessible through deref) and calls\n`dropfn` when its destructor runs.\n\nThe `Strategy` decides whether the scope guard's closure should run.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1802","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35:1826":{"id":"0:35:1826","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[348,4],"end":[361,5]},"visibility":"public","docs":"‚ÄúDefuse‚Äù the guard and extract the value without calling the closure.\n\n```\nextern crate scopeguard;\n\nuse scopeguard::{guard, ScopeGuard};\n\nfn conditional() -> bool { true }\n\nfn main() {\n    let mut guard = guard(Vec::new(), |mut v| v.clear());\n    guard.push(1);\n     \n    if conditional() {\n        // a condition maybe makes us decide to\n        // ‚Äúdefuse‚Äù the guard and get back its inner parts\n        let value = ScopeGuard::into_inner(guard);\n    } else {\n        // guard still exists in this branch\n    }\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["guard",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12165:32835":{"id":"2:12165:32835","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12074":{"id":"2:12074","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12075:816","2:12076:2421","2:12077:32820","2:12078:32821","2:12080:32822","2:12083:23341","2:12084:32823","2:12085:314","2:12086:26404","2:12087:1853","2:12089:26401","2:12091:26402","2:12093:26403","2:12095:32824","2:12096:32825","2:12097:26426","2:12098:26427","2:12099:4932","2:12100:5231","2:12101:4842","2:12102:29922","2:12103:29911","2:12104:22562","2:12105:32826","2:12106:29890","2:12107:26443","2:12110:26444","2:12113:26445","2:12116:2461","2:12120:2420","2:12124:22561","2:12127:26435","2:12130:26437","2:12133:32827","2:12136:32828","2:12139:26439","2:12142:26441","2:12145:32829","2:12148:32830","2:12151:2092","2:12154:32831","2:12157:32832","2:12160:32833","2:12163:32834","2:12165:32835","2:12167:32836","2:12169:32837","2:12170:32838","2:12171:32839","2:12174:32840","2:12177:22850","2:12180:26446","2:12183:32841","2:12186:32842","2:12189:32843","2:12192:32844","2:12194:25533","2:12195:26341","2:12196:25537","2:12197:25538","2:12198:25539","2:12199:32845","2:12201:5938","2:12202:32846"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:69:671":{"id":"0:69:671","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[469,4],"end":[473,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9181:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9170:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2555:128":{"id":"2:2555:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32097:6164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12089:26401":{"id":"2:12089:26401","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41589:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12130:26437":{"id":"2:12130:26437","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11776:11375","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::split":"2:12124:22561"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43574:4914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:11373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:671":{"id":"0:72:671","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9181:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9170:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12171:32839":{"id":"2:12171:32839","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:11375"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11801:11372","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5443:33499":{"id":"5:5443:33499","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2681:220-0:70:1774":{"id":"a:2:2681:220-0:70:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2681:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:70:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12127:26435":{"id":"2:12127:26435","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:11375"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11599:4911","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2247-0:70:1774":{"id":"b:2:2247-0:70:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:70:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:2080"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12151:2092":{"id":"2:12151:2092","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11776:11375","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::matches":"2:12151:2092"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43760:5217","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12199:32845":{"id":"2:12199:32845","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4536:32845"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43855:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2738:2118-0:76:1779":{"id":"a:2:2738:2118-0:76:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2738:2118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:76:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12157:32832":{"id":"2:12157:32832","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11776:11375","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::rmatch_indices":"2:12160:32833"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43706:5215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12194:25533":{"id":"2:12194:25533","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2541-0:76:1779":{"id":"b:2:2541-0:76:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:76:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:697"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2541-0:73:1777":{"id":"b:2:2541-0:73:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:73:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:697"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3317-0:70:1774":{"id":"b:2:3317-0:70:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3315:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:70:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3319:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2543:697":{"id":"2:2543:697","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2547-0:70:1774":{"id":"b:2:2547-0:70:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:70:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1487"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:75:671":{"id":"0:75:671","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9181:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9170:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12124:22561":{"id":"2:12124:22561","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11776:11375","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::split_whitespace":"2:12102:29922","str::rsplit":"2:12130:26437"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43556:4909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12170:32838":{"id":"2:12170:32838","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5446:25535":{"id":"5:5446:25535","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12197:25538"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3317-0:23:1802":{"id":"b:2:3317-0:23:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3315:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1802","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3319:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2547-0:23:1802":{"id":"b:2:2547-0:23:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1802","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2550:128","2:2551:1487"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12087:1853":{"id":"2:12087:1853","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41589:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12093:26403":{"id":"2:12093:26403","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2247-0:76:1779":{"id":"b:2:2247-0:76:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:76:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:2080"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8314:6145-0:73:1777":{"id":"a:2:8314:6145-0:73:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8314:6145","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:73:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[464,0],"end":[474,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9206:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2929:1805","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9206:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1802","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:69:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12105:32826":{"id":"2:12105:32826","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43820:5220","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2681:220-0:73:1777":{"id":"a:2:2681:220-0:73:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2681:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:73:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:53:230":{"id":"0:53:230","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[432,4],"end":[432,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:2:2552-0:76:1779":{"id":"b:2:2552-0:76:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:76:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1486"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:1869":{"id":"0:0:1869","crate_id":0,"name":"scopeguard","span":{"filename":"src/lib.rs","begin":[1,0],"end":[578,1]},"visibility":"public","docs":"A scope guard will run a given closure when it goes out of scope,\neven if the code between panics.\n(as long as panic doesn't abort)\n\n# Examples\n\n## Hello World\n\nThis example creates a scope guard with an example function:\n\n```\nextern crate scopeguard;\n\nfn f() {\n    let _guard = scopeguard::guard((), |_| {\n        println!(\"Hello Scope Exit!\");\n    });\n\n    // rest of the code here.\n\n    // Here, at the end of `_guard`'s scope, the guard's closure is called.\n    // It is also called if we exit this scope through unwinding instead.\n}\n# fn main() {\n#    f();\n# }\n```\n\n## `defer!`\n\nUse the `defer` macro to run an operation at scope exit,\neither regular scope exit or during unwinding from a panic.\n\n```\n#[macro_use(defer)] extern crate scopeguard;\n\nuse std::cell::Cell;\n\nfn main() {\n    // use a cell to observe drops during and after the scope guard is active\n    let drop_counter = Cell::new(0);\n    {\n        // Create a scope guard using `defer!` for the current scope\n        defer! {\n            drop_counter.set(1 + drop_counter.get());\n        }\n\n        // Do regular operations here in the meantime.\n\n        // Just before scope exit: it hasn't run yet.\n        assert_eq!(drop_counter.get(), 0);\n\n        // The following scope end is where the defer closure is called\n    }\n    assert_eq!(drop_counter.get(), 1);\n}\n```\n\n## Scope Guard with Value\n\nIf the scope guard closure needs to access an outer value that is also\nmutated outside of the scope guard, then you may want to use the scope guard\nwith a value. The guard works like a smart pointer, so the inner value can\nbe accessed by reference or by mutable reference.\n\n### 1. The guard owns a file\n\nIn this example, the scope guard owns a file and ensures pending writes are\nsynced at scope exit.\n\n```\nextern crate scopeguard;\n\nuse std::fs::*;\nuse std::io::{self, Write};\n# // Mock file so that we don't actually write a file\n# struct MockFile;\n# impl MockFile {\n#     fn create(_s: &str) -> io::Result<Self> { Ok(MockFile) }\n#     fn write_all(&self, _b: &[u8]) -> io::Result<()> { Ok(()) }\n#     fn sync_all(&self) -> io::Result<()> { Ok(()) }\n# }\n# use self::MockFile as File;\n\nfn try_main() -> io::Result<()> {\n    let f = File::create(\"newfile.txt\")?;\n    let mut file = scopeguard::guard(f, |f| {\n        // ensure we flush file at return or panic\n        let _ = f.sync_all();\n    });\n    // Access the file through the scope guard itself\n    file.write_all(b\"test me\\n\").map(|_| ())\n}\n\nfn main() {\n    try_main().unwrap();\n}\n\n```\n\n### 2. The guard restores an invariant on scope exit\n\n```\nextern crate scopeguard;\n\nuse std::mem::ManuallyDrop;\nuse std::ptr;\n\n// This function, just for this example, takes the first element\n// and inserts it into the assumed sorted tail of the vector.\n//\n// For optimization purposes we temporarily violate an invariant of the\n// Vec, that it owns all of its elements.\n//\n// The safe approach is to use swap, which means two writes to memory,\n// the optimization is to use a ‚Äúhole‚Äù which uses only one write of memory\n// for each position it moves.\n//\n// We *must* use a scope guard to run this code safely. We\n// are running arbitrary user code (comparison operators) that may panic.\n// The scope guard ensures we restore the invariant after successful\n// exit or during unwinding from panic.\nfn insertion_sort_first<T>(v: &mut Vec<T>)\n    where T: PartialOrd\n{\n    struct Hole<'a, T: 'a> {\n        v: &'a mut Vec<T>,\n        index: usize,\n        value: ManuallyDrop<T>,\n    }\n\n    unsafe {\n        // Create a moved-from location in the vector, a ‚Äúhole‚Äù.\n        let value = ptr::read(&v[0]);\n        let mut hole = Hole { v: v, index: 0, value: ManuallyDrop::new(value) };\n\n        // Use a scope guard with a value.\n        // At scope exit, plug the hole so that the vector is fully\n        // initialized again.\n        // The scope guard owns the hole, but we can access it through the guard.\n        let mut hole_guard = scopeguard::guard(hole, |hole| {\n            // plug the hole in the vector with the value that was // taken out\n            let index = hole.index;\n            ptr::copy_nonoverlapping(&*hole.value, &mut hole.v[index], 1);\n        });\n\n        // run algorithm that moves the hole in the vector here\n        // move the hole until it's in a sorted position\n        for i in 1..hole_guard.v.len() {\n            if *hole_guard.value >= hole_guard.v[i] {\n                // move the element back and the hole forward\n                let index = hole_guard.index;\n                ptr::copy_nonoverlapping(&hole_guard.v[index + 1], &mut hole_guard.v[index], 1);\n                hole_guard.index += 1;\n            } else {\n                break;\n            }\n        }\n\n        // When the scope exits here, the Vec becomes whole again!\n    }\n}\n\nfn main() {\n    let string = String::from;\n    let mut data = vec![string(\"c\"), string(\"a\"), string(\"b\"), string(\"d\")];\n    insertion_sort_first(&mut data);\n    assert_eq!(data, vec![\"a\", \"b\", \"c\", \"d\"]);\n}\n\n```\n\n\n# Crate Features\n\n- `use_std`\n  + Enabled by default. Enables the `OnUnwind` and `OnSuccess` strategies.\n  + Disable to use `no_std`.\n\n# Rust Version\n\nThis version of the crate requires Rust 1.20 or later.\n\nThe scopeguard 1.x release series will use a carefully considered version\nupgrade policy, where in a later 1.x version, we will raise the minimum\nrequired Rust version.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/scopeguard/1/\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:12:1766","0:70:1774","0:73:1777","0:76:1779","0:23:1802","0:36:1786","0:39:1789","0:42:1792","0:20:1783","0:21:1788","0:22:1791"],"is_stripped":false}}},"a:2:8314:6145-0:23:1802":{"id":"a:2:8314:6145-0:23:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8314:6145","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8314:6145","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8314:6145","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1802","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12104:22562":{"id":"2:12104:22562","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43810:5219","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12075:816":{"id":"2:12075:816","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11978:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12113:26445":{"id":"2:12113:26445","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:11375"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:11373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12180:26446":{"id":"2:12180:26446","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:11375"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:11373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12097:26426":{"id":"2:12097:26426","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12098:26427"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2537-0:73:1777":{"id":"b:2:2537-0:73:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:73:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:2414"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2247-0:23:1802":{"id":"b:2:2247-0:23:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1802","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2249:2080"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8313:6146-0:73:1777":{"id":"a:2:8313:6146-0:73:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8313:6146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:73:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12196:25537":{"id":"2:12196:25537","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12174:32840":{"id":"2:12174:32840","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:11375"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12197:25538":{"id":"2:12197:25538","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2556:1486":{"id":"2:2556:1486","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41731:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2249:2080":{"id":"2:2249:2080","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12198:25539":{"id":"2:12198:25539","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22:1791":{"id":"0:22:1791","crate_id":0,"name":"defer_on_unwind","span":{"filename":"src/lib.rs","begin":[279,0],"end":[283,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on unwinding from panic).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer_on_unwind {\n    ($($t:tt)*) => { ... };\n}"}},"0:30":{"id":"0:30","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[308,0],"end":[362,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2929:1805","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1802","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:34:1812","0:35:1826"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2738:2118-0:70:1774":{"id":"a:2:2738:2118-0:70:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2738:2118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:70:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:54:551":{"id":"0:54:551","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[434,4],"end":[436,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23:1802":{"id":"0:23:1802","crate_id":0,"name":"ScopeGuard","span":{"filename":"src/lib.rs","begin":[298,0],"end":[306,1]},"visibility":"public","docs":"`ScopeGuard` is a scope guard that may own a protected value.\n\nIf you place a guard in a local variable, the closure can\nrun regardless how you leave the scope ‚Äî through regular return or panic\n(except if panic or other code aborts; so as long as destructors run).\nIt is run only once.\n\nThe `S` parameter for [`Strategy`](trait.Strategy.html) determines if\nthe closure actually runs.\n\nThe guard's closure will be called with the held value in the destructor.\n\nThe `ScopeGuard` implements `Deref` so that you can access the inner value.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Always","id":"0:70:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2929:1805","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["0:30","a:2:8314:6145-0:23:1802","a:2:8313:6146-0:23:1802","a:2:2738:2118-0:23:1802","a:2:2681:220-0:23:1802","b:2:2541-0:23:1802","b:2:2250-0:23:1802","b:2:2537-0:23:1802","b:2:3317-0:23:1802","b:2:2247-0:23:1802","b:2:2552-0:23:1802","b:2:2547-0:23:1802","0:65","0:49","0:55","0:60","0:45"]}}},"0:64:587":{"id":"0:64:587","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[452,4],"end":[461,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:1786":{"id":"0:36:1786","crate_id":0,"name":"guard","span":{"filename":"src/lib.rs","begin":[367,0],"end":[371,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1802","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"Always","id":"0:70:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2929:1805","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12085:314":{"id":"2:12085:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12086:26404","`u8`":"1:11995:1509"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12096:32825":{"id":"2:12096:32825","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11984:1406","crate::ops::IndexMut":"2:2982:2176","str::slice_unchecked":"2:12095:32824"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12107:26443":{"id":"2:12107:26443","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:11375"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12160:32833":{"id":"2:12160:32833","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11776:11375","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::match_indices":"2:12157:32832"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43724:5216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:11373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2541-0:70:1774":{"id":"b:2:2541-0:70:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:70:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:697"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12202:32846":{"id":"2:12202:32846","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4534:32846"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43873:5121","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12133:32827":{"id":"2:12133:32827","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11776:11375","str::split":"2:12124:22561","prim@char":"1:11978:418","`DoubleEndedIterator`":"2:7304:121","str::rsplit_terminator":"2:12136:32828"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43606:5213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5447:25536":{"id":"5:5447:25536","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12198:25539"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70:1774":{"id":"0:70:1774","crate_id":0,"name":"Always","span":{"filename":"src/lib.rs","begin":[213,0],"end":[213,18]},"visibility":"public","docs":"Always run on scope exit.\n\n‚ÄúAlways‚Äù run: on regular exit from a scope or on unwinding from a panic.\nCan not run on abort, process exit, and other catastrophic events where\ndestructors don‚Äôt run.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:8314:6145-0:70:1774","a:2:2698:228-0:70:1774","a:2:8313:6146-0:70:1774","a:2:2738:2118-0:70:1774","a:2:2681:220-0:70:1774","b:2:2541-0:70:1774","b:2:2250-0:70:1774","b:2:2537-0:70:1774","b:2:3317-0:70:1774","b:2:2247-0:70:1774","b:2:2552-0:70:1774","b:2:2547-0:70:1774","0:71","0:14"]}}},"2:12099:4932":{"id":"2:12099:4932","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11978:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43526:4924","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:1783":{"id":"0:20:1783","crate_id":0,"name":"defer","span":{"filename":"src/lib.rs","begin":[251,0],"end":[255,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (always run).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.","links":{},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer {\n    ($($t:tt)*) => { ... };\n}"}},"0:19:1769":{"id":"0:19:1769","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[243,4],"end":[243,57]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[235,0],"end":[238,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:12:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:73:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:17:1769"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2537-0:76:1779":{"id":"b:2:2537-0:76:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:76:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:2414"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12186:32842":{"id":"2:12186:32842","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:11375"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2537-0:70:1774":{"id":"b:2:2537-0:70:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:70:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:2414"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12116:2461":{"id":"2:12116:2461","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41589:179","prim@char":"1:11978:418","self::pattern":"2:11776:11375"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12120:2420":{"id":"2:12120:2420","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41589:179","prim@char":"1:11978:418","self::pattern":"2:11776:11375"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:11373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12100:5231":{"id":"2:12100:5231","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11978:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43532:5211","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12195:26341":{"id":"2:12195:26341","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39626:26350","Self::is_ascii":"2:12194:25533"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39626:26350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2547-0:76:1779":{"id":"b:2:2547-0:76:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:76:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1487"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2250-0:23:1802":{"id":"b:2:2250-0:23:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1802","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2252:22550"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5435:33498":{"id":"5:5435:33498","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[422,0],"end":[426,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2698:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2929:1805","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2698:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1802","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12091:26402":{"id":"2:12091:26402","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:2252:22550":{"id":"2:2252:22550","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:1788":{"id":"0:21:1788","crate_id":0,"name":"defer_on_success","span":{"filename":"src/lib.rs","begin":[265,0],"end":[269,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on successful scope exit).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer_on_success {\n    ($($t:tt)*) => { ... };\n}"}},"2:12192:32844":{"id":"2:12192:32844","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11737:127","`FromStr`":"2:11736:6157"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41731:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11736:6157","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11736:6157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12103:29911":{"id":"2:12103:29911","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12102:29922"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43839:5222","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12145:32829":{"id":"2:12145:32829","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2552-0:23:1802":{"id":"b:2:2552-0:23:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1802","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2555:128","2:2556:1486"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3317-0:73:1777":{"id":"b:2:3317-0:73:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3315:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:73:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3319:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:39:1789":{"id":"0:39:1789","crate_id":0,"name":"guard_on_success","span":{"filename":"src/lib.rs","begin":[378,0],"end":[382,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1802","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"OnSuccess","id":"0:76:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2929:1805","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5432:33497":{"id":"5:5432:33497","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2547-0:73:1777":{"id":"b:2:2547-0:73:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:73:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1487"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:59:553":{"id":"0:59:553","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[443,4],"end":[445,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5427":{"id":"5:5427","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5428:33496","5:5429:2136","5:5432:33497","5:5435:33498","5:5443:33499","5:5444:33500","5:5445:6058","5:5446:25535","5:5447:25536"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12110:26444":{"id":"2:12110:26444","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:11375"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55":{"id":"0:55","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[439,0],"end":[446,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2929:1805","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:2908:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1802","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:59:553"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12139:26439":{"id":"2:12139:26439","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:11375","str::rsplitn":"2:12142:26441"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43660:4916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12154:32831":{"id":"2:12154:32831","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11776:11375","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::matches":"2:12151:2092"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43778:5218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:4902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:11373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5444:33500":{"id":"5:5444:33500","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2192","`String`":"5:7283:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2192","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7016:4816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8313:6146-0:23:1802":{"id":"a:2:8313:6146-0:23:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8313:6146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8313:6146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8313:6146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:23:1802","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12076:2421":{"id":"2:12076:2421","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:14403:4099":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:14216:4053":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:10088:5833":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:3344:6054":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:7848:5466":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:11300:5453":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:10529:3279":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:4156:6100":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:9977:3196":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:5818:16358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:11488:4925":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:46167:5284":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:10845:3333":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"18:582:3006":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:7994:5473":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:2693:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:10074:4909":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:10336:4918":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:13155:3370":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:9518:3193":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:44295:11582":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:5920:16365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:8138:4616":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:47809:5355":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:8228:5522":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"19:0:1036":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:13167:3709":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:9215:2221":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"5:5841:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:42867:5182":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:43977:5229":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:1595:13094":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:6531:2782":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:8854:5555":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:8974:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"5:7183:5952":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:13548:3867":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:841:4712":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:12479:3586":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:41436:4896":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"18:491:2995":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:2388:6025":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"18:531:3000":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:21912:29877":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:2632:5395":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:9296:3057":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:11234:3375":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:6425:5442":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:7246:4840":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:4965:4214":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:4261:4860":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:44134:11388":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:11483:5411":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:4043:11348":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:21203:6030":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:10013:3223":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:20620:29923":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:11123:11592":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"6:4895:15697":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:12435:3578":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:6516:4369":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:4897:6130":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:5567:4165":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:42224:4904":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:13448:3831":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:11189:3370":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:11036:2914":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"14:31:4703":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:4518:15658":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:919:4713":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:7073:18410":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"15:0:1986":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:9867:6030":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:2735:2117":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:7632:6030":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:9474:4907":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:7016:4816":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"14:160:4703":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:3435:5523":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:7599:17356":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:5025:15711":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:5951:2819":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:12936:3671":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:40237:5999":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"1:640:5940":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:13991:3975":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:4446:15649":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:44363:11593":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:46021:5280":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:9442:34867":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:8838:5553":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"11:1611:1802":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:2962:17544":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:6502:4367":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:573:12199":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:0:1987":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:1690:13102":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:878:2801":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:10511:3277":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:2750:2151":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:42888:5186":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:4842:15691":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:46091:5282":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:4770:15682":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:9223:2224":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:4928:4213":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:6815:4423":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:4917:15699":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"0:21:1788":{"crate_id":0,"path":["scopeguard","defer_on_success"],"kind":"macro"},"2:2830:2167":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:11981:1054":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:42898:5190":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:14054:3991":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:495:1037":{"crate_id":1,"path":["std","thread","panicking"],"kind":"function"},"5:3570:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"0:39:1789":{"crate_id":0,"path":["scopeguard","guard_on_success"],"kind":"function"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:4556:15663":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:43542:3053":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:6332:4348":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:4630:23567":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:12004:3480":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:10568:3287":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:4456:15650":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:46213:5286":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:46310:5289":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:45880:5270":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:7020:2903":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:11428:3392":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"11:1068:4728":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:7124:2426":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:44472:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"11:2180:34778":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:4420:15646":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:6537:6177":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"11:2033:4458":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:8348:5416":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"18:609:3014":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:45590:5258":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:4441:4198":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:12994:3680":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:6160:4305":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"11:1852:4737":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:2376:6019":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"18:660:3021":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:6894:2902":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"5:5530:2830":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:43454:5205":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:47894:5360":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:10161:3236":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:11983:1376":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:9188:3051":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:6724:4409":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:1102:32539":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:3517:6049":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:6764:2845":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:8420:4902":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:4698:4205":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:13029:3692":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:7657:2372":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"5:6789:2848":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:10351:3260":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:4620:4204":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:3171:4712":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:3635:3090":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:629:4810":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:6461:2899":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:6250:4342":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:6744:16790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:11558:5456":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:1558:4712":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:4564:4202":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:10671:18571":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:6604:2900":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:14301:4075":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:22451:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:12421:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:3933:6073":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:5553:4162":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:13069:3695":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:5793:4247":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:10322:4917":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:13971:3969":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:6136:15552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:42184:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:46645:5311":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:41774:4712":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:21896:4947":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:44307:11578":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:6140:6308":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:6571:18407":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:11164:3367":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:3299:5403":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:13620:3882":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:8916:6181":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:13492:3861":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:7038:4455":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"11:968:4458":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:1911:13269":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:2923:2173":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:6688:13210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:7433:4530":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:44145:5237":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:8137:3042":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:43991:5232":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:6738:11490":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:1068:4726":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:44533:5251":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:8798:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:40380:4863":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:11329:4922":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:7362:18411":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:7924:4817":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:30379:29816":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:3154:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"11:844:4723":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:5829:16359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:10430:3268":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:2505:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:4762:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:39269:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:2966:33604":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:1500:13083":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:2353:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:10350:4919":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:5836:16360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:5051:15713":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:933:5953":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:1732:2512":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:9213:2220":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:11074:3079":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:6540:4169":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:6319:2793":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:11467:3395":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:10633:3294":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:1523:4815":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:7225:11488":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:2825:4157":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:5382:3181":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:43706:5215":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:13332:3738":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:8541:4712":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:43444:5204":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:5972:4120":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:42651:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"16:149:2779":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:42104:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:2362:6015":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:1841:2656":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:11753:3428":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:39411:2181":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:44588:5255":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:8902:32159":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:6785:30194":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:44490:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"7:79:17380":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:2692:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:4428:15647":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:6977:4445":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:14163:4035":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:8862:2426":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:5074:15716":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:5962:2887":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:9850:18486":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:46411:5292":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:5100:4218":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:9821:3205":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:46357:5290":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:2517:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:10223:3241":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"11:657:2426":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:11991:745":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:22418:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:5843:4255":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:4148:6099":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:10148:3235":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:45898:5271":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:530:4118":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:7505:4176":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:2689:4151":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:2514:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:43362:5198":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:4407:2124":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:4395:15487":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:11979:3477":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:1755:2511":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"9:450:17392":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:2637:4149":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:2874:4159":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:1928:656":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"11:695:4714":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:11388:18476":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:4506:4200":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:14:2095":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:22103:6071":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:47271:5348":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:44120:5236":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:4848:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:5612:4223":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:10229:4914":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:4436:15648":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:2243:32616":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:8165:6029":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:2755:2156":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"14:7:4703":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:21110:6221":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:11551:22858":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:13787:3920":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"7:0:1553":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:8196:5153":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:6456:4164":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:9182:25668":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:40892:5155":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:43624:5214":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:2105:18529":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:864:2426":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:6832:11482":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:40072:5118":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:2611:4148":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:14359:4092":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:6372:4163":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:10510:5403":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:11199:3372":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:7250:12147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:2293:17517":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:12952:3672":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:3802:2832":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:11801:11372":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:3222:5400":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"12:0:1984":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:11520:3079":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:41453:6068":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:5720:4238":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:11371:3389":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:6175:4307":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"13:0:1978":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:3777:4191":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:7025:4452":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"11:1517:4733":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"5:4196:2819":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:8846:4712":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:43778:5218":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:4862:15694":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:22077:4967":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:40522:5150":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:40863:4884":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:2570:2866":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:4841:4210":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:47065:5317":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:42626:4581":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:3166:2184":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:4616:15667":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:42859:5181":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:2926:17543":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:12133:3512":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:2982:2176":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:5065:2827":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:9952:3172":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:46615:5310":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:10051:3226":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:13043:3693":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:40300:5133":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:6392:2426":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:673:5827":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:885:4716":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:6396:4355":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:9655:3196":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:11264:3380":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:12552:3301":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:4476:4199":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:1746:29864":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:7908:5471":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:7575:15885":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:6239:34858":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:6386:4354":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:5799:16356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:11034:3349":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:7313:34856":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:9590:2862":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:13830:3928":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:12614:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:12017:3481":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:41790:2426":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:7033:4834":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"11:817:4720":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:43873:5121":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:40056:29766":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:12566:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:2162:2497":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"5:1302:4730":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"18:481:2994":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:10156:4912":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:9913:3216":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:4626:23563":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"10:36:34776":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:40176:5129":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:41561:4897":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:13557:3871":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:20650:30208":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"11:723:4715":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:2600:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:2511:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:6618:16785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"7:32:17373":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:1059:4724":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:7799:4562":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:504:3062":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:927:4717":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:1636:2138":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:3371:11407":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:39446:2230":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:21042:6030":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:1513:13085":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:7463:4539":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:653:12249":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"18:614:34871":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:1557:13090":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:4592:4203":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:43848:4931":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:9083:3048":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:10745:5467":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:1273:4726":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:4323:2852":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:5988:4871":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:12727:3622":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:20972:6226":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:9434:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:7445:4531":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:4810:15687":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:5861:2827":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:595:12202":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:2777:2154":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:11992:3479":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:10066:3227":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:12605:3604":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:4650:15670":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:41573:4899":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:10080:3229":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:7283:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:41638:2425":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:4809:799":{"crate_id":2,"path":["core","iter"],"kind":"module"},"5:2960:33607":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:42024:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:2759:4154":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:1045:4458":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:9225:2225":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:43660:4916":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:527:2364":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:40450:4876":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:7655:5958":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:9272:2656":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:4333:2230":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:9211:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:41672:5170":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"0:22:1791":{"crate_id":0,"path":["scopeguard","defer_on_unwind"],"kind":"macro"},"0:23:1802":{"crate_id":0,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"5:4004:2813":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:2468:6030":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:21843:4946":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:4740:15678":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:41647:4712":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:21790:4945":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:11976:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"18:599:34873":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:44279:11579":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:4350:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:20839:6225":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"5:7065:32459":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:22517:2373":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"5:5284:11364":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:9090:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:13109:3700":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:7860:5468":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:10812:3331":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:12002:1134":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:11127:3396":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:3737:4818":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:3395:3077":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:45720:5263":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:11272:3382":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:14417:4102":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:7295:17169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:40157:11445":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:10790:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"5:6273:2813":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:10471:3271":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:11623:3406":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:11781:4902":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:10253:3243":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:44287:11580":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:7382:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:11178:3368":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"5:4166:2819":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:2241:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2347:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:3315:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:6673:5441":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:4126:25051":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:1575:13092":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:8270:5412":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:2715:4152":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:21987:4955":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:1663:13099":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:12035:3489":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:5280:11363":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:7883:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:8125:4613":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:8841:18469":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:7586:15886":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:3932:2819":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:5119:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"5:895:4712":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:5406:5428":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:42064:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:11007:3347":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:7515:4544":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:579:12200":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:7216:4837":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:11944:29280":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:4256:4859":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:8739:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:4764:15681":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:1629:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:10654:3296":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:9048:3047":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:3511:2813":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"6:6028:16374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:3183:32464":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:6834:16795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:8381:6141":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:1973:3067":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:8288:5527":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:6573:13042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:10550:2369":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:48061:5369":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:11290:18474":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:7505:15875":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:43556:4909":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"9:177:17460":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:11988:643":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"5:1464:4715":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:8872:18470":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:7707:4552":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:3834:5411":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:22583:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:2978:2175":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:7229:11487":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:1702:6096":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:541:12194":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:4:1019":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:1466:1762":{"crate_id":2,"path":["core","mem"],"kind":"module"},"1:11285:5452":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:11179:5446":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:4984:15707":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:40473:5148":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:41799:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:352:2381":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"18:564:3005":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:8068:4607":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:14189:4044":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:9219:2223":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:13862:3938":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:11084:3352":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:11498:3396":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"11:1048:34777":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:4824:15689":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:43606:5213":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:9100:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:2960:2185":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:488:12188":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:4955:6137":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"5:2049:4818":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:10313:3248":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"11:2168:34781":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:12757:3641":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:8547:5548":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:10597:3291":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:39418:4984":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:10444:3269":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:1681:13101":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:40482:4877":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:14350:4090":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:3181:25913":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:47771:5354":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"0:70:1774":{"crate_id":0,"path":["scopeguard","Always"],"kind":"enum"},"5:7055:2805":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:12815:3653":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:9171:2219":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:2919:1841":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:11999:1505":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:4955:15704":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:2150:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:5587:4869":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"18:590:3007":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:7679:4180":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:7652:2370":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:5807:4248":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:923:4714":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:43106:29647":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:5687:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:6671:13212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:10049:4731":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:5737:18403":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:6796:16792":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"11:332:2785":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:0:1398":{"crate_id":1,"path":["std"],"kind":"module"},"18:574:2996":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:1118:5819":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:5890:16363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:6438:4358":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:30309:1763":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:13757:3914":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:40901:2860":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:7631:4550":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:2131:2359":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:9744:34866":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:21952:4953":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:2493:5393":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:4184:1845":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:13125:3702":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:3501:29144":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:8326:6133":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:14236:4056":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:41587:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:10390:3265":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:9170:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"17:13882:3945":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:11327:25052":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:39293:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:4535:15660":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:12372:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:44168:5245":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"11:1501:17473":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:8315:1847":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:10486:3273":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:8734:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:1426:4731":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:13303:3718":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:7171:4836":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:40370:5141":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:6820:16794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:2508:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:3076:2179":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:2926:2174":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:6649:2434":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:40143:5124":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:2519:4144":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:13673:3894":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:11109:3361":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:20801:6030":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:2360:2487":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:5622:2888":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"15:327:17502":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:12878:3661":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:30365:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:21124:4944":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:6044:34404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:10832:3332":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:9706:3197":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:40652:5153":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:10931:3338":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:2160:2496":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:46043:5281":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:23162:4846":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:6763:4421":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:7589:2907":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:9561:3194":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:2746:2122":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:5554:6163":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"5:3212:4735":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:11888:3462":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"18:681:3028":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:7272:17167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:4469:15652":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:11210:3373":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:8711:18465":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:5793:16355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:13096:3699":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:4848:15692":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:14102:4028":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:7529:15879":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"18:727:3040":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:7045:2813":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:12365:3569":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:6565:12237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:635:5379":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:8216:5219":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:43464:5206":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:12526:3592":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:400:3058":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:41723:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:9105:5446":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:8314:6145":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:9485:34864":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:10417:3267":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:6775:16791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:9939:3219":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:46491:5293":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:47946:5364":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:4695:15673":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:10069:5387":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:5737:16291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:46727:5312":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:5073:5422":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:43820:5220":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:3220:5399":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:42906:5191":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"11:403:34787":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:4047:6083":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:6470:4181":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:4729:15677":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:5529:4867":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:4761:671":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"6:526:12192":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:44008:5233":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:8043:4604":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:12089:3495":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:5372:5423":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:944:4720":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:44291:11584":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:12618:3606":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:7570:2905":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:3596:4731":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:22550:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:21928:4948":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:2223:32623":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:44275:11576":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:20803:6223":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:4413:15645":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:12579:3601":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:6692:18408":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"13:226:34793":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:30437:29760":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"16:7622:4549":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:4428:2821":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:3330:2832":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:532:12193":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:22484:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:41663:2426":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:10504:5399":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:45566:5257":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:41396:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:9604:3195":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:11994:743":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:7484:4542":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:13923:3954":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:10402:5550":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:2663:4150":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:4506:15657":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:10800:5408":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"5:6622:2842":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:7474:4175":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:3220:4186":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:6638:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:7511:15876":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:3667:6069":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"11:2174:31609":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:3985:6077":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"14:187:17485":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:434:3061":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:13894:3946":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:20648:30206":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:47413:5349":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:3042:17545":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"11:1538:4734":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:40351:5138":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:5775:4242":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:2035:4817":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:2741:2120":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:0:821":{"crate_id":6,"path":["libc"],"kind":"module"},"17:9344:34861":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:9118:3049":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:32097:6164":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:10758:5589":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:2469:11451":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:43962:5224":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:1780:5385":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:10175:3195":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:3383:4853":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"16:5639:4232":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:5979:16368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:12424:3577":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:11985:1490":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:4868:4211":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:11979:1525":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:2133:3071":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:6057:17516":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:5044:15712":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:9474:2909":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:21227:6030":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:21234:6227":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:4723:15676":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:2210:5392":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"11:793:4732":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:4463:15651":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:1672:2793":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:8932:6183":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:11329:18475":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:2918:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"16:8210:4510":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:4291:15635":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:1288:4724":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:4587:15665":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:3194:2187":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:2908:1764":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:11852:3457":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:11696:3416":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:7530:5600":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:2688:2114":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"5:4944:2819":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:40320:5135":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:11967:3474":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:2738:2118":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"5:1411:4712":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"11:2060:4726":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:47523:5350":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:11019:2912":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:506:12191":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:6289:4344":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:4716:15675":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:43532:5211":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:11815:3444":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:12671:3613":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:7116:2426":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"11:760:2832":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:20986:2496":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"6:4315:15637":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4938:15701":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:4177:6102":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:22070:29906":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:6185:5440":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:5771:5438":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:1536:13088":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:12118:3506":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:7546:15881":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:2814:2163":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:4034:2793":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:8868:5432":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:123:11871":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:1696:13103":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:4341:15639":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:4887:15696":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:11992:746":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:9688:2871":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:7275:2191":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:6421:5154":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:3453:5407":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:500:12190":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:11045:3350":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:6347:18406":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:8233:6067":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:7870:5469":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:6841:16796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:4992:15708":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:8086:4609":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:43435:5203":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:6128:4300":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:6554:4371":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"11:1845:4736":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:47725:5353":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:47969:5365":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"11:1831:2832":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:12792:3652":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:12377:3571":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:4854:15693":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"11:1027:17472":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:12631:3608":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:5551:6162":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:8252:4625":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:9359:4906":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:410:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:13574:3873":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:8605:18450":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:13055:3694":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:4496:15656":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:4785:4208":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:12186:3526":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:11241:18598":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:10609:3292":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:11258:5596":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:4483:15654":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:8153:5408":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:10935:22884":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:41655:4731":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:854:4731":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:10293:3246":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:13749:3911":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:6720:16788":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:4638:15669":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:9181:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:44083:4934":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:10499:3274":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:13914:3953":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:4368:15640":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:2895:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:5626:4227":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:13870:3939":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:39335:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:13795:3922":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"18:624:34872":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"17:12921:3667":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:13803:3924":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:7494:4543":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:10267:4915":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:7259:4843":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"18:636:3020":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:3238:4738":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:7331:34859":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:11030:2913":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:12394:3574":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:7843:3129":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:40035:5114":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:43372:5199":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:11144:3365":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:4685:15672":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:40666:4881":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:40512:4879":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:44351:5246":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:7540:15880":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:5608:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:7230:29808":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:1138:32540":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:45690:5262":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:9475:3192":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:9875:3210":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:41731:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:4628:23565":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"0:0:1869":{"crate_id":0,"path":["scopeguard"],"kind":"module"},"16:2781:4155":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:6484:4359":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:1982:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:11791:3443":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:10117:4911":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:1649:13098":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:261:3056":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:45546:5256":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:12851:3658":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:10308:4916":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:7558:15883":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:41944:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:6648:13227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"9:237:5186":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:4787:15684":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:12577:2876":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"5:207:2791":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:2497:4143":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:42346:2221":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:4380:5415":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:4396:4197":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:7289:4489":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:4973:15706":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:44188:4935":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:7693:4170":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:4380:15642":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:9926:3217":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:11525:4928":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:5959:4271":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:42596:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:4789:2885":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:1892:5389":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:119:11870":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:2797:2160":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:21671:6030":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:2737:4153":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:43409:5133":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:6240:2887":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:10123:3215":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:4944:15702":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:43760:5217":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:1077:4730":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:6981:3042":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:13604:3879":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:21979:4954":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:8907:30571":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:8399:5540":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:42360:2222":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:1776:2832":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:3991:6078":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:8203:3053":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:4488:6106":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"0:12:1766":{"crate_id":0,"path":["scopeguard","Strategy"],"kind":"trait"},"2:2819:2164":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:7753:4554":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:3217:32476":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:11142:5447":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:11565:5456":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:9614:34865":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:6868:16798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:4142:4858":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:5757:2813":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:9734:3198":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:4164:6101":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:4032:4195":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:43526:4924":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:41984:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:47874:5358":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:0:1988":{"crate_id":17,"path":["object"],"kind":"module"},"17:9966:3195":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:6658:4395":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:40108:5121":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:11416:3391":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:256:3055":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:5015:15710":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:42353:2220":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:13435:3824":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:11790:3033":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:8949:18473":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"13:110:34839":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:1603:13095":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:10226:6166":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:21673:6220":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:1257:4458":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:1545:13089":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:10323:3250":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:2765:2152":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:40195:5130":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:14395:4096":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:1580:4736":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:6018:18405":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"18:755:3046":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:14044:3986":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:9866:3208":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"11:311:34784":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:11905:3464":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:11568:18477":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:7727:5384":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:554:12196":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:10458:3270":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:40116:4854":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:10280:3245":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:7199:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"15:306:17498":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:6067:16376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:40919:4890":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:3111:5396":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:8449:5186":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:11776:11375":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:12966:3674":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:14227:4054":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:1569:13091":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:11943:3470":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:8997:18451":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:14037:3984":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:11832:3447":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:8277:6103":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:6427:4357":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:4111:4857":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:7552:15882":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:12065:3493":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:35:2789":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:7916:5472":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"15:394:17508":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:42642:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:7099:5568":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:5987:16369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:4378:2853":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:7592:18412":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:14177:4041":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:5877:16361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:1543:2819":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"18:736:22432":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:42851:5179":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:482:12187":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:8322:5531":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:5994:16370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:11847:11381":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:39379:2178":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:7609:17357":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:6130:16404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:44525:5249":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:40877:5154":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:9022:5566":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:13905:3950":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:4908:15698":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:6171:16406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"11:2186:34780":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:1717:13105":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:2521:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:9206:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:40086:5119":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:6589:12071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:9399:3191":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:2793:2158":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:2802:2165":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:7706:5941":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:46235:5287":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:5422:5429":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:6625:6133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:10138:5574":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"11:365:2787":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:44056:5235":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:2567:4146":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:9217:2222":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:5008:15709":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:10945:3342":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:5978:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:44299:11583":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:3996:4855":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:3184:29496":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:10740:25662":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:3492:2219":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:43110:4908":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:22091:4968":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:13179:3716":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:4872:15695":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:11542:3398":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:45821:5267":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:10770:5468":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:5863:16320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:4008:4856":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:12359:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:9990:3222":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:8794:18468":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"18:507:2996":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:3186:3075":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"11:986:4724":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:7407:4275":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:45742:5264":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:11548:4929":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:40329:5136":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:1638:13097":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:48022:5368":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:4228:5413":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:4475:15653":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:11333:25049":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:12002:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:47847:5356":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:7584:4548":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"14:0:1985":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:8558:5549":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:2399:4139":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:1782:5386":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:7272:2828":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:13083:3698":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:2443:4141":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:4568:15664":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:6077:16377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:43864:4854":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:4814:4209":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:8887:5556":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:11235:2915":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:8824:5552":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:6850:4427":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:45658:5261":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:12148:3518":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:1495:13082":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:9665:34869":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:39238:2177":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:7240:34857":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:7665:4179":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:2883:2884":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:12669:5954":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"11:1121:4730":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"11:1826:2813":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:6805:16793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:11115:25227":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:9223:3052":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:44303:11577":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"10:44:4741":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:3262:5402":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:5363:18401":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:8282:6104":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:10868:4921":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:25972:4847":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:6534:5443":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:4401:15644":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:12457:3585":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:9426:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:2403:1996":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:582:5937":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:12840:3657":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:11989:645":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:1631:13096":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:3645:2426":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:632:5377":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:11343:11376":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"0:20:1783":{"crate_id":0,"path":["scopeguard","defer"],"kind":"macro"},"17:13591:3874":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:5067:4217":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:1765:610":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:2691:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:11250:3377":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:4524:15659":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:10923:5431":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:12254:3528":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:6197:4322":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:6232:4339":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:8531:5417":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:4550:15662":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:7739:5986":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:3058:3086":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:9044:22864":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:21104:6219":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:13566:3872":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:14015:3979":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:9656:2865":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:20665:30209":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:39313:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:11767:3429":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:4328:15638":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:47663:5352":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:41782:4731":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:12333:3562":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:5414:4221":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:7079:2426":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"9:393:17393":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:477:2878":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:11315:5455":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:22715:4972":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:42367:2223":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:4616:6078":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:13140:3706":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:11220:18597":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:2263:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:10735:23712":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"0:42:1792":{"crate_id":0,"path":["scopeguard","guard_on_unwind"],"kind":"function"},"1:2920:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:7833:4566":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:14197:4047":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:43830:5221":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:728:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:9065:5877":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"18:719:3037":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"11:1012:4726":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"5:3178:4736":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:40096:5120":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:2352:4137":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"14:40:3444":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:9840:3207":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:47931:5363":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:11995:1509":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:4800:15686":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:4664:15671":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:10910:5465":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:4704:15674":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:40124:5122":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:3149:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:2170:32624":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:42586:29899":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:9095:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:11103:5552":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:3963:6075":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:6156:16405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:6939:18409":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:8105:4612":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:22041:29822":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:7012:4449":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:9274:3053":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:12592:3603":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:7370:29287":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"5:7087:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:6036:16375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:7732:5462":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:5042:5422":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"0:73:1777":{"crate_id":0,"path":["scopeguard","OnUnwind"],"kind":"enum"},"1:8296:5520":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:12826:3655":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:11978:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:6915:34855":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:43940:11387":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:7297:4844":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:914:4732":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:45760:5265":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:41502:29774":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:2592:5394":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:39253:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:47601:5351":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:1666:1092":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:4733:6091":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:9318:3183":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:1733:13106":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:9877:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:44311:11592":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:41705:5172":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:12539:3595":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:21561:29927":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:7025:2426":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:494:12189":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"11:119:2783":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:5236:2793":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:20607:3006":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:40360:5139":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:3732:5410":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:2809:2162":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:5955:16366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:3377:5155":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:6667:4396":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:8144:5406":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:22616:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:14026:3983":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:8004:6057":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:9221:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:4626:15668":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"3:234:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:582:3063":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:1979:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"9:357:17407":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:3583:4712":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:8472:5543":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:11726:3420":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:40911:4888":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:45612:5259":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:3722:4817":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:30343:2141":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:46569:5309":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:21964:29809":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:4754:15680":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:12646:3611":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:950:4722":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:62:11816":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:3407:2819":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:5767:16353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:21025:6222":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"16:4536:4201":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:40029:4854":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"11:1858:4738":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:11736:6157":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:12412:3575":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:8969:5558":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:11872:3458":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:3295:4187":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:7061:4457":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:40412:5145":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:2316:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:32224:2123":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:10780:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:43678:4917":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:2781:2157":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:12691:3616":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:5849:16319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:3231:2188":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:20853:2496":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:10581:3289":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"11:1838:4735":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:4900:4212":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:46851:5314":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:41538:5412":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"18:699:3031":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:4603:11438":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:11020:3348":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:7564:15884":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:40441:4875":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:43343:5195":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:587:12201":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:10520:3278":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:43855:5122":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:2844:2170":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:43724:5216":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:47984:5366":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"18:0:1989":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:3810:4192":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:551:2366":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:11591:3370":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:2465:4142":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:21102:6030":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:547:12195":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:12864:3660":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:30913:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:40131:11444":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:898:2813":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:4781:15683":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:1818:5387":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:13368:3769":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"9:507:4796":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"9:486:17391":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:7523:15878":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:5816:2889":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:9017:5565":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:12711:3617":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:6705:16786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:13949:3964":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:8810:5551":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:10361:3261":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:10445:2910":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:21208:6218":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:3301:5404":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:2836:2168":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:6986:4448":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:12003:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:42669:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:3260:5401":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:7308:4845":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:6726:16789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:10110:3233":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:4906:6131":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:21:684":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:2962:32617":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:11600:18478":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:12318:3557":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:8109:5512":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"9:52:17410":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:7721:5942":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:10507:5401":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:10330:3253":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:1482:4732":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:41824:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:12174:3523":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:4236:4712":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:1709:13104":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:4374:15641":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:42876:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:2857:4158":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:47905:5361":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:12446:4940":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:6978:25398":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"10:0:1982":{"crate_id":10,"path":["adler"],"kind":"module"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:39432:4510":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"18:96:22422":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:7128:25046":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:41482:29876":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:6348:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:8924:18472":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"14:165:17478":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:2929:1805":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:42144:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:9965:5165":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:4678:6072":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:12001:1563":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:2208:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:30543:29807":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"11:2194:34782":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:11998:1508":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"5:6720:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:7525:4177":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:10544:3283":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:12053:3490":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"11:0:1983":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:8980:2363":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:7999:5474":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:10835:4920":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"5:1492:4713":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:9462:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:6153:2895":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:12161:3522":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:4560:6123":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:13981:3972":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:45636:5260":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:7327:2190":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"18:515:2993":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:5386:5427":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:6008:16371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:1590:13093":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:11977:941":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:46259:5288":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:10249:3242":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:5028:4216":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"18:80:22421":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:9806:18485":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:4818:15688":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:6603:2830":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"9:0:1981":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:10981:3345":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"11:749:2813":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:45991:5279":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:10969:3344":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:10097:3232":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"11:97:34792":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:12000:793":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:13456:3832":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:2703:1761":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:10810:25230":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:2760:2153":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:10786:3328":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:6384:5441":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:9528:34870":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:14380:4095":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:5805:16357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:2840:2169":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:2824:2166":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:40463:5147":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:6317:4346":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:4929:15700":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:13854:3937":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:11993:747":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:6137:2876":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:2959:2484":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:2689:2115":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:908:2832":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:6303:4161":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:8771:18467":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:3160:2182":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:14315:4077":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:11982:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:872:4715":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:49867:6234":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:4489:15655":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"18:707:3033":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:1574:4735":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:6323:4347":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:9777:18484":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:6789:4422":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:22385:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"5:7363:2832":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:1506:13084":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:12891:3662":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:1820:2514":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:14205:4048":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:8632:18463":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:22352:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:6590:5829":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"16:7255:5170":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:8021:4603":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"11:798:4717":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:562:12197":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:43334:5194":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:4395:2819":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:20895:6230":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:46805:5313":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"14:221:4710":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:1921:5997":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:20939:6231":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:13659:3891":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:3867:4193":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"9:330:17447":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:43352:5197":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:13707:3897":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:615:5376":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"11:644:4731":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:6471:2793":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:1075:3064":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:3441:4188":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:13427:3821":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:5469:2819":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:5590:4167":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:5058:15714":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:12502:3591":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:43500:5207":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"14:215:4708":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:12346:3564":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"5:6632:2844":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:40223:5131":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:10906:3336":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:11997:1507":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"5:822:2799":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:40150:5125":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:43383:5200":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:10403:3266":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:4323:4196":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:4753:4207":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:7633:2383":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:7041:2890":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:44283:11581":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:3519:3078":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:44575:4740":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"5:1503:4714":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:11642:3409":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:10883:3335":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:8792:5550":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:20851:30908":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:43839:5222":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:46388:5291":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:40870:4885":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:6061:2891":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:4025:6079":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"11:1822:2426":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:11960:23268":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:7539:4178":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:9153:3050":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:5381:2819":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:11454:3393":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:1473:4716":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:4606:15666":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:5745:5437":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:30941:3006":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:2681:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:21457:6232":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:11098:3357":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:8222:5520":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:21058:6217":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:1586:4737":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:5673:18402":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:2589:4147":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:41714:11536":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:12354:3566":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:44330:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:1591:4738":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:11990:748":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:11354:3149":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:11091:5551":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:4691:6132":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:7519:3063":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:6864:4429":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:13937:3961":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:39626:26350":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:45843:5268":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:2785:2161":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:40270:2854":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:3580:4189":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:2803:4156":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:46881:5315":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:5342:4220":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:9124:5447":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:4879:1006":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:5299:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:5877:5824":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:4794:15685":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:40044:5115":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:41419:4894":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"16:3894:4194":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:1562:2426":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:11955:3473":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:2164:3074":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:44563:5254":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:7652:5955":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:1184:3066":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:498:2359":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:5398:3182":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:9030:5568":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:4724:4206":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"11:1818:4712":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"18:671:3027":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:5994:18404":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:8186:5136":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:21236:4944":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:2314:4129":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:2556:2881":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:14150:4029":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:10339:3256":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:13513:3866":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:4389:15643":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:21549:4942":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:40680:4882":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:43574:4914":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:44482:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:9143:5570":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:2311:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:45945:5272":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:10377:3263":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:12769:3643":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:1442:2426":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:3744:4190":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:10297:5430":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:2213:1827":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:8313:6146":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:956:4723":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:8152:4182":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:1430:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:12303:3553":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"18:644:2996":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"4:0:1979":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:10621:3293":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:13683:3895":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:5615:2887":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:5916:4114":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:14341:4086":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:44546:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:11996:1506":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:4748:15679":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:2698:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:47885:5359":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:7900:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:6872:4171":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:12659:3612":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"0:36:1786":{"crate_id":0,"path":["scopeguard","guard"],"kind":"function"},"5:7095:4835":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"18:113:22423":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:43091:5192":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:4949:15703":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:8209:4909":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:4308:5414":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:39439:4985":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:10266:3244":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:8987:22837":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:14329:4084":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"18:766:22433":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:6713:4408":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:11796:11373":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:10303:3128":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:5967:16367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:3204:4737":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:3179:30211":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:2900:4160":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:12394:30863":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:5651:4166":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:4963:15705":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:9160:5571":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"16:6900:4431":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:13016:3691":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:8542:18452":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:47865:5357":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"11:630:4712":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:40280:5132":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:12905:3665":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:7517:15877":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:40190:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:5437:5430":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:10799:3329":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:21452:6224":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:7755:5465":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:3977:6076":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:22025:29818":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"11:2201:4836":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:30349:2142":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:3139:2180":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:4735:6092":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:13732:3906":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"0:76:1779":{"crate_id":0,"path":["scopeguard","OnSuccess"],"kind":"enum"},"17:9899:3215":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:2461:5820":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:13964:3968":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:43810:5219":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:46137:5283":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"5:276:2192":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:4833:15690":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:5775:16354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:14282:4070":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:568:12198":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:4731:6089":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:14007:3978":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:2853:2172":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:13697:3896":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:47999:5367":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:2421:4140":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:46915:5316":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:39152:2189":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:32137:4978":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:6931:4434":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:2217:6012":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:8176:18415":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:1565:2813":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"18:690:3030":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:6288:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:11313:11543":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:40389:4866":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"11:285:5816":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:12106:3503":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:12982:3678":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:9192:25669":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:45861:5269":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:4020:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"11:2049:4724":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:6607:16784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:1527:13087":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:3025:4183":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:9673:2866":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:5231:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:4076:4731":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:7379:2836":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:40498:3018":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:2743:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:10038:3225":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:4996:4215":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:6357:4351":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:32133:4977":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:4252:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:40430:5146":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:4304:15636":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:40886:4886":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:6850:16797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"9:426:17394":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:9010:5564":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:4543:15661":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:10994:3346":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:7553:4545":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:4387:2231":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:2541:4145":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"14:202:11389":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:6015:16372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:10953:5553":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:41904:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:2588:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:42691:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:1915:2515":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:6214:4329":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:10194:4913":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:8166:4618":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:13771:3917":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:40342:5137":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:39453:4986":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:9469:11456":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:6022:16373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:11984:1406":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:8955:5557":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:5900:16364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:1569:2832":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:7739:4168":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:41525:5168":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:7659:11486":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:22682:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"16:2332:4131":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:20667:30204":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:1520:13086":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:40398:5142":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:11927:5603":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:43422:5202":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:11761:2921":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:20635:29923":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"18:521:22434":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:3927:6074":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:1843:5388":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:7855:18414":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:9887:3213":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:8659:18464":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:2789:2159":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:5689:4233":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:13639:3883":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:5301:4219":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:11924:3469":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:10199:3240":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:5491:5431":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"11:836:4722":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:4035:6080":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"5:2141:4819":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:13847:3936":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:9032:3182":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"11:399:34786":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:7304:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:10555:3284":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:11160:23044":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:11539:5597":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"5:2690:32556":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:11118:3362":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:6598:16783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:4694:6105":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:11421:5409":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:4783:32405":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:1673:13100":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"11:805:5953":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"18:538:3003":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:8740:18466":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:11398:2917":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:39191:2186":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"6:474:12186":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:41864:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:8899:18471":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:12077:3494":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:3729:5409":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:358:2382":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:5738:5434":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:55:4594":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"17:13957:3967":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:5080:15717":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:39357:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:9409:34863":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:11056:18596":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"8:0:1980":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:40421:4870":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:4812:6088":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:14259:4069":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:5940:4264":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:4434:2232":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:7262:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:8900:6182":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:9469:5466":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:6886:4172":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:10914:4793":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:7763:18413":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:13719:3900":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:5704:4236":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:11564:4930":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:7278:17168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:42614:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:40207:29808":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:22004:29810":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"11:1103:4729":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:44155:5241":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:5882:4258":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:10314:5834":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:2373:4138":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:11252:5448":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:3671:2793":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:7759:4977":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:47920:5362":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"15:288:17497":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:6809:6215":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:10716:5583":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:7853:5467":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:22649:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:7678:2369":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:11155:3366":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:7463:17328":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:10025:4712":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:5068:15715":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:11462:5410":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:2244:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:4039:6081":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:9016:3181":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:11949:5943":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:6711:16787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"11:667:4713":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"18:652:2996":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:8489:6156":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:7568:34854":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:9716:34862":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:13778:3919":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"11:736:4716":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:43283:5193":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:10863:3195":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:1011:2793":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:2378:6020":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"5:2970:33606":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:2848:2171":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:12566:3600":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:8304:5529":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:30118:6070":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:11669:3410":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:4466:6105":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:7696:32157":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:5882:16362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:13999:3976":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:3510:6028":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:7266:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:2771:2155":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:10957:3343":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:43514:5210":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:11599:4911":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:9571:34868":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:4365:2821":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:782:2796":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:45791:5266":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:46189:5285":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:261:2793":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:3187:29488":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}