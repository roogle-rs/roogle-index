{"root":"0:0:2591","crate_version":"1.2.0","includes_private":false,"index":{"a:2:32818:248-0:74:2507":{"id":"a:2:32818:248-0:74:2507","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32818:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2507","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13743:1024":{"id":"2:13743:1024","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12492:490"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3100-0:71:2505":{"id":"b:2:3100-0:71:2505","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3070:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2505","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3103:149","2:3104:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13764:32107":{"id":"2:13764:32107","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12498:1765","crate::ops::IndexMut":"2:3621:2916","str::slice_unchecked":"2:13763:32106"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5701":{"id":"5:5701","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5702:32820","5:5703:2873","5:5706:32821","5:5709:32822","5:5717:32823","5:5718:32824","5:5719:6928","5:5720:27644","5:5721:27645"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13857:32122":{"id":"2:13857:32122","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:12247"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13768:26486":{"id":"2:13768:26486","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13767:26485"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13775:29373":{"id":"2:13775:29373","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44826:5955","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32818:248-0:68:2502":{"id":"a:2:32818:248-0:68:2502","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32818:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2502","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42674:7025-0:74:2507":{"id":"a:2:42674:7025-0:74:2507","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42674:7025","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2507","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13771:5967":{"id":"2:13771:5967","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12492:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44548:5947","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13816:26497":{"id":"2:13816:26497","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13757:26456":{"id":"2:13757:26456","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42582:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42674:7025-0:21:2530":{"id":"a:2:42674:7025-0:21:2530","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42674:7025","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42674:7025","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42674:7025","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2530","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3959-0:21:2530":{"id":"b:2:3959-0:21:2530","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3957:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2530","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3961:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13825:32111":{"id":"2:13825:32111","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13437:12247","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12492:490","str::matches":"2:13822:2827"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44794:5954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:12245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2787:2815":{"id":"2:2787:2815","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53":{"id":"0:53","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[455,0],"end":[463,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3592:154","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:2494","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3564:2492","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2530","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:57:653"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:67:827":{"id":"0:67:827","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[486,4],"end":[490,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10627:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10608:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13763:32106":{"id":"2:13763:32106","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12498:1765","str::slice_mut_unchecked":"2:13764:32107","crate::ops::Index":"2:40131:2915"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42673:6805-0:21:2530":{"id":"a:2:42673:6805-0:21:2530","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42673:6805","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42673:6805","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42673:6805","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2530","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13851:26502":{"id":"2:13851:26502","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:12247"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:12245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3351:2854-0:21:2530":{"id":"a:2:3351:2854-0:21:2530","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"2:3351:2854","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"2:3351:2854","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3351:2854","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2530","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:70:827":{"id":"0:70:827","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10627:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10608:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[480,0],"end":[491,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:10660:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3592:154","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:2494","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10660:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2530","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:67:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:19:2516":{"id":"0:19:2516","crate_id":0,"name":"defer_on_success","span":{"filename":"src/lib.rs","begin":[271,0],"end":[275,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on successful scope exit).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer_on_success {\n    ($($t:tt)*) => { ... };\n}"}},"2:13810:26493":{"id":"2:13810:26493","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:12247","str::rsplitn":"2:13813:26495"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44676:5765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5721:27645":{"id":"5:5721:27645","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13869:26395"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13778:26499":{"id":"2:13778:26499","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:12247"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40:2520":{"id":"0:40:2520","crate_id":0,"name":"guard_on_unwind","span":{"filename":"src/lib.rs","begin":[425,0],"end":[430,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.\n\n## Examples\n\nFor performance reasons, or to emulate “only run guard on unwind” in\nno-std environments, we can also use the default guard and simply manually\ndefuse it at the end of scope like the following example. (The performance\nreason would be if the [`OnUnwind`]'s call to [std::thread::panicking()] is\nan issue.)\n\n```\nextern crate scopeguard;\n\nuse scopeguard::ScopeGuard;\n# fn main() {\n{\n    let guard = scopeguard::guard((), |_| {});\n\n    // rest of the code here\n\n    // we reached the end of scope without unwinding - defuse it\n    ScopeGuard::into_inner(guard);\n}\n# }\n```","links":{"std::thread::panicking()":"1:529:1324","`OnUnwind`":"0:71:2505"},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2530","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"OnUnwind","id":"0:71:2505","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3592:154","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13834:32114":{"id":"2:13834:32114","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:2507":{"id":"0:74:2507","crate_id":0,"name":"OnSuccess","span":{"filename":"src/lib.rs","begin":[227,0],"end":[227,21]},"visibility":"public","docs":"Run on regular scope exit, when not unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:3316:260-0:74:2507","a:2:3351:2854-0:74:2507","a:2:32818:248-0:74:2507","a:2:32876:2857-0:74:2507","a:2:42674:7025-0:74:2507","a:2:42673:6805-0:74:2507","b:2:3094-0:74:2507","b:2:3105-0:74:2507","b:2:3100-0:74:2507","b:2:3959-0:74:2507","b:2:2788-0:74:2507","b:2:3090-0:74:2507","b:2:2785-0:74:2507","0:75","0:16"]}}},"2:3109:1850":{"id":"2:3109:1850","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42845:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13784:26501":{"id":"2:13784:26501","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:12247"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:12245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13875:6798":{"id":"2:13875:6798","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5060:6798"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44880:5697","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3090-0:68:2502":{"id":"b:2:3090-0:68:2502","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2502","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3093:3054"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13753:350":{"id":"2:13753:350","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13754:26459","`u8`":"1:12511:1896"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13777:31115":{"id":"2:13777:31115","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44864:5780","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3094-0:68:2502":{"id":"b:2:3094-0:68:2502","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2502","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3096:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2788-0:71:2505":{"id":"b:2:2788-0:71:2505","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2782:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2505","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2790:24266"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13873:32125":{"id":"2:13873:32125","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5059:32125"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44871:5858","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3316:260-0:74:2507":{"id":"a:2:3316:260-0:74:2507","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3316:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2507","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10660:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2507","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:76:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:33:2551":{"id":"0:33:2551","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[357,4],"end":[369,5]},"visibility":"public","docs":"“Defuse” the guard and extract the value without calling the closure.\n\n```\nextern crate scopeguard;\n\nuse scopeguard::{guard, ScopeGuard};\n\nfn conditional() -> bool { true }\n\nfn main() {\n    let mut guard = guard(Vec::new(), |mut v| v.clear());\n    guard.push(1);\n\n    if conditional() {\n        // a condition maybe makes us decide to\n        // “defuse” the guard and get back its inner parts\n        let value = ScopeGuard::into_inner(guard);\n    } else {\n        // guard still exists in this branch\n    }\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["guard",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[315,0],"end":[370,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3592:154","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:2494","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2530","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:32:2539","0:33:2551"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42673:6805-0:68:2502":{"id":"a:2:42673:6805-0:68:2502","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42673:6805","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2502","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:3108:149":{"id":"2:3108:149","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32742:7042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13831:32113":{"id":"2:13831:32113","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13437:12247","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12492:490","str::match_indices":"2:13828:32112"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44740:5952","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:12245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[237,0],"end":[242,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:2494","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2505","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:15:2497"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2788-0:68:2502":{"id":"b:2:2788-0:68:2502","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2782:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2502","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2790:24266"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2788-0:74:2507":{"id":"b:2:2788-0:74:2507","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2782:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2507","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2790:24266"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13781:26500":{"id":"2:13781:26500","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:12247"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13876:32126":{"id":"2:13876:32126","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5057:32126"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44889:5857","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32818:248-0:71:2505":{"id":"a:2:32818:248-0:71:2505","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32818:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2505","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3105-0:74:2507":{"id":"b:2:3105-0:74:2507","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2507","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3108:149","2:3109:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3351:2854-0:71:2505":{"id":"a:2:3351:2854-0:71:2505","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3351:2854","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2505","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3351:2854-0:74:2507":{"id":"a:2:3351:2854-0:74:2507","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3351:2854","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2507","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3090-0:74:2507":{"id":"b:2:3090-0:74:2507","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2507","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3093:3054"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13804:32109":{"id":"2:13804:32109","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13437:12247","str::split":"2:13795:26487","prim@char":"1:12492:490","`DoubleEndedIterator`":"2:8393:133","str::rsplit_terminator":"2:13807:32110"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44622:5949","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3316:260-0:71:2505":{"id":"a:2:3316:260-0:71:2505","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3316:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2505","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3100-0:21:2530":{"id":"b:2:3100-0:21:2530","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3070:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2530","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3103:149","2:3104:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[443,0],"end":[453,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3592:154","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:2494","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3551:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2530","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:51:262","0:52:651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3105-0:68:2502":{"id":"b:2:3105-0:68:2502","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2502","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3108:149","2:3109:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3959-0:68:2502":{"id":"b:2:3959-0:68:2502","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3957:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2502","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3961:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2785-0:68:2502":{"id":"b:2:2785-0:68:2502","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2779:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2502","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2787:2815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3105-0:71:2505":{"id":"b:2:3105-0:71:2505","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2505","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3108:149","2:3109:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13795:26487":{"id":"2:13795:26487","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13437:12247","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12492:490","str::split_whitespace":"2:13773:31110","str::rsplit":"2:13801:26491"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44572:5758","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13836:32115":{"id":"2:13836:32115","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13854:32121":{"id":"2:13854:32121","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:12247"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:12245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13848:25816":{"id":"2:13848:25816","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:12247"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13871:26398":{"id":"2:13871:26398","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1151:37473"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:2519":{"id":"0:20:2519","crate_id":0,"name":"defer_on_unwind","span":{"filename":"src/lib.rs","begin":[285,0],"end":[289,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on unwinding from panic).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer_on_unwind {\n    ($($t:tt)*) => { ... };\n}"}},"b:2:2785-0:21:2530":{"id":"b:2:2785-0:21:2530","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2779:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2530","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2787:2815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13791:3060":{"id":"2:13791:3060","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42582:202","prim@char":"1:12492:490","self::pattern":"2:13437:12247"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:12245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3100-0:68:2502":{"id":"b:2:3100-0:68:2502","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3070:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2502","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3103:149","2:3104:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13748:32104":{"id":"2:13748:32104","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13746:32103"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13766:26482":{"id":"2:13766:26482","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13765:26481","str::split_at_mut_checked":"2:13768:26486"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3100-0:74:2507":{"id":"b:2:3100-0:74:2507","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3070:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2507","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3103:149","2:3104:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2785-0:74:2507":{"id":"b:2:2785-0:74:2507","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2779:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2507","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2787:2815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:12":{"id":"0:12","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[229,0],"end":[234,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:2494","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2502","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:13:2497"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3096:857":{"id":"2:3096:857","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32876:2857-0:21:2530":{"id":"a:2:32876:2857-0:21:2530","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32876:2857","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32876:2857","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32876:2857","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2530","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:43":{"id":"0:43","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[435,0],"end":[441,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3316:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3592:154","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:2494","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3316:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2530","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13767:26485":{"id":"2:13767:26485","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13768:26486"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42673:6805-0:71:2505":{"id":"a:2:42673:6805-0:71:2505","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42673:6805","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2505","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32876:2857-0:74:2507":{"id":"a:2:32876:2857-0:74:2507","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32876:2857","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2507","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13770:5781":{"id":"2:13770:5781","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12492:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44542:5773","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2785-0:71:2505":{"id":"b:2:2785-0:71:2505","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2779:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2505","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2787:2815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13860:32123":{"id":"2:13860:32123","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:12247"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:12245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13865:26390":{"id":"2:13865:26390","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42674:7025-0:71:2505":{"id":"a:2:42674:7025-0:71:2505","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42674:7025","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2505","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13872:26399":{"id":"2:13872:26399","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1151:37473"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5718:32824":{"id":"5:5718:32824","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:2929","`String`":"5:7759:256"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2929","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13754:26459":{"id":"2:13754:26459","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12511:1896"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:2514":{"id":"0:34:2514","crate_id":0,"name":"guard","span":{"filename":"src/lib.rs","begin":[375,0],"end":[380,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2530","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"Always","id":"0:68:2502","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3592:154","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10660:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2502","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:70:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:52:651":{"id":"0:52:651","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[450,4],"end":[452,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13863:32124":{"id":"2:13863:32124","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13398:148","`FromStr`":"2:13397:6874"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42845:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13397:6874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13397:6874","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13774:31114":{"id":"2:13774:31114","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13773:31110"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44855:5958","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:262":{"id":"0:51:262","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[448,4],"end":[448,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:13798:26489":{"id":"2:13798:26489","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:12247"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13227:5760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3094-0:71:2505":{"id":"b:2:3094-0:71:2505","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2505","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3096:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3316:260-0:68:2502":{"id":"a:2:3316:260-0:68:2502","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3316:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2502","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10660:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2505","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:11:2497":{"id":"0:11:2497","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[204,4],"end":[204,28]},"visibility":"default","docs":"Return `true` if the guard’s associated code should run\n(in the context where this method is called).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:68:2502":{"id":"0:68:2502","crate_id":0,"name":"Always","span":{"filename":"src/lib.rs","begin":[213,0],"end":[213,18]},"visibility":"public","docs":"Always run on scope exit.\n\n“Always” run: on regular exit from a scope or on unwinding from a panic.\nCan not run on abort, process exit, and other catastrophic events where\ndestructors don’t run.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:3316:260-0:68:2502","a:2:3351:2854-0:68:2502","a:2:32818:248-0:68:2502","a:2:32876:2857-0:68:2502","a:2:42674:7025-0:68:2502","a:2:42673:6805-0:68:2502","b:2:3094-0:68:2502","b:2:3105-0:68:2502","b:2:3100-0:68:2502","b:2:3959-0:68:2502","b:2:2788-0:68:2502","b:2:3090-0:68:2502","b:2:2785-0:68:2502","0:69","0:12"]}}},"0:57:653":{"id":"0:57:653","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[460,4],"end":[462,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2591":{"id":"0:0:2591","crate_id":0,"name":"scopeguard","span":{"filename":"src/lib.rs","begin":[1,0],"end":[595,1]},"visibility":"public","docs":"A scope guard will run a given closure when it goes out of scope,\neven if the code between panics.\n(as long as panic doesn't abort)\n\n# Examples\n\n## Hello World\n\nThis example creates a scope guard with an example function:\n\n```\nextern crate scopeguard;\n\nfn f() {\n    let _guard = scopeguard::guard((), |_| {\n        println!(\"Hello Scope Exit!\");\n    });\n\n    // rest of the code here.\n\n    // Here, at the end of `_guard`'s scope, the guard's closure is called.\n    // It is also called if we exit this scope through unwinding instead.\n}\n# fn main() {\n#    f();\n# }\n```\n\n## `defer!`\n\nUse the `defer` macro to run an operation at scope exit,\neither regular scope exit or during unwinding from a panic.\n\n```\n#[macro_use(defer)] extern crate scopeguard;\n\nuse std::cell::Cell;\n\nfn main() {\n    // use a cell to observe drops during and after the scope guard is active\n    let drop_counter = Cell::new(0);\n    {\n        // Create a scope guard using `defer!` for the current scope\n        defer! {\n            drop_counter.set(1 + drop_counter.get());\n        }\n\n        // Do regular operations here in the meantime.\n\n        // Just before scope exit: it hasn't run yet.\n        assert_eq!(drop_counter.get(), 0);\n\n        // The following scope end is where the defer closure is called\n    }\n    assert_eq!(drop_counter.get(), 1);\n}\n```\n\n## Scope Guard with Value\n\nIf the scope guard closure needs to access an outer value that is also\nmutated outside of the scope guard, then you may want to use the scope guard\nwith a value. The guard works like a smart pointer, so the inner value can\nbe accessed by reference or by mutable reference.\n\n### 1. The guard owns a file\n\nIn this example, the scope guard owns a file and ensures pending writes are\nsynced at scope exit.\n\n```\nextern crate scopeguard;\n\nuse std::fs::*;\nuse std::io::{self, Write};\n# // Mock file so that we don't actually write a file\n# struct MockFile;\n# impl MockFile {\n#     fn create(_s: &str) -> io::Result<Self> { Ok(MockFile) }\n#     fn write_all(&self, _b: &[u8]) -> io::Result<()> { Ok(()) }\n#     fn sync_all(&self) -> io::Result<()> { Ok(()) }\n# }\n# use self::MockFile as File;\n\nfn try_main() -> io::Result<()> {\n    let f = File::create(\"newfile.txt\")?;\n    let mut file = scopeguard::guard(f, |f| {\n        // ensure we flush file at return or panic\n        let _ = f.sync_all();\n    });\n    // Access the file through the scope guard itself\n    file.write_all(b\"test me\\n\").map(|_| ())\n}\n\nfn main() {\n    try_main().unwrap();\n}\n\n```\n\n### 2. The guard restores an invariant on scope exit\n\n```\nextern crate scopeguard;\n\nuse std::mem::ManuallyDrop;\nuse std::ptr;\n\n// This function, just for this example, takes the first element\n// and inserts it into the assumed sorted tail of the vector.\n//\n// For optimization purposes we temporarily violate an invariant of the\n// Vec, that it owns all of its elements.\n//\n// The safe approach is to use swap, which means two writes to memory,\n// the optimization is to use a “hole” which uses only one write of memory\n// for each position it moves.\n//\n// We *must* use a scope guard to run this code safely. We\n// are running arbitrary user code (comparison operators) that may panic.\n// The scope guard ensures we restore the invariant after successful\n// exit or during unwinding from panic.\nfn insertion_sort_first<T>(v: &mut Vec<T>)\n    where T: PartialOrd\n{\n    struct Hole<'a, T: 'a> {\n        v: &'a mut Vec<T>,\n        index: usize,\n        value: ManuallyDrop<T>,\n    }\n\n    unsafe {\n        // Create a moved-from location in the vector, a “hole”.\n        let value = ptr::read(&v[0]);\n        let mut hole = Hole { v: v, index: 0, value: ManuallyDrop::new(value) };\n\n        // Use a scope guard with a value.\n        // At scope exit, plug the hole so that the vector is fully\n        // initialized again.\n        // The scope guard owns the hole, but we can access it through the guard.\n        let mut hole_guard = scopeguard::guard(hole, |hole| {\n            // plug the hole in the vector with the value that was // taken out\n            let index = hole.index;\n            ptr::copy_nonoverlapping(&*hole.value, &mut hole.v[index], 1);\n        });\n\n        // run algorithm that moves the hole in the vector here\n        // move the hole until it's in a sorted position\n        for i in 1..hole_guard.v.len() {\n            if *hole_guard.value >= hole_guard.v[i] {\n                // move the element back and the hole forward\n                let index = hole_guard.index;\n                hole_guard.v.swap(index, index + 1);\n                hole_guard.index += 1;\n            } else {\n                break;\n            }\n        }\n\n        // When the scope exits here, the Vec becomes whole again!\n    }\n}\n\nfn main() {\n    let string = String::from;\n    let mut data = vec![string(\"c\"), string(\"a\"), string(\"b\"), string(\"d\")];\n    insertion_sort_first(&mut data);\n    assert_eq!(data, vec![\"a\", \"b\", \"c\", \"d\"]);\n}\n\n```\n\n\n# Crate Features\n\n- `use_std`\n  + Enabled by default. Enables the `OnUnwind` and `OnSuccess` strategies.\n  + Disable to use `no_std`.\n\n# Rust Version\n\nThis version of the crate requires Rust 1.20 or later.\n\nThe scopeguard 1.x release series will use a carefully considered version\nupgrade policy, where in a later 1.x version, we will raise the minimum\nrequired Rust version.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/scopeguard/1/\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10:2494","0:68:2502","0:71:2505","0:74:2507","0:21:2530","0:34:2514","0:37:2517","0:40:2520","0:18:2511","0:19:2516","0:20:2519"],"is_stripped":false}}},"2:13838:32116":{"id":"2:13838:32116","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13742":{"id":"2:13742","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13743:1024","2:13744:3061","2:13745:32102","2:13746:32103","2:13748:32104","2:13751:26351","2:13752:32105","2:13753:350","2:13754:26459","2:13755:2575","2:13757:26456","2:13759:26457","2:13761:26458","2:13763:32106","2:13764:32107","2:13765:26481","2:13766:26482","2:13767:26485","2:13768:26486","2:13770:5781","2:13771:5967","2:13772:5558","2:13773:31110","2:13774:31114","2:13775:29373","2:13776:32108","2:13777:31115","2:13778:26499","2:13781:26500","2:13784:26501","2:13787:3102","2:13791:3060","2:13795:26487","2:13798:26489","2:13801:26491","2:13804:32109","2:13807:32110","2:13810:26493","2:13813:26495","2:13816:26497","2:13819:26498","2:13822:2827","2:13825:32111","2:13828:32112","2:13831:32113","2:13834:32114","2:13836:32115","2:13838:32116","2:13840:32117","2:13841:32118","2:13842:32119","2:13845:32120","2:13848:25816","2:13851:26502","2:13854:32121","2:13857:32122","2:13860:32123","2:13863:32124","2:13865:26390","2:13866:26391","2:13867:26393","2:13868:26394","2:13869:26395","2:13870:26397","2:13871:26398","2:13872:26399","2:13873:32125","2:13875:6798","2:13876:32126"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13751:26351":{"id":"2:13751:26351","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12960:12248"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13807:32110":{"id":"2:13807:32110","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13437:12247","str::split":"2:13795:26487","prim@char":"1:12492:490","str::split_terminator":"2:13804:32109"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44640:5950","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:12245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3094-0:74:2507":{"id":"b:2:3094-0:74:2507","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2507","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3096:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:21:2530":{"id":"0:21:2530","crate_id":0,"name":"ScopeGuard","span":{"filename":"src/lib.rs","begin":[304,0],"end":[313,1]},"visibility":"public","docs":"`ScopeGuard` is a scope guard that may own a protected value.\n\nIf you place a guard in a local variable, the closure can\nrun regardless how you leave the scope — through regular return or panic\n(except if panic or other code aborts; so as long as destructors run).\nIt is run only once.\n\nThe `S` parameter for [`Strategy`](trait.Strategy.html) determines if\nthe closure actually runs.\n\nThe guard's closure will be called with the held value in the destructor.\n\nThe `ScopeGuard` implements `Deref` so that you can access the inner value.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Always","id":"0:68:2502","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3592:154","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:2494","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["0:28","a:2:3351:2854-0:21:2530","a:2:32818:248-0:21:2530","a:2:32876:2857-0:21:2530","a:2:42674:7025-0:21:2530","a:2:42673:6805-0:21:2530","b:2:3094-0:21:2530","b:2:3105-0:21:2530","b:2:3100-0:21:2530","b:2:3959-0:21:2530","b:2:2788-0:21:2530","b:2:3090-0:21:2530","b:2:2785-0:21:2530","0:58","0:53","0:63","0:43","0:47"]}}},"2:13819:26498":{"id":"2:13819:26498","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:12245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[465,0],"end":[478,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3592:154","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:2494","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3580:2565","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2530","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:62:693"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13840:32117":{"id":"2:13840:32117","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5709:32822":{"id":"5:5709:32822","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13752:32105":{"id":"2:13752:32105","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13773:31110":{"id":"2:13773:31110","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13774:31114"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44846:5957","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42674:7025-0:68:2502":{"id":"a:2:42674:7025-0:68:2502","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42674:7025","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2502","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13746:32103":{"id":"2:13746:32103","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3104:1852":{"id":"2:3104:1852","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42845:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2790:24266":{"id":"2:2790:24266","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32818:248-0:21:2530":{"id":"a:2:32818:248-0:21:2530","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32818:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32818:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32818:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2530","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13745:32102":{"id":"2:13745:32102","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13813:26495":{"id":"2:13813:26495","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12492:490","str::splitn":"2:13810:26493","self::pattern":"2:13437:12247"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44694:5766","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:12245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42673:6805-0:74:2507":{"id":"a:2:42673:6805-0:74:2507","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42673:6805","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2507","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13759:26457":{"id":"2:13759:26457","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:15:2497":{"id":"0:15:2497","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[239,4],"end":[241,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5717:32823":{"id":"5:5717:32823","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3959-0:74:2507":{"id":"b:2:3959-0:74:2507","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3957:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2507","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3961:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3351:2854-0:68:2502":{"id":"a:2:3351:2854-0:68:2502","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3351:2854","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2502","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2788-0:21:2530":{"id":"b:2:2788-0:21:2530","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2782:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2530","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2790:24266"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:37:2517":{"id":"0:37:2517","crate_id":0,"name":"guard_on_success","span":{"filename":"src/lib.rs","begin":[388,0],"end":[393,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2530","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"OnSuccess","id":"0:74:2507","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3592:154","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3093:3054":{"id":"2:3093:3054","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3067:156"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[245,0],"end":[250,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:2494","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:2507","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:17:2497"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:62:693":{"id":"0:62:693","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[470,4],"end":[477,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13776:32108":{"id":"2:13776:32108","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44836:5956","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:2505":{"id":"0:71:2505","crate_id":0,"name":"OnUnwind","span":{"filename":"src/lib.rs","begin":[220,0],"end":[220,20]},"visibility":"public","docs":"Run on scope exit through unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:3316:260-0:71:2505","a:2:3351:2854-0:71:2505","a:2:32818:248-0:71:2505","a:2:32876:2857-0:71:2505","a:2:42674:7025-0:71:2505","a:2:42673:6805-0:71:2505","b:2:3094-0:71:2505","b:2:3105-0:71:2505","b:2:3100-0:71:2505","b:2:3959-0:71:2505","b:2:2788-0:71:2505","b:2:3090-0:71:2505","b:2:2785-0:71:2505","0:14","0:72"]}}},"2:13842:32119":{"id":"2:13842:32119","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:12247"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13463:12244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32876:2857-0:71:2505":{"id":"a:2:32876:2857-0:71:2505","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32876:2857","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2505","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3094-0:21:2530":{"id":"b:2:3094-0:21:2530","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2530","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3096:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:17:2497":{"id":"0:17:2497","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[247,4],"end":[249,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13765:26481":{"id":"2:13765:26481","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13767:26485","str::split_at_mut":"2:13766:26482"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5706:32821":{"id":"5:5706:32821","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13:2497":{"id":"0:13:2497","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[231,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3959-0:71:2505":{"id":"b:2:3959-0:71:2505","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3957:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2505","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3961:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13867:26393":{"id":"2:13867:26393","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5719:6928":{"id":"5:5719:6928","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13866:26391":{"id":"2:13866:26391","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40484:12323","Self::is_ascii":"2:13865:26390"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40484:12323","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13761:26458":{"id":"2:13761:26458","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13841:32118":{"id":"2:13841:32118","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13845:32120":{"id":"2:13845:32120","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:12247"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:827":{"id":"0:73:827","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10627:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10608:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13868:26394":{"id":"2:13868:26394","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32876:2857-0:68:2502":{"id":"a:2:32876:2857-0:68:2502","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32876:2857","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:2502","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13822:2827":{"id":"2:13822:2827","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13437:12247","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12492:490","str::rmatches":"2:13825:32111"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44776:5953","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5703:2873":{"id":"5:5703:2873","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13801:26491":{"id":"2:13801:26491","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13437:12247","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12492:490","str::split":"2:13795:26487"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44590:5763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:12245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3090-0:71:2505":{"id":"b:2:3090-0:71:2505","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:2505","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3093:3054"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:10:2494":{"id":"0:10:2494","crate_id":0,"name":"Strategy","span":{"filename":"src/lib.rs","begin":[201,0],"end":[205,1]},"visibility":"public","docs":"Controls in which cases the associated code should be run","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:11:2497"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:14","0:16","0:12"]}}},"2:3961:1865":{"id":"2:3961:1865","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40300:5568","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13869:26395":{"id":"2:13869:26395","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3103:149":{"id":"2:3103:149","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"5:5702:32820":{"id":"5:5702:32820","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2929","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:2929","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3090-0:21:2530":{"id":"b:2:3090-0:21:2530","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2530","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3093:3054"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:76:827":{"id":"0:76:827","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10627:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10608:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:2511":{"id":"0:18:2511","crate_id":0,"name":"defer","span":{"filename":"src/lib.rs","begin":[257,0],"end":[261,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (always run).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.","links":{},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer {\n    ($($t:tt)*) => { ... };\n}"}},"2:13772:5558":{"id":"2:13772:5558","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44558:3616","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5720:27644":{"id":"5:5720:27644","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13868:26394"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13744:3061":{"id":"2:13744:3061","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13755:2575":{"id":"2:13755:2575","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42582:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32:2539":{"id":"0:32:2539","crate_id":0,"name":"with_strategy","span":{"filename":"src/lib.rs","begin":[326,4],"end":[332,5]},"visibility":"public","docs":"Create a `ScopeGuard` that owns `v` (accessible through deref) and calls\n`dropfn` when its destructor runs.\n\nThe `Strategy` decides whether the scope guard's closure should run.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2530","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13787:3102":{"id":"2:13787:3102","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42582:202","prim@char":"1:12492:490","self::pattern":"2:13437:12247"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13828:32112":{"id":"2:13828:32112","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13437:12247","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12492:490","str::rmatch_indices":"2:13831:32113"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44722:5951","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3105-0:21:2530":{"id":"b:2:3105-0:21:2530","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:2530","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3108:149","2:3109:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13870:26397":{"id":"2:13870:26397","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1151:37473"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:4238:6965":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:16029:4600":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:6171:4942":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:2746:4855":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:6419:4822":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:2918:4863":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:1551:14092":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:5224:17188":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:3692:6915":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:14806:4268":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:13458:12245":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:6905:3471":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"11:2126:5438":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:4785:7007":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:7977:4882":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:47647:6105":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:8263:6166":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:12259:20169":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"1:7436:3476":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:12991:3973":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:969:5425":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:11951:3839":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:2770:4856":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:16727:4802":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:10273:20055":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:12604:3780":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:11957:3840":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:46529:6001":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:6237:4948":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:5647:4925":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:6398:17919":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:3957:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:14154:31503":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:2805:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:4841:2969":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"11:2206:3850":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:5007:17169":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:1489:14084":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:5301:17198":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:5036:17172":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:1095:5172":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:9474:173":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:2794:4857":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:15778:4533":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:23345:5802":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:45006:5968":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:2157:1393":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:12134:3865":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:42673:6805":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:378:3016":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:8280:12477":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:8652:6303":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"6:5311:17199":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:44481:5940":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:9359:6342":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"5:2256:5534":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:12512:1878":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:4888:3429":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:16249:4679":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:9753:150":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:24147:247":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:297:2929":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:8260:17403":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:45141:12260":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:15539:4481":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:1127:5442":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:5482:17219":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:9492:6219":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:45304:12576":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:34245:2896":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:6075:3456":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:44864:5780":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:3867:131":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:4904:7011":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:44871:5858":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"11:1136:5442":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:15845:4548":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:12094:3862":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:8243:151":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:4767:5702":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:6500:19098":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:7326:18358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:8225:17398":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"11:1579:5446":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:7728:5904":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:7459:5159":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:7468:5162":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:16789:4813":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:11113:3779":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:16486:4054":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:3775:2919":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:14932:4285":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:3607:6297":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:10662:3613":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:3316:26170":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:7041:4875":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:7430:18361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:42633:5904":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:33348:2891":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:12148:3866":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:8264:5274":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:13443:5749":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"11:832:5432":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:2528:4845":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:3356:6170":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:14113:4129":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:13797:4058":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:1936:6159":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"18:659:3583":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:5557:17228":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:1219:3627":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:42508:5902":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:14030:4104":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"0:10:2494":{"crate_id":0,"path":["scopeguard","Strategy"],"kind":"trait"},"17:14415:4191":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:11909:5762":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:14018:4101":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:1530:14090":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"11:2394:3066":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:9451:245":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:4984:17166":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:4900:4907":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:4023:6181":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:2818:4858":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:471:3621":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:7292:14040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:9461:3473":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:42358:5742":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:16661:4785":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"6:5151:17182":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:15805:4537":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:4465:279":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:6513:17928":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:5321:6192":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:5553:132":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:46725:6017":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:6688:3375":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:33772:2893":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:11526:3804":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:43974:5928":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:45486:175":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:11804:3829":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"11:1083:5440":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"11:787:3401":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:8034:3003":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:8500:5316":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:41420:3580":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:22372:5798":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"5:4354:5424":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:12499:1855":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:6546:231":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:23678:5836":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"17:10937:34522":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:44590:5763":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:2560:2729":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:6950:5073":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:5611:17233":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:36852:2905":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:2488:6879":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:3416:2912":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:45500:238":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:11290:34521":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:8739:7021":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:7809:28838":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"2:44450:5868":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"7:78:18963":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"11:2540:5552":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:10116:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:5550:17227":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:3802:2923":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:8118:221":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"18:680:3590":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:12961:20195":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:14071:4114":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:3853:3641":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:1877:6156":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:15732:4524":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:8730:6306":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"6:570:13197":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:46935:6036":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:4946:6973":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:41779:5731":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:559:13195":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:9319:2996":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:11147:3483":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:2588:4848":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:47819:6115":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:13889:4080":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:14311:4175":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"17:11591:3742":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:11162:3780":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:7804:34516":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:7347:5143":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:5450:17215":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:4805:17148":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:586:13199":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:3786:3355":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"0:21:2530":{"crate_id":0,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"17:12536:3929":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"11:123:3345":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:13156:3985":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:13069:3780":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:23645:5833":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:13920:4084":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:5280:3393":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:23601:5829":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"2:5318:31757":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"5:7094:3414":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"6:5585:17231":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"11:1703:167":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:6858:17062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:3012:19127":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:12318:3889":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:11001:6241":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"6:4792:17147":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:3058:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:8007:18742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:5428:17213":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:2433:19126":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:11172:34517":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:42885:5424":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:8393:133":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:45541:5986":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:15660:4505":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:12975:3971":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:3124:19129":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:14345:4182":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:4182:6960":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:6617:17935":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:473:13184":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:9232:6332":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:13553:4014":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"2:34312:2898":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:44408:5934":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:46888:6033":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:13426:4004":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"6:1563:14093":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:5568:17229":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:45288:12574":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"11:2340:5453":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"18:726:3602":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"18:113:24249":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:10421:6356":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"19:0:1323":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:12698:3942":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:14000:4100":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:3321:2489":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:2909:213":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:5575:17230":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:7185:278":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:7424:18360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:16001:4592":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:12443:6378":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:5341:17203":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:41793:5888":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:15023:4306":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:13305:3997":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:10307:31621":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:8221:6241":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:45599:5992":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:5415:4923":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:12305:3886":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"18:581:3568":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:784:165":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:3297:33394":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:4871:4906":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:2334:6165":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:11756:20098":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"5:4557:3384":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:1118:5438":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:47241:6064":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:42320:181":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:10486:20062":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"2:23401:5809":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:1597:14097":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:5951:264":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:7284:13236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:7841:3401":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:43966:5927":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:13360:4000":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:6820:19991":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:46710:6016":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:8040:34506":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:3256:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:5230:17189":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:11086:25833":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:32788:5224":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"6:4842:17151":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:41827:5734":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:42674:7025":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:7747:3394":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:7165:5110":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:7653:5552":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:14380:3446":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:43644:30777":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:11360:173":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:15105:4315":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:14916:4284":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:4182:4898":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:11429:6598":{"crate_id":1,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"16:7987:5257":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:4314:3381":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:13609:4020":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:10886:168":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:45308:12570":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:2815:12220":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"17:12279:3882":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:1690:14105":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:12505:758":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"17:14326:4177":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:11828:6374":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:23579:5827":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"16:8055:5260":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:14772:4265":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:7344:7013":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:15857:4554":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:16378:4711":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:3580:2565":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:8292:5531":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:14871:4275":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:45063:5971":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:8666:5224":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:41802:5733":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:8446:2927":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:41434:5726":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"11:776:3375":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:11464:3797":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"2:41199:6861":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:12459:29578":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:3673:29956":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:8853:31669":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:7580:18371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:12464:6804":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:2872:146":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:14962:4291":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:40896:5697":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:12498:1765":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:6833:6212":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:11862:6227":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:11787:3826":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:13173:5778":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:3046:19128":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:3680:193":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"18:698:3593":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:891:5424":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:11280:3782":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"0:37:2517":{"crate_id":0,"path":["scopeguard","guard_on_success"],"kind":"function"},"1:12503:763":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:10217:20053":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:10030:20048":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:11822:6220":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:7576:221":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:43082:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:44977:5960":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:3153:149":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:47528:6102":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:1990:6161":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:13932:4085":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"15:288:19079":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:47002:6039":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:2804:32006":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:12496:349":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:47146:6061":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:11215:3442":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"2:2298:200":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:1608:5426":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"11:1862:3066":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:5083:4912":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:40958:5854":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:4707:6990":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:15898:4563":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:5623:17235":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:3142:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:5349:17204":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:13837:4069":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:41116:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"10:44:5456":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:40163:221":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:11863:3833":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:16262:4684":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:6841:5062":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:15035:4307":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:12514:1890":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:935:5428":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:42704:3009":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:11231:20078":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:43425:2960":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:2654:6167":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"11:1892:5449":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:43935:5919":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:44776:5953":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:4947:17161":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:7258:3422":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:16290:4693":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:2948:4864":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"14:40:4055":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:6158:6594":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:13265:20065":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:7990:18741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:5069:17176":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:43654:2967":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:5325:17201":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:46597:6009":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:4547:12288":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:46850:6031":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"11:1878:5447":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:6390:17918":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:8231:17399":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:14334:4179":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:41217:5867":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"11:427:34474":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:23486:5821":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:40484:12323":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:8815:12476":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:8175:18903":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:5395:17210":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:3585:4893":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"17:12951:3969":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:40131:2915":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:23129:7169":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"16:6864:19992":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:23368:5807":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:2120:693":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:47353:6068":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"17:11652:3812":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:5529:17225":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:14671:4229":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:8314:157":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:0:582":{"crate_id":2,"path":["core"],"kind":"module"},"9:412:18976":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:4405:3381":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"13:110:34487":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:42804:225":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"2:41333:5879":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"11:851:5434":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:12043:3853":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:7782:5561":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:3357:2856":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:5265:17193":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:5405:3395":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"6:6651:17939":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:43956:5923":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:16799:4085":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:4338:6983":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:1514:14088":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:44640:5950":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:6502:3400":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"7:0:1948":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:5357:17205":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2:42342:5740":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"18:706:3595":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:11039:25821":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:7189:19994":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"9:490:5510":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:8646:6294":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:6142:19987":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:3985:3665":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"1:11103:6329":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:6695:17944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:4907:6989":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:14066:5791":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"6:7962:13143":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:44518:5943":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:11740:5424":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:44558:3616":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:544:4820":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:11288:6328":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:12960:12248":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:8525:5319":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:2251:132":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"17:12203:3871":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:43738:149":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:1643:5447":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:2504:4844":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"11:2533:34460":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:11390:28761":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:32876:2857":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:40185:223":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:7857:3405":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:10417:20060":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:6040:4871":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:3070:271":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:8284:6246":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:6137:3393":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:5253:4918":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:12391:3896":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:11420:3793":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:6486:17885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:8882:6187":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"11:820:6818":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:16611:4773":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"6:5205:17186":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:13150:5777":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:46981:6038":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:7515:18366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:41579:5728":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:11871:5761":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:8633:20001":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:41147:5865":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:3404:2892":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:5381:17208":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:6727:17948":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:12606:3152":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"5:1362:5172":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:10609:2956":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:26547:281":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"9:168:19042":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:42695:12532":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:44676:5765":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:40243:227":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"11:357:3347":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:384:3017":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:5740:3759":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:3830:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:12007:3697":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:41224:5868":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:10665:132":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:22974:6894":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:22640:7094":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:40902:5850":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:13189:5779":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:2762:6168":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:15770:4531":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:12034:3850":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:2898:4862":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:42520:6182":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:9456:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:2666:694":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:11342:25817":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:679:6148":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:22950:7176":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"5:1516:5424":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:6452:17924":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:13397:6874":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:42599:184":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:10838:3002":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:4230:6963":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:12944:5771":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"18:718:3599":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:14707:4235":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:4997:17168":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:13005:3976":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:10660:122":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:10302:31670":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:44380:5930":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:12686:3941":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:6638:5016":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"1:12513:1884":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:13289:3717":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:46482:5994":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:4816:17149":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:9274:7061":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:6710:17946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"16:8102:5262":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:34178:2897":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:12023:5765":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:9347:6340":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:46643:6012":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:10114:20050":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"11:321:34471":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"11:423:34478":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:13514:20067":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:5420:17212":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"14:201:12261":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:44622:5949":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:2988:4866":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:2573:6590":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:538:13192":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:13853:4073":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:10798:6174":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"11:1063:34472":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:6802:17954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:4419:6183":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:3502:3638":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:13780:4055":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:14795:4266":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:8148:4886":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:8623:5330":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:4216:6961":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:45090:5783":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:41132:12518":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:5110:7008":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:14219:4139":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:8371:6927":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:5387:17209":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:1547:3066":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:15746:4527":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:12065:3858":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"11:481:165":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"0:34:2514":{"crate_id":0,"path":["scopeguard","guard"],"kind":"function"},"5:1597:5425":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:3474:2903":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:14268:4164":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"5:1117:3355":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:695:6149":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:7562:18370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:12497:1731":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:33560:2890":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:8543:5321":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:15009:4305":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:14417:163":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:12582:3933":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:8671:6305":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"11:1118:5441":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:43193:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:8804:5923":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:6967:4870":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:8575:6294":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:16152:4650":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:11456:3796":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"2:47374:6069":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:2740:3449":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:1777:3355":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:4957:17162":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:4168:6958":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:7055:5085":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:7413:5148":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:5125:3381":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:22121:3568":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:10629:3612":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:8827:6319":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:23689:5837":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"6:5288:17196":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:44794:5954":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"11:2297:5436":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:8276:12478":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:44826:5955":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:3856:6939":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:4124:6955":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:4937:17160":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4869:17152":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:16574:4058":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:16125:4638":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:11055:6305":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"1:9782:130":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:41291:145":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:13668:122":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:42752:5911":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"17:16341:4704":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"9:435:18974":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:10331:20057":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:16019:4595":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"11:2275:5172":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:31231:30769":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:15409:4431":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:23667:5835":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"11:686:5425":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:8620:6182":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:553:13194":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:3394:2894":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:1479:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:1006:5435":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:6319:3458":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:6590:17932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:8675:7013":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:9595:6159":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:3815:31148":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:3918:6179":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:11552:3806":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:4154:6957":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:44461:5938":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:43045:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:38893:2909":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:9510:6346":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:12761:3947":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:15159:4326":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:7302:5137":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:12051:5767":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:4402:4901":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:7847:28837":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"2:11832:5760":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:44694:5766":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:5676:6199":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:1631:3066":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:23479:31529":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:5117:17179":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:10822:3620":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:6536:7180":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:30937:6940":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:11538:3805":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:10992:6347":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:42893:5443":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:7833:28839":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"1:12518:1456":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:12868:4006":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:7723:5556":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:7708:12518":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:6638:17937":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:6749:17951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:4163:3066":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:12850:3960":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:8708:5337":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:1632:14099":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:14546:4213":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:15869:4555":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:4829:17150":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:3311:120":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:45316:12589":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:16775:4812":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:10393:20059":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"9:318:19029":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:532:13191":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:22152:31821":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:7421:19995":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:15880:4559":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:6852:17981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:7534:3367":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:45610:5455":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:2903:206":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:13348:3999":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:12568:5770":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"11:763:5428":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"5:5814:3398":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:6893:17983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:4921:17158":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:6438:19989":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:32784:5841":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:11982:5764":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:4875:17153":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:5377:4922":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:994:5432":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:23262:5800":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:12037:5766":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:3796:2921":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:5664:17240":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:32742:7042":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:11514:3801":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:8582:5325":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:11047:25830":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:5222:4917":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:1589:14096":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:8134:4885":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:906:3619":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"2:47573:6103":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:11950:6179":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:5626:6193":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:3452:6174":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:23096:7170":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"7:31:18956":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:5375:17207":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:13691:4031":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:42402:30683":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:491:13187":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:34111:2899":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:3592:154":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:10926:5755":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:15707:4516":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:23623:5831":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"2:41569:5887":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:1338:3629":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:5044:17173":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:4544:3381":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"1:8120:6238":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:5817:7041":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"5:7554:33390":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:10441:20061":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:2702:4853":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:5351:452":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:41159:3616":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"1:3358:6171":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:6902:3355":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:10489:7044":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"14:31:5415":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:3502:6922":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:6555:7181":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"2:9488:2570":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:5441:17214":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:3319:26175":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:16202:4663":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:8018:6894":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"3:234:237":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:7695:5553":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:41342:5715":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:7880:4981":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:47764:6110":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:321:3619":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:3424:2914":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:12292:3884":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:3706:5443":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:14357:4184":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:43713:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:47079:6058":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:8230:19999":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:10802:3616":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:479:13185":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:15946:4578":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:7539:18368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:16473:4040":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:15572:4484":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"18:643:3558":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:7916:5244":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"18:0:2722":{"crate_id":18,"path":["memchr"],"kind":"module"},"14:159:5415":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:12190:3870":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:5660:6198":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:10140:20051":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:45284:12572":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:23590:5828":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"2:22163:31812":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:15474:4471":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:12775:3948":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:6606:217":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"11:2374:5443":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:6878:17982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"11:663:5443":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:12896:3963":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:5996:6204":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:14206:5793":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:12815:3642":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:6157:4939":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:5316:4920":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:34044:2895":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:31205:2879":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:11299:25823":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:16164:4653":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:5640:17237":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"2:4762:5701":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"5:1569:5427":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"11:2115:5436":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:3832:4895":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:10792:3764":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"1:9148:210":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:23499:5822":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:12507:918":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:14691:4230":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:15556:4483":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:12067:6375":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:12079:28747":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:15889:4562":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:47279:6066":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"17:14459:4199":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:5412:1004":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:8806:161":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:11879:24426":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:44836:5956":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:1660:5450":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:703:6800":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:12491:1204":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:11834:6224":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:22193:7092":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:6981:4887":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:10402:6158":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:1879:6157":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:31578:207":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:16311:4699":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:11447:3794":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:10715:3481":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:4944:6971":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:7835:19997":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:16738:4803":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"16:5196:4916":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:2465:4837":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:23393:5808":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:5334:17202":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"11:102:34473":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:3921:6180":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:4644:3008":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:4176:6959":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:42712:5910":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"1:11307:12589":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:12506:936":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:2680:3140":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"16:6082:4929":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:2163:5533":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"6:564:13196":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:43759:2968":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"16:7935:5252":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:15548:4482":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:14181:216":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:10608:237":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"5:7060:3398":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:22635:6894":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:6960:244":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:41015:12311":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:3309:276":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:13013:3978":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"6:1643:14100":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:44992:5965":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:3589:153":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:1862:719":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:1627:5424":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"18:670:3589":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:46681:6014":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:15652:4504":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:7256:5135":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:13982:4092":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:12248:3879":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:3389:2889":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:14298:4173":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"17:11901:3837":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:8809:6823":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:15753:4528":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:41395:5882":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:44389:5931":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:5652:17238":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:12408:20170":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:6729:5051":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:42971:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"14:164:19060":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:45478:30773":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"2:3194:5565":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:529:1324":{"crate_id":1,"path":["std","thread","panicking"],"kind":"function"},"17:16678:4787":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"5:883:3358":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:4613:5700":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:6062:4873":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:7946:4881":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:922:5427":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:46497:5997":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:7494:18365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:7407:14212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:4976:17165":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:10878:164":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:11071:6200":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:8586:6937":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:13870:4075":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:43232:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:5200:7017":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:47705:6107":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:8304:17409":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:46739:6018":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"11:292:6586":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:4832:29182":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"11:649:5424":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:32819:250":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:7857:12472":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:12055:3857":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:43721:2967":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"9:380:18975":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:11400:3790":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:11616:3781":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:6578:17931":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:1727:14108":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:2682:3141":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"16:3139:3652":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:6366:4816":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:5814:7040":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:12523:3928":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:545:13193":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"18:598:34528":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"18:765:24258":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:12786:3949":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:6237:231":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:7220:5123":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:8842:7035":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:5875:231":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:4265:4900":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:6995:5074":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:3084:33523":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:4954:4909":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:9601:5749":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:16077:4637":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"11:2323:5438":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:45490:230":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:973:5426":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:8569:5955":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:41593:5729":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:13944:4088":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:11168:3485":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:32906:2858":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"5:3076:33396":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:41372:5722":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:6755:3470":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:7821:28840":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"2:47960:6143":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:12493:1918":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:23124:7171":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:7635:3074":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:7355:4877":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:40971:5855":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"11:813:5429":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:3038:12322":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:22139:31818":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:10675:217":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"5:4284:3381":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:7188:7086":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:12710:3943":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:41263:5872":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:47726:6108":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:6441:17923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:6873:5066":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:47129:6060":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:1569:14094":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:3621:2916":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"11:718:5426":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:6850:5063":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:47883:6125":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:8176:5264":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:4758:232":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:7713:34514":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:8237:17400":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"18:538:3565":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:2413:19099":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"9:0:2714":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:7997:4883":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:6887:4869":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:13490:4008":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:46561:6003":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"11:2440:3401":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:43927:5918":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:45019:5969":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:3419:2913":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"16:5447:4924":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:6792:17953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:13081:3781":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"16:8480:5315":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:6498:3463":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:42910:207":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:10679:2962":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:23634:5832":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"17:14482:4204":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:10447:2978":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"5:7759:256":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:7740:12314":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:41444:5884":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:31199:2878":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:282:3355":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:10795:6172":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"16:6806:4867":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:38783:2907":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:2867:212":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:11064:3778":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:6411:3462":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:22175:31822":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:15924:4573":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:4902:17156":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:16691:4793":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:15762:4529":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:10096:20049":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:11629:3811":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:8549:5887":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:4118:6956":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:3108:4889":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:11080:3440":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"6:1703:14106":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:10295:20056":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:15076:4312":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"11:2525:34464":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:964:5444":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:437:196":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:4118:4896":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:6602:17933":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:11690:3815":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:15982:4587":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:11719:3818":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:13027:3980":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"5:6813:3066":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:14098:4123":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:13569:20068":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:5539:17226":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:14042:4105":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"18:507:3558":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:32802:2969":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:12672:3937":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"9:470:18973":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:923:3361":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:4970:17164":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"18:608:3576":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:46789:6028":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:22252:7091":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:11927:3488":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:2152:5532":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:958:3401":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"5:2246:2990":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:3551:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:12647:3935":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:40223:225":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"11:2519:34465":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:16809:4090":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:44722:5951":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:5521:17224":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:6769:34183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:12722:3944":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:13546:4013":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"2:46696:6015":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:15939:4577":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:10563:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:11776:3824":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:13756:4054":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"11:1858:5424":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:11873:25796":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:6756:17952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:46768:6027":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:23039:7178":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:9159:6327":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:6645:17938":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:14532:3901":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:5255:17192":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:41404:5724":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:485:13186":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:15063:4311":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:46920:6035":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:7209:5122":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:13221:20064":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"10:36:34459":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:15089:4313":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:45483:162":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:6121:4872":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"11:1898:5450":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:2638:4850":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:5405:17211":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:11221:3781":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:2448:4835":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:22360:6894":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:16230:4678":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:42486:31042":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:9760:6239":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:9367:6344":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:44398:5933":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:8892:5424":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:3852:5532":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:4194:5443":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:14585:4217":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:46614:6010":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:38728:2906":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:23330:31524":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:9295:6333":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:12086:6228":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:10952:6365":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"6:5249:17191":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"14:213:5420":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:45369:12590":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:11162:3484":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:43919:5916":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:7544:5550":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:2127:2875":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:41250:5871":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:44159:30774":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"5:3693:5424":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:2514:6889":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:10580:6597":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"6:6505:17927":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:14611:4221":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:41363:5721":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:2225:3129":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"2:4692:2569":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:41808:5889":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:2779:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:12162:3867":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:42845:237":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:43156:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:41835:5736":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:2044:3381":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"11:2507:34466":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:7317:18357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"18:651:3558":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:16619:4774":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:12905:3964":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:13094:3982":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"6:6679:17942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:6422:17921":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:47191:6062":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:47804:6114":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:3625:6177":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:42934:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:46576:6004":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:7604:3066":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:1578:5428":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:5630:17236":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:6609:197":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:504:3447":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:12549:3931":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:6300:4961":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:1539:14091":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:42608:5424":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"18:754:3608":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:8325:176":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"5:7512:5549":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:15147:4322":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:7390:14214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:9259:7059":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:7762:5203":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:31220:2967":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:14749:4256":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:12215:3873":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:8099:6803":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"18:548:164":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:4981:4910":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:23656:5834":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:10671:2959":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:2726:3450":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:41310:5711":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:23209:5799":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:9765:3480":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:3048:3453":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:2226:3630":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:8257:130":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:5692:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:2486:3129":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:41301:5708":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:14337:118":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:2829:3424":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"2:41272:5873":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:3586:152":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:11074:34524":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:909:201":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:23531:6894":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:8231:6242":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:2548:4846":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:4981:228":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:44956:12259":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:5506:3355":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:6806:5716":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:14126:4133":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:11474:20078":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"5:5551:12234":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:32809:5843":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:13463:12244":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:5127:17180":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:12624:3934":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:44501:5942":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:45127:5972":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"0:40:2520":{"crate_id":0,"path":["scopeguard","guard_on_unwind"],"kind":"function"},"16:7369:4878":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:8609:4888":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:11325:6219":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:904:5443":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:13817:4068":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:42624:3066":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:10667:2957":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"11:0:2716":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:4834:29184":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:15966:4584":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:47108:6059":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:14901:4280":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:8562:5758":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:8562:5324":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:12515:1872":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:44429:5936":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:1657:14101":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:45358:5983":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:12919:3965":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:6711:5041":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:7904:5243":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:16356:4705":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:6306:5714":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:8317:20000":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:45296:12577":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:6901:5069":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:6186:4944":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:43683:5293":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:16172:4656":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:9380:25828":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:4367:6986":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:23417:30772":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:46664:6013":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:13113:5774":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"5:7584:5551":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:45193:5784":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:14974:4293":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:22912:7175":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:46512:5998":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:23510:6954":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:7342:28920":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"2:11553:6894":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:8243:17401":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:7914:6229":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:4842:4905":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:13969:4091":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:14651:4226":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:13452:3595":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:7084:3412":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:2618:4849":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:1501:167":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:212:3353":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:6694:5039":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:0:2720":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:7027:5083":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:2089:209":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:8898:6324":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:45508:218":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:11357:20075":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:12519:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:16012:4593":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:6939:5072":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:14626:4224":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:15694:4510":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:6203:19988":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:7751:29580":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"18:735:24257":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:1494:14085":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:3411:6173":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:43306:5753":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:2658:4851":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:41103:5863":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:42664:5906":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:12093:6228":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:6747:4827":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:11123:34523":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:12797:20194":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:31605:3568":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:46629:6011":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:16705:4796":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:3569:2911":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"2:45175:5981":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"14:219:5422":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:8206:4874":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:3919:3401":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:16211:4665":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:5111:4913":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:3351:2854":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:6891:6215":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:11011:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:44531:5946":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:3292:5448":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:34976:2904":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:2682:4852":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:4063:3375":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:11063:6238":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:4897:2970":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:5304:3649":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:12346:3892":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"9:345:18989":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:3693:4894":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:4150:4897":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:13192:3988":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"5:1881:3401":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:3316:260":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:41281:5874":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:6026:4868":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:914:3066":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:5366:17206":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:43671:30771":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:22868:7174":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:14519:4208":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:5058:4911":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:13208:149":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:5280:4919":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:14472:6819":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:12027:3847":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:533:2990":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:5707:19986":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:8295:5278":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:8249:17402":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"11:1001:5436":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:10783:3761":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"17:15674:4506":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:11997:3843":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"0:19:2516":{"crate_id":0,"path":["scopeguard","defer_on_success"],"kind":"macro"},"17:10695:3614":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:6744:17950":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"6:5282:17195":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:10860:150":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"6:4964:17163":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:5488:17220":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:11925:3838":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:32877:2859":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:42374:6938":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:5604:17232":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:11308:3783":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:1684:14104":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:11705:3816":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:996:5424":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:43008:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:2341:6876":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:9201:6331":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:11984:3842":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:12490:434":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:12233:3875":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:2358:33522":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:40943:30692":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:15585:4489":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"9:49:18992":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:8492:3604":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:2484:4843":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:3712:222":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:11565:3807":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:8909:6325":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:45562:31270":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"17:14437:4198":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:7772:5560":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:5658:17239":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"18:563:3567":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:6360:17856":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:45622:5993":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:40135:2917":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:5057:17175":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:2504:6884":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:41179:5866":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"1:12492:490":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:16180:4657":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:43699:30779":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"6:7463:18364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:2782:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:3545:5889":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:46952:6037":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:5025:6970":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:9466:3474":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:13732:4040":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:1521:14089":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:10563:3609":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:12735:3945":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:11830:3805":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:11758:5923":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"2:43269:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:6428:17922":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:12502:760":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"5:7233:3419":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:13168:3986":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"16:7966:5256":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:43119:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:7006:3436":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:22246:7088":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:23315:5801":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:3331:33395":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:47258:6065":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:44855:5958":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:4528:12219":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:3064:174":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:6523:17929":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:2502:6883":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:12110:3492":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"16:2838:4859":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:16320:4701":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:13957:4090":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:47898:6126":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:6116:3381":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:6719:6211":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:15932:4576":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:8316:18939":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:6656:5030":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:4574:6185":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:16716:4801":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"5:7495:5530":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:13450:4006":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:9451:5748":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"10:0:2715":{"crate_id":10,"path":["adler"],"kind":"module"},"1:698:6151":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:9244:7060":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:5130:3647":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"16:4808:4904":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:40311:5849":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:34803:2902":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"18:491:3557":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:14404:4190":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:12930:3967":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:15822:4545":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:47019:6040":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:6670:17941":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:14283:4168":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"8:0:2713":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:1378:5438":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:44329:5929":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:8539:5871":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:5130:12305":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:5640:6197":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:3785:267":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:11789:5758":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:11018:6354":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:983:6818":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:42560:5745":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:646:6797":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:5241:17190":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:39:3351":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:41000:5697":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:14885:4278":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:316:3618":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"11:859:5435":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:4892:827":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"16:6835:5061":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:3083:149":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:6254:4953":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:879:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:16138:4644":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:465:13183":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:14572:4216":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:13384:4001":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:12175:3868":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:6395:3444":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:4927:4908":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:1222:6589":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:43404:2958":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:12065:5768":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:4950:2971":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:32795:5842":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:894:4829":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:6003:6207":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:7337:18359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:23053:3140":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"17:12885:3962":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:8085:6802":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:12081:3860":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:2231:3154":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:10166:20052":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:15601:4492":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:4481:5698":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:13180:3987":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:977:5429":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:6702:17945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:8019:3019":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:7786:34512":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:7279:5136":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:906:6941":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:10971:28789":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:4316:25797":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:14820:4270":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:155:3342":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:13227:5760":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:9400:6700":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:8366:6248":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:4239:4899":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:11732:20097":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:3081:237":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"17:15285:4328":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:38838:2908":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:11850:3832":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:1500:14086":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:5217:17187":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:47921:6127":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:44418:5935":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:8268:6244":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"5:7664:6817":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:558:3018":{"crate_id":1,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"1:12495:1348":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:3682:6892":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:45583:191":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:1584:14095":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:14844:4273":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:11513:5507":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"16:3306:4834":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:47324:6067":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"17:10842:3766":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:41121:5864":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:47747:6109":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:16752:4807":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:16592:4068":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:11602:3486":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"6:7984:18740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:3533:2924":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:8720:149":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:6792:5055":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"2:10677:2961":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:7806:31762":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:41817:3438":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:6267:4954":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:7383:5145":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"13:0:2711":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:40148:224":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:44176:5756":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:10672:6326":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:8627:6987":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:615:2999":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:11817:3830":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:44846:5957":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:40932:5851":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:4354:6985":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:10673:2960":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:7679:3388":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:15049:4308":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:12510:911":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:16633:4778":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:666:3626":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:12825:3951":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:2337:2552":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:16499:4729":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"16:8025:5258":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:12535:5769":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:11944:5763":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:2092:208":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:22191:6894":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"16:6406:4977":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:2419:3157":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:10296:5899":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:15438:4442":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:4511:3381":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:7551:19996":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:12508:924":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:578:13198":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"5:5555:12235":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:22988:7177":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:15956:4581":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:1628:5529":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:5295:17197":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:14054:4106":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:6610:17934":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:3073:3126":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:4948:6974":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"18:635:3582":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:5133:7010":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13661:4027":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"18:623:34530":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:47220:6063":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:6543:17930":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:8334:2928":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:32908:117":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:8204:3698":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:6736:34515":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:9326:25827":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:23568:5826":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:13054:3805":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"16:7156:5109":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:22150:31815":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:6911:5070":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:15530:4477":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:5412:1275":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:46544:6002":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:14858:4274":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:11677:3814":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:1667:14102":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:44880:5697":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:4149:3355":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:8220:5266":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:10728:3615":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"11:983:5172":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:979:3363":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:3313:29582":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:7518:5169":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:42542:5743":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:5462:17216":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:1675:14103":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:8272:17405":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:3318:5449":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:12511:1896":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:22662:5797":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:42616:5443":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:47830:6116":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:8266:17404":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:6221:3463":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"18:589:3569":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"11:1652:2530":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:7503:25800":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:8556:3616":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:23379:31040":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:13321:20066":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:22165:31820":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:7504:3066":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:6021:3375":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:7575:6344":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:5196:17185":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:5051:17174":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:12859:3961":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:23437:30691":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:14049:5788":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"17:12017:3845":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"0:20:2519":{"crate_id":0,"path":["scopeguard","defer_on_unwind"],"kind":"macro"},"17:3719:3640":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:4890:17155":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:1531:5443":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:1587:5444":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:14996:4304":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:9172:6328":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:43418:2959":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:14598:4219":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:6030:6208":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:3790:158":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:3067:156":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:41169:3430":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"17:13470:3642":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:47773:6111":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:6416:17920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:8284:17407":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:3326:5447":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:11015:3777":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:12107:3863":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:6687:17943":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"6:4929:17159":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:11502:3800":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"17:15430:4441":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:1649:5448":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:6105:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:4914:17157":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:5019:17170":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:11208:3441":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"6:6631:17936":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:0:1029":{"crate_id":6,"path":["libc"],"kind":"module"},"17:13718:4039":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:4820:6960":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:45573:5991":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"16:4692:4902":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"11:1558:5445":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:46903:6034":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:774:263":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:6193:5712":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:1393:5436":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:16364:4708":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:11578:3809":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:22264:5798":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:15:2830":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:10367:20058":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:2285:33481":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"15:306:19080":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:32820:257":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:15837:4547":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:6263:3381":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"15:394:19090":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:6459:17925":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:10121:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:8756:6316":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:8063:19998":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:6335:4964":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:11764:5443":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:11970:3841":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:13509:12253":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:45312:12571":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:11030:6178":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:44472:5939":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"5:4480:3384":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:45162:5977":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:3074:33652":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"18:613:34529":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:44889:5857":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:11318:34519":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:45280:12569":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"16:8162:4876":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:12504:779":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"11:1027:5438":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:8011:4884":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:15314:4348":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:6472:17884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:6096:4933":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:6623:5014":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"12:0:2717":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:6734:3355":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:4685:6989":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:2338:33513":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:40300:5568":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:6586:5011":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"1:2026:810":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"6:6500:17926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:43411:2957":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:9308:6334":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:41095:5862":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:44548:5947":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:13634:4021":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:10627:155":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:7956:5255":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:7445:18363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:22673:31810":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:12516:993":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:8105:6848":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:46806:6029":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:4919:2861":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:2878:4861":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:22777:7090":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"11:1042:19054":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:22775:6894":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:15120:4319":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:4119:3375":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:5002:3454":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:7505:5166":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:10976:34520":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"11:2414:3375":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:8632:6988":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:5290:6192":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:2436:3637":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:8510:6178":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:15417:4434":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"18:689:3592":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:45334:134":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:2568:4847":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:3037:6894":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"11:2354:5424":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"16:2858:4860":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:14089:5879":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"2:3061:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:5107:17178":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:582:3625":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:2224:3156":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"15:327:19084":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:4346:6984":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:0:323":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:8093:5261":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:7367:14229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:41319:5876":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:6719:17947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:3664:2956":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:9313:118":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:15912:4570":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"0:0:2591":{"crate_id":0,"path":["scopeguard"],"kind":"module"},"0:68:2502":{"crate_id":0,"path":["scopeguard","Always"],"kind":"enum"},"15:0:2719":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:10533:3758":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:10777:3760":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"17:12121:3864":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:1206:31968":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:5142:4914":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:8276:6245":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:3887:3657":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:7398:34507":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:34457:2900":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:23002:3140":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"17:0:2721":{"crate_id":17,"path":["object"],"kind":"module"},"1:7904:3626":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:5367:215":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:6571:5008":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:8697:6186":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:42825:223":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"17:13144:3984":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:505:3624":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:41786:5732":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:3409:6172":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:5088:17177":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:42770:5912":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"2:11351:3443":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"17:16276:4686":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:6995:5723":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:5889:6201":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"18:531:3562":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:7735:5559":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:12509:930":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:11447:6373":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:47868:6124":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"11:2513:31119":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:15682:4507":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:5471:17217":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:3837:5531":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:6443:6210":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:5271:17194":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:11566:251":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:12334:3891":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:7612:3066":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:7405:3475":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:10423:6355":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"6:4896:16988":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:1922:12433":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"2:23082:6894":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"18:573:3558":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:4764:4903":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:2332:150":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:12940:3968":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:5370:5705":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"5:3285:5424":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:5165:17183":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"18:80:24247":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:41054:5860":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:11431:20077":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:14946:4287":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:9185:6329":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:2019:6858":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:7524:3375":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:40293:2920":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:3442:3401":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:2801:6169":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:6836:7055":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:10548:3759":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:8209:6239":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:7308:13065":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:1407:5442":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:41088:5861":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:11025:34518":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:14506:4205":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:10976:29167":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:4500:6184":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:12358:3893":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:15724:4521":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:9209:3066":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:8361:6247":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:591:2997":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:22370:7089":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:7959:3478":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:11605:3780":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:5512:17223":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:12569:3932":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:14139:4134":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:4830:29180":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"5:3352:5450":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"3:0:524":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:42780:221":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"1:11275:6327":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:44740:5952":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:45152:5973":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:1625:14098":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:8501:189":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:5746:6200":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:10927:3776":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:2405:3634":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"11:1885:5448":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:47676:6106":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:40981:5856":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:8581:6296":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:13437:12247":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:8294:17408":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:40051:2926":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:44542:5773":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:8089:3457":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:2964:4865":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:47451:6101":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:7524:18367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:9423:198":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:8519:6893":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"5:1242:31966":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:6659:17940":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:4505:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:14831:4271":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:901:3618":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"1:11990:6180":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:32818:248":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:2377:20125":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:12370:3894":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:16191:4662":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:3575:3381":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:9354:6341":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:23000:31236":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"11:676:3066":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:47793:6113":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:5346:4921":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:45292:12573":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:5477:17218":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"14:7:5415":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:7013:5081":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:3454:6175":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:5170:4915":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:22244:6894":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:15829:4546":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:46821:6030":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:8638:6301":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:7492:5163":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:45549:5988":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:7568:3066":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:1619:221":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:40263:2918":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:10792:6170":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:14360:3444":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"5:2138:5531":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:40992:5857":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:7439:18362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"0:71:2505":{"crate_id":0,"path":["scopeguard","OnUnwind"],"kind":"enum"},"17:13908:4081":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:12278:3494":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:39472:2910":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"14:0:2718":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:41008:5858":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:6715:5888":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:15620:4493":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:1000:5434":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:8501:6286":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:1655:5449":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:14639:4225":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:7072:19993":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:11848:6225":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"18:481:3556":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:5687:4926":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"18:515:3555":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:12224:3874":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:8278:17406":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:15135:3967":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:4881:17154":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:46871:6032":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"18:96:24248":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:5186:17184":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"13:229:34488":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"11:344:34467":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:15350:4379":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:11385:20076":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"11:2099:5172":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:3439:4892":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"11:1871:3401":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:9215:6202":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:14151:4137":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"18:521:24259":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"11:750:5427":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:4:1288":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:34630:2901":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:5139:17181":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:15495:4476":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:5725:3758":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:0:1757":{"crate_id":1,"path":["std"],"kind":"module"},"17:13040:3981":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:10245:20054":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"11:1542:19055":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:5119:7009":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"16:8595:5328":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"4:0:2712":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:42580:205":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:16763:4809":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"6:1696:6979":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:7553:18369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"0:74:2507":{"crate_id":0,"path":["scopeguard","OnSuccess"],"kind":"enum"},"1:1109:5436":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"9:226:5923":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:1638:3401":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:44172:30938":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:2222:3155":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:12930:12541":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:5494:17221":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:13118:3983":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"5:3080:33524":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:4226:6962":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:12982:20196":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:5025:17171":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:5503:17222":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:9142:6326":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:13591:4017":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:14374:4187":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:720:5524":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:7334:5141":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:948:3375":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"14:186:19067":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:47034:6041":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:4831:3428":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:11877:3780":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:8057:3002":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:14737:4254":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:497:13188":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:13204:3989":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:5179:6978":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:15638:4501":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"11:389:3349":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:12011:6181":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:16534:4759":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:6109:4938":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:12839:3956":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:9193:5424":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:2527:6891":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"1:5483:214":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:4493:5699":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:22129:31818":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:45300:12575":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:40087:2925":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:43944:168":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:783:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:5882:3463":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:10669:2958":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:23612:5830":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:1913:6158":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:6460:19990":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:42901:3066":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:523:13190":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:8029:3604":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:1938:6160":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"11:1866:3375":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:8326:18940":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:6678:5036":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"6:1711:14107":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:7741:12315":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:2722:4854":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:10515:20063":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:12517:1958":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:8214:6240":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:1634:3375":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:6779:5054":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:47618:6104":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:41241:5870":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:13397:4003":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:14083:4117":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:3564:2492":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:8039:3004":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:41351:5880":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"11:808:5444":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:517:13189":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:14559:4214":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:22:842":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:16302:4695":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:5319:17200":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:23452:30687":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:3074:270":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:44572:5758":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:10596:3611":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:5617:17234":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:9428:3467":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"17:15974:4585":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:15990:4588":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:5755:4927":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:40203:226":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:41385:5881":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:31167:2491":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:47784:6112":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:14392:4188":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:16645:4780":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:9436:3381":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"2:47845:6117":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:6737:17949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"17:12748:3946":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:10921:6898":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:44491:5941":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:1507:14087":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"0:18:2511":{"crate_id":0,"path":["scopeguard","defer"],"kind":"macro"},"17:13536:3967":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:6387:4970":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:4990:17167":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:12475:25839":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:7539:5171":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:7001:31534":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:10981:6240":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":32}