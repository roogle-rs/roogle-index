{"root":"0:0:2004","crate_version":"1.2.0","includes_private":false,"index":{"2:12979:31098":{"id":"2:12979:31098","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:11580"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12899:29010":{"id":"2:12899:29010","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44467:5151","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12956:31090":{"id":"2:12956:31090","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:593":{"id":"0:52:593","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[450,4],"end":[452,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32834:2263-0:71:1916":{"id":"a:2:32834:2263-0:71:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32834:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1916","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5559:31790":{"id":"5:5559:31790","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7571:240"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12867:31078":{"id":"2:12867:31078","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12870:31080":{"id":"2:12870:31080","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12868:31079"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12976:31097":{"id":"2:12976:31097","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:11580"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:11578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42413:6357-0:21:1941":{"id":"a:2:42413:6357-0:21:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42413:6357","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42413:6357","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42413:6357","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12973:25108":{"id":"2:12973:25108","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:11580"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:11578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12988:26275":{"id":"2:12988:26275","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40261:26271","Self::is_ascii":"2:12987:24244"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40261:26271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2443-0:68:1913":{"id":"b:2:2443-0:68:1913","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32778:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2437:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2445:2220"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42413:6357-0:74:1918":{"id":"a:2:42413:6357-0:74:1918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42413:6357","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1918","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:53":{"id":"0:53","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[455,0],"end":[463,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3193:140","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3172:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:57:595"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12866:2460":{"id":"2:12866:2460","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12877:1988":{"id":"2:12877:1988","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42290:188"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12886:31083":{"id":"2:12886:31083","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12074:1538","crate::ops::IndexMut":"2:3222:2322","str::slice_unchecked":"2:12885:31082"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12864":{"id":"2:12864","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12865:872","2:12866:2460","2:12867:31078","2:12868:31079","2:12870:31080","2:12873:23152","2:12874:31081","2:12875:329","2:12876:25066","2:12877:1988","2:12879:25063","2:12881:25064","2:12883:25065","2:12885:31082","2:12886:31083","2:12887:25089","2:12888:25090","2:12889:25093","2:12890:25094","2:12892:5152","2:12893:5323","2:12894:4931","2:12895:29028","2:12896:29009","2:12897:28077","2:12898:31084","2:12899:29010","2:12900:25107","2:12903:24559","2:12906:24561","2:12909:2500","2:12913:2459","2:12917:25095","2:12920:25097","2:12923:25099","2:12926:31085","2:12929:31086","2:12932:25101","2:12935:25103","2:12938:25105","2:12941:25106","2:12944:2232","2:12947:31087","2:12950:31088","2:12953:31089","2:12956:31090","2:12958:31091","2:12960:31092","2:12962:31093","2:12963:31094","2:12964:31095","2:12967:31096","2:12970:23165","2:12973:25108","2:12976:31097","2:12979:31098","2:12982:31099","2:12985:31100","2:12987:24244","2:12988:26275","2:12989:24248","2:12990:24249","2:12991:24250","2:12992:26278","2:12993:26279","2:12994:26280","2:12995:31101","2:12997:6129","2:12998:31102"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5571:31793":{"id":"5:5571:31793","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2337","`String`":"5:7571:240"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2337","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:1930":{"id":"0:20:1930","crate_id":0,"name":"defer_on_unwind","span":{"filename":"src/lib.rs","begin":[285,0],"end":[289,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on unwinding from panic).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer_on_unwind {\n    ($($t:tt)*) => { ... };\n}"}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[480,0],"end":[491,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3193:140","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:67:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12876:25066":{"id":"2:12876:25066","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12085:1642"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42413:6357-0:71:1916":{"id":"a:2:42413:6357-0:71:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42413:6357","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1916","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3560-0:71:1916":{"id":"b:2:3560-0:71:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32778:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3558:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1916","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3562:1633"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12898:31084":{"id":"2:12898:31084","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44439:5312","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:11:1908":{"id":"0:11:1908","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[204,4],"end":[204,28]},"visibility":"default","docs":"Return `true` if the guard’s associated code should run\n(in the context where this method is called).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:74:1918":{"id":"0:74:1918","crate_id":0,"name":"OnSuccess","span":{"filename":"src/lib.rs","begin":[227,0],"end":[227,21]},"visibility":"public","docs":"Run on regular scope exit, when not unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:42413:6357-0:74:1918","a:2:32777:234-0:74:1918","a:2:42412:6137-0:74:1918","a:2:32834:2263-0:74:1918","a:2:2968:243-0:74:1918","b:2:2746-0:74:1918","b:2:3560-0:74:1918","b:2:2756-0:74:1918","b:2:2446-0:74:1918","b:2:2761-0:74:1918","b:2:2750-0:74:1918","b:2:2443-0:74:1918","0:75","0:16"]}}},"2:12992:26278":{"id":"2:12992:26278","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:912:33954"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12941:25106":{"id":"2:12941:25106","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:11578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2746-0:74:1918":{"id":"b:2:2746-0:74:1918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2723:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2720:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1918","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2749:2453"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12874:31081":{"id":"2:12874:31081","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12892:5152":{"id":"2:12892:5152","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12068:447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44145:5144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12896:29009":{"id":"2:12896:29009","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12895:29028"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44458:5314","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12982:31099":{"id":"2:12982:31099","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:11580"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:11578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2446-0:71:1916":{"id":"b:2:2446-0:71:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32778:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2440:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1916","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2448:23075"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2443-0:71:1916":{"id":"b:2:2443-0:71:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32778:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2437:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1916","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2445:2220"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1918","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:76:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12991:24250":{"id":"2:12991:24250","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2443-0:74:1918":{"id":"b:2:2443-0:74:1918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32778:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2437:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1918","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2445:2220"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[315,0],"end":[370,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3193:140","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:32:1950","0:33:1963"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2761-0:74:1918":{"id":"b:2:2761-0:74:1918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2720:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1918","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2764:135","2:2765:1618"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12890:25094":{"id":"2:12890:25094","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12889:25093"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12960:31092":{"id":"2:12960:31092","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[237,0],"end":[242,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1916","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:15:1908"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12993:26279":{"id":"2:12993:26279","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:912:33954"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2445:2220":{"id":"2:2445:2220","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42413:6357-0:68:1913":{"id":"a:2:42413:6357-0:68:1913","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42413:6357","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2761-0:71:1916":{"id":"b:2:2761-0:71:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2720:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1916","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2764:135","2:2765:1618"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32777:234-0:21:1941":{"id":"a:2:32777:234-0:21:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32777:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32777:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32777:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2756-0:21:1941":{"id":"b:2:2756-0:21:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2726:254","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2759:135","2:2760:1620"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12935:25103":{"id":"2:12935:25103","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12068:447","str::splitn":"2:12932:25101","self::pattern":"2:12558:11580"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44297:5137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:11578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12953:31089":{"id":"2:12953:31089","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12558:11580","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12068:447","str::match_indices":"2:12950:31088"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44343:5308","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:11578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13:1908":{"id":"0:13:1908","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[231,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5574:24247":{"id":"5:5574:24247","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12991:24250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2764:135":{"id":"2:2764:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32707:6375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:32777:234-0:68:1913":{"id":"a:2:32777:234-0:68:1913","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32777:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5562:31791":{"id":"5:5562:31791","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7571:240"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[443,0],"end":[453,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3193:140","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3159:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:51:245","0:52:593"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32834:2263-0:74:1918":{"id":"a:2:32834:2263-0:74:1918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32834:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1918","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:34:1925":{"id":"0:34:1925","crate_id":0,"name":"guard","span":{"filename":"src/lib.rs","begin":[375,0],"end":[380,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"Always","id":"0:68:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3193:140","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3560-0:68:1913":{"id":"b:2:3560-0:68:1913","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32778:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3558:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3562:1633"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2750-0:68:1913":{"id":"b:2:2750-0:68:1913","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2723:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2752:742"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12989:24248":{"id":"2:12989:24248","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12926:31085":{"id":"2:12926:31085","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12558:11580","str::split":"2:12917:25095","prim@char":"1:12068:447","`DoubleEndedIterator`":"2:7942:128","str::rsplit_terminator":"2:12929:31086"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44225:5305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32:1950":{"id":"0:32:1950","crate_id":0,"name":"with_strategy","span":{"filename":"src/lib.rs","begin":[326,4],"end":[332,5]},"visibility":"public","docs":"Create a `ScopeGuard` that owns `v` (accessible through deref) and calls\n`dropfn` when its destructor runs.\n\nThe `Strategy` decides whether the scope guard's closure should run.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12917:25095":{"id":"2:12917:25095","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12558:11580","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12068:447","str::split_whitespace":"2:12895:29028","str::rsplit":"2:12923:25099"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44175:5129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2749:2453":{"id":"2:2749:2453","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2723:142"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2761-0:21:1941":{"id":"b:2:2761-0:21:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2720:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2764:135","2:2765:1618"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:12":{"id":"0:12","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[229,0],"end":[234,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:13:1908"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:43":{"id":"0:43","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[435,0],"end":[441,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2968:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3193:140","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2968:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2752:742":{"id":"2:2752:742","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12938:25105":{"id":"2:12938:25105","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12875:329":{"id":"2:12875:329","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12876:25066","`u8`":"1:12085:1642"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2968:243-0:68:1913":{"id":"a:2:2968:243-0:68:1913","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2968:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:68:1913":{"id":"0:68:1913","crate_id":0,"name":"Always","span":{"filename":"src/lib.rs","begin":[213,0],"end":[213,18]},"visibility":"public","docs":"Always run on scope exit.\n\n“Always” run: on regular exit from a scope or on unwinding from a panic.\nCan not run on abort, process exit, and other catastrophic events where\ndestructors don’t run.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:42413:6357-0:68:1913","a:2:32777:234-0:68:1913","a:2:42412:6137-0:68:1913","a:2:32834:2263-0:68:1913","a:2:2968:243-0:68:1913","b:2:2746-0:68:1913","b:2:3560-0:68:1913","b:2:2756-0:68:1913","b:2:2446-0:68:1913","b:2:2761-0:68:1913","b:2:2750-0:68:1913","b:2:2443-0:68:1913","0:69","0:12"]}}},"a:2:32834:2263-0:21:1941":{"id":"a:2:32834:2263-0:21:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32834:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32834:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32834:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12879:25063":{"id":"2:12879:25063","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42290:188"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12883:25065":{"id":"2:12883:25065","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12995:31101":{"id":"2:12995:31101","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4740:31101"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44474:5212","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12909:2500":{"id":"2:12909:2500","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42290:188","prim@char":"1:12068:447","self::pattern":"2:12558:11580"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2746-0:68:1913":{"id":"b:2:2746-0:68:1913","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2723:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2720:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2749:2453"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12947:31087":{"id":"2:12947:31087","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12558:11580","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12068:447","str::matches":"2:12944:2232"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44397:5310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:11578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12885:31082":{"id":"2:12885:31082","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12074:1538","str::slice_mut_unchecked":"2:12886:31083","crate::ops::Index":"2:39907:2321"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12895:29028":{"id":"2:12895:29028","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12896:29009"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44449:5313","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5573:24246":{"id":"5:5573:24246","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12990:24249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:70:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12888:25090":{"id":"2:12888:25090","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12887:25089","str::split_at_mut_checked":"2:12890:25094"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17:1908":{"id":"0:17:1908","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[247,4],"end":[249,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70:715":{"id":"0:70:715","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9951:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12893:5323":{"id":"2:12893:5323","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12068:447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44151:5303","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12967:31096":{"id":"2:12967:31096","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:11580"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1916","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12868:31079":{"id":"2:12868:31079","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3562:1633":{"id":"2:3562:1633","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40075:5202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33:1963":{"id":"0:33:1963","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[357,4],"end":[369,5]},"visibility":"public","docs":"“Defuse” the guard and extract the value without calling the closure.\n\n```\nextern crate scopeguard;\n\nuse scopeguard::{guard, ScopeGuard};\n\nfn conditional() -> bool { true }\n\nfn main() {\n    let mut guard = guard(Vec::new(), |mut v| v.clear());\n    guard.push(1);\n\n    if conditional() {\n        // a condition maybe makes us decide to\n        // “defuse” the guard and get back its inner parts\n        let value = ScopeGuard::into_inner(guard);\n    } else {\n        // guard still exists in this branch\n    }\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["guard",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:715":{"id":"0:73:715","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9951:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[465,0],"end":[478,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3193:140","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3183:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:62:631"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42412:6137-0:21:1941":{"id":"a:2:42412:6137-0:21:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42412:6137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42412:6137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42412:6137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12913:2459":{"id":"2:12913:2459","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42290:188","prim@char":"1:12068:447","self::pattern":"2:12558:11580"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:11578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12865:872":{"id":"2:12865:872","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12068:447"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12881:25064":{"id":"2:12881:25064","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12903:24559":{"id":"2:12903:24559","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:11580"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12962:31093":{"id":"2:12962:31093","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12932:25101":{"id":"2:12932:25101","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:11580","str::rsplitn":"2:12935:25103"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44279:5136","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12887:25089":{"id":"2:12887:25089","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12889:25093","str::split_at_mut":"2:12888:25090"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12964:31095":{"id":"2:12964:31095","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:11580"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12583:11577","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5556:2280":{"id":"5:5556:2280","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7571:240"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12997:6129":{"id":"2:12997:6129","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4741:6129"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44483:5068","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:595":{"id":"0:57:595","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[460,4],"end":[462,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37:1928":{"id":"0:37:1928","crate_id":0,"name":"guard_on_success","span":{"filename":"src/lib.rs","begin":[388,0],"end":[393,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"OnSuccess","id":"0:74:1918","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3193:140","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:1922":{"id":"0:18:1922","crate_id":0,"name":"defer","span":{"filename":"src/lib.rs","begin":[257,0],"end":[261,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (always run).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.","links":{},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer {\n    ($($t:tt)*) => { ... };\n}"}},"b:2:2446-0:68:1913":{"id":"b:2:2446-0:68:1913","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32778:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2440:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2448:23075"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2443-0:21:1941":{"id":"b:2:2443-0:21:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32778:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2437:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2445:2220"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42412:6137-0:71:1916":{"id":"a:2:42412:6137-0:71:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42412:6137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1916","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12894:4931":{"id":"2:12894:4931","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44161:3012","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76:715":{"id":"0:76:715","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9951:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:631":{"id":"0:62:631","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[470,4],"end":[477,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2761-0:68:1913":{"id":"b:2:2761-0:68:1913","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2720:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2764:135","2:2765:1618"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:71:1916":{"id":"0:71:1916","crate_id":0,"name":"OnUnwind","span":{"filename":"src/lib.rs","begin":[220,0],"end":[220,20]},"visibility":"public","docs":"Run on scope exit through unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:42413:6357-0:71:1916","a:2:32777:234-0:71:1916","a:2:42412:6137-0:71:1916","a:2:32834:2263-0:71:1916","a:2:2968:243-0:71:1916","b:2:2746-0:71:1916","b:2:3560-0:71:1916","b:2:2756-0:71:1916","b:2:2446-0:71:1916","b:2:2761-0:71:1916","b:2:2750-0:71:1916","b:2:2443-0:71:1916","0:14","0:72"]}}},"b:2:2446-0:74:1918":{"id":"b:2:2446-0:74:1918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32778:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2440:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1918","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2448:23075"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2446-0:21:1941":{"id":"b:2:2446-0:21:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32778:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2440:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2448:23075"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:10:1905":{"id":"0:10:1905","crate_id":0,"name":"Strategy","span":{"filename":"src/lib.rs","begin":[201,0],"end":[205,1]},"visibility":"public","docs":"Controls in which cases the associated code should be run","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:11:1908"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:14","0:16","0:12"]}}},"a:2:2968:243-0:74:1918":{"id":"a:2:2968:243-0:74:1918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2968:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1918","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2759:135":{"id":"2:2759:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:2:2750-0:21:1941":{"id":"b:2:2750-0:21:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2723:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2752:742"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2750-0:74:1918":{"id":"b:2:2750-0:74:1918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2723:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1918","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2752:742"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2756-0:71:1916":{"id":"b:2:2756-0:71:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2726:254","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1916","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2759:135","2:2760:1620"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:40:1931":{"id":"0:40:1931","crate_id":0,"name":"guard_on_unwind","span":{"filename":"src/lib.rs","begin":[425,0],"end":[430,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.\n\n## Examples\n\nFor performance reasons, or to emulate “only run guard on unwind” in\nno-std environments, we can also use the default guard and simply manually\ndefuse it at the end of scope like the following example. (The performance\nreason would be if the [`OnUnwind`]'s call to [std::thread::panicking()] is\nan issue.)\n\n```\nextern crate scopeguard;\n\nuse scopeguard::ScopeGuard;\n# fn main() {\n{\n    let guard = scopeguard::guard((), |_| {});\n\n    // rest of the code here\n\n    // we reached the end of scope without unwinding - defuse it\n    ScopeGuard::into_inner(guard);\n}\n# }\n```","links":{"std::thread::panicking()":"1:500:1133","`OnUnwind`":"0:71:1916"},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"OnUnwind","id":"0:71:1916","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3193:140","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42412:6137-0:68:1913":{"id":"a:2:42412:6137-0:68:1913","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42412:6137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3560-0:74:1918":{"id":"b:2:3560-0:74:1918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32778:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3558:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1918","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3562:1633"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[245,0],"end":[250,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1918","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:17:1908"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3560-0:21:1941":{"id":"b:2:3560-0:21:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32778:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3558:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3562:1633"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12944:2232":{"id":"2:12944:2232","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12558:11580","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12068:447","str::rmatches":"2:12947:31087"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44379:5309","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15:1908":{"id":"0:15:1908","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[239,4],"end":[241,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2004":{"id":"0:0:2004","crate_id":0,"name":"scopeguard","span":{"filename":"src/lib.rs","begin":[1,0],"end":[595,1]},"visibility":"public","docs":"A scope guard will run a given closure when it goes out of scope,\neven if the code between panics.\n(as long as panic doesn't abort)\n\n# Examples\n\n## Hello World\n\nThis example creates a scope guard with an example function:\n\n```\nextern crate scopeguard;\n\nfn f() {\n    let _guard = scopeguard::guard((), |_| {\n        println!(\"Hello Scope Exit!\");\n    });\n\n    // rest of the code here.\n\n    // Here, at the end of `_guard`'s scope, the guard's closure is called.\n    // It is also called if we exit this scope through unwinding instead.\n}\n# fn main() {\n#    f();\n# }\n```\n\n## `defer!`\n\nUse the `defer` macro to run an operation at scope exit,\neither regular scope exit or during unwinding from a panic.\n\n```\n#[macro_use(defer)] extern crate scopeguard;\n\nuse std::cell::Cell;\n\nfn main() {\n    // use a cell to observe drops during and after the scope guard is active\n    let drop_counter = Cell::new(0);\n    {\n        // Create a scope guard using `defer!` for the current scope\n        defer! {\n            drop_counter.set(1 + drop_counter.get());\n        }\n\n        // Do regular operations here in the meantime.\n\n        // Just before scope exit: it hasn't run yet.\n        assert_eq!(drop_counter.get(), 0);\n\n        // The following scope end is where the defer closure is called\n    }\n    assert_eq!(drop_counter.get(), 1);\n}\n```\n\n## Scope Guard with Value\n\nIf the scope guard closure needs to access an outer value that is also\nmutated outside of the scope guard, then you may want to use the scope guard\nwith a value. The guard works like a smart pointer, so the inner value can\nbe accessed by reference or by mutable reference.\n\n### 1. The guard owns a file\n\nIn this example, the scope guard owns a file and ensures pending writes are\nsynced at scope exit.\n\n```\nextern crate scopeguard;\n\nuse std::fs::*;\nuse std::io::{self, Write};\n# // Mock file so that we don't actually write a file\n# struct MockFile;\n# impl MockFile {\n#     fn create(_s: &str) -> io::Result<Self> { Ok(MockFile) }\n#     fn write_all(&self, _b: &[u8]) -> io::Result<()> { Ok(()) }\n#     fn sync_all(&self) -> io::Result<()> { Ok(()) }\n# }\n# use self::MockFile as File;\n\nfn try_main() -> io::Result<()> {\n    let f = File::create(\"newfile.txt\")?;\n    let mut file = scopeguard::guard(f, |f| {\n        // ensure we flush file at return or panic\n        let _ = f.sync_all();\n    });\n    // Access the file through the scope guard itself\n    file.write_all(b\"test me\\n\").map(|_| ())\n}\n\nfn main() {\n    try_main().unwrap();\n}\n\n```\n\n### 2. The guard restores an invariant on scope exit\n\n```\nextern crate scopeguard;\n\nuse std::mem::ManuallyDrop;\nuse std::ptr;\n\n// This function, just for this example, takes the first element\n// and inserts it into the assumed sorted tail of the vector.\n//\n// For optimization purposes we temporarily violate an invariant of the\n// Vec, that it owns all of its elements.\n//\n// The safe approach is to use swap, which means two writes to memory,\n// the optimization is to use a “hole” which uses only one write of memory\n// for each position it moves.\n//\n// We *must* use a scope guard to run this code safely. We\n// are running arbitrary user code (comparison operators) that may panic.\n// The scope guard ensures we restore the invariant after successful\n// exit or during unwinding from panic.\nfn insertion_sort_first<T>(v: &mut Vec<T>)\n    where T: PartialOrd\n{\n    struct Hole<'a, T: 'a> {\n        v: &'a mut Vec<T>,\n        index: usize,\n        value: ManuallyDrop<T>,\n    }\n\n    unsafe {\n        // Create a moved-from location in the vector, a “hole”.\n        let value = ptr::read(&v[0]);\n        let mut hole = Hole { v: v, index: 0, value: ManuallyDrop::new(value) };\n\n        // Use a scope guard with a value.\n        // At scope exit, plug the hole so that the vector is fully\n        // initialized again.\n        // The scope guard owns the hole, but we can access it through the guard.\n        let mut hole_guard = scopeguard::guard(hole, |hole| {\n            // plug the hole in the vector with the value that was // taken out\n            let index = hole.index;\n            ptr::copy_nonoverlapping(&*hole.value, &mut hole.v[index], 1);\n        });\n\n        // run algorithm that moves the hole in the vector here\n        // move the hole until it's in a sorted position\n        for i in 1..hole_guard.v.len() {\n            if *hole_guard.value >= hole_guard.v[i] {\n                // move the element back and the hole forward\n                let index = hole_guard.index;\n                hole_guard.v.swap(index, index + 1);\n                hole_guard.index += 1;\n            } else {\n                break;\n            }\n        }\n\n        // When the scope exits here, the Vec becomes whole again!\n    }\n}\n\nfn main() {\n    let string = String::from;\n    let mut data = vec![string(\"c\"), string(\"a\"), string(\"b\"), string(\"d\")];\n    insertion_sort_first(&mut data);\n    assert_eq!(data, vec![\"a\", \"b\", \"c\", \"d\"]);\n}\n\n```\n\n\n# Crate Features\n\n- `use_std`\n  + Enabled by default. Enables the `OnUnwind` and `OnSuccess` strategies.\n  + Disable to use `no_std`.\n\n# Rust Version\n\nThis version of the crate requires Rust 1.20 or later.\n\nThe scopeguard 1.x release series will use a carefully considered version\nupgrade policy, where in a later 1.x version, we will raise the minimum\nrequired Rust version.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/scopeguard/1/\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10:1905","0:68:1913","0:71:1916","0:74:1918","0:21:1941","0:34:1925","0:37:1928","0:40:1931","0:18:1922","0:19:1927","0:20:1930"],"is_stripped":false}}},"2:12950:31088":{"id":"2:12950:31088","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12558:11580","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12068:447","str::rmatch_indices":"2:12953:31089"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44325:5307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2756-0:68:1913":{"id":"b:2:2756-0:68:1913","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2726:254","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2759:135","2:2760:1620"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2746-0:21:1941":{"id":"b:2:2746-0:21:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2723:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2720:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2749:2453"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12897:28077":{"id":"2:12897:28077","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44429:5311","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:1941":{"id":"0:21:1941","crate_id":0,"name":"ScopeGuard","span":{"filename":"src/lib.rs","begin":[304,0],"end":[313,1]},"visibility":"public","docs":"`ScopeGuard` is a scope guard that may own a protected value.\n\nIf you place a guard in a local variable, the closure can\nrun regardless how you leave the scope — through regular return or panic\n(except if panic or other code aborts; so as long as destructors run).\nIt is run only once.\n\nThe `S` parameter for [`Strategy`](trait.Strategy.html) determines if\nthe closure actually runs.\n\nThe guard's closure will be called with the held value in the destructor.\n\nThe `ScopeGuard` implements `Deref` so that you can access the inner value.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Always","id":"0:68:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3193:140","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1905","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["0:28","a:2:42413:6357-0:21:1941","a:2:32777:234-0:21:1941","a:2:42412:6137-0:21:1941","a:2:32834:2263-0:21:1941","b:2:2746-0:21:1941","b:2:3560-0:21:1941","b:2:2756-0:21:1941","b:2:2446-0:21:1941","b:2:2761-0:21:1941","b:2:2750-0:21:1941","b:2:2443-0:21:1941","0:63","0:47","0:43","0:58","0:53"]}}},"a:2:32777:234-0:71:1916":{"id":"a:2:32777:234-0:71:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32777:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1916","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12900:25107":{"id":"2:12900:25107","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:11580"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12963:31094":{"id":"2:12963:31094","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12970:23165":{"id":"2:12970:23165","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:11580"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12873:23152":{"id":"2:12873:23152","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12106:11581"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12985:31100":{"id":"2:12985:31100","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12519:134","`FromStr`":"2:12518:6368"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42431:223","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12518:6368","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12518:6368","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12994:26280":{"id":"2:12994:26280","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:912:33954"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:31789":{"id":"5:5555:31789","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2337","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2337","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5570:31792":{"id":"5:5570:31792","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7571:240"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5572:6259":{"id":"5:5572:6259","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7571:240"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12923:25099":{"id":"2:12923:25099","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12558:11580","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12068:447","str::split":"2:12917:25095"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44193:5134","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:11578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:1927":{"id":"0:19:1927","crate_id":0,"name":"defer_on_success","span":{"filename":"src/lib.rs","begin":[271,0],"end":[275,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on successful scope exit).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer_on_success {\n    ($($t:tt)*) => { ... };\n}"}},"2:12998:31102":{"id":"2:12998:31102","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4738:31102"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44492:5211","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12990:24249":{"id":"2:12990:24249","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2448:23075":{"id":"2:2448:23075","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32834:2263-0:68:1913":{"id":"a:2:32834:2263-0:68:1913","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32834:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:67:715":{"id":"0:67:715","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[486,4],"end":[490,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9951:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2746-0:71:1916":{"id":"b:2:2746-0:71:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2723:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2720:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1916","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2749:2453"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2750-0:71:1916":{"id":"b:2:2750-0:71:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2723:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1916","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2752:742"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12889:25093":{"id":"2:12889:25093","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12890:25094"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2760:1620":{"id":"2:2760:1620","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42431:223","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32777:234-0:74:1918":{"id":"a:2:32777:234-0:74:1918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32777:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1918","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5554":{"id":"5:5554","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5555:31789","5:5556:2280","5:5559:31790","5:5562:31791","5:5570:31792","5:5571:31793","5:5572:6259","5:5573:24246","5:5574:24247"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2756-0:74:1918":{"id":"b:2:2756-0:74:1918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2726:254","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1918","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2759:135","2:2760:1620"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12906:24561":{"id":"2:12906:24561","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:11580"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:11578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2968:243-0:71:1916":{"id":"a:2:2968:243-0:71:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2968:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1916","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:51:245":{"id":"0:51:245","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[448,4],"end":[448,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:2:42412:6137-0:74:1918":{"id":"a:2:42412:6137-0:74:1918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42412:6137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1918","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12987:24244":{"id":"2:12987:24244","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12929:31086":{"id":"2:12929:31086","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12558:11580","str::split":"2:12917:25095","prim@char":"1:12068:447","str::split_terminator":"2:12926:31085"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44243:5306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:11578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2765:1618":{"id":"2:2765:1618","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42431:223","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12920:25097":{"id":"2:12920:25097","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:11580"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12374:5131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12958:31091":{"id":"2:12958:31091","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:13946:3579":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:32707:6375":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:728:187":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"5:2987:2524":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:8002:5556":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:40673:5068":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:4240:6312":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:21302:2965":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"18:589:2966":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"18:659:2980":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:47011:5385":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:11510:3221":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:42471:4796":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:10463:2845":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:5581:5516":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:32754:5195":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:5897:16756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"18:651:2955":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:46210:5354":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:212:2760":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:5955:16717":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:11497:3220":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:3856:4276":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:21971:6226":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:12353:3338":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:40980:5229":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:42754:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:8475:5624":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:12019:5690":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:14311:3649":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:8928:2464":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:6188:4428":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:45159:178":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:6086:16769":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:15748:4071":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:2835:4242":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:6120:16773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:43771:5127":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:4968:4298":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:10455:5488":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:10759:3164":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:836:4796":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:1054:4808":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:8307:5606":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:4808:16056":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:10085:5659":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:12320:5149":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:10641:6226":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:45198:5347":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"13:110:33030":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:4364:16013":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:15102:3882":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:10651:236":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:46657:5375":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:34037:2303":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:3015:223":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:1570:13409":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:10167:6377":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"6:4428:16017":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:2714:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:15463:3973":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:6062:4389":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:2375:4221":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:14912:3848":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:2723:142":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:11075:3184":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:7814:6135":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:9150:5120":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:43520:5273":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:4908:16069":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:11313:3204":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:44151:5303":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:4710:16047":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:13797:3558":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"18:623:33069":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:10498:2404":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:1975:702":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:6745:4254":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:6378:217":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"18:548:150":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:8012:4702":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:4879:2858":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:7319:4922":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:6837:17190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:11354:3210":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:4172:5069":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:11650:5540":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"14:165:17878":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:2883:17944":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:7444:4632":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:6422:2751":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:46132:5351":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:41152:5241":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:6077:4391":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:11605:3238":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:4603:16038":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:4535:16030":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:12969:3385":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:2074:4906":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:21341:29463":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:30969:2286":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:44576:5316":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:5959:17916":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:6711:17185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:8078:5557":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:10740:5494":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:48581:5461":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:10881:23227":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:11443:3217":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:16269:3466":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:7919:3094":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"5:5669:2799":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:7622:16258":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:47325:5405":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:1639:13415":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:3768:4905":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:11392:3212":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"11:774:4799":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"11:2548:32967":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"18:113:23054":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:4989:16077":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:42496:193":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:42413:6357":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:14356:3658":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:2529:4228":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:12238:3323":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:3814:5496":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:15376:3954":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:4881:214":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:22477:6504":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:12374:5131":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:40892:2827":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:3264:3034":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"11:1896:2801":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:3354:5490":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:9781:18871":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:14066:3598":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:12079:691":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:6889:17192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:13594:3510":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:9078:5650":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"11:2562:32968":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:46541:5372":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:46311:5358":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:44379:5309":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:39827:2334":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:4455:5074":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:2671:2840":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:34096:2305":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:43277:29012":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:5616:4315":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:13855:3565":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:1425:4796":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:7388:17569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:8920:5639":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:44782:5337":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:3206:4820":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:46110:5350":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:22295:6509":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:14038:3593":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:6590:29027":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:43250:29002":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:11079:5136":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:44919:11896":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:11405:3213":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:10888:5131":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:4461:16021":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:15222:3911":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:11898:3273":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:12075:1623":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:11088:11910":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:4312:5499":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:31526:193":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:5630:4318":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:22615:5165":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:10820:4815":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"3:0:474":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:6804:17187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:40862:5221":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:41112:5096":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:12086:1639":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:7679:16265":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:16223:4187":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:42346:4796":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:3240:23866":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:6045:203":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:12371:3383":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:42487:2464":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:7383:207":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"0:10:1905":{"crate_id":0,"path":["scopeguard","Strategy"],"kind":"trait"},"16:6254:4435":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:5408:11569":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"18:680:2987":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:43260:2374":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:11688:3246":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:8425:5502":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:1514:13403":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:12578:11578":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:4506:16026":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:5885:16754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:10185:3006":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:5829:16688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:1596:4820":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:10671:33062":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:12090:5142":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:5867:16753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:7111:2875":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:41009:5080":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:1302:4808":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:44800:5155":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:7306:4615":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"11:2403:4815":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:11575:5497":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:621:5466":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"11:328:32977":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:5123:16092":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:16050:3444":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"6:7692:17756":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:15190:3904":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:43980:5287":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:4381:260":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:2450:6221":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:9032:114":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:2037:3026":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:9737:18855":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"1:2424:6211":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:1591:13411":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:40971:5228":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:3187:138":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:7465:27970":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:7386:4260":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:39978:212":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:10439:3150":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:15176:3901":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:14025:3591":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:41128:2977":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:8109:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:4556:16033":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:4450:5073":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:0:2128":{"crate_id":17,"path":["object"],"kind":"module"},"2:32834:2263":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:7684:4650":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:2167:4907":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:4878:16065":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:8867:196":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:38559:2314":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:10431:2839":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:2963:116":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:5025:5077":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:13214:202":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:11865:3270":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:32779:241":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:7669:2805":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:13877:3572":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:3378:2325":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:2665:4234":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:6934:17196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"18:96:23053":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:42431:223":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:4261:6314":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:4595:16037":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:14414:3667":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:5085:16088":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:3741:4273":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:44734:5328":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:14599:3703":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:16105:4158":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"2:10006:2366":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:8051:176":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"18:515:2952":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:7929:5550":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:13999:3588":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:41093:5238":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:4584:16036":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:22840:5186":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:44397:5310":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:4977:16076":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:4764:16051":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:45084:147":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:10796:4796":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:1939:5478":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"5:3240:4819":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:11730:3250":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:6134:4423":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:12342:3334":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:11915:18977":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:11702:3247":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:7994:5555":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:6263:16805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:790:2765":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:6507:5245":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:1590:4819":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:2353:2536":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:7565:4636":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:46240:5355":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:11764:3255":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:43512:5271":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:6764:13530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:41510:5105":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:15301:3932":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:16069:4151":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:42288:191":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:14489:3682":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:12508:3355":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:12711:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:5146:16095":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:41494:5104":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:4473:16022":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:13461:6149":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:12251:3324":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:8275:5244":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:13375:3460":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"18:608:2973":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"0:18:1922":{"crate_id":0,"path":["scopeguard","defer"],"kind":"macro"},"2:22256:6508":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:15078:3878":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:10211:150":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:3709:4272":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:437:3020":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:14560:3693":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:2304:17943":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:12056:3308":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:10866:5516":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"17:14051:3595":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:12597:3361":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"5:6713:2762":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:483:12505":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"7:31:17773":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:3222:2322":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:6331:4442":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"14:31:4787":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:45146:5343":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:5527:112":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:6882:4533":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"11:742:4798":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:13753:3549":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:11557:3225":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:8382:5613":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:640:5469":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"11:299:5924":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:7351:4923":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:2496:2136":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:44895:11899":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:11621:3240":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:11491:2889":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:40018:213":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:4987:6342":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:6599:4492":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"9:481:17791":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:7639:16260":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:11102:3186":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:2973:1899":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:4462:4282":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:12127:3312":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:10612:3161":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:15342:3941":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:43024:2366":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:14723:3705":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"15:306:17898":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:10828:33055":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:5496:5514":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:11395:5537":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:909:4816":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:10004:2365":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:46363:5360":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:15473:3978":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:38504:2313":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:8366:5611":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"14:214:4792":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:9858:18872":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:13674:3515":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:4698:16046":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:12557:3184":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:12464:19002":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:10010:203":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"5:1528:207":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:13568:3505":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:14463:3680":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:5568:4314":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:9142:184":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:13899:3573":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:47247:5404":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:34406:2308":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:12478:3350":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:4884:16066":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:22334:6510":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:6700:17184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:6059:16766":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:3405:2329":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:46156:5352":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:4686:16045":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:7536:4929":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:2355:2537":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:46779:5380":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:43999:5290":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"18:670:2986":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:13723:3540":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:13399:3464":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:10749:24171":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:11115:3188":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:6503:2782":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:13272:3444":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:3172:1903":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:11301:4880":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:3159:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:41103:5239":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:13089:3397":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:43010:2365":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:7594:4934":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:6893:2811":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:4210:27807":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:2657:2854":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:22791:29033":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"11:2569:4925":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:261:3015":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:13922:3578":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:1804:2282":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:12066:397":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:1040:4542":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:41487:5103":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:11214:3194":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:8546:5627":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:7176:33052":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:10769:33054":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:14449:3679":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:46280:5357":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:14503:3685":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:3667:2782":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"6:4800:16055":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:44091:5297":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:10018:18857":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:13015:3345":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:6201:4244":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"0:40:1931":{"crate_id":0,"path":["scopeguard","guard_on_unwind"],"kind":"function"},"1:1824:5474":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:2678:11654":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:44343:5308":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"14:160:4787":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:4814:16057":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:12297:5148":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:15456:3971":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:4519:2825":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:5132:5508":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:42479:4815":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:14868:3818":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:7706:18816":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:4783:16053":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:2203:3030":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:7365:17567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:11227:3195":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:914:4797":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"11:1728:153":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:10682:23198":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:6547:2871":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:14386:3661":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:4781:6344":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:11107:5138":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"18:581:2965":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:10524:3160":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:256:3014":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:12808:3376":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:5044:16084":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:1703:6308":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:41080:5094":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:0:877":{"crate_id":6,"path":["libc"],"kind":"module"},"6:6781:13528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:41535:5106":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:12068:447":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:44101:5298":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:7507:207":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:11256:3198":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:48394:5450":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:4702:4289":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:10997:3174":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:7668:16264":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:6682:12388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:1546:13407":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:3596:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"11:811:2801":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:40716:5208":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:11269:18907":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:1674:13418":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:10877:3166":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:46908:5383":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"7:0:1687":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:5346:4303":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:1151:32074":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:10350:5634":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:1809:655":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:42412:6137":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:7331:2782":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:38669:2316":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:46465:5364":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:44072:5295":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:5696:4324":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:39907:2321":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:3470:2333":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:15635:4040":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:12621:3362":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:11026:18890":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:1578:2464":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:22482:6502":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:4616:16040":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:4937:4297":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:9027:5642":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:12201:3320":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:4069:6289":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"11:687:4815":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"8:0:2120":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:6438:183":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:4966:415":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:43752:5284":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:12422:3343":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"18:538:2962":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:13325:3451":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"5:1686:2762":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:14968:3854":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:39923:210":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:504:2394":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:5555:4309":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:11354:5683":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:3211:30790":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:8951:5640":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:42912:5124":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:4583:2377":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:13424:3467":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:5075:16087":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:3193:140":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:2419:4223":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:5111:16090":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:5966:5086":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:5896:2782":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:6228:15928":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:16212:4185":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"16:7609:4638":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:1487:4800":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:1517:4798":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:13485:3480":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:3051:2320":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"16:6692:4507":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:4603:2267":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:10677:23221":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:2849:4938":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"16:6803:4518":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:13046:3393":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:6445:4455":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:22668:5166":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:4196:108":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:44081:5296":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:43989:5289":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:14575:3345":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:7551:4253":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:357:2419":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:12264:3325":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:45105:204":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:2961:2257":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:12408:3342":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:12929:3383":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:0:303":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:3232:4821":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:4821:3043":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:9952:2363":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:4549:16032":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:46511:5371":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:3833:2801":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"0:37:1928":{"crate_id":0,"path":["scopeguard","guard_on_success"],"kind":"function"},"16:5580:4249":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:22:729":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:9066:5648":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:13367:2850":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:11324:3206":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:7913:2336":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"15:288:17897":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:10259:5126":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:47089:5401":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:8265:5227":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:8083:5558":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:9807:18861":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:12069:1658":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:12073:1505":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:41018:5083":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"11:710:4797":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:14986:3859":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:47791:5440":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:44976:11911":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:3749:6270":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:2511:132":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:849:4815":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:7951:4696":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:22771:29001":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:15333:3940":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:12454:3348":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:2789:4240":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:6718:6345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:2422:2527":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:10218:3007":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:45097:224":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:44046:5224":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:13473:3477":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"9:237:5278":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:4955:16074":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:40088:5203":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:6621:5528":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:6624:6388":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:4789:16054":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:10251:3008":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:7449:11800":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"5:4267:4796":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:4676:16044":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:15836:4089":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:5645:4320":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:11853:3269":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:46733:5378":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:2063:4905":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"0:74:1918":{"crate_id":0,"path":["scopeguard","OnSuccess"],"kind":"enum"},"2:10002:2364":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"18:706:2992":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:5928:16759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:43559:5282":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:8561:6367":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:15521:4015":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:33978:2304":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:15010:3861":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:8403:6345":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:4996:6343":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:21339:29457":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:1537:13406":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:40799:11645":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:725:6226":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:10858:5548":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"16:7914:4691":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:48519:5459":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:6965:5652":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:893:2782":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:922:4801":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:2693:5484":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:9210:5655":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"17:12724:18879":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:42834:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:2730:253":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"12:0:2124":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:8097:4709":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:3418:29289":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:5974:16761":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:44670:5327":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:5759:4337":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:39863:2331":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"16:2859:4243":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:8904:5637":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:4238:11621":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:42268:5117":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:44965:5338":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:40831:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:945:4806":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:4123:6293":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:22125:6423":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:22853:5187":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:21573:6424":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:11841:3268":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:42598:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:4480:16023":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:32743:5194":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:13412:3466":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:42337:171":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:9469:2881":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"11:2151:4810":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:7625:5687":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:11293:18908":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:22346:28797":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:12107:3164":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:10954:18888":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:4516:16027":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:5066:853":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:46086:5349":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"18:765:23064":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:692:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:2032:195":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:3317:5489":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"11:2326:4808":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"16:7225:18813":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:6248:16804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:10012:2368":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"11:1087:32979":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:7869:4687":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:11554:5496":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:7863:11806":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:40999:5232":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:11606:5140":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"6:7610:16256":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"11:1923:4822":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:4434:16018":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:2718:30619":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"13:0:2118":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:42362:2464":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"11:2140:4808":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:119:12187":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:9886:18873":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:7560:2797":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"9:177:17860":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:569:12516":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"11:123:2752":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:15445:3970":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:41059:5237":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:44145:5144":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:16187:4180":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:48440:5454":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:3522:5493":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:44891:11897":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:11141:159":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"11:430:32980":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"10:0:2122":{"crate_id":10,"path":["adler"],"kind":"module"},"5:7584:4933":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:9099:23172":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"11:2542:28919":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:10066:5476":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:15058:3870":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:4724:16048":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:12090:847":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:6244:18808":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:2588:5483":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:12040:6136":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:40068:2326":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:14752:3725":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:7038:2818":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"3:234:223":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"14:40:3431":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"11:102:32978":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:7118:5261":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:6691:17183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:32747:4594":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:12887:3380":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:6870:2799":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"18:598:33068":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:10457:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:10687:5550":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:9467:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:3017:135":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:12071:1152":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:11341:3209":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:14271:3645":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"11:0:2123":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:34233:2307":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:11093:5137":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:9045:23238":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:1528:13405":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:13526:3490":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:1585:2801":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:12993:18881":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:11537:3223":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:43017:2364":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:11080:24177":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:7556:17728":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:4610:16039":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:48121:5443":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:563:12515":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:14079:3599":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:4061:6288":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:21514:6425":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:7653:4646":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"0:34:1925":{"crate_id":0,"path":["scopeguard","guard"],"kind":"function"},"2:32864:2264":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:3579:6224":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:5004:16079":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:1607:4822":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:6788:33048":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:8601:5503":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:12072:328":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:2982:2857":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:5033:16083":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:12082:794":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:2617:4232":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:3561:2363":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:4119:6292":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:5015:16081":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"18:689:2989":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:5776:2788":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:22699:5167":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:12300:19001":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:3260:4269":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:40989:5230":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:48329:5447":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:7332:11807":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:11038:5135":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:1287:4810":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:11467:3218":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:43331:135":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:500:1133":{"crate_id":1,"path":["std","thread","panicking"],"kind":"function"},"6:6813:17188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:830:2768":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:4932:16072":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:16235:4190":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:5852:5084":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:46341:5359":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:10170:3149":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:3082:2310":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"11:883:4807":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:7936:5551":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:15151:3893":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:47165:5403":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"11:2443:2782":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:44911:11901":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:11123:23202":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:8934:5518":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:14876:3819":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:44923:11910":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:6243:2866":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:4947:16073":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:11153:3165":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:40773:11644":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:533:2399":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:5023:16082":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:44325:5307":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:8010:4904":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:6677:5935":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"0:19:1927":{"crate_id":0,"path":["scopeguard","defer_on_success"],"kind":"macro"},"1:5045:6349":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"5:4107:4815":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:13406:149":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:8363:6154":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:12088:1641":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"11:700:2464":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:4455:15862":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:44492:5211":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:44279:5136":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:15931:3416":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:1862:5476":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:15646:4041":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:6395:5088":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:13064:3396":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:12399:3341":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:1682:13419":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"14:220:4794":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:4666:16043":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:15616:4034":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:2266:136":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:42559:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:4543:16031":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:5910:16757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:2440:6216":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:7595:4251":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:40874:6195":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:40958:5227":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:4902:6300":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:5476:5513":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:12260:5145":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"11:2469:2801":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:10905:3167":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:7984:4700":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:15281:3925":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:1501:13401":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:1834:1189":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:22562:5164":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:3234:28247":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:9654:29295":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"11:800:2782":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:14325:3652":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:3600:3053":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:7867:11805":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:14012:3590":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:3589:6247":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:6929:4541":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:2459:111":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:5726:4330":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:15720:4062":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:22683:29034":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:44449:5313":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:6169:16776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:11574:3230":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:16176:4179":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:11063:3182":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:22388:6511":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:48425:5453":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:12225:3322":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:3558:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:11643:24112":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:7679:2861":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:32778:2262":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:5601:18804":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:6107:16771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:4986:3045":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:15434:3966":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:11647:3243":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:2284:17917":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:8399:5615":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:4630:2378":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:30984:2374":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"11:875:4806":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:40902:5222":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:149:2748":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"9:329:17847":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:12443:3347":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"11:1903:4819":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:34752:2311":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:44175:5129":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:7371:17568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:12035:27968":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:15778:4079":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:6128:16774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:44622:5325":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:42082:6269":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:4488:16024":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:12768:18858":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:11051:3179":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:2336:4214":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:62:12133":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:12683:3366":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"11:2536:32972":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:7835:5548":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"11:1142:4813":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:11241:5682":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:7995:2335":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:3399:2327":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:48466:5456":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:13455:3476":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:42676:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:4399:4280":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:5859:16752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:44243:5306":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:7942:128":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:21356:29455":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:4628:16041":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:11595:3237":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:22833:29013":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:3472:2788":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:4745:16049":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:7343:12465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:9995:118":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:4378:1981":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:14260:3644":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:45138:5341":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:44458:5314":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:2553:4229":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:13538:3493":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"14:7:4787":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:4922:16071":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:43031:2367":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:2797:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:1574:4796":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:30931:1901":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:2548:199":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:42637:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:7523:4262":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:5891:16755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:12087:1640":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:4998:16078":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:2726:254":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:7932:4693":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:8312:6268":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:363:2420":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:6895:4536":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:5541:4305":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:9755:18853":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"5:886:2770":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:4491:4283":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:548:12513":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:7227:2472":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:11634:3242":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:1316:4814":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:6362:4264":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:4566:16034":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:4650:6335":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"11:351:32973":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"5:2157:2394":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:10711:5551":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:40785:5214":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"11:1910:4820":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"18:521:23065":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"11:2352:4810":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"5:1790:2801":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:513:3021":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:9464:5549":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"5:6033:5932":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:7294:4614":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:6994:259":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:2968:243":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:2733:5485":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:7619:18815":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:15624:4035":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"11:1917:4821":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:1521:13404":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:41071:5093":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:14189:3630":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:2573:4230":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:14372:3659":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:7958:137":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:2112:2556":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:6268:4246":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:7477:6147":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:580:12518":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:1710:2788":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:5020:2788":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:2271:1964":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:10044:18877":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:10092:18878":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:48385:5449":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:3570:23376":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:30995:29018":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:44429:5311":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:43528:5274":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:13986:3587":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:12091:1697":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:4907:4296":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:11121:5139":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:2343:632":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:11242:3196":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:12558:11580":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:43314:2374":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:11166:3191":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:4674:4288":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:3273:5486":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:9659:30366":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:44697:5154":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:40949:5226":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:12336:5150":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"11:1107:4812":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:15206:3907":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:10963:2886":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:7747:2405":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:15769:4077":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:15655:4043":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:6584:5095":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"6:4496:16025":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:14235:3640":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"0:68:1913":{"crate_id":0,"path":["scopeguard","Always"],"kind":"enum"},"11:1891:2782":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:4854:16062":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:10008:2367":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:48451:5455":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:46830:5381":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"18:726:2999":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:6227:2850":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:12516:3357":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"11:1025:4808":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:10448:2840":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:48043:5442":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"9:446:17792":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:14529:3687":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:14994:3860":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"18:635:2979":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:15608:4031":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:0:1530":{"crate_id":1,"path":["std"],"kind":"module"},"17:15383:3955":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:42028:168":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:1024:2762":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:2399:4222":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:11524:3222":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:9984:18876":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:12278:3326":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:123:12188":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:12851:3378":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:3393:144":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:22211:6507":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:10758:24174":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:32777:234":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:1826:5475":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:654:12567":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:6152:4426":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:2998:32068":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:16165:4174":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:14177:3628":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:31157:29093":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:6079:16768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:2355:4220":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:7335:4258":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"14:202:11594":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:13165:162":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:12085:1642":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:1734:13424":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:4184:5070":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:9961:5256":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"16:7998:4265":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"5:7548:4932":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:48291:5446":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:9970:141":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:1446:153":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:40701:29008":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:6230:4432":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:6908:4539":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:13497:3481":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:4572:4286":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:4433:4281":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:9147:231":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:14436:3678":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:44193:5134":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:6658:12555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:44605:5324":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:5130:16093":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:44899:11898":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:3003:2259":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"18:754:3005":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:5521:4250":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:3545:4271":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:12362:3339":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:2506:198":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:7900:143":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:44591:5321":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:12543:3360":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"5:7063:2821":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:11426:23214":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:8288:5129":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:8891:5636":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:4375:16014":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:4871:4295":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:4035:2782":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:4914:16070":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:15390:3956":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:4017:6285":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:5140:16094":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:7521:29007":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11773:3256":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:3406:4270":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"11:2369:4825":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"16:3993:4277":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:10721:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:13239:5160":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:7752:2407":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:16121:4163":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:7537:4263":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:3609:4796":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"11:832:4816":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:4351:16012":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:7971:4697":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:2720:160":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:14402:3665":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:7311:2464":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:5980:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:41543:5108":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:8878:5635":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:32761:2376":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:22864:6283":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:5649:6373":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:3442:5246":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:40929:5224":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:4440:16019":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:5846:4346":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:40836:5220":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"5:5360:2762":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"18:0:2129":{"crate_id":18,"path":["memchr"],"kind":"module"},"11:837:4801":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:5878:4202":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:12289:3327":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:15569:4016":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:15400:3959":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:11755:3254":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:4706:6290":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:6071:16767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:1604:13413":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:2268:5481":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:6159:16775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:7772:2404":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:31553:2965":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:44467:5151":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:12563:5120":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:10452:5486":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"16:4283:4278":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"18:613:33066":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:13173:3415":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:21324:29459":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"18:698:2990":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:11877:3271":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:3010:2261":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:15:2235":{"crate_id":2,"path":["core","write"],"kind":"macro"},"18:531:2959":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:3245:30789":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:44907:11900":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:4426:2788":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:14111:3603":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:22013:29451":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:6215:4430":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:44009:5291":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:14091:3600":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:43537:154":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:9086:5652":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:1207:3025":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:12863:3379":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:21684:6226":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:2269:30589":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:6282:4438":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:6100:16770":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:7604:16255":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:14788:3756":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:14855:3811":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:21512:6226":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:48367:5448":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:5321:200":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:6320:4441":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:7411:2464":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:4968:16075":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:6431:4252":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"9:423:17794":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:7820:6181":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:5652:6374":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:15249:3915":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:7904:163":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:11799:3261":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:12067:1034":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:41525:2835":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:6141:33051":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:1718:13423":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:6052:2867":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:4047:6287":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:4720:23192":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:10887:33059":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:12092:1248":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"9:501:4883":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:15039:3869":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:5209:201":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:8355:6315":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:48504:5458":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:5681:2788":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:13832:3562":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:10710:3163":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:7946:5552":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:880:4800":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:40261:26271":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:44759:5329":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:10087:5658":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:1602:4821":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:7616:16257":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:12572:3164":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:16079:4152":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:10946:2884":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:12494:3352":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:7889:4688":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:12485:19003":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:9232:23208":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:13766:3551":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:2749:4238":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:9472:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:10622:33061":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"11:2383:4796":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:10068:18860":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:40739:5210":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:15324:3937":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:12518:6368":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:39998:211":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:9157:159":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:4830:16059":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:10982:18889":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"5:6549:2762":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:597:3022":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:3183:1977":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:13356:114":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:2509:4227":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:42371:5261":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:45175:5346":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:12030:3305":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:48245:5445":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:4131:6295":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:2677:6226":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:15092:3881":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:6858:4532":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:5826:247":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"9:52:17810":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:1902:2554":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:6546:4479":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:4647:16042":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:2717:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:8993:6394":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:6222:16803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:7980:5482":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:6691:2872":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:4518:4284":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"15:327:17902":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:15368:3951":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:16249:4191":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:6892:6419":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:8611:4796":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:4109:6291":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:5512:5515":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:15138:3887":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:12824:18880":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:15582:4022":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:15168:3898":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:22733:29046":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:14284:3647":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:6819:17189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:4388:16015":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:15596:4028":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:4095:2788":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:12433:3345":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:859:2464":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:7985:5554":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:44121:5299":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:1456:2464":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:8617:5632":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:7508:4926":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:7333:11808":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:14475:3681":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"11:673:4796":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:7974:126":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:8458:6353":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:11381:5536":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:40750:5211":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:1440:4815":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:11788:3260":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:11189:3192":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:4232:6311":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:1507:13402":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:11514:5495":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:634:4897":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:10317:3010":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:1691:13420":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:6849:4529":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:2276:6208":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"5:7375:2464":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:12084:791":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:7702:17757":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:3177:4211":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:48183:5444":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:5720:5517":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:3315:208":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:6961:17198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:44748:11593":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:9938:18875":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:12583:11577":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:12083:795":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"11:364:2754":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:12051:23213":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:7633:16259":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:7651:16262":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:14977:3858":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:6669:4506":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:5298:18803":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:1916:29040":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:43567:5283":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:33919:2306":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:1650:13416":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:3019:2301":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:11016:3176":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:4392:5500":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:47435:5408":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:4870:16064":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:13774:3553":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:8861:5634":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:8360:6150":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:14246:3642":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:533:12511":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:9296:2622":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:3275:5487":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:6773:4515":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:2988:32157":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:44297:5137":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:42793:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:1496:4816":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:7728:6226":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:6737:4513":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:38614:2315":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"11:856:4804":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:557:2401":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:46563:5373":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:6579:18810":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:15289:3926":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:10155:3148":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:11631:5684":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:11547:3093":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:7221:26514":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:6030:4384":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:4545:4285":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:40729:5209":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:8369:11804":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:11106:5531":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"5:4792:715":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"14:187:17885":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:6394:4451":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:4464:5501":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"11:396:2756":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:10661:3162":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:723:151":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"18:643:2955":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:7429:33047":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:10258:5939":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"5:2049:4904":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:40847:29007":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10350:3011":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:41501:5245":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:13509:3482":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:2035:194":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:15126:3884":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:6099:4406":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:4824:16058":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:11042:3177":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:3010:3048":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:3473:3036":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:8301:5604":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"11:1883:4796":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:3433:2332":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:39938:207":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:13252:3434":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:8055:4594":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:5969:16760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:42110:28995":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:6408:4453":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:596:12520":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"11:1160:4814":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"11:1676:1941":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:5897:18806":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:2729:4237":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:12659:3364":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:4304:5071":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:32768:5196":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"11:2231:3230":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:4446:218":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:12572:2992":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:14147:3609":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:43920:5285":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:1072:4814":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"11:1066:17872":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:3811:5495":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:14545:3689":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:12707:3368":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:13959:3582":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:21693:6422":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:903:2801":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:42250:5115":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"5:7391:4924":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:21695:5163":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:48405:5451":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:10658:5668":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"0:71:1916":{"crate_id":0,"path":["scopeguard","OnUnwind"],"kind":"enum"},"16:2709:4236":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:7270:4357":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:4841:16060":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:6137:2788":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:867:4799":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:4649:4287":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:11056:5635":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:12106:11581":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:21976:6427":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"0:21:1941":{"crate_id":0,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"16:4733:4290":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:39248:2317":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:3046:2319":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:12695:3367":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"6:6012:16764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:10399:3012":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:6012:2796":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:6511:5527":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:12089:3310":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:22433:6226":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:42520:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:3029:2299":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:4:1115":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"5:5170:2796":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"11:787:4800":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:16151:4171":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"16:5038:4300":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:15418:3963":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:1797:631":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:403:3017":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:12150:3313":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:3199:4796":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:4718:23190":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:1558:13408":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:13437:3468":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:9039:1983":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:507:12509":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:6725:230":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:15356:3948":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:33860:2302":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:7645:16261":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:951:4807":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:21312:29459":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"16:5238:4301":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:9951:223":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"16:5919:18807":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:32835:2265":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:13187:29239":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:5278:4302":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:2542:192":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:10284:3009":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:6798:17186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:8295:5311":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:39911:2323":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:4738:6284":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:12189:3319":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:21567:6421":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:6370:6513":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:6903:2813":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:12388:3340":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:10730:126":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"11:2554:32971":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"11:1603:4818":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"11:1566:17873":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:5462:5509":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:12318:3038":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:4396:2790":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:6741:13545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:11583:3233":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:12076:3309":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:32866:113":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:4401:16016":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"18:718:2996":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:10241:112":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:16198:4181":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:13308:3449":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:15822:4086":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:13235:3431":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:637:5467":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:22747:5173":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:15116:3883":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:1537:4902":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"9:391:17793":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:4825:6304":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:5982:16762":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:7361:30590":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:7598:16254":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:4523:16028":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:4823:6303":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:44474:5212":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:3190:139":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"18:481:2953":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:46709:5377":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:12175:3315":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:1063:4810":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"11:1051:4810":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"9:356:17807":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:7619:3001":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:7800:6134":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:5104:16089":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:489:12506":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:12081:793":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:9193:5654":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:10957:2885":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:13814:3561":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:21370:29453":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:9038:2398":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:10365:2837":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:1913:13588":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"5:1478:4799":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:1581:2782":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:4776:16052":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:2249:30594":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:11409:5539":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:13024:18882":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:42354:4815":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:12792:3114":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:11493:3219":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:7657:16263":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:46877:5382":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:4574:2826":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:683:246":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:15734:4064":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:4011:6286":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:40792:5215":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:2689:4235":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:6666:13360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:7924:5549":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:13211:3430":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:48414:5452":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:15701:4057":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:7729:2421":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"18:507:2955":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:6811:18811":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"14:0:2125":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:42194:29047":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:15426:3965":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:7397:29189":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:7684:2879":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:40818:5219":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:1496:13400":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:3041:2318":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:4529:2376":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:7194:33050":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"0:0:2004":{"crate_id":0,"path":["scopeguard"],"kind":"module"},"2:12629:11586":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:4807:11638":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:4335:5072":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"10:36:32965":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:726:6272":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:12328:3329":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:46262:5356":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:6114:16772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:6943:17197":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"5:4227:2788":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:4844:4294":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:40075:5202":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:40766:5212":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:42402:5263":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:22123:6226":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:7345:4626":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:10965:5133":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:3237:23868":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:4550:6317":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:2819:4241":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:11128:3139":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:2234:3033":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:16093:4156":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:12043:3306":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:11567:3227":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:43549:5278":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:415:182":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:9014:5641":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:42873:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:15799:4082":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:2641:4233":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:12093:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:42050:5112":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:3916:5497":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"13:226:33031":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:588:6128":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:1131:5927":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:6151:2862":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:40:2758":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:7068:26428":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:5485:4245":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:6047:16765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:46066:5348":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:12080:796":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:4761:4291":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:3141:2330":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:6068:217":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:46931:5384":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:1664:13417":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:482:2852":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:6631:2464":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"15:0:2126":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:44887:11894":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"5:4197:2788":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:8912:4796":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:6292:4439":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:10700:5674":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"16:5713:4329":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:41041:5236":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:7653:2801":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:13292:3445":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"11:490:151":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:6275:5526":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:14516:3686":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:9457:136":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"6:588:12519":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:15944:3430":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:22402:2536":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:8963:6393":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:6724:4511":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:12530:3359":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"16:7376:4628":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:10573:33060":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:47933:5441":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:13187:3416":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:281:2337":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:10000:127":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"16:7482:4633":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"11:2423:2464":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:1632:13414":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:13116:3403":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:15760:4073":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:39960:209":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:5706:217":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:44941:129":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:4716:23188":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:7152:4573":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:44769:5333":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:7414:4629":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4449:16020":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:12900:3382":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:2917:17945":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"11:2304:4542":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:30963:2285":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:46687:5376":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:7466:4925":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:9175:5531":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:7355:4627":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:4987:29778":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:8088:6258":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:42066:5114":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:527:12510":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:42228:5498":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:7614:3022":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:4355:4279":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:45087:216":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:15273:3924":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"11:1887:2464":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:1271:4542":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:7665:2877":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:7492:2408":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:501:12508":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:41050:5087":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:10137:18854":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"18:573:2955":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:4219:11553":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:11825:3266":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:10458:5490":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"6:555:12514":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:8282:3012":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:11420:23177":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:21358:29462":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:33440:2297":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:14847:3808":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:22722:5172":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:12074:11862":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:1885:2622":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:13844:3564":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:11639:5141":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"15:394:17908":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:4893:16067":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"11:844:6148":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:41277:5244":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:5861:5524":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:3830:4275":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:3170:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:46611:5374":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:46418:5363":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:8978:6392":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:30701:6271":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:8360:6316":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:44483:5068":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:3266:4822":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:5834:5523":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:48542:5460":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:4529:16029":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:9799:2385":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"16:5794:4340":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:33254:2298":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:6646:4505":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:14933:3853":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"18:563:2964":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:3014:2296":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"5:2487:5928":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:1887:5477":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:0:529":{"crate_id":2,"path":["core"],"kind":"module"},"2:22348:2536":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:12078:689":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:2175:18935":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:42216:5259":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:41142:5098":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:43971:5286":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:266:2762":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:6913:17194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:22806:29094":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:12584:3165":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:11812:3264":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:11674:3245":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:13387:3461":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:2459:4225":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:11069:5636":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:542:12512":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:10845:5129":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"9:0:2121":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:6462:18809":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:2808:135":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:1925:2553":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:44225:5305":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:11680:2551":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"16:6941:18812":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:43767:28954":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:5068:16086":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:4578:16035":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:1576:13410":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:4065:2762":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:4821:6301":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:44555:11592":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:1697:13421":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:16032:3434":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:2489:4226":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:12949:3038":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:5941:16716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:23977:233":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:2439:4224":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:5921:16758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:11348:5532":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:5389:127":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:40679:5204":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:8407:29298":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:5052:16085":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:11171:23232":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:7341:2774":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:2769:4239":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:41301:5101":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:46400:5362":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:15814:4083":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:22755:5174":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"5:7302:4903":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:43305:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:33626:2300":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:47401:5407":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"19:0:1132":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:939:4804":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:41027:5233":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:4248:6313":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:47585:5409":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:1710:13422":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:11000:5134":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:7400:4261":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:10898:5637":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:42715:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:10915:33058":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:5713:2867":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:4813:4293":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:3622:4815":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:6610:4493":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:6136:32921":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:5152:16096":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:22448:6503":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:475:12504":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"5:7419:2464":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"11:434:32981":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:40690:5205":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:2990:30578":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:13581:3509":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:11142:3164":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:1596:13412":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:12089:1638":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:9119:6041":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:1968:6191":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:26377:262":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"18:491:2954":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:2994:32069":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:928:6148":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:2196:30581":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:1992:186":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:44059:5294":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:40038:2324":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:6555:4480":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"11:2124:4542":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:36628:2312":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:14131:3604":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:6376:4443":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:11657:5540":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:41287:5100":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:11715:3248":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:13606:3513":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:3801:2464":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:6221:4431":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:14298:3648":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:21586:5163":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:7452:18814":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:8233:5494":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:6898:17193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:40758:5068":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"7:78:17780":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:5163:5508":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:7366:4259":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:10818:3165":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:7324:4623":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:10219:154":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:5906:2860":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:15410:3962":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:10419:3016":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:9073:5649":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:10254:6231":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:2995:17946":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:6330:2867":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:13785:3556":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:45186:4827":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:11331:2887":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:1098:3023":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"11:1582:4817":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:8628:5633":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:0:2127":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:8022:18817":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:5404:11568":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:44020:5292":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:11854:2893":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:2438:6215":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:10534:33056":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:15992:4137":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:3597:3037":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:41516:5246":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:13363:3457":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:11367:3184":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:1388:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:9916:18874":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:2593:4231":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:10014:2369":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:4902:16068":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:16259:3461":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:6348:4247":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:13972:3278":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:4784:6317":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:15266:3923":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:22001:5162":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:3356:5491":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"0:20:1930":{"crate_id":0,"path":["scopeguard","defer_on_unwind"],"kind":"macro"},"5:4459:2790":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:12671:3365":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"16:2319:4212":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:44915:11895":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:8222:5596":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:12074:1538":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:4860:16063":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:11661:3244":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:5865:4353":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:2979:4266":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:5827:5520":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:2440:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:5331:3149":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:43289:4665":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:8245:6225":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:14341:3654":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:5499:4248":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:6759:4255":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:44161:3012":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"18:80:23052":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:5316:3148":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:13344:3456":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:536:4200":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:5117:16091":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:13553:3499":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:22319:6226":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:4755:16050":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:13738:3544":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:3504:5607":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:495:12507":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:21565:6226":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:5009:16080":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:4939:1102":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:6927:17195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:5006:4299":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:6116:4413":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:1115:32073":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:645:6131":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:8523:5278":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"11:1007:4542":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:44439:5312":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:11089:3185":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:42414:11854":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:12647:3363":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:15023:3866":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:15197:3906":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:4787:4292":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:5825:4196":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:11743:3251":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:10927:5132":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:12789:118":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:47371:5406":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:34579:2309":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:11419:3164":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:14212:3639":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:3358:2801":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:3753:4904":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:574:12517":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:7103:33049":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:3399:6255":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:15678:4056":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:918:4798":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:5992:16763":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:15957:4107":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:8348:5498":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:6868:17191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:13146:3407":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:6978:2874":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:4572:6318":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:903:4796":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:43352:2375":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:14587:3696":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:9671:18856":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:46755:5379":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:8213:3001":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:47135:5402":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:3773:4274":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:48489:5457":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:42423:2411":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:6595:2833":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"5:7571:240":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:3388:250":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:10720:33057":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:4075:6290":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:16138:4165":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"5:1506:4797":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:7491:4634":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:3702:2762":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:5662:18805":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:9152:232":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"4:0:2119":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:15313:3933":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"10:44:4828":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"18:735:23063":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:12213:3321":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:8374:5604":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:46178:5353":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:3315:5488":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:44134:5302":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:40922:5223":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:10393:2882":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:31052:28990":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:15214:3909":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:4847:16061":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:2437:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:44903:11902":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:46381:5361":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"5:786:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}