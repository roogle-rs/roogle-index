{"root":"0:0:2010","crate_version":"1.2.0","includes_private":false,"index":{"0:40:1937":{"id":"0:40:1937","crate_id":0,"name":"guard_on_unwind","span":{"filename":"src/lib.rs","begin":[425,0],"end":[430,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.\n\n## Examples\n\nFor performance reasons, or to emulate “only run guard on unwind” in\nno-std environments, we can also use the default guard and simply manually\ndefuse it at the end of scope like the following example. (The performance\nreason would be if the [`OnUnwind`]'s call to [std::thread::panicking()] is\nan issue.)\n\n```\nextern crate scopeguard;\n\nuse scopeguard::ScopeGuard;\n# fn main() {\n{\n    let guard = scopeguard::guard((), |_| {});\n\n    // rest of the code here\n\n    // we reached the end of scope without unwinding - defuse it\n    ScopeGuard::into_inner(guard);\n}\n# }\n```","links":{"std::thread::panicking()":"1:500:1139","`OnUnwind`":"0:71:1922"},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1947","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"OnUnwind","id":"0:71:1922","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3211:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12919:31258":{"id":"2:12919:31258","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44376:5317","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32718:237-0:71:1922":{"id":"a:2:32718:237-0:71:1922","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32718:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1922","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:62:637":{"id":"0:62:637","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[470,4],"end":[477,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2010":{"id":"0:0:2010","crate_id":0,"name":"scopeguard","span":{"filename":"src/lib.rs","begin":[1,0],"end":[595,1]},"visibility":"public","docs":"A scope guard will run a given closure when it goes out of scope,\neven if the code between panics.\n(as long as panic doesn't abort)\n\n# Examples\n\n## Hello World\n\nThis example creates a scope guard with an example function:\n\n```\nextern crate scopeguard;\n\nfn f() {\n    let _guard = scopeguard::guard((), |_| {\n        println!(\"Hello Scope Exit!\");\n    });\n\n    // rest of the code here.\n\n    // Here, at the end of `_guard`'s scope, the guard's closure is called.\n    // It is also called if we exit this scope through unwinding instead.\n}\n# fn main() {\n#    f();\n# }\n```\n\n## `defer!`\n\nUse the `defer` macro to run an operation at scope exit,\neither regular scope exit or during unwinding from a panic.\n\n```\n#[macro_use(defer)] extern crate scopeguard;\n\nuse std::cell::Cell;\n\nfn main() {\n    // use a cell to observe drops during and after the scope guard is active\n    let drop_counter = Cell::new(0);\n    {\n        // Create a scope guard using `defer!` for the current scope\n        defer! {\n            drop_counter.set(1 + drop_counter.get());\n        }\n\n        // Do regular operations here in the meantime.\n\n        // Just before scope exit: it hasn't run yet.\n        assert_eq!(drop_counter.get(), 0);\n\n        // The following scope end is where the defer closure is called\n    }\n    assert_eq!(drop_counter.get(), 1);\n}\n```\n\n## Scope Guard with Value\n\nIf the scope guard closure needs to access an outer value that is also\nmutated outside of the scope guard, then you may want to use the scope guard\nwith a value. The guard works like a smart pointer, so the inner value can\nbe accessed by reference or by mutable reference.\n\n### 1. The guard owns a file\n\nIn this example, the scope guard owns a file and ensures pending writes are\nsynced at scope exit.\n\n```\nextern crate scopeguard;\n\nuse std::fs::*;\nuse std::io::{self, Write};\n# // Mock file so that we don't actually write a file\n# struct MockFile;\n# impl MockFile {\n#     fn create(_s: &str) -> io::Result<Self> { Ok(MockFile) }\n#     fn write_all(&self, _b: &[u8]) -> io::Result<()> { Ok(()) }\n#     fn sync_all(&self) -> io::Result<()> { Ok(()) }\n# }\n# use self::MockFile as File;\n\nfn try_main() -> io::Result<()> {\n    let f = File::create(\"newfile.txt\")?;\n    let mut file = scopeguard::guard(f, |f| {\n        // ensure we flush file at return or panic\n        let _ = f.sync_all();\n    });\n    // Access the file through the scope guard itself\n    file.write_all(b\"test me\\n\").map(|_| ())\n}\n\nfn main() {\n    try_main().unwrap();\n}\n\n```\n\n### 2. The guard restores an invariant on scope exit\n\n```\nextern crate scopeguard;\n\nuse std::mem::ManuallyDrop;\nuse std::ptr;\n\n// This function, just for this example, takes the first element\n// and inserts it into the assumed sorted tail of the vector.\n//\n// For optimization purposes we temporarily violate an invariant of the\n// Vec, that it owns all of its elements.\n//\n// The safe approach is to use swap, which means two writes to memory,\n// the optimization is to use a “hole” which uses only one write of memory\n// for each position it moves.\n//\n// We *must* use a scope guard to run this code safely. We\n// are running arbitrary user code (comparison operators) that may panic.\n// The scope guard ensures we restore the invariant after successful\n// exit or during unwinding from panic.\nfn insertion_sort_first<T>(v: &mut Vec<T>)\n    where T: PartialOrd\n{\n    struct Hole<'a, T: 'a> {\n        v: &'a mut Vec<T>,\n        index: usize,\n        value: ManuallyDrop<T>,\n    }\n\n    unsafe {\n        // Create a moved-from location in the vector, a “hole”.\n        let value = ptr::read(&v[0]);\n        let mut hole = Hole { v: v, index: 0, value: ManuallyDrop::new(value) };\n\n        // Use a scope guard with a value.\n        // At scope exit, plug the hole so that the vector is fully\n        // initialized again.\n        // The scope guard owns the hole, but we can access it through the guard.\n        let mut hole_guard = scopeguard::guard(hole, |hole| {\n            // plug the hole in the vector with the value that was // taken out\n            let index = hole.index;\n            ptr::copy_nonoverlapping(&*hole.value, &mut hole.v[index], 1);\n        });\n\n        // run algorithm that moves the hole in the vector here\n        // move the hole until it's in a sorted position\n        for i in 1..hole_guard.v.len() {\n            if *hole_guard.value >= hole_guard.v[i] {\n                // move the element back and the hole forward\n                let index = hole_guard.index;\n                hole_guard.v.swap(index, index + 1);\n                hole_guard.index += 1;\n            } else {\n                break;\n            }\n        }\n\n        // When the scope exits here, the Vec becomes whole again!\n    }\n}\n\nfn main() {\n    let string = String::from;\n    let mut data = vec![string(\"c\"), string(\"a\"), string(\"b\"), string(\"d\")];\n    insertion_sort_first(&mut data);\n    assert_eq!(data, vec![\"a\", \"b\", \"c\", \"d\"]);\n}\n\n```\n\n\n# Crate Features\n\n- `use_std`\n  + Enabled by default. Enables the `OnUnwind` and `OnSuccess` strategies.\n  + Disable to use `no_std`.\n\n# Rust Version\n\nThis version of the crate requires Rust 1.20 or later.\n\nThe scopeguard 1.x release series will use a carefully considered version\nupgrade policy, where in a later 1.x version, we will raise the minimum\nrequired Rust version.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/scopeguard/1/\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10:1911","0:68:1919","0:71:1922","0:74:1924","0:21:1947","0:34:1931","0:37:1934","0:40:1937","0:18:1928","0:19:1933","0:20:1936"],"is_stripped":false}}},"b:2:2453-0:71:1922":{"id":"b:2:2453-0:71:1922","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32719:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2447:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1922","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2455:2224"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5578:24925":{"id":"5:5578:24925","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13011:24928"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2770:1626":{"id":"2:2770:1626","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42372:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12916:29424":{"id":"2:12916:29424","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12917:29293"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44386:5318","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12950:31260":{"id":"2:12950:31260","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12579:11587","str::split":"2:12938:26786","prim@char":"1:12072:453","str::split_terminator":"2:12947:31259"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44180:5311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:11585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12911:27405":{"id":"2:12911:27405","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12910:27404"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42354:6363-0:68:1919":{"id":"a:2:42354:6363-0:68:1919","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42354:6363","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12997:31271":{"id":"2:12997:31271","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:11587"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:11585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13000:31272":{"id":"2:13000:31272","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:11587"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2456-0:74:1924":{"id":"b:2:2456-0:74:1924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32719:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2450:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2458:23581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:53":{"id":"0:53","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[455,0],"end":[463,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3211:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3190:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1947","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:57:601"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2766-0:68:1919":{"id":"b:2:2766-0:68:1919","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2736:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2769:138","2:2770:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2760-0:21:1947":{"id":"b:2:2760-0:21:1947","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1947","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2762:748"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:67:721":{"id":"0:67:721","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[486,4],"end":[490,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9988:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9969:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12977:31264":{"id":"2:12977:31264","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33:1969":{"id":"0:33:1969","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[357,4],"end":[369,5]},"visibility":"public","docs":"“Defuse” the guard and extract the value without calling the closure.\n\n```\nextern crate scopeguard;\n\nuse scopeguard::{guard, ScopeGuard};\n\nfn conditional() -> bool { true }\n\nfn main() {\n    let mut guard = guard(Vec::new(), |mut v| v.clear());\n    guard.push(1);\n\n    if conditional() {\n        // a condition maybe makes us decide to\n        // “defuse” the guard and get back its inner parts\n        let value = ScopeGuard::into_inner(guard);\n    } else {\n        // guard still exists in this branch\n    }\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["guard",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[480,0],"end":[491,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:10013:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3211:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10013:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1947","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:67:721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12885":{"id":"2:12885","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12886:878","2:12887:2464","2:12888:31252","2:12889:31253","2:12891:31254","2:12894:23701","2:12895:31255","2:12896:333","2:12897:27378","2:12898:1994","2:12900:27375","2:12902:27376","2:12904:27377","2:12906:31256","2:12907:31257","2:12908:27400","2:12909:27401","2:12910:27404","2:12911:27405","2:12913:5155","2:12914:5328","2:12915:4934","2:12916:29424","2:12917:29293","2:12918:26787","2:12919:31258","2:12920:29304","2:12921:27417","2:12924:27418","2:12927:27419","2:12930:2504","2:12934:2463","2:12938:26786","2:12941:27407","2:12944:27409","2:12947:31259","2:12950:31260","2:12953:27411","2:12956:27413","2:12959:27415","2:12962:27416","2:12965:2236","2:12968:31261","2:12971:31262","2:12974:31263","2:12977:31264","2:12979:31265","2:12981:31266","2:12983:31267","2:12984:31268","2:12985:31269","2:12988:31270","2:12991:23592","2:12994:27420","2:12997:31271","2:13000:31272","2:13003:31273","2:13006:31274","2:13008:24923","2:13009:27305","2:13010:24927","2:13011:24928","2:13012:24929","2:13013:27308","2:13014:27309","2:13015:27310","2:13016:31275","2:13018:6135","2:13019:31276"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13009:27305":{"id":"2:13009:27305","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40202:27312","Self::is_ascii":"2:13008:24923"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40202:27312","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42353:6143-0:68:1919":{"id":"a:2:42353:6143-0:68:1919","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42353:6143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2771-0:21:1947":{"id":"b:2:2771-0:21:1947","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1947","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2774:138","2:2775:1624"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2456-0:71:1922":{"id":"b:2:2456-0:71:1922","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32719:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2450:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1922","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2458:23581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2453-0:21:1947":{"id":"b:2:2453-0:21:1947","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32719:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2447:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1947","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2455:2224"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12985:31269":{"id":"2:12985:31269","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:11587"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12604:11584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5579:24926":{"id":"5:5579:24926","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13012:24929"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12930:2504":{"id":"2:12930:2504","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42231:191","prim@char":"1:12072:453","self::pattern":"2:12579:11587"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13008:24923":{"id":"2:13008:24923","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2762:748":{"id":"2:2762:748","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12895:31255":{"id":"2:12895:31255","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12947:31259":{"id":"2:12947:31259","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12579:11587","str::split":"2:12938:26786","prim@char":"1:12072:453","`DoubleEndedIterator`":"2:7960:131","str::rsplit_terminator":"2:12950:31260"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44162:5310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12938:26786":{"id":"2:12938:26786","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12579:11587","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::split_whitespace":"2:12916:29424","str::rsplit":"2:12944:27409"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44112:5132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2771-0:71:1922":{"id":"b:2:2771-0:71:1922","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1922","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:138","2:2775:1624"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:17:1914":{"id":"0:17:1914","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[247,4],"end":[249,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42353:6143-0:74:1924":{"id":"a:2:42353:6143-0:74:1924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42353:6143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2766-0:74:1924":{"id":"b:2:2766-0:74:1924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2736:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2769:138","2:2770:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12907:31257":{"id":"2:12907:31257","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12078:1544","crate::ops::IndexMut":"2:3240:2326","str::slice_unchecked":"2:12906:31256"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10013:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:76:721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13010:24927":{"id":"2:13010:24927","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13006:31274":{"id":"2:13006:31274","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12540:137","`FromStr`":"2:12539:6374"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42372:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12539:6374","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12539:6374","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5576:31967":{"id":"5:5576:31967","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:282:2341","`String`":"5:7597:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:282:2341","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[315,0],"end":[370,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3211:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1947","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:32:1956","0:33:1969"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5559":{"id":"5:5559","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5560:31963","5:5561:2284","5:5564:31964","5:5567:31965","5:5575:31966","5:5576:31967","5:5577:6265","5:5578:24925","5:5579:24926"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12959:27415":{"id":"2:12959:27415","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12898:1994":{"id":"2:12898:1994","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42231:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[237,0],"end":[242,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1922","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:15:1914"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2756-0:74:1924":{"id":"b:2:2756-0:74:1924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2759:2457"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5564:31964":{"id":"5:5564:31964","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5577:6265":{"id":"5:5577:6265","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2766-0:21:1947":{"id":"b:2:2766-0:21:1947","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2736:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1947","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2769:138","2:2770:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12886:878":{"id":"2:12886:878","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12072:453"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12968:31261":{"id":"2:12968:31261","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12579:11587","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::matches":"2:12965:2236"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44334:5315","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:11585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2978:246-0:68:1919":{"id":"a:2:2978:246-0:68:1919","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2978:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42353:6143-0:21:1947":{"id":"a:2:42353:6143-0:21:1947","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42353:6143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42353:6143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42353:6143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1947","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42354:6363-0:74:1924":{"id":"a:2:42354:6363-0:74:1924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42354:6363","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12984:31268":{"id":"2:12984:31268","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2978:246-0:71:1922":{"id":"a:2:2978:246-0:71:1922","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2978:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1922","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12902:27376":{"id":"2:12902:27376","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12897:27378":{"id":"2:12897:27378","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12089:1648"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1919":{"id":"0:68:1919","crate_id":0,"name":"Always","span":{"filename":"src/lib.rs","begin":[213,0],"end":[213,18]},"visibility":"public","docs":"Always run on scope exit.\n\n“Always” run: on regular exit from a scope or on unwinding from a panic.\nCan not run on abort, process exit, and other catastrophic events where\ndestructors don’t run.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:42353:6143-0:68:1919","a:2:42354:6363-0:68:1919","a:2:32718:237-0:68:1919","a:2:32775:2267-0:68:1919","a:2:2978:246-0:68:1919","b:2:3578-0:68:1919","b:2:2456-0:68:1919","b:2:2760-0:68:1919","b:2:2756-0:68:1919","b:2:2766-0:68:1919","b:2:2771-0:68:1919","b:2:2453-0:68:1919","0:12","0:69"]}}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[443,0],"end":[453,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3211:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3177:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1947","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:51:248","0:52:599"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13014:27309":{"id":"2:13014:27309","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:34500"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2760-0:74:1924":{"id":"b:2:2760-0:74:1924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:748"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32775:2267-0:21:1947":{"id":"a:2:32775:2267-0:21:1947","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32775:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32775:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32775:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1947","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2456-0:68:1919":{"id":"b:2:2456-0:68:1919","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32719:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2450:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2458:23581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12908:27400":{"id":"2:12908:27400","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12910:27404","str::split_at_mut":"2:12909:27401"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42354:6363-0:21:1947":{"id":"a:2:42354:6363-0:21:1947","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42354:6363","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42354:6363","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42354:6363","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1947","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:21:1947":{"id":"0:21:1947","crate_id":0,"name":"ScopeGuard","span":{"filename":"src/lib.rs","begin":[304,0],"end":[313,1]},"visibility":"public","docs":"`ScopeGuard` is a scope guard that may own a protected value.\n\nIf you place a guard in a local variable, the closure can\nrun regardless how you leave the scope — through regular return or panic\n(except if panic or other code aborts; so as long as destructors run).\nIt is run only once.\n\nThe `S` parameter for [`Strategy`](trait.Strategy.html) determines if\nthe closure actually runs.\n\nThe guard's closure will be called with the held value in the destructor.\n\nThe `ScopeGuard` implements `Deref` so that you can access the inner value.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Always","id":"0:68:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3211:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["0:28","a:2:42353:6143-0:21:1947","a:2:42354:6363-0:21:1947","a:2:32718:237-0:21:1947","a:2:32775:2267-0:21:1947","b:2:3578-0:21:1947","b:2:2456-0:21:1947","b:2:2760-0:21:1947","b:2:2756-0:21:1947","b:2:2766-0:21:1947","b:2:2771-0:21:1947","b:2:2453-0:21:1947","0:43","0:47","0:58","0:53","0:63"]}}},"0:71:1922":{"id":"0:71:1922","crate_id":0,"name":"OnUnwind","span":{"filename":"src/lib.rs","begin":[220,0],"end":[220,20]},"visibility":"public","docs":"Run on scope exit through unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:42353:6143-0:71:1922","a:2:42354:6363-0:71:1922","a:2:32718:237-0:71:1922","a:2:32775:2267-0:71:1922","a:2:2978:246-0:71:1922","b:2:3578-0:71:1922","b:2:2456-0:71:1922","b:2:2760-0:71:1922","b:2:2756-0:71:1922","b:2:2766-0:71:1922","b:2:2771-0:71:1922","b:2:2453-0:71:1922","0:72","0:14"]}}},"b:2:3578-0:74:1924":{"id":"b:2:3578-0:74:1924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32719:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3576:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3580:1639"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2759:2457":{"id":"2:2759:2457","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2733:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12965:2236":{"id":"2:12965:2236","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12579:11587","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::rmatches":"2:12968:31261"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44316:5314","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5560:31963":{"id":"5:5560:31963","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:282:2341","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:282:2341","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32:1956":{"id":"0:32:1956","crate_id":0,"name":"with_strategy","span":{"filename":"src/lib.rs","begin":[326,4],"end":[332,5]},"visibility":"public","docs":"Create a `ScopeGuard` that owns `v` (accessible through deref) and calls\n`dropfn` when its destructor runs.\n\nThe `Strategy` decides whether the scope guard's closure should run.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1947","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2756-0:71:1922":{"id":"b:2:2756-0:71:1922","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1922","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2759:2457"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12914:5328":{"id":"2:12914:5328","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12072:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44088:5308","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12917:29293":{"id":"2:12917:29293","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12916:29424"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44395:5319","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12944:27409":{"id":"2:12944:27409","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12579:11587","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::split":"2:12938:26786"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44130:5137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:11585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:12":{"id":"0:12","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[229,0],"end":[234,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:13:1914"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:43":{"id":"0:43","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[435,0],"end":[441,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2978:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3211:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2978:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1947","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13016:31275":{"id":"2:13016:31275","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4758:31275"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44411:5217","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2771-0:68:1919":{"id":"b:2:2771-0:68:1919","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:138","2:2775:1624"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2769:138":{"id":"2:2769:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:2455:2224":{"id":"2:2455:2224","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3580:1639":{"id":"2:3580:1639","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40016:5207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2458:23581":{"id":"2:2458:23581","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12894:23701":{"id":"2:12894:23701","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12127:11588"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12924:27418":{"id":"2:12924:27418","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:11587"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:1933":{"id":"0:19:1933","crate_id":0,"name":"defer_on_success","span":{"filename":"src/lib.rs","begin":[271,0],"end":[275,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on successful scope exit).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer_on_success {\n    ($($t:tt)*) => { ... };\n}"}},"2:12983:31267":{"id":"2:12983:31267","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13011:24928":{"id":"2:13011:24928","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42354:6363-0:71:1922":{"id":"a:2:42354:6363-0:71:1922","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42354:6363","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1922","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12981:31266":{"id":"2:12981:31266","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10013:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:70:721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32775:2267-0:74:1924":{"id":"a:2:32775:2267-0:74:1924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32775:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:74:1924":{"id":"0:74:1924","crate_id":0,"name":"OnSuccess","span":{"filename":"src/lib.rs","begin":[227,0],"end":[227,21]},"visibility":"public","docs":"Run on regular scope exit, when not unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:42353:6143-0:74:1924","a:2:42354:6363-0:74:1924","a:2:32718:237-0:74:1924","a:2:32775:2267-0:74:1924","a:2:2978:246-0:74:1924","b:2:3578-0:74:1924","b:2:2456-0:74:1924","b:2:2760-0:74:1924","b:2:2756-0:74:1924","b:2:2766-0:74:1924","b:2:2771-0:74:1924","b:2:2453-0:74:1924","0:75","0:16"]}}},"0:76:721":{"id":"0:76:721","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9988:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9969:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3578-0:71:1922":{"id":"b:2:3578-0:71:1922","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32719:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3576:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1922","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3580:1639"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:57:601":{"id":"0:57:601","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[460,4],"end":[462,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2774:138":{"id":"2:2774:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32648:6381","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10013:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1922","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12913:5155":{"id":"2:12913:5155","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12072:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44082:5147","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12971:31262":{"id":"2:12971:31262","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12579:11587","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::rmatch_indices":"2:12974:31263"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44262:5312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2775:1624":{"id":"2:2775:1624","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42372:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37:1934":{"id":"0:37:1934","crate_id":0,"name":"guard_on_success","span":{"filename":"src/lib.rs","begin":[388,0],"end":[393,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1947","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"OnSuccess","id":"0:74:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3211:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12979:31265":{"id":"2:12979:31265","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12934:2463":{"id":"2:12934:2463","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42231:191","prim@char":"1:12072:453","self::pattern":"2:12579:11587"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:11585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:11:1914":{"id":"0:11:1914","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[204,4],"end":[204,28]},"visibility":"default","docs":"Return `true` if the guard’s associated code should run\n(in the context where this method is called).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:20:1936":{"id":"0:20:1936","crate_id":0,"name":"defer_on_unwind","span":{"filename":"src/lib.rs","begin":[285,0],"end":[289,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on unwinding from panic).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer_on_unwind {\n    ($($t:tt)*) => { ... };\n}"}},"a:2:32718:237-0:74:1924":{"id":"a:2:32718:237-0:74:1924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32718:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:10:1911":{"id":"0:10:1911","crate_id":0,"name":"Strategy","span":{"filename":"src/lib.rs","begin":[201,0],"end":[205,1]},"visibility":"public","docs":"Controls in which cases the associated code should be run","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:11:1914"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:12","0:14","0:16"]}}},"2:12887:2464":{"id":"2:12887:2464","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12921:27417":{"id":"2:12921:27417","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:11587"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2771-0:74:1924":{"id":"b:2:2771-0:74:1924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:138","2:2775:1624"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[465,0],"end":[478,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3211:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3201:1983","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1947","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:62:637"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2756-0:68:1919":{"id":"b:2:2756-0:68:1919","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2759:2457"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12900:27375":{"id":"2:12900:27375","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42231:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12888:31252":{"id":"2:12888:31252","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12953:27411":{"id":"2:12953:27411","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:11587","str::rsplitn":"2:12956:27413"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44216:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12994:27420":{"id":"2:12994:27420","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:11587"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:11585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:1928":{"id":"0:18:1928","crate_id":0,"name":"defer","span":{"filename":"src/lib.rs","begin":[257,0],"end":[261,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (always run).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.","links":{},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer {\n    ($($t:tt)*) => { ... };\n}"}},"b:2:2766-0:71:1922":{"id":"b:2:2766-0:71:1922","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2736:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1922","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2769:138","2:2770:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:52:599":{"id":"0:52:599","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[450,4],"end":[452,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15:1914":{"id":"0:15:1914","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[239,4],"end":[241,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3578-0:68:1919":{"id":"b:2:3578-0:68:1919","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32719:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3576:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3580:1639"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12988:31270":{"id":"2:12988:31270","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:11587"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12991:23592":{"id":"2:12991:23592","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:11587"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2453-0:74:1924":{"id":"b:2:2453-0:74:1924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32719:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2447:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2455:2224"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12904:27377":{"id":"2:12904:27377","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12896:333":{"id":"2:12896:333","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12897:27378","`u8`":"1:12089:1648"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12918:26787":{"id":"2:12918:26787","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44366:5316","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12927:27419":{"id":"2:12927:27419","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:11587"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:11585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12889:31253":{"id":"2:12889:31253","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[245,0],"end":[250,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:17:1914"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:70:721":{"id":"0:70:721","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9988:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9969:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32718:237-0:21:1947":{"id":"a:2:32718:237-0:21:1947","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32718:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32718:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32718:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1947","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5561:2284":{"id":"5:5561:2284","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3578-0:21:1947":{"id":"b:2:3578-0:21:1947","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32719:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3576:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1947","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3580:1639"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12915:4934":{"id":"2:12915:4934","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44098:3015","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32718:237-0:68:1919":{"id":"a:2:32718:237-0:68:1919","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32718:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42353:6143-0:71:1922":{"id":"a:2:42353:6143-0:71:1922","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42353:6143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1922","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2760-0:68:1919":{"id":"b:2:2760-0:68:1919","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:748"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2456-0:21:1947":{"id":"b:2:2456-0:21:1947","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32719:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2450:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1947","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2458:23581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32775:2267-0:68:1919":{"id":"a:2:32775:2267-0:68:1919","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32775:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13012:24929":{"id":"2:13012:24929","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13019:31276":{"id":"2:13019:31276","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4756:31276"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44429:5216","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13015:27310":{"id":"2:13015:27310","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:34500"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32775:2267-0:71:1922":{"id":"a:2:32775:2267-0:71:1922","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32775:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1922","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:73:721":{"id":"0:73:721","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9988:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9969:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13013:27308":{"id":"2:13013:27308","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:34500"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5567:31965":{"id":"5:5567:31965","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12956:27413":{"id":"2:12956:27413","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12072:453","str::splitn":"2:12953:27411","self::pattern":"2:12579:11587"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44234:5140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:11585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2756-0:21:1947":{"id":"b:2:2756-0:21:1947","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1947","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2759:2457"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2453-0:68:1919":{"id":"b:2:2453-0:68:1919","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32719:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2447:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2455:2224"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2760-0:71:1922":{"id":"b:2:2760-0:71:1922","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1922","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:748"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12962:27416":{"id":"2:12962:27416","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:11585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5575:31966":{"id":"5:5575:31966","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12910:27404":{"id":"2:12910:27404","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12911:27405"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2978:246-0:74:1924":{"id":"a:2:2978:246-0:74:1924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2978:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12906:31256":{"id":"2:12906:31256","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12078:1544","str::slice_mut_unchecked":"2:12907:31257","crate::ops::Index":"2:39848:2325"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12909:27401":{"id":"2:12909:27401","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12908:27400","str::split_at_mut_checked":"2:12911:27405"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12891:31254":{"id":"2:12891:31254","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12889:31253"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12941:27407":{"id":"2:12941:27407","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:11587"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12395:5134","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12920:29304":{"id":"2:12920:29304","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44404:5154","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13003:31273":{"id":"2:13003:31273","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:11587"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:11585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:248":{"id":"0:51:248","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[448,4],"end":[448,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:34:1931":{"id":"0:34:1931","crate_id":0,"name":"guard","span":{"filename":"src/lib.rs","begin":[375,0],"end":[380,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1947","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"Always","id":"0:68:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3211:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12974:31263":{"id":"2:12974:31263","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12579:11587","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::match_indices":"2:12971:31262"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44280:5313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:11585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13:1914":{"id":"0:13:1914","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[231,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13018:6135":{"id":"2:13018:6135","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4759:6135"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44420:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:5588:16554":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"18:589:2968":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:40863:5228":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"18:659:2982":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:5515:16547":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"6:1707:13432":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:11497:3223":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:38610:2320":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:21349:2967":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:15624:4038":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:7921:3097":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"5:3838:2804":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:6438:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:7357:2785":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:42191:5118":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:5043:5080":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:12077:1511":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:44082:5147":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:8363:6322":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:48237:5452":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:4864:16476":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:5645:4323":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:7948:5558":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:3589:6253":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:44022:5301":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:1490:13410":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:14463:3683":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:12088:797":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:11016:3179":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:12039:24672":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"18:706:2994":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:44334:5315":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:9155:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:8428:5508":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:7565:4639":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:5477:16543":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:14246:3645":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:4464:5507":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"18:651:2957":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:7306:12564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:46102:5358":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:2995:32053":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:12090:1645":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:557:2405":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:14752:3728":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:13260:5163":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:15463:3976":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:7575:17696":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:11166:3194":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:10719:129":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"16:4649:4290":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:2859:4246":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:33919:2308":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:41069:2979":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:22780:29398":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:11095:5537":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:1975:708":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:22609:5169":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:3264:3037":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:12900:3385":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:44671:5333":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:3208:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:13457:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:34174:2311":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"18:573:2957":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:5502:16546":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"17:13399:3467":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:10069:5482":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:2438:6221":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:6441:17248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:41428:5106":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:12127:3315":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:14876:3822":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:5581:16553":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:7366:6351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:553:12522":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:39959:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:10350:3014":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:2496:2140":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:3234:27179":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:43230:4668":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:8291:5132":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:728:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"16:6669:4509":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:5581:5522":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:16187:4183":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:6602:5098":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:42364:2415":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:3396:2329":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:1054:4811":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:9048:23607":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:44737:5158":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:46957:5391":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:10024:2370":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:42656:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:44262:5312":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:6737:4516":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:46701:5385":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:1811:2286":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:21559:6232":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"16:5630:4321":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:10870:23619":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:10028:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:30668:6277":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:15214:3912":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:41000:5242":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:7445:2468":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:4787:16471":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:43201:2378":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:3411:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:5555:4312":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:11595:3240":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:14079:3602":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:4916:16482":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:5329:16526":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"11:2326:4811":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:9069:5654":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:3056:2323":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:3417:2331":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:7467:24664":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:12150:3316":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"11:1142:4816":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:22023:6433":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:11701:2555":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:6068:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:922:4804":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:15616:4037":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:12579:11587":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:6408:4456":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:21371:30791":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:15058:3873":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:2037:3029":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:6929:2816":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:10155:3151":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:2693:5490":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:32719:2266":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:7389:13554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:4823:6309":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:9671:19365":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:22:735":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:5527:115":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:12887:3383":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:12072:453":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:4876:16478":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:46208:5362":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:40772:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:1321:4817":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:688:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:46679:5384":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"18:113:23563":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:6670:17266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"0:21:1947":{"crate_id":0,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"16:2709:4239":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:5181:16508":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:10013:121":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"18:491:2956":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:13235:3434":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"5:7695:2808":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:9988:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:15116:3886":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:4272:4799":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:2032:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:11583:3236":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:15151:3896":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:538:12520":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:12175:3318":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:32776:2269":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:14855:3814":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:12111:5145":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:3561:2367":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"0:10:1911":{"crate_id":0,"path":["scopeguard","Strategy"],"kind":"trait"},"17:12707:3371":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:11518:5501":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:13064:3399":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:42734:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"14:165:18387":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:42372:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:10729:5500":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:11624:5143":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"17:14788:3759":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:10466:2843":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:10747:23604":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:11558:5502":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:6706:17270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"16:5238:4304":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:12949:3041":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:5046:16498":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:491:12515":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:15646:4044":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:11898:3276":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:5278:4305":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:13814:3564":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:12792:3117":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:8315:6274":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"5:7518:2412":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:16093:4159":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:4924:16483":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:8317:16732":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:22303:6514":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:8253:16723":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:12044:6142":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:7314:13368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:41053:5099":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:4811:16473":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:10419:3019":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:7987:5560":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:48331:5455":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:31467:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:564:12524":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:15176:3904":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:3356:5497":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:43500:5287":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:46346:5368":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:4537:2828":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:32807:116":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:40631:5210":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:40016:5207":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"18:481:2955":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:5713:4332":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:8288:16728":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:2730:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:8478:5630":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:10710:3166":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:5674:2802":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:40788:29305":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:1510:13413":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:48412:5462":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:15720:4065":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:1029:2765":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:4113:2791":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:5906:2863":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:3614:4799":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:5489:16545":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:40870:5229":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:1522:4801":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:22172:6429":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"15:327:18411":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:8310:5612":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:14545:3692":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:40991:5090":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"7:31:18281":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:45121:5352":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:697:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:12264:3328":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:8406:6351":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:11574:3233":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:11063:3185":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:7595:4254":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:7485:17691":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:11352:5538":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:8197:18228":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:5244:16515":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:16050:3447":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"16:7414:4632":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:6396:6520":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"16:7984:4703":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:588:6134":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:3201:1983":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:9196:5660":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:7452:17688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:12318:3041":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:6330:2870":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:11324:3209":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:11730:3253":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:7960:131":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:46633:5382":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:7355:4630":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:12443:3350":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:3579:6230":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:40714:11652":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:14436:3681":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:2689:4238":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:536:4203":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:4237:11560":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:4355:4282":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:6929:4544":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:41012:5096":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:12395:5134":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:11230:5688":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:48351:5457":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:545:12521":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:5296:16522":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:40940:5237":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:5726:4333":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"11:1923:4825":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:15734:4067":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:5457:16540":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:44828:11905":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:4069:6295":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:3436:30628":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:14868:3821":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:939:4807":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"5:3245:4822":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:4800:16472":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:15092:3884":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:8954:5646":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:10905:3170":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:12079:1629":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:10020:2368":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:10838:4818":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:22662:5170":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:4547:2380":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:621:5472":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:5277:16519":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:44216:5139":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:41484:5111":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:8268:5232":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:5959:18425":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:44420:5071":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:42169:5504":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:14560:3696":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:46854:5389":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:22018:6232":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"5:1307:4811":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:10449:2842":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"18:521:23574":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"11:1903:4822":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:41991:5115":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:42617:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:7345:4629":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:2736:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:10026:2371":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:8923:5645":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:21359:30791":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:8387:11812":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:2336:4217":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:12107:3167":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:15368:3954":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:11026:19399":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:6062:4392":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:8341:18264":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:1911:2558":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:13235:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"5:3204:4799":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:149:2751":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:2982:2860":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:10814:4799":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:42412:4799":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:7931:5556":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:914:4800":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:9150:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:9122:6047":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:42500:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"11:2542:29980":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"11:1896:2804":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"16:5485:4248":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:12433:3348":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:16176:4182":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"10:0:2126":{"crate_id":10,"path":["adler"],"kind":"module"},"2:43191:29292":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:14489:3685":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:15342:3944":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:15701:4060":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:45096:5351":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"2:2983:1905":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:4240:6318":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:4392:5506":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:7523:4265":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:6377:6519":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:9467:5555":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:8090:6264":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:43961:5297":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:7932:4696":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:437:3023":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:791:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:6895:4539":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:6507:5250":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"5:4464:2793":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:6362:4267":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:8378:6156":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:13412:3469":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:42355:11862":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:14516:3689":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:42312:5266":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:2203:3033":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:48191:5451":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:4909:16481":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:2363:2540":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:7619:19324":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:7294:4617":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:10044:19386":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:11242:3199":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:7586:2800":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:13774:3556":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"5:7534:4929":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:15944:3433":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"16:7482:4636":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:13424:3470":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:5624:16557":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:21633:5168":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:15206:3910":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:38445:2317":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:12318:5151":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:5546:16550":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:6268:4249":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:44719:5342":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:1885:2625":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:12087:801":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"5:2201:32487":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:42951:2369":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:11128:3142":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:46078:5357":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:13723:3543":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"11:396:2759":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:10661:3165":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:7971:4700":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:4825:6310":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:6677:5941":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:40803:5226":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:1585:13421":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:11788:3263":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:15836:4092":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:2588:5489":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"7:0:1693":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:13526:3493":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:3333:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:11547:3096":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:41218:5249":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:4965:16488":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:7731:2425":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:13089:3400":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:46056:5356":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:3819:2468":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:44696:5334":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:15138:3890":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:11773:3259":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:3100:2314":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:4907:4299":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:7467:11808":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:45021:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:3576:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:5598:16555":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:7984:12471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:2657:2857":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:5423:16537":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"5:1691:2765":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:3406:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:48397:5461":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:15608:4034":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:4190:5072":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:40777:5225":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:15102:3885":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:42428:2468":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:42814:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:10137:19363":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:10689:5680":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"6:8265:16725":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:7749:2409":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:14402:3668":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:10022:2369":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:12478:3353":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:1492:4803":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:44913:11919":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:16032:3437":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"5:7620:4937":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:15569:4019":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:46012:5354":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:40968:5238":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:2733:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:11825:3269":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:12530:3362":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:21561:6431":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:7103:33598":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:4879:2861":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:3830:4278":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:12238:3326":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:14235:3643":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:7609:4641":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:14372:3662":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:13753:3552":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:8915:4799":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:14414:3670":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:10769:33601":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:5306:16523":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:4119:6298":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:6803:4521":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:6348:4250":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:867:4802":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:46257:5364":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:4824:16474":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:7437:2468":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:6142:2791":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:2399:4225":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:10399:3015":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:7976:129":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:22381:6516":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:44042:5303":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:11290:4883":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:10997:3177":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:2172:4910":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:6435:17247":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:8870:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:1485:13409":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:11153:3168":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:6462:19318":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:8358:6321":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:10534:33608":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:12621:3365":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"5:3601:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:41021:5097":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:30892:1907":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"11:832:4819":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:9677:30566":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:7020:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:8022:19326":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:12695:3370":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:12969:3388":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:3020:2265":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:5466:16541":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:10444:5494":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:2276:6214":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:5483:16544":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:4837:16475":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:6460:17250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"11:2423:2468":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:2733:5491":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:43272:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:7998:4268":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:16151:4174":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"11:1025:4811":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:5499:4251":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:44607:5332":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:5528:16548":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:12851:3381":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:4992:16492":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:6636:17262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:11430:24916":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:3273:5492":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"18:581:2967":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:6230:4435":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:5653:16561":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"5:4797:721":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:2001:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:6579:19319":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:5365:2765":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:5316:3151":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"4:0:2123":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:2489:4229":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:13797:3561":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:15473:3981":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:4433:4284":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:9969:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:12082:695":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:40759:5224":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:47193:5410":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:2271:1970":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:34347:2312":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:2995:18455":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"11:1887:2468":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:39804:2335":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:7996:5561":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:6597:17258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:8294:16729":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:10669:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:5413:11576":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:10935:2887":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:3811:5501":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:465:12511":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:3570:24881":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:11139:5142":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:11877:3274":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:46156:5360":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:44366:5316":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"18:96:23562":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:6788:32941":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:21403:30789":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:10954:19397":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"18:538:2964":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:13785:3559":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:4202:2791":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:13485:3483":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:6821:17281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:7918:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:1653:13426":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:11367:3187":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:12371:3386":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:3406:4273":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:43921:5292":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:1276:4545":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:16259:3464":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:7537:4266":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:4261:6320":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:4210:26699":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:9041:2402":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:479:12513":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"14:187:18394":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:3051:2322":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"11:1676:1947":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:2971:2261":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:836:4799":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:10383:2840":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:1939:5484":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"10:44:4831":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:7429:13537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:3029:2305":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:4706:6296":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:282:2341":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"18:80:23561":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"13:109:33578":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:5878:4205":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:12362:3342":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:46032:5355":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:15434:3969":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:44411:5217":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:8369:5617":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:14066:3601":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:7324:4626":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:48527:5467":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:4061:6294":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:13581:3512":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:2284:18426":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"18:515:2954":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:12422:3346":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:11399:5543":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:6650:17263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:48360:5458":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:38500:2318":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"18:507:2957":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:14968:3857":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:9472:2884":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:9213:5661":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"16:5759:4340":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:21614:6427":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:8564:6373":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:533:2403":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:4971:16489":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:637:5473":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:10185:3008":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:12388:3343":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:645:6137":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:10863:5132":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:6215:4433":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:5376:16532":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:43987:5229":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:11112:23593":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:8304:5610":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:10887:5643":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:10441:5492":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:30930:2290":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"3:0:480":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:11385:5542":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:7627:5693":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:13766:3554":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"11:2151:4813":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:6409:17245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:15678:4059":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:5336:16527":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:31118:29391":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:5865:4356":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:4075:6296":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:2979:4269":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:11605:3241":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:6763:17277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"6:485:12514":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:7881:11814":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:15400:3962":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:44878:132":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:10671:33607":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:6038:5938":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:11647:23656":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:42303:2468":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:48313:5454":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:11045:5641":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:15521:4018":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:6188:4431":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:22342:6515":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:40833:2830":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:8109:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:5039:16497":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:14356:3661":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:21386:30786":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:9168:5123":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:1542:4905":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:4648:2382":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:11567:3230":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:8282:16727":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:12572:3167":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:15313:3936":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:3488:2337":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:7931:2340":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:12127:11588":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:11715:3251":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:5407:1108":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:16138:4168":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"16:7176:33599":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:1511:4800":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:4787:4295":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:42972:2371":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:2723:32052":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"18:689:2991":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:7507:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:40959:5086":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:640:5475":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:1804:637":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:1723:13433":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:7637:3003":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:11702:3250":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"12:0:2128":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:9102:23588":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:4825:11646":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:46186:5361":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:46877:5390":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:10251:3011":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:2516:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:11634:3245":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:6608:29269":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:44280:5313":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:2993:32545":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:44088:5308":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"10:36:33512":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:4761:4294":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"7:78:18288":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:12189:3322":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:22048:5167":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:40930:5235":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:3773:4277":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:11111:5140":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:2121:2560":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:4650:6341":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:7351:11816":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"14:160:4790":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:6858:4535":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:43940:5295":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:22366:6232":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:22529:6508":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:8381:6160":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:7491:4637":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:13116:3406":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:5219:16512":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"0:37:1934":{"crate_id":0,"path":["scopeguard","guard_on_success"],"kind":"function"},"17:14475:3684":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:12724:19388":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:12508:3358":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:42007:5117":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:6714:17271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"16:4518:4287":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:10317:3013":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:21731:6232":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:7774:2408":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:2521:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:44513:5321":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:44058:5304":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"13:0:2122":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:6724:4514":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:12584:5123":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:7387:32061":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:636:4900":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:4047:6293":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:0:2132":{"crate_id":17,"path":["object"],"kind":"module"},"2:43469:5279":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:39852:2327":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"14:214:4795":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:10847:5554":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:46509:5379":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:5436:16538":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:2529:4231":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:4984:421":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:3993:4280":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:8328:16733":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:2573:4233":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:4952:16486":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:10676:5556":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:11915:19486":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:32805:2268":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:5361:16530":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:6524:17254":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:46364:5369":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:1593:13422":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:5225:16513":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"11:883:4810":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:39979:2328":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:13187:3419":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:9490:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:1590:4822":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:39879:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:12464:19511":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:22769:5177":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:42958:2368":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"11:2443:2785":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"16:3177:4214":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:723:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:41044:5244":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:42229:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:15078:3881":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:1585:2804":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:2835:4245":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:10156:6383":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:9017:5647":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:6965:5658":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:5984:5089":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"11:787:4803":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:4784:6323":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:6621:5534":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:849:4818":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:1461:2468":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:11674:3248":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:11524:3225":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:14723:3708":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:2740:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:40657:5213":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:11392:3215":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:9145:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:13946:3582":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:6773:4518":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:1628:13424":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:8278:5249":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:13186:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:10952:2889":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:9178:5537":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:12083:697":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:13473:3480":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:2375:4224":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:6141:33596":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"11:299:5930":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:3003:32538":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:16165:4177":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:13387:3464":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:11227:3198":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:500:1139":{"crate_id":1,"path":["std","thread","panicking"],"kind":"function"},"2:12341:5152":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:14284:3650":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:43218:29294":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:6030:4387":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:11495:2892":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:4545:4288":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:5636:16559":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:44316:5314":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:3315:5494":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:7960:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"11:856:4807":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11075:3187":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:1072:4817":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:5212:16511":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:31494:2967":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:7444:4635":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:11537:3226":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:5314:16524":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:13594:3513":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:47035:5407":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"5:3773:4908":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:36569:2316":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:6692:4510":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:41969:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:10230:115":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"6:8306:16731":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:11058:5642":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:10855:5522":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:40620:5209":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:3472:2791":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:893:2785":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:918:4801":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:8055:4597":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:39768:2338":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:5200:16510":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:14091:3603":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:11341:3212":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:3240:24532":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:15:2239":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:15126:3887":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:1063:4813":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:31013:29423":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:15249:3918":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:5565:16552":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:9076:5655":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:4885:16479":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:11405:3216":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:13252:3437":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:10818:3168":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:41228:5103":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:13437:3471":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:16269:3469":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:15222:3914":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:44180:5311":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:13211:3433":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:9035:117":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:9737:19364":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"16:2917:18454":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:5901:2785":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:4733:4293":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:7089:2824":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:6624:6394":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:8080:5563":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:40691:5216":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:7562:4932":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:10524:3163":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:42695:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:2304:18452":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:2450:6227":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:5038:4303":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:41242:5104":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:5290:16521":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:14012:3593":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"0:40:1937":{"crate_id":0,"path":["scopeguard","guard_on_unwind"],"kind":"function"},"2:41083:5101":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:12225:3325":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:16198:4184":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:2424:6217":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:14449:3682":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:4718:23767":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:6609:17259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:3275:5493":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:5191:16509":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:15426:3968":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:5370:16531":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:1526:13415":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:2818:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"9:0:2125":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:12089:3313":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:12094:853":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:5827:5526":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:47989:5448":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:12055:23601":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:7686:2882":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:6243:2869":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:22730:29403":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:12095:11870":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:1824:5480":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:10170:3152":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:43453:5276":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:42354:6363":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:12399:3344":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:13553:3502":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:11635:5690":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:726:6278":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:11647:3246":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:47111:5409":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:2727:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:12671:3368":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"5:1156:32645":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"11:1910:4823":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"18:718:2998":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"11:2352:4813":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"5:7417:4927":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:4070:2765":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:8006:18067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:48435:5463":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:46823:5388":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:12201:3323":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:7561:17695":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"14:202:11601":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:2450:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:5652:6380":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:8029:18069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:4112:4818":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:3814:5502":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:6320:4444":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:5320:16525":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:578:12526":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:12485:19512":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:3017:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:1574:4799":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:6431:4255":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:6756:17276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"6:5677:16564":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:9299:2625":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:1602:4824":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"9:177:18368":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:48371:5459":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:12251:3327":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:11743:3254":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:4468:5076":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:9672:30968":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:4621:2271":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:2469:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:5445:16539":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:12494:3355":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:10032:2373":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:3237:4824":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:21405:30798":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:7306:4618":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:4592:2829":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"11:1107:4815":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:7118:5266":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:13972:3281":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:12056:3311":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"18:531:2961":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"0:18:1928":{"crate_id":0,"path":["scopeguard","defer"],"kind":"macro"},"6:7348:17685":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:12070:403":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:42420:4818":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:48465:5465":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:7386:4263":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"11:1891:2785":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:6116:4416":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:6657:17264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:40:2761":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:4601:2381":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"5:1292:4813":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:6575:2765":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:1430:4799":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:513:3024":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:6729:17273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:6725:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:22395:2540":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"6:5236:16514":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:6896:2802":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:12093:1644":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:12076:332":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:44824:11902":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"11:364:2757":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:12095:1703":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:44852:11903":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:2665:4237":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:6542:17256":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:12213:3324":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:4844:4297":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:4987:6348":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:32709:5201":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:6691:2875":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:22911:6289":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:14260:3647":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:7367:2777":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:12810:121":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"11:2554:33522":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:4996:6349":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:22495:6509":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"5:4386:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:2819:4244":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:13986:3590":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:7335:4261":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:8864:5640":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:13146:3410":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:3473:3039":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:2641:4236":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:41457:5251":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:13844:3567":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:32718:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:47271:5411":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"13:226:33532":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:532:12519":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:6908:4542":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:6134:4426":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:44832:11907":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:15760:4076":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:2729:4240":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:5344:16528":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:8461:6359":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:4123:6299":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:9886:19382":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:10092:19387":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:5002:16493":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:44376:5317":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:3205:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:6979:2877":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:2266:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:7822:6187":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:10612:3164":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:6811:17280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:5897:19315":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:2724:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:14189:3633":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:44162:5310":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:12300:19510":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:11413:5545":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"15:306:18407":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:795:2768":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"0:68:1919":{"crate_id":0,"path":["scopeguard","Always"],"kind":"enum"},"1:8549:5633":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:3627:4818":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:7113:2878":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:8931:2468":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:22524:6510":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:13512:6155":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:15383:3958":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:6721:17272":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"6:6678:17267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:12593:2994":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:21620:6430":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:1098:3026":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:10018:130":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:10710:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:11493:3222":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:30956:29341":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:40950:5083":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:6882:4536":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:14311:3652":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:7616:3025":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:8224:5602":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:10277:5129":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:12092:1647":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"9:501:4886":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:1535:13416":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:7152:4576":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:7415:29195":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:22393:29943":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:12659:3367":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"11:2469:2804":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:10671:24918":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:4702:4292":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:15778:4082":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:4232:6317":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:12599:11585":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:6417:17246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:5415:16536":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:14847:3811":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:44071:5307":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:11102:3189":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:4283:4281":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:1501:4819":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:1841:1195":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:13497:3484":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:12808:3379":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:5665:16562":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"11:1582:4820":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:48386:5460":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:38555:2319":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:1483:4802":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:22887:5191":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:12824:19389":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:6529:2785":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"9:237:5283":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:3597:3040":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:42023:6275":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:14912:3851":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:10068:19369":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"11:123:2755":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"11:1066:18380":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:6282:4441":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:44685:11600":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:15445:3973":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:4985:16491":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:10828:33606":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:4550:6323":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:261:3018":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:10481:2848":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:22818:29397":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:7982:5488":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"6:5102:16502":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:15273:3927":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:14933:3856":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:40890:5231":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:9817:2389":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:8248:6231":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:11654:5546":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:10229:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:1686:13430":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:5064:16500":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:13509:3485":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:15390:3959":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"9:446:18300":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:14212:3642":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:15635:4043":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:3013:2263":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:46603:5381":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:44902:5343":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:7754:2411":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:5462:5515":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:11142:3167":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:7922:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:6892:6425":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:15769:4080":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:32648:6381":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:5283:16520":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:40614:5071":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:44528:5326":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:6394:4454":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"18:635:2981":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:5834:5529":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:891:2773":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:8012:4705":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:8069:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:5112:16503":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:12097:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:43255:2378":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"18:754:3007":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:3317:5495":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:12289:3330":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:9089:5658":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:10573:33605":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:5794:4343":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:6646:4508":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:10647:5674":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:3177:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:6099:4409":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:6471:17251":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:7345:4925":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:3916:5503":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:12084:802":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:22880:29310":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"11:2140:4811":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:46327:5367":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:6746:17275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:8907:5643":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:42209:5120":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:7467:17690":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:15814:4086":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:2558:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:11335:2890":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:41466:2838":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:8937:5524":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:15822:4089":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:41451:5108":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:10088:5665":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"11:2569:4928":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:4473:5077":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:12353:3341":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:2459:4228":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:5146:16506":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:22853:29323":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:2749:4241":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:5580:4252":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:945:4809":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:4886:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:22746:5172":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:11214:3197":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:13922:3581":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:11661:3247":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:22435:6517":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:14038:3596":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:9755:19362":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:16121:4166":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:6201:4247":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:43490:5283":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:523:12518":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:15168:3901":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:14131:3607":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:11256:3201":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:12073:1664":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"11:687:4818":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:40202:27312":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:2439:4227":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:5006:4302":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:5557:16551":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:15931:3419":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:1581:2785":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:11799:3264":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:4464:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:4322:5074":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:5083:16501":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:8012:4907":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:40707:5217":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"0:20:1936":{"crate_id":0,"path":["scopeguard","defer_on_unwind"],"kind":"macro"},"17:14298:3651":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:357:2423":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:40899:5232":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"9:52:18318":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:10487:2408":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:1887:5483":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:6045:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:43712:5130":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:1692:6314":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:7400:4264":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:6546:4482":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:46725:5386":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:9807:19370":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:4813:4296":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:6610:4496":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:9460:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:11865:3273":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:10339:5640":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:14111:3606":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:16212:4188":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:46309:5366":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:517:12517":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:10247:5945":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:44098:3015":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:43861:5290":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:12091:1646":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:32688:4597":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:16079:4155":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:5476:5519":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:5696:4327":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:6555:4483":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:6376:4446":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:15197:3909":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:1809:661":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:40029:5208":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:6221:4434":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:7412:13539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"14:220:4797":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"18:680:2989":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:12929:3386":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:7223:26700":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:11419:3167":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:0:535":{"crate_id":2,"path":["core"],"kind":"module"},"2:2447:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:34520:2313":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:6788:33595":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:7377:4926":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:13832:3565":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"0:34:1931":{"crate_id":0,"path":["scopeguard","guard"],"kind":"function"},"5:7610:4936":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"14:40:3434":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:8894:5642":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:33381:2301":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"18:623:33613":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:8097:4712":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:26344:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:7730:6232":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"5:3363:2804":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:15356:3951":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:39919:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:9160:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:559:12523":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:15333:3943":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:7547:29305":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:2552:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:10018:19366":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:14025:3594":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:2068:4908":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:2593:4234":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:33978:2307":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:10284:3012":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:2973:119":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:11661:5546":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:1446:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:15039:3872":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:11089:3188":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"11:2562:33516":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:7409:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:22170:6232":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"11:2304:4545":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"16:7551:4256":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:44706:5338":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:2274:32522":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:2319:4215":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:14599:3706":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"14:7:4790":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:42461:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:4256:11628":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:44836:11906":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:11042:3180":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:5052:16499":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:12647:3366":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"16:6811:19320":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:4902:6306":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:9057:1989":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:2992:2528":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:4353:5075":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:32720:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:7574:4935":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:6759:4258":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:12539:6374":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:7869:4690":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:40815:6201":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:3749:6276":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:12076:3312":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:6775:17279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:5260:16517":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:45083:5348":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:3175:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:11841:3271":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:4979:16490":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:33801:2306":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"8:0:2124":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:5298:19312":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:6519:17253":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:3061:2324":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:2978:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:2883:18453":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"0:19:1933":{"crate_id":0,"path":["scopeguard","defer_on_success"],"kind":"macro"},"16:4968:4301":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"18:735:23572":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:3211:4823":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:32695:5200":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"5:4232:2791":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:40726:5219":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:30945:2378":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:14587:3699":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:9970:2367":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:16069:4154":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"5:2999:32537":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:5601:19313":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:3451:2336":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:2440:6222":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:4312:5505":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:47737:5446":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:6664:17265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:11764:3258":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:5825:4199":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:2254:32572":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:41435:5107":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:44404:5154":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:4891:16312":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:22838:29278":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:15301:3935":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:44840:11910":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:42157:5264":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:3216:32065":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:7503:6153":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:10945:5135":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:7245:2476":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:12328:3332":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:12597:3364":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:12085:799":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"5:1136:5933":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:5250:16516":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:43708:29399":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:12557:3187":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:45075:5346":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:4011:6292":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:8300:16730":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:44844:11908":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"11:774:4802":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"11:1160:4817":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:4932:16484":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:8012:18068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:22802:5179":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:3685:2785":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"6:1680:13429":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:5699:2791":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:46124:5359":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:5713:2870":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:11510:3224":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:908:4799":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"11:2231:3233":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:16105:4161":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:10218:3010":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:43478:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:403:3020":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:43930:5294":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:45144:5353":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:3522:5499":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:5662:19314":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:44130:5137":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:11557:3228":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:1503:13412":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:10030:2372":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:8259:16724":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:7270:4360":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:45132:4830":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:10090:5664":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:7914:4694":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:3442:5251":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:9030:5648":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"11:1566:18381":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:3709:4275":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:9081:5656":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:13384:117":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:473:12512":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:725:6232":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:5389:130":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:12071:1040":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:47531:5415":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:4821:6307":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:5160:16507":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:22258:6513":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"11:434:33527":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:8285:3015":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:4:1121":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:5209:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:42965:2370":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:6562:17257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:7492:4928":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"11:430:33526":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:13674:3518":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:7446:17687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:41442:5250":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:15748:4074":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:48129:5450":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:40982:5241":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:8881:5641":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:13402:2853":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:6275:5532":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:3260:4272":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:2054:4907":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:13899:3576":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:39848:2325":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:10720:33604":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:5163:5514":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:12584:3168":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:48450:5464":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:6017:2799":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:40912:5233":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"11:2536:33515":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"18:765:23573":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:3504:5613":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:12454:3351":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:44234:5140":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:5671:16563":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"11:2124:4545":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:44848:11909":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:33195:2302":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:10272:6237":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:8085:5564":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:1580:13420":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:1517:13414":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:3856:4279":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:10659:6232":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:1968:6197":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:7366:4262":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:7328:4906":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"15:0:2130":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:45034:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:4214:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:1496:13411":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:16235:4193":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:13959:3585":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:45105:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:5014:16494":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:6227:2853":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:9964:5261":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:14271:3648":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:21417:30794":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:6613:2836":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:32775:2267":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:43461:5278":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:10887:33602":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:2268:5487":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:43912:5291":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:4131:6301":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:46457:5377":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"11:1051:4813":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:1040:4545":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:1445:4818":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:11160:23621":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:34037:2309":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:5536:16549":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:15418:3966":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:3423:2333":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:1607:4825":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:267:2765":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:5134:16505":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:7516:17692":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:3399:6261":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:13015:3348":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"19:0:1138":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:4248:6319":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:6547:2874":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:9916:19383":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:14386:3664":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:5084:859":{"crate_id":2,"path":["core","iter"],"kind":"module"},"18:726:3001":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:5331:3152":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:12075:1158":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"5:2492:5934":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:5706:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:8526:5283":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:11313:3207":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"16:6422:2754":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:40642:29425":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:44386:5318":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:7885:11813":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:15376:3957":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"9:356:18315":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"11:811:2804":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:42539:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:7926:5555":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:10622:33603":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:48067:5449":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:32684:5199":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"18:613:33611":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:7452:19323":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"9:391:18301":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:7653:4649":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"0:0:2010":{"crate_id":0,"path":["scopeguard"],"kind":"module"},"5:1120:32644":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:7194:33597":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:2422:2531":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:15957:4110":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:11688:3249":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:6900:17309":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:12543:3363":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"16:2617:4235":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:48275:5453":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:2859:4941":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:10237:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:7225:19322":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:5617:16556":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:14977:3861":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"5:3271:4825":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"18:698:2992":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:13325:3454":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:3354:5496":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:6511:5533":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:8351:5504":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:40733:5220":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:570:12525":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:13738:3547":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:15410:3965":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:11755:3257":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"5:1795:2804":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:3240:2326":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:42578:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:22794:5178":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:44032:5302":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:2553:4232":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:1826:5481":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:4897:16480":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"0:71:1922":{"crate_id":0,"path":["scopeguard","OnUnwind"],"kind":"enum"},"6:1639:13425":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:13173:3418":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:5031:16496":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:2671:2843":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:928:6154":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:6378:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:14177:3631":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:2353:638":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:4401:2793":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:14575:3348":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:5616:4318":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:6292:4442":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:10700:5557":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:33860:2310":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:5919:19316":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:6915:17310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:46655:5383":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:41034:5243":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:12408:3345":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:7064:2821":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:7401:2468":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:44395:5319":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:12357:5153":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:5174:6290":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:5512:5521":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:32702:2380":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"1:8631:5639":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:44634:5157":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:7706:19325":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:3211:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:7429:33594":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:11467:3221":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:11097:5139":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:2419:4226":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:21740:6428":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:47317:5412":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"14:31:4790":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:47879:5447":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"14:0:2129":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"11:844:6154":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:2687:6232":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:2035:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"9:423:18302":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:4202:5073":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:6880:16386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:13455:3479":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:8298:5316":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:43950:5296":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:47347:5413":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:42775:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:13024:19391":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:1621:13423":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:48340:5456":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:11858:2896":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:5005:29683":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:7461:17689":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:15799:4085":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:12030:3308":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:47381:5414":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:45042:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:6254:4438":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:5390:16534":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:6621:17260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:10439:3153":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:10906:5134":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"15:288:18406":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:5400:16535":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:3600:3056":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"11:1603:4821":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:22480:6232":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"11:102:33520":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:6768:17278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:10447:5496":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"6:7359:17686":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:30924:2289":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:13538:3496":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:3707:2765":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:11069:23615":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:9235:23631":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"6:8247:16722":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:8614:4799":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:13292:3448":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:903:2804":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"5:4040:2785":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:4674:4291":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:363:2424":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:11130:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:43293:2379":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:22060:30799":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:44856:11904":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"11:2548:33513":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"11:2403:4818":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:16223:4190":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:13877:3575":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:3024:2300":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:13208:30096":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:11443:3220":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:1596:4823":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:3039:2303":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:951:4810":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:7339:17684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:11621:3243":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:40699:5071":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:1862:5482":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:15992:4140":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"5:6657:2468":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:11018:5137":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:12043:3309":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:15582:4025":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:8377:5610":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:7684:4653":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:46776:5387":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:7679:2804":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:597:3025":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:10915:33609":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:4399:4283":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:8385:5619":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:8271:16726":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:9984:19385":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"5:7597:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:415:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:40740:11653":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:11189:3195":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:8425:30966":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:22715:5171":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:3741:4276":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"9:329:18355":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:12863:3382":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:10382:2885":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:10759:3167":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:8402:5621":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:1559:13418":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:21742:5168":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:13375:3463":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:21612:6232":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:3010:3051":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:4781:6350":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:5541:4308":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:4491:4286":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:42051:29306":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"11:2383:4799":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:5321:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:5985:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:12281:5148":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:42343:5268":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"11:328:33518":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:7337:2468":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:15655:4046":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:7938:5557":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:5352:16529":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:2175:19444":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:47081:5408":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:8981:6398":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:15324:3940":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"18:608:2975":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:11853:3272":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:11051:3182":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:12078:1544":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:2769:4242":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:13999:3591":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:11354:3213":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:1207:3028":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:8351:18265":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:11056:5138":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:6941:19321":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:6919:2814":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:8215:3003":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:880:4803":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:14994:3863":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:12023:5696":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:5794:2791":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:33567:2304":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:4109:6297":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:6331:4445":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:7584:17697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"5:2162:2398":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:44860:11918":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:13568:3508":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:8013:2339":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:43508:5288":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"11:1087:33531":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:11269:19416":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:43693:5289":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:11812:3267":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:5025:2791":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:9781:19380":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:4716:23765":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:7330:12394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:6599:4495":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:2365:2541":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"18:643:2957":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:5496:5520":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:39901:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:4462:4285":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:8004:5562":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:39189:2321":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:10982:19398":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:15289:3929":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:42437:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:46226:5363":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:8966:6399":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:7802:6140":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:1578:2468":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:6379:17180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:40009:2330":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:4821:3046":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"18:563:2966":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:497:12516":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:11293:19417":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:11579:5503":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:7350:11815":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:45024:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"9:481:18299":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:9858:19381":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:5649:6379":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:3190:1909":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:10877:3169":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:3758:4907":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:4937:4300":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:1565:13419":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"15:394:18417":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"16:6244:19317":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:4986:3048":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:21388:30801":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:13855:3568":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:0:883":{"crate_id":6,"path":["libc"],"kind":"module"},"16:5568:4317":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:8620:5638":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:5020:16495":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:5643:16560":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:11424:24922":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:5122:16504":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:5175:2799":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:15596:4031":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"18:0:2133":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:11115:3191":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:6152:4429":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:13272:3447":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:4572:6324":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:12096:1254":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:6745:4257":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"11:0:2127":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:482:2855":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"18:670:2988":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:4959:16487":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:1547:13417":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:14503:3688":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:2234:3036":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:2355:4223":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:12278:3329":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:40921:5234":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:6629:17261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:1934:2557":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:4942:16485":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:42278:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:14529:3690":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:5870:5087":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"11:837:4804":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:46411:5370":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:6077:4394":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:42287:4799":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:5720:5523":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:15456:3974":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:4572:4289":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:8236:5500":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:0:2131":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:13422:5166":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:7667:2880":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:10983:5136":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:44013:5300":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:42295:4818":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:41476:5109":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:256:3017":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:5521:4253":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:3250:32067":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:3545:4274":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"11:1007:4545":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:1671:13428":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:12993:19390":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:44542:5329":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:46487:5378":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:7889:4691":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:40843:5227":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:4720:23769":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:7837:5554":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:4871:4298":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:2688:11662":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:12516:3360":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"6:5266:16518":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:22449:2540":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:44559:5330":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:6505:17209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:2807:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:7070:24819":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:11125:5141":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"11:2369:4828":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:12086:800":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:1663:13427":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:6739:2765":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"11:1883:4799":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:1699:13431":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:22900:5192":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:40680:5215":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:5409:11575":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:44429:5216":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:7697:2864":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:504:2398":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"11:351:33523":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:6532:17255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:6874:17308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:1925:29314":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:2509:4230":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:5846:4349":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:14147:3612":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:44112:5132":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:13606:3516":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:213:2763":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:909:4819":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"11:1917:4824":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:4431:2791":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:8604:5509":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:3015:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"17:15190:3907":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:15281:3928":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:5132:5514":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:5831:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:42135:29395":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:5472:16542":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:39864:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:5346:4306":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"11:700:2468":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:6413:5091":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:13046:3396":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:4870:16477":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:6478:17252":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:41093:5246":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:34693:2315":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"11:800:2785":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:4396:1987":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:14325:3655":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:11358:5689":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:15266:3926":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:6738:17274":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:0:1536":{"crate_id":1,"path":["std"],"kind":"module"},"1:10666:24602":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:39939:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"18:598:33612":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:12089:1648":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:12604:11584":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:7376:4631":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:14341:3657":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:5382:16533":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:44000:5299":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"11:875:4809":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:2079:4909":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:3159:2334":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"0:74:1924":{"crate_id":0,"path":["scopeguard","OnSuccess"],"kind":"enum"},"17:9938:19384":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:6849:4532":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:12342:3337":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"5:1533:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:12683:3369":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:1717:2791":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:4017:6291":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:13363:3460":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:1393:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:6445:4458":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:6151:2865":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:40670:5214":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:8996:6400":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"5:835:2771":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:11657:5144":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:13344:3459":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:586:12527":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:10946:2888":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:7816:6141":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:7602:17698":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"11:742:4801":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:10738:23606":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:12650:11593":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:11077:11918":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:12768:19367":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:44492:11599":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:9485:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:42353:6143":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:7546:17694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:16249:4194":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:14051:3598":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:42853:5127":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:15023:3869":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:6491:17208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:46287:5365":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:43246:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:5861:5530":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:859:2468":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:5630:16558":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:46557:5380":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:6447:17249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:23944:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:48488:5466":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:5045:6355":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:15010:3864":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:3237:24543":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:7951:4699":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:7537:17693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:6698:17269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"11:710:4800":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:6689:17268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"11:673:4799":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:6052:2870":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:14986:3862":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:2789:4243":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:13308:3452":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}