{"root":"0:0:1834","crate_version":"1.1.0","includes_private":false,"index":{"2:11900:23792":{"id":"2:11900:23792","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11552:11084","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11910:412","str::split_whitespace":"2:11878:29008","str::rsplit":"2:11906:23796"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:42651:4805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:22:1756":{"id":"0:22:1756","crate_id":0,"name":"defer_on_unwind","span":{"filename":"src/lib.rs","begin":[279,0],"end":[283,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on unwinding from panic).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! defer_on_unwind {\n    ($($t:tt)*) => { ... };\n}"},"5:5334:24993":{"id":"5:5334:24993","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11973:23707"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:12:1731":{"id":"0:12:1731","crate_id":0,"name":"Strategy","span":{"filename":"src/lib.rs","begin":[201,0],"end":[205,1]},"visibility":"public","docs":"Controls in which cases the associated code should be run","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:13:1734"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:16","0:14","0:18"]}},"b:2:2533-0:70:1739":{"id":"b:2:2533-0:70:1739","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2503:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1739","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2536:127","2:2537:1455"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:72:659":{"id":"0:72:659","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9007:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8996:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9048:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1742","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:75:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3327-0:76:1744":{"id":"b:2:3327-0:76:1744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3325:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1744","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3329:1468"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8186:5906-0:23:1767":{"id":"a:2:8186:5906-0:23:1767","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8186:5906","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8186:5906","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8186:5906","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1767","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[448,0],"end":[462,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2940:1770","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1731","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:2930:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1767","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:64:580"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11871:32176":{"id":"2:11871:32176","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11916:1379","str::slice_mut_unchecked":"2:11872:32177","crate::ops::Index":"2:2989:2135"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11865:23758":{"id":"2:11865:23758","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:40661:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11869:23760":{"id":"2:11869:23760","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11883:23802":{"id":"2:11883:23802","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:11084"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11950:32192":{"id":"2:11950:32192","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:11084"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5315:32846":{"id":"5:5315:32846","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:2152","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6930:4714","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:2152","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6930:4714","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:39:1754":{"id":"0:39:1754","crate_id":0,"name":"guard_on_success","span":{"filename":"src/lib.rs","begin":[378,0],"end":[382,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"generic","inner":"T"}],["dropfn",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1767","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1744","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2940:1770","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2527-0:76:1744":{"id":"b:2:2527-0:76:1744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1744","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2529:685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2732:2077-0:73:1742":{"id":"a:2:2732:2077-0:73:1742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2732:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1742","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2527-0:23:1767":{"id":"b:2:2527-0:23:1767","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1767","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2529:685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11974:32197":{"id":"2:11974:32197","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4514:32197"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:42950:4897","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11927:2052":{"id":"2:11927:2052","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11552:11084","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11910:412","str::matches":"2:11927:2052"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:42855:4991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9048:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1744","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2526:2377":{"id":"2:2526:2377","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2500:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:35:1791":{"id":"0:35:1791","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[348,4],"end":[361,5]},"visibility":"public","docs":"“Defuse” the guard and extract the value without calling the closure.\n\n```\nextern crate scopeguard;\n\nuse scopeguard::{guard, ScopeGuard};\n\nfn conditional() -> bool { true }\n\nfn main() {\n    let mut guard = guard(Vec::new(), |mut v| v.clear());\n    guard.push(1);\n     \n    if conditional() {\n        // a condition maybe makes us decide to\n        // “defuse” the guard and get back its inner parts\n        let value = ScopeGuard::into_inner(guard);\n    } else {\n        // guard still exists in this branch\n    }\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["guard",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3327-0:23:1767":{"id":"b:2:3327-0:23:1767","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3325:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1767","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:3329:1468"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11872:32177":{"id":"2:11872:32177","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11916:1379","crate::ops::IndexMut":"2:2993:2136","str::slice_unchecked":"2:11871:32176"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2533-0:73:1742":{"id":"b:2:2533-0:73:1742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2503:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1742","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2536:127","2:2537:1455"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8185:5907-0:73:1742":{"id":"a:2:8185:5907-0:73:1742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8185:5907","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1742","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11924:32182":{"id":"2:11924:32182","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:11082","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11877:4738":{"id":"2:11877:4738","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:42637:2973","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11879:29021":{"id":"2:11879:29021","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11878:29008"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:42934:4996","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11878:29008":{"id":"2:11878:29008","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11879:29021"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:42925:4995","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:53:228":{"id":"0:53:228","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[432,4],"end":[432,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:13:1734":{"id":"0:13:1734","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[204,4],"end":[204,28]},"visibility":"default","docs":"Return `true` if the guard’s associated code should run\n(in the context where this method is called).","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:11973:23707":{"id":"2:11973:23707","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11882:29020":{"id":"2:11882:29020","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:42943:4827","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:18":{"id":"0:18","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[241,0],"end":[244,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:12:1731","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1744","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:19:1734"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:49":{"id":"0:49","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[428,0],"end":[437,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2940:1770","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1731","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:2906:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1767","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:53:228","0:54:544"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:8185:5907-0:70:1739":{"id":"a:2:8185:5907-0:70:1739","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8185:5907","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1739","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:0:1834":{"id":"0:0:1834","crate_id":0,"name":"scopeguard","span":{"filename":"src/lib.rs","begin":[1,0],"end":[578,1]},"visibility":"public","docs":"A scope guard will run a given closure when it goes out of scope,\neven if the code between panics.\n(as long as panic doesn't abort)\n\n# Examples\n\n## Hello World\n\nThis example creates a scope guard with an example function:\n\n```\nextern crate scopeguard;\n\nfn f() {\n    let _guard = scopeguard::guard((), |_| {\n        println!(\"Hello Scope Exit!\");\n    });\n\n    // rest of the code here.\n\n    // Here, at the end of `_guard`'s scope, the guard's closure is called.\n    // It is also called if we exit this scope through unwinding instead.\n}\n# fn main() {\n#    f();\n# }\n```\n\n## `defer!`\n\nUse the `defer` macro to run an operation at scope exit,\neither regular scope exit or during unwinding from a panic.\n\n```\n#[macro_use(defer)] extern crate scopeguard;\n\nuse std::cell::Cell;\n\nfn main() {\n    // use a cell to observe drops during and after the scope guard is active\n    let drop_counter = Cell::new(0);\n    {\n        // Create a scope guard using `defer!` for the current scope\n        defer! {\n            drop_counter.set(1 + drop_counter.get());\n        }\n\n        // Do regular operations here in the meantime.\n\n        // Just before scope exit: it hasn't run yet.\n        assert_eq!(drop_counter.get(), 0);\n\n        // The following scope end is where the defer closure is called\n    }\n    assert_eq!(drop_counter.get(), 1);\n}\n```\n\n## Scope Guard with Value\n\nIf the scope guard closure needs to access an outer value that is also\nmutated outside of the scope guard, then you may want to use the scope guard\nwith a value. The guard works like a smart pointer, so the inner value can\nbe accessed by reference or by mutable reference.\n\n### 1. The guard owns a file\n\nIn this example, the scope guard owns a file and ensures pending writes are\nsynced at scope exit.\n\n```\nextern crate scopeguard;\n\nuse std::fs::*;\nuse std::io::{self, Write};\n# // Mock file so that we don't actually write a file\n# struct MockFile;\n# impl MockFile {\n#     fn create(_s: &str) -> io::Result<Self> { Ok(MockFile) }\n#     fn write_all(&self, _b: &[u8]) -> io::Result<()> { Ok(()) }\n#     fn sync_all(&self) -> io::Result<()> { Ok(()) }\n# }\n# use self::MockFile as File;\n\nfn try_main() -> io::Result<()> {\n    let f = File::create(\"newfile.txt\")?;\n    let mut file = scopeguard::guard(f, |f| {\n        // ensure we flush file at return or panic\n        let _ = f.sync_all();\n    });\n    // Access the file through the scope guard itself\n    file.write_all(b\"test me\\n\").map(|_| ())\n}\n\nfn main() {\n    try_main().unwrap();\n}\n\n```\n\n### 2. The guard restores an invariant on scope exit\n\n```\nextern crate scopeguard;\n\nuse std::mem::ManuallyDrop;\nuse std::ptr;\n\n// This function, just for this example, takes the first element\n// and inserts it into the assumed sorted tail of the vector.\n//\n// For optimization purposes we temporarily violate an invariant of the\n// Vec, that it owns all of its elements.\n//\n// The safe approach is to use swap, which means two writes to memory,\n// the optimization is to use a “hole” which uses only one write of memory\n// for each position it moves.\n//\n// We *must* use a scope guard to run this code safely. We\n// are running arbitrary user code (comparison operators) that may panic.\n// The scope guard ensures we restore the invariant after successful\n// exit or during unwinding from panic.\nfn insertion_sort_first<T>(v: &mut Vec<T>)\n    where T: PartialOrd\n{\n    struct Hole<'a, T: 'a> {\n        v: &'a mut Vec<T>,\n        index: usize,\n        value: ManuallyDrop<T>,\n    }\n\n    unsafe {\n        // Create a moved-from location in the vector, a “hole”.\n        let value = ptr::read(&v[0]);\n        let mut hole = Hole { v: v, index: 0, value: ManuallyDrop::new(value) };\n\n        // Use a scope guard with a value.\n        // At scope exit, plug the hole so that the vector is fully\n        // initialized again.\n        // The scope guard owns the hole, but we can access it through the guard.\n        let mut hole_guard = scopeguard::guard(hole, |hole| {\n            // plug the hole in the vector with the value that was // taken out\n            let index = hole.index;\n            ptr::copy_nonoverlapping(&*hole.value, &mut hole.v[index], 1);\n        });\n\n        // run algorithm that moves the hole in the vector here\n        // move the hole until it's in a sorted position\n        for i in 1..hole_guard.v.len() {\n            if *hole_guard.value >= hole_guard.v[i] {\n                // move the element back and the hole forward\n                let index = hole_guard.index;\n                ptr::copy_nonoverlapping(&hole_guard.v[index + 1], &mut hole_guard.v[index], 1);\n                hole_guard.index += 1;\n            } else {\n                break;\n            }\n        }\n\n        // When the scope exits here, the Vec becomes whole again!\n    }\n}\n\nfn main() {\n    let string = String::from;\n    let mut data = vec![string(\"c\"), string(\"a\"), string(\"b\"), string(\"d\")];\n    insertion_sort_first(&mut data);\n    assert_eq!(data, vec![\"a\", \"b\", \"c\", \"d\"]);\n}\n\n```\n\n\n# Crate Features\n\n- `use_std`\n  + Enabled by default. Enables the `OnUnwind` and `OnSuccess` strategies.\n  + Disable to use `no_std`.\n\n# Rust Version\n\nThis version of the crate requires Rust 1.20 or later.\n\nThe scopeguard 1.x release series will use a carefully considered version\nupgrade policy, where in a later 1.x version, we will raise the minimum\nrequired Rust version.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/scopeguard/1/\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:12:1731","0:70:1739","0:73:1742","0:76:1744","0:23:1767","0:36:1751","0:39:1754","0:42:1757","0:20:1748","0:21:1753","0:22:1756"],"is_stripped":false}},"2:11862:23761":{"id":"2:11862:23761","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11927:1476"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11941:32187":{"id":"2:11941:32187","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11850":{"id":"2:11850","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11851:802","2:11852:2384","2:11853:32172","2:11854:32173","2:11856:32174","2:11859:23328","2:11860:32175","2:11861:312","2:11862:23761","2:11863:1818","2:11865:23758","2:11867:23759","2:11869:23760","2:11871:32176","2:11872:32177","2:11873:23784","2:11874:23785","2:11875:4828","2:11876:5005","2:11877:4738","2:11878:29008","2:11879:29021","2:11880:28746","2:11881:32178","2:11882:29020","2:11883:23802","2:11886:23803","2:11889:23804","2:11892:2424","2:11896:2383","2:11900:23792","2:11903:23794","2:11906:23796","2:11909:32179","2:11912:32180","2:11915:23798","2:11918:23800","2:11921:32181","2:11924:32182","2:11927:2052","2:11930:32183","2:11933:32184","2:11936:32185","2:11939:32186","2:11941:32187","2:11943:32188","2:11945:32189","2:11946:32190","2:11947:32191","2:11950:32192","2:11953:22525","2:11956:23805","2:11959:32193","2:11962:32194","2:11965:32195","2:11968:32196","2:11970:23704","2:11971:23705","2:11972:23706","2:11973:23707","2:11974:32197","2:11976:5698","2:11977:32198"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11856:32174":{"id":"2:11856:32174","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11854:32173"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2529:685":{"id":"2:2529:685","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2236-0:73:1742":{"id":"b:2:2236-0:73:1742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2230:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1742","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2238:22073"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2233-0:23:1767":{"id":"b:2:2233-0:23:1767","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2227:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1767","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2235:2039"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:21:1753":{"id":"0:21:1753","crate_id":0,"name":"defer_on_success","span":{"filename":"src/lib.rs","begin":[265,0],"end":[269,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on successful scope exit).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! defer_on_success {\n    ($($t:tt)*) => { ... };\n}"},"2:11953:22525":{"id":"2:11953:22525","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:11084"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5322:32848":{"id":"5:5322:32848","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5332:5818":{"id":"5:5332:5818","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11947:32191":{"id":"2:11947:32191","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:11084"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11577:11081","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11861:312":{"id":"2:11861:312","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11862:23761","`u8`":"1:11927:1476"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[229,0],"end":[232,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:12:1731","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1739","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:15:1734"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11889:23804":{"id":"2:11889:23804","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:11084"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:11082","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11906:23796":{"id":"2:11906:23796","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11552:11084","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11910:412","str::split":"2:11900:23792"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:42669:4810","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:11082","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2233-0:73:1742":{"id":"b:2:2233-0:73:1742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2227:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1742","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2235:2039"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11930:32183":{"id":"2:11930:32183","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11552:11084","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11910:412","str::matches":"2:11927:2052"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:42873:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:11082","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2732:2077-0:76:1744":{"id":"a:2:2732:2077-0:76:1744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2732:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1744","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2523-0:76:1744":{"id":"b:2:2523-0:76:1744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2497:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1744","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:2377"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:15:1734":{"id":"0:15:1734","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[231,4],"end":[231,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2238:22073":{"id":"2:2238:22073","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3327-0:70:1739":{"id":"b:2:3327-0:70:1739","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3325:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1739","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3329:1468"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:71":{"id":"0:71","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9048:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1739","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:72:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2682:226-0:73:1742":{"id":"a:2:2682:226-0:73:1742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2682:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1742","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2668:218-0:76:1744":{"id":"a:2:2668:218-0:76:1744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2668:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1744","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2668:218-0:70:1739":{"id":"a:2:2668:218-0:70:1739","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2668:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1739","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:69:659":{"id":"0:69:659","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[469,4],"end":[473,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9007:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8996:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11874:23785":{"id":"2:11874:23785","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11873:23784"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11945:32189":{"id":"2:11945:32189","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11965:32195":{"id":"2:11965:32195","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:11084"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:11082","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11853:32172":{"id":"2:11853:32172","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:23:1767":{"id":"b:2:2523-0:23:1767","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2497:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1767","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2526:2377"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11873:23784":{"id":"2:11873:23784","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11874:23785"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11859:23328":{"id":"2:11859:23328","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11120:11085"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:20:1748":{"id":"0:20:1748","crate_id":0,"name":"defer","span":{"filename":"src/lib.rs","begin":[251,0],"end":[255,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (always run).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.","links":{},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! defer {\n    ($($t:tt)*) => { ... };\n}"},"b:2:2538-0:70:1739":{"id":"b:2:2538-0:70:1739","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2497:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1739","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:127","2:2542:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2732:2077-0:23:1767":{"id":"a:2:2732:2077-0:23:1767","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2732:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2732:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2732:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1767","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:64:580":{"id":"0:64:580","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[452,4],"end":[461,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:42:1757":{"id":"0:42:1757","crate_id":0,"name":"guard_on_unwind","span":{"filename":"src/lib.rs","begin":[413,0],"end":[417,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.\n\n## Examples\n\nFor performance reasons, or to emulate “only run guard on unwind” in\nno-std environments, we can also use the default guard and simply manually\ndefuse it at the end of scope like the following example. (The performance\nreason would be if the [`OnUnwind`]'s call to [std::thread::panicking()] is\nan issue.)\n\n```\nextern crate scopeguard;\n\nuse scopeguard::ScopeGuard;\n# fn main() {\n{\n    let guard = scopeguard::guard((), |_| {});\n\n    // rest of the code here\n\n    // we reached the end of scope without unwinding - defuse it\n    ScopeGuard::into_inner(guard);\n}\n# }\n```","links":{"std::thread::panicking()":"1:502:1019","`OnUnwind`":"0:73:1742"},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"generic","inner":"T"}],["dropfn",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1767","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1742","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2940:1770","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11876:5005":{"id":"2:11876:5005","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11910:412"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:42627:4985","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11943:32188":{"id":"2:11943:32188","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8186:5906-0:73:1742":{"id":"a:2:8186:5906-0:73:1742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8186:5906","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1742","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11959:32193":{"id":"2:11959:32193","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:11084"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:11082","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2527-0:73:1742":{"id":"b:2:2527-0:73:1742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1742","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2529:685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11977:32198":{"id":"2:11977:32198","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4512:32198"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:42968:4889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11972:23706":{"id":"2:11972:23706","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11886:23803":{"id":"2:11886:23803","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:11084"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:54:544":{"id":"0:54:544","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[434,4],"end":[436,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2542:1454":{"id":"2:2542:1454","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8186:5906-0:70:1739":{"id":"a:2:8186:5906-0:70:1739","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8186:5906","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1739","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2537:1455":{"id":"2:2537:1455","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11968:32196":{"id":"2:11968:32196","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11514:126","`FromStr`":"2:11513:5919"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11513:5919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11513:5919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11918:23800":{"id":"2:11918:23800","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11910:412","str::splitn":"2:11915:23798","self::pattern":"2:11552:11084"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:42773:4813","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:11082","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5319:32847":{"id":"5:5319:32847","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5314":{"id":"5:5314","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5315:32846","5:5316:2096","5:5319:32847","5:5322:32848","5:5330:32849","5:5331:32850","5:5332:5818","5:5333:24992","5:5334:24993"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:59:546":{"id":"0:59:546","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[443,4],"end":[445,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2236-0:70:1739":{"id":"b:2:2236-0:70:1739","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2230:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1739","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2238:22073"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2668:218-0:23:1767":{"id":"a:2:2668:218-0:23:1767","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2668:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2668:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2668:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1767","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2538-0:23:1767":{"id":"b:2:2538-0:23:1767","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2497:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1767","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2541:127","2:2542:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2533-0:23:1767":{"id":"b:2:2533-0:23:1767","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2503:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1767","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2536:127","2:2537:1455"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11852:2384":{"id":"2:11852:2384","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11854:32173":{"id":"2:11854:32173","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2668:218-0:73:1742":{"id":"a:2:2668:218-0:73:1742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2668:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1742","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11903:23794":{"id":"2:11903:23794","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:11084"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11376:4807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2233-0:76:1744":{"id":"b:2:2233-0:76:1744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2227:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1744","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2235:2039"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11971:23705":{"id":"2:11971:23705","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73:1742":{"id":"0:73:1742","crate_id":0,"name":"OnUnwind","span":{"filename":"src/lib.rs","begin":[220,0],"end":[220,20]},"visibility":"public","docs":"Run on scope exit through unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:8185:5907-0:73:1742","a:2:2732:2077-0:73:1742","a:2:2682:226-0:73:1742","a:2:2668:218-0:73:1742","a:2:8186:5906-0:73:1742","b:2:2236-0:73:1742","b:2:2538-0:73:1742","b:2:2233-0:73:1742","b:2:2527-0:73:1742","b:2:2523-0:73:1742","b:2:3327-0:73:1742","b:2:2533-0:73:1742","0:16","0:74"]}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[464,0],"end":[474,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9048:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2940:1770","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1731","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9048:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1767","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:69:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2235:2039":{"id":"2:2235:2039","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11970:23704":{"id":"2:11970:23704","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11936:32185":{"id":"2:11936:32185","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11552:11084","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11910:412","str::match_indices":"2:11933:32184"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:42819:4990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:11082","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2732:2077-0:70:1739":{"id":"a:2:2732:2077-0:70:1739","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2732:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1739","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11962:32194":{"id":"2:11962:32194","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:11084"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:17:1734":{"id":"0:17:1734","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[237,4],"end":[237,56]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:19:1734":{"id":"0:19:1734","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[243,4],"end":[243,57]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2233-0:70:1739":{"id":"b:2:2233-0:70:1739","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2227:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1739","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2235:2039"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11921:32181":{"id":"2:11921:32181","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2536:127":{"id":"2:2536:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"b:2:2538-0:73:1742":{"id":"b:2:2538-0:73:1742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2497:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1742","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:127","2:2542:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:75:659":{"id":"0:75:659","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9007:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8996:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:30":{"id":"0:30","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[308,0],"end":[362,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2940:1770","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1731","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1767","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:34:1777","0:35:1791"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2541:127":{"id":"2:2541:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:31759:5926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:11956:23805":{"id":"2:11956:23805","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:11084"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:11082","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5333:24992":{"id":"5:5333:24992","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11972:23706"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11880:28746":{"id":"2:11880:28746","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:42905:4993","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3327-0:73:1742":{"id":"b:2:3327-0:73:1742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3325:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1742","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3329:1468"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8185:5907-0:23:1767":{"id":"a:2:8185:5907-0:23:1767","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8185:5907","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8185:5907","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8185:5907","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1767","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2682:226-0:70:1739":{"id":"a:2:2682:226-0:70:1739","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2682:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1739","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11881:32178":{"id":"2:11881:32178","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:42915:4994","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8185:5907-0:76:1744":{"id":"a:2:8185:5907-0:76:1744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8185:5907","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1744","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[235,0],"end":[238,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:12:1731","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1742","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:17:1734"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2682:226-0:76:1744":{"id":"a:2:2682:226-0:76:1744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2682:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1744","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2533-0:76:1744":{"id":"b:2:2533-0:76:1744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2503:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1744","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2536:127","2:2537:1455"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:78:659":{"id":"0:78:659","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9007:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8996:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11860:32175":{"id":"2:11860:32175","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11915:23798":{"id":"2:11915:23798","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:11084","str::rsplitn":"2:11918:23800"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:42755:4812","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:23:1767":{"id":"0:23:1767","crate_id":0,"name":"ScopeGuard","span":{"filename":"src/lib.rs","begin":[298,0],"end":[306,1]},"visibility":"public","docs":"`ScopeGuard` is a scope guard that may own a protected value.\n\nIf you place a guard in a local variable, the closure can\nrun regardless how you leave the scope — through regular return or panic\n(except if panic or other code aborts; so as long as destructors run).\nIt is run only once.\n\nThe `S` parameter for [`Strategy`](trait.Strategy.html) determines if\nthe closure actually runs.\n\nThe guard's closure will be called with the held value in the destructor.\n\nThe `ScopeGuard` implements `Deref` so that you can access the inner value.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1739","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2940:1770","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1731","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["0:30","a:2:8185:5907-0:23:1767","a:2:2732:2077-0:23:1767","a:2:2668:218-0:23:1767","a:2:8186:5906-0:23:1767","b:2:2236-0:23:1767","b:2:2538-0:23:1767","b:2:2233-0:23:1767","b:2:2527-0:23:1767","b:2:2523-0:23:1767","b:2:3327-0:23:1767","b:2:2533-0:23:1767","0:55","0:49","0:45","0:65","0:60"]}},"2:11976:5698":{"id":"2:11976:5698","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4515:5698"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:42959:4750","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5330:32849":{"id":"5:5330:32849","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11909:32179":{"id":"2:11909:32179","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11552:11084","str::split":"2:11900:23792","prim@char":"1:11910:412","`DoubleEndedIterator`":"2:7174:120","str::rsplit_terminator":"2:11912:32180"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:42701:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2236-0:23:1767":{"id":"b:2:2236-0:23:1767","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2230:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1767","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2238:22073"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[422,0],"end":[426,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2682:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2940:1770","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1731","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2682:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1767","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11912:32180":{"id":"2:11912:32180","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11552:11084","str::split":"2:11900:23792","prim@char":"1:11910:412","str::split_terminator":"2:11909:32179"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:42719:4988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:11082","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11933:32184":{"id":"2:11933:32184","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11552:11084","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11910:412","str::rmatch_indices":"2:11936:32185"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:42801:4989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:73:1742":{"id":"b:2:2523-0:73:1742","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2497:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnUnwind","id":"0:73:1742","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:2377"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5316:2096":{"id":"5:5316:2096","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:36:1751":{"id":"0:36:1751","crate_id":0,"name":"guard","span":{"filename":"src/lib.rs","begin":[367,0],"end":[371,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"generic","inner":"T"}],["dropfn",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1767","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1739","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2940:1770","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11851:802":{"id":"2:11851:802","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11910:412"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5331:32850":{"id":"5:5331:32850","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:277:2152","`String`":"5:7179:222"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:2152","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6930:4714","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:70:1739":{"id":"0:70:1739","crate_id":0,"name":"Always","span":{"filename":"src/lib.rs","begin":[213,0],"end":[213,18]},"visibility":"public","docs":"Always run on scope exit.\n\n“Always” run: on regular exit from a scope or on unwinding from a panic.\nCan not run on abort, process exit, and other catastrophic events where\ndestructors don’t run.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:8185:5907-0:70:1739","a:2:2732:2077-0:70:1739","a:2:2682:226-0:70:1739","a:2:2668:218-0:70:1739","a:2:8186:5906-0:70:1739","b:2:2236-0:70:1739","b:2:2538-0:70:1739","b:2:2233-0:70:1739","b:2:2527-0:70:1739","b:2:2523-0:70:1739","b:2:3327-0:70:1739","b:2:2533-0:70:1739","0:71","0:14"]}},"2:11939:32186":{"id":"2:11939:32186","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:76:1744":{"id":"0:76:1744","crate_id":0,"name":"OnSuccess","span":{"filename":"src/lib.rs","begin":[227,0],"end":[227,21]},"visibility":"public","docs":"Run on regular scope exit, when not unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:8185:5907-0:76:1744","a:2:2732:2077-0:76:1744","a:2:2682:226-0:76:1744","a:2:2668:218-0:76:1744","a:2:8186:5906-0:76:1744","b:2:2236-0:76:1744","b:2:2538-0:76:1744","b:2:2233-0:76:1744","b:2:2527-0:76:1744","b:2:2523-0:76:1744","b:2:3327-0:76:1744","b:2:2533-0:76:1744","0:18","0:77"]}},"2:11892:2424":{"id":"2:11892:2424","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:40661:177","prim@char":"1:11910:412","self::pattern":"2:11552:11084"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:55":{"id":"0:55","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[439,0],"end":[446,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2940:1770","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:12:1731","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:2919:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1767","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:59:546"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:8186:5906-0:76:1744":{"id":"a:2:8186:5906-0:76:1744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8186:5906","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1744","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11863:1818":{"id":"2:11863:1818","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:40661:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11896:2383":{"id":"2:11896:2383","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:40661:177","prim@char":"1:11910:412","self::pattern":"2:11552:11084"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:11082","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11875:4828":{"id":"2:11875:4828","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11910:412"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:42621:4820","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2538-0:76:1744":{"id":"b:2:2538-0:76:1744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2497:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1744","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:127","2:2542:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11946:32190":{"id":"2:11946:32190","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11867:23759":{"id":"2:11867:23759","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:34:1777":{"id":"0:34:1777","crate_id":0,"name":"with_strategy","span":{"filename":"src/lib.rs","begin":[317,4],"end":[323,5]},"visibility":"public","docs":"Create a `ScopeGuard` that owns `v` (accessible through deref) and calls\n`dropfn` when its destructor runs.\n\nThe `Strategy` decides whether the scope guard's closure should run.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"generic","inner":"T"}],["dropfn",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"ScopeGuard","id":"0:23:1767","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2527-0:70:1739":{"id":"b:2:2527-0:70:1739","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1739","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2529:685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3329:1468":{"id":"2:3329:1468","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:38987:4879","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2236-0:76:1744":{"id":"b:2:2236-0:76:1744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2230:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnSuccess","id":"0:76:1744","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2238:22073"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2523-0:70:1739":{"id":"b:2:2523-0:70:1739","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2497:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Always","id":"0:70:1739","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:2377"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}}},"paths":{"5:3146:4634":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:4322:15286":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:13145:3796":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:2177:32114":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:535:4019":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:40645:4795":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:43390:11295":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:41698:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:11090:3303":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:6752:5977":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:7136:150":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:6743:16434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:12134:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:7335:34184":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:5697:31316":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:46568:5129":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:7201:16808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:3922:5836":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:7627:2332":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"18:507:2916":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"11:1628:1767":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:4413:2195":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:38822:198":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:12355:2795":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:12126:3509":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:7280:28621":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:4571:15312":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:4253:5189":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:1704:12829":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:2830:2803":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:20652:5979":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:2298:17150":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:4396:15294":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:4573:23461":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:5571:4066":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:4662:15320":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:355:2343":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:1849:5163":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:2800:2119":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:12646:3613":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:11628:3419":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:5643:4133":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:38838:196":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"18:96:21946":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:11484:3378":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:11923:733":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"5:1451:4713":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:7027:2389":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:9696:3128":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:10015:3181":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:8821:2389":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:43151:5008":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:30603:2926":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"11:1534:4632":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:4369:15291":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4224:15278":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:8827:5207":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"0:20:1748":{"crate_id":0,"path":["scopeguard","defer"],"kind":"macro"},"5:2900:32047":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:9907:3168":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:40744:4944":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:10598:3294":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:2572:5169":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:2761:2111":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:5690:15993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:2808:4057":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"9:174:17099":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:13135:3795":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:43072:5003":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:11265:4821":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:8255:5296":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:8974:5340":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:9265:3109":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:13053:3775":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:8285:5894":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"11:2205:4732":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:5938:16012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:39311:11156":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:43658:5027":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:6307:4062":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"9:234:4960":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"5:4253:243":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"11:119:2698":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:6643:16428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:5594:4068":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:7446:15505":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:1898:5164":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"5:3076:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:2574:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:6524:2762":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:933:4617":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:6254:4242":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:8997:2179":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:8757:184":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:3462:5809":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:4757:15332":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:6919:34182":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:5745:2748":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:46634:5135":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:6164:4205":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:7095:11201":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:5698:15994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:6943:18040":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:3504:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:8933:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:21249:5148":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:10257:3226":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:2358:5780":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:38926:201":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"18:521:21958":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:2930:1806":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:6236:4239":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:5402:3096":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:41418:2183":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:7197:2150":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:7743:4069":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:8490:5192":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"14:160:4603":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:9721:3148":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:2719:2076":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:10666:5243":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:6696:18039":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:6480:5939":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:1436:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:42627:4985":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:9946:3173":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:8156:4083":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:8931:2977":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:8500:4612":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:11410:3367":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:11274:2835":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"6:5959:16015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:6608:11203":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:929:4614":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:7103:5344":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:7481:15510":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"18:609:2934":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:20640:5850":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:9028:3104":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:11914:310":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:7588:4450":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:39580:4762":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:13488:3884":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:21570:29664":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:48965:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10660:3268":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:10052:3187":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:8181:5296":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:10743:3280":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"11:810:4631":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:6890:4073":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"7:79:17020":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:5741:18034":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:868:4612":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:3878:5833":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:1620:2098":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:9312:3110":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:13651:3945":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"11:1044:17111":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:4575:23463":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:46764:5141":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:2771:2113":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:8155:4927":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:6575:18038":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:10798:18106":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:1714:2476":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:21357:5982":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:7511:16996":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"9:352:17047":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:10840:3287":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:119:11583":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"11:1138:4629":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:42755:4812":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:9826:3156":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:42959:4750":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:1597:4637":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:1541:12814":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:1919:18146":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:9839:3157":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:12550:3595":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:5708:4137":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:11100:5221":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:9075:217":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:8175:4993":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:10354:3233":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:40659:179":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:11024:5328":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"11:1845:2704":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:2678:224":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:5910:16009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"9:502:4694":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:3266:2997":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:8909:2973":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:7767:18044":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:9275:34191":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:13332:3840":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:1731:12832":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:38980:2141":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:21683:30141":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:4994:15357":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:41774:2192":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:6851:2962":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:12006:3492":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:9546:2790":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:5967:33825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:2847:2128":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:4751:15331":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:2776:2112":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:10835:4691":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:44293:5030":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:48939:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:4331:2742":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:11060:3268":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:13316:3838":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:4483:15305":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:1609:12821":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:1988:182":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:2491:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:962:4623":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:8573:18103":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"0:36:1751":{"crate_id":0,"path":["scopeguard","guard"],"kind":"function"},"2:41975:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:11177:5370":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:44583:5042":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:8090:4511":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:4468:15303":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:10569:3255":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:42559:4980":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:44339:5032":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:7557:4447":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4681:15322":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:11909:926":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:6628:16426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:31799:4873":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:45584:5087":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:1728:31360":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:5917:16010":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:41096:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:12607:3603":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:4597:15314":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:11572:11082":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:6106:2754":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:10080:3190":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:6649:16429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:12358:3559":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:567:11911":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:6728:4311":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:6791:16438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:12923:3729":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:5561:2806":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:4636:5893":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"11:1859:4635":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:12959:3758":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:46608:5133":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:1589:12819":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:22175:2335":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:4122:4754":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:39520:4910":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:11459:3376":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:2448:4042":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:9311:11170":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:1604:12820":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"0:0:1834":{"crate_id":0,"path":["scopeguard"],"kind":"module"},"17:9628:3139":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:6477:5218":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:12085:3503":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:1410:4631":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:10626:3264":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:39414:4905":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:3264:2704":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"5:3138:4636":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:7948:5249":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:44361:5033":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:4501:15307":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:21761:5831":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:8025:4505":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:45318:5082":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:46428:5125":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:42378:4967":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:975:2984":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:6220:2712":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:41658:31359":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:5500:5925":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"11:2069:4624":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:920:4631":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:9382:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"11:815:4617":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:9670:3145":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:13506:3887":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:878:4615":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:1600:2712":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:13477:3880":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:21662:30164":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:2732:2077":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:10092:3191":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:8389:18097":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:10936:3293":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:5847:4155":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:3937:2712":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:1065:4624":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:46597:5132":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:7859:18045":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:3640:3009":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:13763:3976":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:49004:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:30205:30240":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"5:6992:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:8431:5319":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:11917:1458":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:46226:5122":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:12046:3498":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"11:1518:17112":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:11892:22517":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:44916:5058":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:8797:5329":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:7498:4445":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:531:11906":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:11395:5185":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:12980:3763":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:641:5154":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:13041:3770":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:40597:4942":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:20809:5850":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:2694:4052":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:8281:5307":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:46687:5138":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:11879:3472":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:2867:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:11520:3387":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:31795:4872":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:7218:16809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:7686:5238":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:9917:3169":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:43250:5014":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:9973:3175":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:21092:5984":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:11081:22169":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:7709:5241":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:3323:4929":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"11:1085:4627":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:30027:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:11036:22528":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:10747:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:9008:22339":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:40710:2388":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:8779:29626":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:39341:4899":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"5:2075:4717":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:6990:4350":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:6911:2809":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:653:11962":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"0:76:1744":{"crate_id":0,"path":["scopeguard","OnSuccess"],"kind":"enum"},"16:7244:34187":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:562:2983":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:4218:15277":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:8979:34188":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:9138:3106":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:4932:4114":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:6146:192":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"14:31:4603":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:11171:5224":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"18:564:2925":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:1695:12828":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:2825:2123":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:11922:736":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:13292:3829":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:4611:5832":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:4664:659":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:13612:3930":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"11:1836:2389":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"11:646:4630":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:3612:5829":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:38862:197":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"11:697:4614":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:2859:2131":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:43670:4639":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:42447:4971":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:7676:5159":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:8823:2971":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:9478:3123":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:45060:5062":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:41016:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:2989:2135":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:40727:4630":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:6702:11195":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:9933:3171":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:46702:5139":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:6080:2795":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:8072:4509":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:9188:34193":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:1716:5857":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:45013:5061":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:3190:30932":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:5437:5206":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:2668:4051":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:9866:3159":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:5693:4134":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:39491:4907":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:5000:15358":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"7:32:17013":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:10505:3247":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:11240:5231":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:2904:32049":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:46304:5123":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:7527:2823":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:40777:4946":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:22208:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"9:445:17032":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:5717:5213":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:3127:26100":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:5573:230":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:3112:4635":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:13324:3839":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:1649:1074":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:7606:2334":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:20601:5988":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:2548:2785":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:10045:4809":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:2524:4045":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:9394:2827":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:4241:4756":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:7204:4741":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:40633:4793":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"5:3172:4637":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:3325:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:11921:634":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:4733:15329":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:4346:15288":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:2680:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:12318:3555":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"9:481:17031":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:8170:4520":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:6671:4298":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"11:2184:30497":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:6634:16427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:7590:2345":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:13265:3825":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:5071:4118":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:10989:2998":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:9201:4802":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:10377:3234":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:7132:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"5:5167:11072":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:11109:3306":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:10951:2831":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:8168:4805":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:7837:4468":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:1442:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:40508:4792":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:43398:11290":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:35:2708":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:11721:3425":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:2230:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:1083:4629":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:10173:4813":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:4439:15300":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:14:2055":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:11120:11085":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:8651:3095":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:4457:15302":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:39305:4750":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:10691:18214":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:3166:5174":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:2339:187":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:11557:4798":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:13639:3942":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:42701:4987":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:4673:15321":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:9068:34192":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:3446:4089":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:8269:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:11935:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"18:574:2916":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:2931:17176":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:45508:5085":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:621:4708":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:6488:4261":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:40871:181":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:7529:11199":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:9350:34197":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:9080:5221":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"14:7:4603":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:20367:2926":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:8774:30721":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:11844:3468":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:7434:15503":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:6904:4333":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:11933:1529":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:2357:4038":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:9895:3164":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:43567:203":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:10429:5178":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"16:7259:4944":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:22373:4867":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"5:5761:5584":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:4656:15319":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:2104:32115":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"11:393:34110":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:11925:735":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:2572:4047":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:4001:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"5:3151:33236":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:4687:15323":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:4703:15325":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:40574:30149":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:5245:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:10705:3273":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:4093:5860":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:21097:6007":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:44648:5044":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"11:659:2389":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:1568:2389":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:45974:5120":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:10270:3227":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:42943:4827":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:10402:3236":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:10670:3270":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:42595:4981":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:13625:3936":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:5346:4121":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:39551:4913":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:46649:5136":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:11354:5184":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:10721:3275":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:42205:29913":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:1786:5160":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:5786:15963":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:9192:2621":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:9453:18117":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"18:755:2966":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:9038:34189":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:5724:4139":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:11946:3483":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:7366:18042":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:12344:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:9063:192":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:9534:3132":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:2370:5786":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:2906:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:6442:4260":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:12386:203":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:43035:11096":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:13426:3869":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:11376:4807":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:43057:4998":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:55:4496":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"2:44494:5038":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:6094:16046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:13121:3792":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"10:36:34107":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"5:771:2715":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"18:582:2926":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:2385:1954":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:242:2975":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:9469:3121":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:11220:3325":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"0:73:1742":{"crate_id":0,"path":["scopeguard","OnUnwind"],"kind":"enum"},"16:5886:4158":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:11653:3423":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:13367:3851":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:11154:2833":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:12467:5729":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:4676:5849":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"18:0:1947":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:2679:223":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:30011:2102":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:7870:5248":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:10039:3185":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:41296:4800":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:7522:5715":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:4618:15315":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:7077:18041":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:7428:15502":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"4:0:1937":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:3168:5175":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"0:23:1767":{"crate_id":0,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"1:10679:5363":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:2302:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:2500:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:2786:4056":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:44564:5041":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:7669:4080":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:44445:5036":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:2993:2136":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:39621:4920":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:3980:5840":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:4981:15355":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:11163:3313":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:2333:180":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:38904:199":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:2216:5773":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:10026:3182":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:11915:1349":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"5:7162:4739":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:7572:34183":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:6868:4331":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:5660:15934":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:1185:4360":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"0:12:1731":{"crate_id":0,"path":["scopeguard","Strategy"],"kind":"trait"},"5:6691:2767":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:12563:3596":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:39228:30147":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:45554:5086":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:10555:3250":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:40862:2389":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:3380:5299":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:41439:2185":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:4101:5861":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:5728:15997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:13461:3877":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"18:491:2915":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:44423:5035":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:39028:4881":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:39381:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:4:1001":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"14:165:17117":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:7529:4078":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:22043:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:1514:12810":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:13024:3768":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:11355:3359":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:42539:4978":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:41790:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"5:3515:4612":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:12483:3588":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:1704:2704":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"6:4328:15128":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:11544:3391":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:4549:15310":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:7386:16968":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:2497:148":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:7174:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:41256:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:3732:2712":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:5655:4067":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:4742:30428":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:4301:15283":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:42773:4813":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:4402:15295":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:12236:3540":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:2404:4040":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:2157:32100":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:0:1945":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:546:11908":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:10321:5326":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:39471:4906":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:386:2978":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:10701:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:7145:2151":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:5878:16006":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:11993:3489":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:1586:4635":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:43628:5024":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:39511:4909":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:3595:2712":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:22340:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"11:300:34113":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:3528:4630":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:5890:16007":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:13411:3865":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:5834:2740":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:4639:5866":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:8109:4514":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:13159:3797":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:44601:5043":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:45091:5063":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:21637:4849":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:10527:18213":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:11927:1476":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:11932:780":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:3142:2996":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:9545:3090":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:46623:5134":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"18:515:2913":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:8187:1812":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"14:187:17124":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:361:2344":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:2249:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:5779:4143":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:4768:786":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:10125:3194":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:10216:5205":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:6004:2810":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:1401:4616":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:1074:4625":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:10923:3291":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:7837:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:8180:18046":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:46366:5124":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:10007:4808":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:20842:4838":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:9098:3105":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:2896:32048":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:8112:5183":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:7807:5243":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:9316:4803":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:9432:2781":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:11859:5375":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"11:2190:34120":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:5568:2807":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:7487:15511":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:30041:30191":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"5:1969:4715":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:553:11909":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:4577:11149":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:8256:4527":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:6404:2818":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:7102:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:4236:4755":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:6096:2814":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:9057:2183":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:7824:5245":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:22307:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:9557:3108":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:12178:3514":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:39949:4928":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:43229:11097":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"11:2178:34118":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:2503:236":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:8971:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"16:7317:34186":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:4775:15334":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:493:11902":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:11934:1111":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:8448:5918":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:45430:5084":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:13812:3991":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:2742:4054":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:4024:11057":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:11615:3415":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:12433:3571":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:12576:3597":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:10068:3189":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:247:2976":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:11924:3482":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:38807:2137":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:1677:12826":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:914:2704":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:12770:3615":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:44524:5039":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:40610:5187":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:39738:4777":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:9772:3153":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"18:681:2948":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:13240:3820":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:44546:5040":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:44463:5037":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:7074:4732":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:8124:5790":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:5630:4128":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:22241:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"14:40:3341":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"11:985:4360":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"18:727:2960":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:1564:4612":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:39244:4886":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:540:11907":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:7119:4733":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:9876:3046":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:11532:3390":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:13082:3783":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:5976:4021":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:847:4612":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"18:624:34204":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:4353:15289":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:2337:4032":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:6174:2735":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:4714:15326":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:0:284":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:38882:200":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"0:42:1757":{"crate_id":0,"path":["scopeguard","guard_on_unwind"],"kind":"function"},"5:1230:4629":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:679:5587":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:8667:3096":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:6520:4271":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:2454:5850":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:5805:16002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:505:2322":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:13033:3769":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:12158:3513":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"11:738:4616":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:4828:15340":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:11813:3461":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:3677:5185":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:4757:4108":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:4327:4097":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:22142:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:4429:15299":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:10491:3246":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:4766:15333":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:13865:4000":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:939:5714":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:3290:5814":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:5823:16004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:7149:4736":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:5019:5197":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:8939:2326":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:5797:4147":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:7509:4077":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:4325:5190":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:586:11914":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:10283:3229":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"11:2198:34116":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:10761:18105":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:1392:4615":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:42467:4973":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:10885:3289":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:9498:3128":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:4099:2740":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:43406:11305":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:44840:5055":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:39533:4911":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"5:2893:2447":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:8192:5827":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:2796:2121":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:8805:4612":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:6719:16432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:13791:3985":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:42609:4984":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:5616:4124":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:5639:2735":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:9067:2187":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:1527:12812":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:8986:5342":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:7854:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:41668:67":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:4367:2194":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:594:11915":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:9512:3129":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:39654:4921":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:9523:3130":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:4945:15352":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:8420:18098":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:3208:5177":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"11:98:34115":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:4952:15353":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:39589:4916":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:4900:15348":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:43577:209":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:21355:5850":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:9322:34194":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:7259:2704":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:2209:5167":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:6728:16433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:668:229":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:7478:2983":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:5902:16008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:5772:15962":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:8195:18083":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"11:274:5576":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:8548:18102":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:11926:731":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:9577:3135":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:4232:205":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"5:6534:2764":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"6:4862:15343":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:42478:4974":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:21728:31742":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:7099:11200":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:10731:22531":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:48952:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:43402:11291":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:2766:2116":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:4787:15336":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:13453:3876":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:8307:5191":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:3505:2735":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"6:481:11900":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:4871:15344":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:6954:2735":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:11821:3463":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:7440:15504":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:588:5697":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:4358:2772":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"18:644:2916":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:12072:3501":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:7521:16997":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:5367:17148":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:11011:3296":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:9796:3154":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:4248:15280":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"18:660:2941":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:39991:4786":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:1201:4625":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:2546:4046":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:9959:3174":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:3977:4751":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:7489:5372":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:10711:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:39673:4773":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:2227:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:42457:4972":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"18:766:21957":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:154:2694":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:4757:5848":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:11600:3409":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:4540:4102":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:10823:3067":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:4268:2742":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:6544:4070":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:6819:4325":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:10844:5206":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:42873:4992":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:3245:5178":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:11832:3466":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:2967:17177":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:20412:30715":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"11:853:4622":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:22076:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:10545:2998":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:277:2152":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"18:80:21945":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:2342:2450":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:13101:3784":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:2395:5580":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:13721:3970":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:572:11912":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:5811:4148":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:12522:3591":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:9876:4612":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:3063:3005":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:22109:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"5:4846:2740":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:9822:3155":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:7635:4452":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:7463:15507":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:43446:5019":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:1617:12822":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:4596:4104":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:41136:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"9:0:1939":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:7179:222":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:7193:4740":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:8981:5341":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:20435:30719":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"10:44:4640":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:2616:4049":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:1947:2990":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:11090:11255":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:9900:4630":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:48926:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:6474:4082":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:20380:30653":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:12592:3599":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:1420:4613":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:25618:4743":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"11:1840:2735":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:12419:3569":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:10104:3192":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:9126:23437":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"17:12372:3562":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:6061:17149":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:13181:3801":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"15:198:17131":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:1896:2479":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:505:11904":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"18:590:2927":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"9:52:17050":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:123:11584":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:11302:4824":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:4841:15341":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:6930:4714":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:2835:2126":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"14:202:11098":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:3247:5179":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:41176:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"0:39:1754":{"crate_id":0,"path":["scopeguard","guard_on_success"],"kind":"function"},"2:4387:2084":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:3105:4612":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:12835:3666":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:2455:11163":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:6361:4253":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:11225:5229":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:11372:3361":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:10656:22478":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"11:0:1941":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:13169:3798":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:11515:5232":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:487:11901":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:11552:11084":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:9734:3149":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"5:4750:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:8340:5902":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:3117:33235":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:2745:2079":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:13249:3821":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"11:387:34109":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:42669:4810":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:1788:5161":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:1030:33188":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:6327:4248":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"11:834:4620":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:21501:4841":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:262:2712":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:4910:15349":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"5:677:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:12536:3592":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"9:388:17033":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:8145:4910":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:43425:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:4408:15296":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:1613:580":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"5:1046:5579":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:10187:4814":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:8490:18100":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:5332:5202":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:1927:5758":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:3815:4093":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:11299:3344":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:8236:5864":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:13219:3815":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:10661:23468":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"5:7021:2389":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:6547:2819":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:13777:3978":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:4820:15339":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:6364:4928":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:7525:5718":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:2855:2130":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:5386:3095":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:41966:4956":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:13344:3846":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:1580:4634":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:2757:2082":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"11:1065:34121":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:5418:4122":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:4389:15293":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:8047:4506":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:3165:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:11044:11305":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"13:110:34168":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:38948:2138":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:44892:5057":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:11446:3374":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"3:0:436":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:2919:1729":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:39021:2193":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"6:5759:16000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:40854:4630":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:11341:4826":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:2782:2115":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:1550:12815":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:3989:4752":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:2065:2322":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:13499:3885":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:1645:12823":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"11:669:4613":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"11:751:2735":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"11:632:4612":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:11471:3377":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:3058:5171":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"7:0:1519":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:6231:204":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:3936:5838":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:12019:3199":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:956:4622":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:42719:4988":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:8813:5331":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:11193:3317":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:2862:4059":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:12195:190":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:10897:3290":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:12461:3577":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:13689:3955":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"11:353:2702":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"5:803:2718":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:5032:4117":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:4122:5863":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:4411:5866":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:39334:4898":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:44393:5034":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:4882:15346":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:3970:5839":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:6293:4245":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:4237:15279":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:2788:2114":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:6293:2389":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:8408:4960":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:12168:30495":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:3932:2740":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"5:3907:2735":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:12059:3500":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:41216:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:13015:3764":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:10423:5174":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:0:489":{"crate_id":2,"path":["core"],"kind":"module"},"11:777:2707":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:39207:4882":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:6183:2806":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:4510:4101":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:6321:4247":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:1723:12831":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:41432:2184":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:7802:5242":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:4583:15313":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:20395:30653":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:13803:3987":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:10857:18107":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:3225:4087":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:578:11913":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:6496:12749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:3206:5176":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:8914:5333":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:40896:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:2682:226":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"5:3656:4716":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:3205:2147":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:40719:4612":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:41997:4964":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:3455:5789":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:46116:5121":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:9443:3120":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:2864:2132":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:13857:3997":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:1509:12809":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:3398:5182":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:2297:186":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:4637:15317":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:5177:188":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:0:1946":{"crate_id":17,"path":["object"],"kind":"module"},"16:7683:4081":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:12224:3538":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"14:215:4608":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:1978:2993":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:40846:4612":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"15:180:17130":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:4818:4110":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:10957:2832":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:4480:4100":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:4728:4107":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:1985:183":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:7589:5850":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:6218:4229":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:11391:3366":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:7697:4071":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:41425:2182":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:6666:2754":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:4361:15290":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:10452:3243":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:42517:4976":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:45768:5089":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:6400:4257":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"10:0:1940":{"crate_id":10,"path":["adler"],"kind":"module"},"17:11339:3355":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:48978:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:11522:5232":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:42530:4977":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:48569:6016":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:13356:3847":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:13564:3929":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:7803:4464":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:46588:5131":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:6488:11950":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:43240:5010":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:11258:3340":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:4571:23459":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:1583:12818":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:12098:3505":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:8859:5944":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:6132:4200":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:4904:4113":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"18:614:34201":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:6935:4336":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:5104:4119":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:41056:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:8283:18094":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:8506:5324":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:42637:2973":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:2344:5776":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:22808:4742":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:638:5152":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:8753:2969":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:7065:4359":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:5684:5209":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:9723:5850":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:6571:12776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:5450:4763":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:13399:3862":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:10721:5183":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:7693:5747":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:6876:4072":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:9566:3109":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"18:707:2953":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:39724:4927":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:8443:18099":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:5497:5924":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"5:3979:4630":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:4967:2748":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:1451:1727":{"crate_id":2,"path":["core","mem"],"kind":"module"},"17:12194:3519":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:10469:2332":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:39014:4880":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:1747:12833":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:42925:4995":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"11:861:4623":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:10145:5928":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:5722:15996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:6698:16431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:5921:4767":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:10334:3108":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:7276:2757":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:8129:4515":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:44249:5028":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:39632:4771":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:0:1371":{"crate_id":1,"path":["std"],"kind":"module"},"2:1802:2478":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"11:1120:4628":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:4845:4111":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:11063:5222":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:6128:5215":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:5931:16011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:11924:734":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:4109:5862":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:39561:4915":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:6179:4207":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:8360:18096":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"11:1003:4624":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:925:4613":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:2502:4044":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:9099:5222":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:10649:3266":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"5:4139:4612":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:6581:215":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:8247:5303":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:6655:30795":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:2538:2800":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:12138:3510":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:8751:5326":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:39386:4904":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:12259:3549":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:43370:11289":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"16:7016:4351":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:11136:3307":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:11908:369":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:484:2797":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:11891:3474":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:5920:4015":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:10426:5176":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"5:3713:2704":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:2830:2124":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:13842:3996":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:8162:2973":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:7953:5250":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:4379:15292":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:7713:4872":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:6548:5894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:13433:3870":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:5557:4063":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:2668:218":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:11916:1379":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:39689:2938":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:4697:15324":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:42549:4979":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:30099:30241":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:11012:5327":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:11325:4825":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"18:652:2916":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:8521:18101":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:7670:5702":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:4842:5891":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:4476:15304":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:39367:4903":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:8229:5187":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:43458:11306":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:6351:18037":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:10058:5348":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:4721:5704":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:13233:3818":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:1066:33189":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:1559:12816":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:12331:3557":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:904:2735":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:5998:18035":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:3640:2389":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:1983:4716":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:2841:2127":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:413:163":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:12220:4836":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:10000:3177":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:41716:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:6594:12750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:9989:5162":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:4850:15342":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:10465:3244":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:8517:5325":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:8292:4798":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:5691:5212":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:4962:15354":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:6533:5589":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:39752:4778":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:29971:1728":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:42934:4996":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:8256:18081":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:20627:5989":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:2494:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:6530:16424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:8185:5907":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:3930:5837":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:7467:4441":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:42905:4993":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:6793:4324":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:7797:3047":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:3872:4094":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:21448:4840":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:13257:3823":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:9531:2785":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:9514:2784":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:4445:4099":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:4872:4112":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:40976:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:8632:18082":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:7626:4451":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:6945:4730":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:2675:2073":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:5368:5204":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"18:736:21956":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"18:538:2923":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:1771:601":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:11911:1492":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:3872:5834":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"3:229:208":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"18:531:2920":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:11910:412":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:42209:4804":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:1710:12830":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:7173:11860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:11770:3450":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:4720:15327":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:41950:4953":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:6372:2712":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:12147:11168":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:2212:1792":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:11800:3459":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:10364:2828":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:12412:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:3984:5841":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:6505:2750":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:42504:4907":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:13194:3807":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:6535:2697":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:11876:28622":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:9885:4939":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:1051:4360":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:11106:4818":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:6541:16425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:4988:15356":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:1431:4614":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:9053:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:6616:5216":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:4988:5197":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:42429:4968":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:42801:4989":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:39942:4781":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"16:4624:4105":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:10478:3245":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:46672:5137":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:950:4620":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:2804:2118":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:6079:16045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:12449:3575":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:7411:4175":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:12894:3718":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:4678:5852":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:12510:3590":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:8186:5906":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:2940:1770":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:7452:15506":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:4261:15281":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:2475:5168":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:8875:5943":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:41958:4955":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:487:2982":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:31759:5926":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:10874:5329":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:20433:30717":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"8:0:1938":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:9218:3108":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:3674:5184":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"11:1852:4634":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:1663:12825":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:9065:2186":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:4877:15345":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:43382:11293":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:7475:15509":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"11:762:2704":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:39327:4897":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:2676:2074":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:11282:3341":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:39348:11157":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:44746:5053":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:8891:5945":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:42190:4966":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"16:6767:4323":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:5000:4116":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:3908:5835":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:21699:30163":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"13:226:34122":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:42621:4820":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:1899:12972":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:40795:191":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:2808:2120":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:5741:15998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:43585:193":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:11920:633":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:8769:5327":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:43374:11292":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:9059:165":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:12902:3721":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:11434:3371":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:38987:4879":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:39664:4922":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"5:5171:11073":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:7566:30722":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:2426:4041":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:4422:15298":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:7546:2825":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:2470:4043":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:4303:2771":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"12:0:1942":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:9653:3142":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:1370:2389":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:12345:3558":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:13879:4003":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:11785:3454":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:11881:5703":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:7757:4456":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:1339:4612":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:11861:3471":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:9409:18116":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:11416:5186":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:20414:30720":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:7601:2333":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:40491:4790":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:9748:3108":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:3353:2740":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:7862:5247":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:3242:2148":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:1787:2986":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:38760:2146":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"5:7000:4731":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:8928:5334":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:12622:3268":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:10940:2830":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"11:1832:4612":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:6970:32107":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:534:2327":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:30005:2101":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:39007:4412":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:4900:5898":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:8187:5298":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"0:70:1739":{"crate_id":0,"path":["scopeguard","Always"],"kind":"enum"},"1:10691:5244":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:9059:2184":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:6506:4269":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"9:325:17086":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:12799:3635":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:4929:15351":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:5760:2808":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:4789:4109":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:11929:1474":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:46550:5128":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:43178:4830":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:40554:29671":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"11:60:34108":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"13:0:1936":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:42438:4969":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:7543:4079":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"15:219:17135":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:11258:23440":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:29782:5830":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"5:6984:2389":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:12634:3606":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:8310:18095":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:22274:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:39935:4780":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:43283:4831":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"5:4298:2740":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:45348:5083":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:6023:6018":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:5318:5198":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"5:1354:4630":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:13469:3879":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:39603:4919":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:5305:4120":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:473:11899":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:3130:28562":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:9007:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:9968:4807":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:4334:15287":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:1652:12824":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:13821:3993":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"18:690:2950":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:13376:3854":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:6939:2389":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:13211:3812":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:2642:4050":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:5716:15995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:39268:4888":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"11:725:4615":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:10440:3242":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:0:807":{"crate_id":6,"path":["libc"],"kind":"module"},"6:6059:15193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:21735:4862":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:7252:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:39428:5760":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"1:734:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:6773:16437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:8598:18104":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:4307:15284":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:12293:3552":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:6764:16436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:6889:26136":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:2507:235":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:6931:2821":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:46512:5127":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:6053:16044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:10712:18215":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:4489:15306":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:10233:5594":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:6611:12753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:6757:16435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:561:11910":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:11502:3386":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:4921:15350":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:44694:5051":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:11902:3475":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:11210:5228":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:10686:4816":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:5990:16016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:39713:4924":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:5945:16013":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:40735:2389":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:2378:4039":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:9268:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"15:0:1944":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:1737:2475":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:4781:15335":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:3087:2139":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:420:2981":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:39958:4782":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:10637:5357":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:4505:5884":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:5527:4765":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:11556:3392":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:4313:2193":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:9683:3146":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:7488:4444":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:8846:5332":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:9389:5242":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:43086:5006":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:11513:5919":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:10316:3231":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:5417:2750":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:10831:5241":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:6717:4310":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:12033:3497":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:621:5151":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:10589:3260":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:13516:3892":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"11:2053:4360":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:8606:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:9108:34195":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:10428:3241":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:8214:4412":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:42005:4965":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:20730:4838":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:8096:2962":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:7437:4432":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:8783:5328":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:40936:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:45272:5081":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:11234:3326":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:4037:4096":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:42915:4994":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:2933:2994":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:5963:4171":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:558:2329":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:8683:2967":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:7711:4454":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"0:22:1756":{"crate_id":0,"path":["scopeguard","defer_on_unwind"],"kind":"macro"},"5:2894:33183":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"5:851:2720":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:13443:3873":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:13678:3954":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:11710:2841":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:4890:15347":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:4702:4106":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:9340:3111":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:2624:32097":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:3177:2144":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:6854:4329":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:39571:4759":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:9118:5346":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:43620:5022":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"18:719:2957":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:41738:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"6:4313:15285":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:2687:1726":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:8718:2968":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:20681:5850":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:13385:3855":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:1520:12811":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:45114:5064":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:10856:22542":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:44870:5056":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:22010:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"11:444:141":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:4539:15309":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:10735:3278":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:7478:4076":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"0:21:1753":{"crate_id":0,"path":["scopeguard","defer_on_success"],"kind":"macro"},"2:2813:2125":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"11:1555:4633":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:62:11529":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:39542:4912":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:4561:5838":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:2971:2145":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:3300:4088":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:11319:3354":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:3376:11118":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"18:599:34202":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:3133:28566":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:41987:4960":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:10719:4817":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:6981:4347":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:11577:11081":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:4795:15337":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:2851:2129":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"18:481:2914":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:5921:204":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"18:671:2947":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:9061:2185":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:8953:3097":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:4568:4103":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:4092:4753":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:9925:4805":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:45194:5065":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:43378:11294":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:42651:4805":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:6022:18036":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:3779:5186":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:1592:4636":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:11585:3403":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:3749:4091":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:1575:2704":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:860:4630":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:7596:18043":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:44269:5029":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:499:11903":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:5352:5203":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:9055:2182":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:41686:109":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:9048:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:8103:5181":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"5:7086:5713":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:10516:3248":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:3644:4715":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:12113:3508":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:11422:3370":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:7133:30144":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:6558:4273":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:7039:27824":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:7814:5244":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:7958:5817":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:208:2710":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:39280:4889":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:6243:34185":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:7042:4357":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:7293:4391":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:2934:2133":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:2588:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:9029:5637":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:9380:18115":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:1534:12813":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"14:0:1943":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:3171:2142":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:3782:4092":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:4743:15330":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:4520:15308":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:11566:2953":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:6667:16430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:3585:4090":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:7195:16807":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"18:699:2951":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:5383:5205":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:12915:3728":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:43394:11296":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:5843:16005":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:7029:4354":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:21645:4850":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:38721:2149":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"11:2080:4625":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:43263:5018":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:2612:5170":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:7655:5701":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:5905:2806":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"11:1029:4625":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:21610:4848":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:30575:181":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:42950:4897":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:2905:4061":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:6962:2724":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:6519:2397":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:21554:4842":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:11623:11090":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:5123:2712":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:11930:1475":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:39612:4766":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:4805:15338":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:2131:581":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:1687:12827":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:10967:3294":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:10416:3240":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:12282:3550":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:20564:5987":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:39641:4772":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:7498:15512":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:3030:4084":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:1847:2621":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:21586:4843":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:9596:3136":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:6512:11784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:10201:4815":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:13066:3780":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:11037:18108":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:20689:5983":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:46725:5140":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:2937:2134":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:11490:23429":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:5813:16003":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:4559:15311":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:1571:2735":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:44794:5054":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:39398:30144":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:11331:2837":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:12307:3554":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:9178:3107":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:44962:5060":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:6368:5217":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:2360:5781":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:50300:5150":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:21749:4863":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:40803:208":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"11:1866:4636":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:39703:4775":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"11:1681:143":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:8611:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:6390:4256":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:4416:15297":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:951:2712":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:9424:3118":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:7469:15508":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:5065:189":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:4812:989":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:44315:5031":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:11472:5371":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:8142:4518":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:9148:34196":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:6201:4222":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:31808:2083":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:4649:15318":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:13744:3971":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:2764:4055":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:6460:4065":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:10615:3263":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:9228:34190":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:20814:5980":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:8063:5288":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"6:4628:15316":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:4680:5853":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:42855:4991":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:4274:15282":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:9488:3126":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:9853:3158":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:3446:25761":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:5944:4164":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:39258:4887":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:2792:2117":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:7449:4433":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:40525:5828":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:13659:3948":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:2720:4053":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:43641:159":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:4727:15328":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:50279:5149":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:44724:5052":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:4071:27829":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:1824:5162":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:39983:4784":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:10635:3265":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:9276:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:21622:30143":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:46577:5130":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:2207:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:11913:1036":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:43386:11297":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:13667:3949":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:4400:4098":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:10142:18188":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:1034:2985":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:42819:4990":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:11931:1472":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:6662:4297":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:1302:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"11:822:5714":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:5800:16001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:2879:4060":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:8996:208":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"17:13698:3957":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:7878:4715":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:8263:5305":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:39288:11155":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:40468:153":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:3047:17178":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"19:0:1018":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:3388:4749":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:646:5700":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:10681:3271":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:5725:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:42968:4889":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:44938:5059":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"14:221:4610":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:6431:4259":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:12403:3568":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:10580:3259":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:1571:12817":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:6622:242":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:4069:2740":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:5554:204":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:11928:1473":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:21261:30656":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:3437:2179":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:20840:5985":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:20833:5850":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:2830:4058":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:11641:3420":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:4969:4115":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:43215:5009":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:9617:3138":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:9986:3176":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:7519:4446":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:11969:3488":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:11573:3400":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:11069:18109":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:43103:5007":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:8858:2972":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:11252:23467":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:6327:5216":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:10159:4812":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:1216:4624":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:2319:4030":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:48991:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8241:5865":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:2820:2122":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:4164:1810":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:6291:164":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:9886:3161":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:502:1019":{"crate_id":1,"path":["std","thread","panicking"],"kind":"function"},"2:11778:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:5677:18033":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:4173:5188":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:6376:4064":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:4734:2804":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:6336:4249":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:891:4616":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"9:421:17034":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:10008:5593":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"11:1872:4637":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:8358:5316":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:9641:3140":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:39216:4883":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:4851:5892":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:8788:2970":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:39461:2773":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:525:11905":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:10080:4810":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:45618:5088":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:8951:22347":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:12388:3564":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:6000:16017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:39964:4929":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:10118:4811":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:9070:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"18:113:21947":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:4451:15301":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:2865:208":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:3150:2140":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:2594:4048":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:870:2389":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:10303:3230":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"18:636:2940":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:7652:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:5951:16014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:3160:232":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:39973:2779":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:40786:11248":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:9733:220":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:3992:5843":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:39201:4750":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:8994:5344":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:46474:5126":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:6521:16423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:20683:5981":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:13309:3837":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:12496:3589":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:4433:5867":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"11:320:2700":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:1529:2740":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:13419:3868":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:3899:4095":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:5752:15999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:6832:2835":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}