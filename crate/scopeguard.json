{"root":"0:0:1979","crate_version":"1.2.0","includes_private":false,"index":{"b:2:2577-0:21:1916":{"id":"b:2:2577-0:21:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2551:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2547:266","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1916","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2580:133","2:2581:1594"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2776:245-0:21:1916":{"id":"a:2:2776:245-0:21:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2776:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2776:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2776:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1916","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8660:6180-0:68:1888":{"id":"a:2:8660:6180-0:68:1888","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8660:6180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1888","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12583:30051":{"id":"2:12583:30051","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12602:30056":{"id":"2:12602:30056","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:11402"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:11400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12610:22877":{"id":"2:12610:22877","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12514:4811":{"id":"2:12514:4811","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43603:3009","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12490:30035":{"id":"2:12490:30035","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2585:133":{"id":"2:2585:133","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32075:6198","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12502:23076":{"id":"2:12502:23076","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41657:199"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13:1883":{"id":"0:13:1883","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[231,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8659:5975-0:74:1893":{"id":"a:2:8659:5975-0:74:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8659:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2261-0:21:1916":{"id":"b:2:2261-0:21:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1916","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2263:2196"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2776:245-0:68:1888":{"id":"a:2:2776:245-0:68:1888","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2776:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1888","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:32:1925":{"id":"0:32:1925","crate_id":0,"name":"with_strategy","span":{"filename":"src/lib.rs","begin":[326,4],"end":[332,5]},"visibility":"public","docs":"Create a `ScopeGuard` that owns `v` (accessible through deref) and calls\n`dropfn` when its destructor runs.\n\nThe `Strategy` decides whether the scope guard's closure should run.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1916","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53":{"id":"0:53","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[455,0],"end":[463,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3044:138","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3023:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1916","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:57:600"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:67:721":{"id":"0:67:721","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[486,4],"end":[490,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9589:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9570:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12576:30047":{"id":"2:12576:30047","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12487":{"id":"2:12487","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12488:875","2:12489:2422","2:12490:30035","2:12491:30036","2:12493:30037","2:12496:22855","2:12497:30038","2:12498:345","2:12499:344","2:12500:1963","2:12502:23076","2:12504:23077","2:12506:23078","2:12508:30039","2:12509:30040","2:12510:23101","2:12511:23102","2:12512:5029","2:12513:5202","2:12514:4811","2:12515:28168","2:12516:28197","2:12517:25361","2:12518:30041","2:12519:28184","2:12520:23121","2:12523:23122","2:12526:23123","2:12529:2462","2:12533:2421","2:12537:23109","2:12540:23111","2:12543:23113","2:12546:30042","2:12549:30043","2:12552:23115","2:12555:23117","2:12558:23119","2:12561:23120","2:12564:2208","2:12567:30044","2:12570:30045","2:12573:30046","2:12576:30047","2:12578:30048","2:12580:30049","2:12582:30050","2:12583:30051","2:12584:30052","2:12587:30053","2:12590:23124","2:12593:23125","2:12596:30054","2:12599:30055","2:12602:30056","2:12605:30057","2:12607:22880","2:12608:24271","2:12609:22881","2:12610:22877","2:12611:22876","2:12612:30058","2:12614:5967","2:12615:30059"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5536:30721":{"id":"5:5536:30721","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2306","`String`":"5:7490:251"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2306","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[480,0],"end":[491,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9614:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3044:138","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9614:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1916","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:67:721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:1979":{"id":"0:0:1979","crate_id":0,"name":"scopeguard","span":{"filename":"src/lib.rs","begin":[1,0],"end":[595,1]},"visibility":"public","docs":"A scope guard will run a given closure when it goes out of scope,\neven if the code between panics.\n(as long as panic doesn't abort)\n\n# Examples\n\n## Hello World\n\nThis example creates a scope guard with an example function:\n\n```\nextern crate scopeguard;\n\nfn f() {\n    let _guard = scopeguard::guard((), |_| {\n        println!(\"Hello Scope Exit!\");\n    });\n\n    // rest of the code here.\n\n    // Here, at the end of `_guard`'s scope, the guard's closure is called.\n    // It is also called if we exit this scope through unwinding instead.\n}\n# fn main() {\n#    f();\n# }\n```\n\n## `defer!`\n\nUse the `defer` macro to run an operation at scope exit,\neither regular scope exit or during unwinding from a panic.\n\n```\n#[macro_use(defer)] extern crate scopeguard;\n\nuse std::cell::Cell;\n\nfn main() {\n    // use a cell to observe drops during and after the scope guard is active\n    let drop_counter = Cell::new(0);\n    {\n        // Create a scope guard using `defer!` for the current scope\n        defer! {\n            drop_counter.set(1 + drop_counter.get());\n        }\n\n        // Do regular operations here in the meantime.\n\n        // Just before scope exit: it hasn't run yet.\n        assert_eq!(drop_counter.get(), 0);\n\n        // The following scope end is where the defer closure is called\n    }\n    assert_eq!(drop_counter.get(), 1);\n}\n```\n\n## Scope Guard with Value\n\nIf the scope guard closure needs to access an outer value that is also\nmutated outside of the scope guard, then you may want to use the scope guard\nwith a value. The guard works like a smart pointer, so the inner value can\nbe accessed by reference or by mutable reference.\n\n### 1. The guard owns a file\n\nIn this example, the scope guard owns a file and ensures pending writes are\nsynced at scope exit.\n\n```\nextern crate scopeguard;\n\nuse std::fs::*;\nuse std::io::{self, Write};\n# // Mock file so that we don't actually write a file\n# struct MockFile;\n# impl MockFile {\n#     fn create(_s: &str) -> io::Result<Self> { Ok(MockFile) }\n#     fn write_all(&self, _b: &[u8]) -> io::Result<()> { Ok(()) }\n#     fn sync_all(&self) -> io::Result<()> { Ok(()) }\n# }\n# use self::MockFile as File;\n\nfn try_main() -> io::Result<()> {\n    let f = File::create(\"newfile.txt\")?;\n    let mut file = scopeguard::guard(f, |f| {\n        // ensure we flush file at return or panic\n        let _ = f.sync_all();\n    });\n    // Access the file through the scope guard itself\n    file.write_all(b\"test me\\n\").map(|_| ())\n}\n\nfn main() {\n    try_main().unwrap();\n}\n\n```\n\n### 2. The guard restores an invariant on scope exit\n\n```\nextern crate scopeguard;\n\nuse std::mem::ManuallyDrop;\nuse std::ptr;\n\n// This function, just for this example, takes the first element\n// and inserts it into the assumed sorted tail of the vector.\n//\n// For optimization purposes we temporarily violate an invariant of the\n// Vec, that it owns all of its elements.\n//\n// The safe approach is to use swap, which means two writes to memory,\n// the optimization is to use a “hole” which uses only one write of memory\n// for each position it moves.\n//\n// We *must* use a scope guard to run this code safely. We\n// are running arbitrary user code (comparison operators) that may panic.\n// The scope guard ensures we restore the invariant after successful\n// exit or during unwinding from panic.\nfn insertion_sort_first<T>(v: &mut Vec<T>)\n    where T: PartialOrd\n{\n    struct Hole<'a, T: 'a> {\n        v: &'a mut Vec<T>,\n        index: usize,\n        value: ManuallyDrop<T>,\n    }\n\n    unsafe {\n        // Create a moved-from location in the vector, a “hole”.\n        let value = ptr::read(&v[0]);\n        let mut hole = Hole { v: v, index: 0, value: ManuallyDrop::new(value) };\n\n        // Use a scope guard with a value.\n        // At scope exit, plug the hole so that the vector is fully\n        // initialized again.\n        // The scope guard owns the hole, but we can access it through the guard.\n        let mut hole_guard = scopeguard::guard(hole, |hole| {\n            // plug the hole in the vector with the value that was // taken out\n            let index = hole.index;\n            ptr::copy_nonoverlapping(&*hole.value, &mut hole.v[index], 1);\n        });\n\n        // run algorithm that moves the hole in the vector here\n        // move the hole until it's in a sorted position\n        for i in 1..hole_guard.v.len() {\n            if *hole_guard.value >= hole_guard.v[i] {\n                // move the element back and the hole forward\n                let index = hole_guard.index;\n                hole_guard.v.swap(index, index + 1);\n                hole_guard.index += 1;\n            } else {\n                break;\n            }\n        }\n\n        // When the scope exits here, the Vec becomes whole again!\n    }\n}\n\nfn main() {\n    let string = String::from;\n    let mut data = vec![string(\"c\"), string(\"a\"), string(\"b\"), string(\"d\")];\n    insertion_sort_first(&mut data);\n    assert_eq!(data, vec![\"a\", \"b\", \"c\", \"d\"]);\n}\n\n```\n\n\n# Crate Features\n\n- `use_std`\n  + Enabled by default. Enables the `OnUnwind` and `OnSuccess` strategies.\n  + Disable to use `no_std`.\n\n# Rust Version\n\nThis version of the crate requires Rust 1.20 or later.\n\nThe scopeguard 1.x release series will use a carefully considered version\nupgrade policy, where in a later 1.x version, we will raise the minimum\nrequired Rust version.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/scopeguard/1/\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10:1880","0:68:1888","0:71:1891","0:74:1893","0:21:1916","0:34:1900","0:37:1903","0:40:1906","0:18:1897","0:19:1902","0:20:1905"],"is_stripped":false}}},"a:2:2833:2235-0:74:1893":{"id":"a:2:2833:2235-0:74:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2833:2235","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:33:1938":{"id":"0:33:1938","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[357,4],"end":[369,5]},"visibility":"public","docs":"“Defuse” the guard and extract the value without calling the closure.\n\n```\nextern crate scopeguard;\n\nuse scopeguard::{guard, ScopeGuard};\n\nfn conditional() -> bool { true }\n\nfn main() {\n    let mut guard = guard(Vec::new(), |mut v| v.clear());\n    guard.push(1);\n\n    if conditional() {\n        // a condition maybe makes us decide to\n        // “defuse” the guard and get back its inner parts\n        let value = ScopeGuard::into_inner(guard);\n    } else {\n        // guard still exists in this branch\n    }\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["guard",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12489:2422":{"id":"2:12489:2422","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2567-0:68:1888":{"id":"b:2:2567-0:68:1888","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2544:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2541:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1888","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2570:2415"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2567-0:21:1916":{"id":"b:2:2567-0:21:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2544:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2541:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1916","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2570:2415"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12499:344":{"id":"2:12499:344","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12026:1616"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12500:1963":{"id":"2:12500:1963","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41657:199"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12614:5967":{"id":"2:12614:5967","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4574:5967"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43925:4948","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5539:22878":{"id":"5:5539:22878","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12611:22876"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:598":{"id":"0:52:598","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[450,4],"end":[452,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2776:245-0:71:1891":{"id":"a:2:2776:245-0:71:1891","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2776:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1891","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12612:30058":{"id":"2:12612:30058","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4573:30058"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43916:5091","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12491:30036":{"id":"2:12491:30036","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12498:345":{"id":"2:12498:345","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12499:344","`u8`":"1:12026:1616"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12504:23077":{"id":"2:12504:23077","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12580:30049":{"id":"2:12580:30049","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12570:30045":{"id":"2:12570:30045","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12189:11402","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12009:453","str::rmatch_indices":"2:12573:30046"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43767:5186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2573:747":{"id":"2:2573:747","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12599:30055":{"id":"2:12599:30055","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:11402"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9614:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:76:721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2793:255-0:74:1893":{"id":"a:2:2793:255-0:74:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2793:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12523:23122":{"id":"2:12523:23122","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:11402"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2264-0:71:1891":{"id":"b:2:2264-0:71:1891","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2258:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1891","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2266:22673"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[315,0],"end":[370,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3044:138","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1916","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:32:1925","0:33:1938"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12497:30038":{"id":"2:12497:30038","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:6093":{"id":"5:5537:6093","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[237,0],"end":[242,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1891","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:15:1883"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2581:1594":{"id":"2:2581:1594","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41800:234","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2551:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2586:1592":{"id":"2:2586:1592","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41800:234","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2551:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12609:22881":{"id":"2:12609:22881","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2261-0:71:1891":{"id":"b:2:2261-0:71:1891","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1891","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2263:2196"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5538:22879":{"id":"5:5538:22879","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12610:22877"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12596:30054":{"id":"2:12596:30054","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:11402"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:11400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3412-0:68:1888":{"id":"b:2:3412-0:68:1888","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3410:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1888","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3414:1607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12561:23120":{"id":"2:12561:23120","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:11400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3412-0:21:1916":{"id":"b:2:3412-0:21:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3410:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1916","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3414:1607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[443,0],"end":[453,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3044:138","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3010:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1916","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:51:257","0:52:598"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12582:30050":{"id":"2:12582:30050","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8659:5975-0:21:1916":{"id":"a:2:8659:5975-0:21:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8659:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8659:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8659:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1916","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12611:22876":{"id":"2:12611:22876","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3412-0:74:1893":{"id":"b:2:3412-0:74:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3410:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3414:1607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12515:28168":{"id":"2:12515:28168","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12516:28197"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43891:5192","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:1900":{"id":"0:34:1900","crate_id":0,"name":"guard","span":{"filename":"src/lib.rs","begin":[375,0],"end":[380,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1916","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"Always","id":"0:68:1888","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3044:138","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2567-0:74:1893":{"id":"b:2:2567-0:74:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2544:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2541:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2570:2415"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2833:2235-0:21:1916":{"id":"a:2:2833:2235-0:21:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2833:2235","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2833:2235","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2833:2235","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1916","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5524:30718":{"id":"5:5524:30718","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2833:2235-0:68:1888":{"id":"a:2:2833:2235-0:68:1888","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2833:2235","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1888","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12518:30041":{"id":"2:12518:30041","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43881:5191","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:1905":{"id":"0:20:1905","crate_id":0,"name":"defer_on_unwind","span":{"filename":"src/lib.rs","begin":[285,0],"end":[289,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on unwinding from panic).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer_on_unwind {\n    ($($t:tt)*) => { ... };\n}"}},"a:2:8660:6180-0:71:1891":{"id":"a:2:8660:6180-0:71:1891","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8660:6180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1891","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2263:2196":{"id":"2:2263:2196","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:10:1880":{"id":"0:10:1880","crate_id":0,"name":"Strategy","span":{"filename":"src/lib.rs","begin":[201,0],"end":[205,1]},"visibility":"public","docs":"Controls in which cases the associated code should be run","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:11:1883"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:14","0:12","0:16"]}}},"0:12":{"id":"0:12","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[229,0],"end":[234,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1888","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:13:1883"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:43":{"id":"0:43","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[435,0],"end":[441,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2793:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3044:138","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2793:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1916","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8660:6180-0:21:1916":{"id":"a:2:8660:6180-0:21:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8660:6180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8660:6180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8660:6180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1916","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:62:636":{"id":"0:62:636","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[470,4],"end":[477,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12508:30039":{"id":"2:12508:30039","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12015:1510","str::slice_mut_unchecked":"2:12509:30040","crate::ops::Index":"2:3073:2290"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2582-0:21:1916":{"id":"b:2:2582-0:21:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2541:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2551:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1916","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2585:133","2:2586:1592"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12567:30044":{"id":"2:12567:30044","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12189:11402","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12009:453","str::matches":"2:12564:2208"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43839:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:11400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2266:22673":{"id":"2:2266:22673","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8659:5975-0:68:1888":{"id":"a:2:8659:5975-0:68:1888","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8659:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1888","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12516:28197":{"id":"2:12516:28197","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12515:28168"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43900:5193","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17:1883":{"id":"0:17:1883","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[247,4],"end":[249,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:1891":{"id":"0:71:1891","crate_id":0,"name":"OnUnwind","span":{"filename":"src/lib.rs","begin":[220,0],"end":[220,20]},"visibility":"public","docs":"Run on scope exit through unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:2793:255-0:71:1891","a:2:2833:2235-0:71:1891","a:2:2776:245-0:71:1891","a:2:8659:5975-0:71:1891","a:2:8660:6180-0:71:1891","b:2:2571-0:71:1891","b:2:2261-0:71:1891","b:2:2567-0:71:1891","b:2:2264-0:71:1891","b:2:2582-0:71:1891","b:2:2577-0:71:1891","b:2:3412-0:71:1891","0:14","0:72"]}}},"2:12584:30052":{"id":"2:12584:30052","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:11402"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12214:11399","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:30719":{"id":"5:5527:30719","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9614:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1888","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:70:721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:19:1902":{"id":"0:19:1902","crate_id":0,"name":"defer_on_success","span":{"filename":"src/lib.rs","begin":[271,0],"end":[275,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (run on successful scope exit).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer_on_success {\n    ($($t:tt)*) => { ... };\n}"}},"0:11:1883":{"id":"0:11:1883","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[204,4],"end":[204,28]},"visibility":"default","docs":"Return `true` if the guard’s associated code should run\n(in the context where this method is called).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:76:721":{"id":"0:76:721","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[226,9],"end":[226,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9589:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9570:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519":{"id":"5:5519","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5520:30717","5:5521:2253","5:5524:30718","5:5527:30719","5:5535:30720","5:5536:30721","5:5537:6093","5:5538:22879","5:5539:22878"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12529:2462":{"id":"2:12529:2462","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41657:199","prim@char":"1:12009:453","self::pattern":"2:12189:11402"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9614:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1891","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2264-0:74:1893":{"id":"b:2:2264-0:74:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2258:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2266:22673"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2261-0:68:1888":{"id":"b:2:2261-0:68:1888","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1888","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2263:2196"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12605:30057":{"id":"2:12605:30057","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12150:132","`FromStr`":"2:12149:6191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41800:234","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12149:6191","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12149:6191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12552:23115":{"id":"2:12552:23115","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:11402","str::rsplitn":"2:12555:23117"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43721:5013","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8659:5975-0:71:1891":{"id":"a:2:8659:5975-0:71:1891","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8659:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1891","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12573:30046":{"id":"2:12573:30046","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12189:11402","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12009:453","str::match_indices":"2:12570:30045"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43785:5187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:11400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2582-0:71:1891":{"id":"b:2:2582-0:71:1891","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2541:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2551:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1891","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2585:133","2:2586:1592"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:37:1903":{"id":"0:37:1903","crate_id":0,"name":"guard_on_success","span":{"filename":"src/lib.rs","begin":[388,0],"end":[393,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1916","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"OnSuccess","id":"0:74:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3044:138","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2567-0:71:1891":{"id":"b:2:2567-0:71:1891","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2544:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2541:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1891","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2570:2415"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[465,0],"end":[478,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3044:138","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3034:1952","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1916","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:62:636"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5521:2253":{"id":"5:5521:2253","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12564:2208":{"id":"2:12564:2208","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12189:11402","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12009:453","str::rmatches":"2:12567:30044"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43821:5188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12496:22855":{"id":"2:12496:22855","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11749:11403"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12546:30042":{"id":"2:12546:30042","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12189:11402","str::split":"2:12537:23109","prim@char":"1:12009:453","`DoubleEndedIterator`":"2:7571:126","str::rsplit_terminator":"2:12549:30043"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43667:5184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2577-0:71:1891":{"id":"b:2:2577-0:71:1891","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2551:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2547:266","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1891","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2580:133","2:2581:1594"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:18:1897":{"id":"0:18:1897","crate_id":0,"name":"defer","span":{"filename":"src/lib.rs","begin":[257,0],"end":[261,1]},"visibility":"public","docs":"Macro to create a `ScopeGuard` (always run).\n\nThe macro takes statements, which are the body of a closure\nthat will run when the scope is exited.","links":{},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! defer {\n    ($($t:tt)*) => { ... };\n}"}},"2:12509:30040":{"id":"2:12509:30040","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12015:1510","crate::ops::IndexMut":"2:3077:2291","str::slice_unchecked":"2:12508:30039"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12555:23117":{"id":"2:12555:23117","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12009:453","str::splitn":"2:12552:23115","self::pattern":"2:12189:11402"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43739:5014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:11400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2571-0:21:1916":{"id":"b:2:2571-0:21:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2544:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1916","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2573:747"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12517:25361":{"id":"2:12517:25361","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43871:5190","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8660:6180-0:74:1893":{"id":"a:2:8660:6180-0:74:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8660:6180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:21:1916":{"id":"0:21:1916","crate_id":0,"name":"ScopeGuard","span":{"filename":"src/lib.rs","begin":[304,0],"end":[313,1]},"visibility":"public","docs":"`ScopeGuard` is a scope guard that may own a protected value.\n\nIf you place a guard in a local variable, the closure can\nrun regardless how you leave the scope — through regular return or panic\n(except if panic or other code aborts; so as long as destructors run).\nIt is run only once.\n\nThe `S` parameter for [`Strategy`](trait.Strategy.html) determines if\nthe closure actually runs.\n\nThe guard's closure will be called with the held value in the destructor.\n\nThe `ScopeGuard` implements `Deref` so that you can access the inner value.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Always","id":"0:68:1888","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3044:138","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Strategy","id":"0:10:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["0:28","a:2:2833:2235-0:21:1916","a:2:2776:245-0:21:1916","a:2:8659:5975-0:21:1916","a:2:8660:6180-0:21:1916","b:2:2571-0:21:1916","b:2:2261-0:21:1916","b:2:2567-0:21:1916","b:2:2264-0:21:1916","b:2:2582-0:21:1916","b:2:2577-0:21:1916","b:2:3412-0:21:1916","0:63","0:47","0:58","0:43","0:53"]}}},"2:2580:133":{"id":"2:2580:133","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2551:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:40:1906":{"id":"0:40:1906","crate_id":0,"name":"guard_on_unwind","span":{"filename":"src/lib.rs","begin":[425,0],"end":[430,1]},"visibility":"public","docs":"Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.\n\nRequires crate feature `use_std`.\n\n## Examples\n\nFor performance reasons, or to emulate “only run guard on unwind” in\nno-std environments, we can also use the default guard and simply manually\ndefuse it at the end of scope like the following example. (The performance\nreason would be if the [`OnUnwind`]'s call to [std::thread::panicking()] is\nan issue.)\n\n```\nextern crate scopeguard;\n\nuse scopeguard::ScopeGuard;\n# fn main() {\n{\n    let guard = scopeguard::guard((), |_| {});\n\n    // rest of the code here\n\n    // we reached the end of scope without unwinding - defuse it\n    ScopeGuard::into_inner(guard);\n}\n# }\n```","links":{"std::thread::panicking()":"1:501:1101","`OnUnwind`":"0:71:1891"},"attrs":["#[cfg(feature = \"use_std\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"generic":"T"}],["dropfn",{"generic":"F"}]],"output":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1916","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"resolved_path":{"name":"OnUnwind","id":"0:71:1891","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3044:138","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12510:23101":{"id":"2:12510:23101","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12511:23102"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12543:23113":{"id":"2:12543:23113","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12189:11402","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12009:453","str::split":"2:12537:23109"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43635:5011","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:11400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12593:23125":{"id":"2:12593:23125","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:11402"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:11400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2582-0:74:1893":{"id":"b:2:2582-0:74:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2541:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2551:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2585:133","2:2586:1592"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2261-0:74:1893":{"id":"b:2:2261-0:74:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2263:2196"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3414:1607":{"id":"2:3414:1607","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39417:5081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12513:5202":{"id":"2:12513:5202","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12009:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43593:5182","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2571-0:71:1891":{"id":"b:2:2571-0:71:1891","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2544:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1891","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2573:747"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[245,0],"end":[250,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Strategy","id":"0:10:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:17:1883"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:70:721":{"id":"0:70:721","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[212,9],"end":[212,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9589:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9570:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2264-0:68:1888":{"id":"b:2:2264-0:68:1888","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2258:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1888","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2266:22673"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:74:1893":{"id":"0:74:1893","crate_id":0,"name":"OnSuccess","span":{"filename":"src/lib.rs","begin":[227,0],"end":[227,21]},"visibility":"public","docs":"Run on regular scope exit, when not unwinding.\n\nRequires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:2793:255-0:74:1893","a:2:2833:2235-0:74:1893","a:2:2776:245-0:74:1893","a:2:8659:5975-0:74:1893","a:2:8660:6180-0:74:1893","b:2:2571-0:74:1893","b:2:2261-0:74:1893","b:2:2567-0:74:1893","b:2:2264-0:74:1893","b:2:2582-0:74:1893","b:2:2577-0:74:1893","b:2:3412-0:74:1893","0:75","0:16"]}}},"2:12537:23109":{"id":"2:12537:23109","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12189:11402","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12009:453","str::split_whitespace":"2:12515:28168","str::rsplit":"2:12543:23113"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43617:5006","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12578:30048":{"id":"2:12578:30048","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12488:875":{"id":"2:12488:875","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12009:453"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12587:30053":{"id":"2:12587:30053","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:11402"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12549:30043":{"id":"2:12549:30043","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12189:11402","str::split":"2:12537:23109","prim@char":"1:12009:453","str::split_terminator":"2:12546:30042"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43685:5185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:11400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5520:30717":{"id":"5:5520:30717","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2306","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2306","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:30720":{"id":"5:5535:30720","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2582-0:68:1888":{"id":"b:2:2582-0:68:1888","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2541:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2551:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1888","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2585:133","2:2586:1592"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2776:245-0:74:1893":{"id":"a:2:2776:245-0:74:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2776:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12615:30059":{"id":"2:12615:30059","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4571:30059"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43934:5090","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2793:255-0:71:1891":{"id":"a:2:2793:255-0:71:1891","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2793:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1891","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2570:2415":{"id":"2:2570:2415","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2544:141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12533:2421":{"id":"2:12533:2421","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41657:199","prim@char":"1:12009:453","self::pattern":"2:12189:11402"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:11400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12506:23078":{"id":"2:12506:23078","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12558:23119":{"id":"2:12558:23119","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:721":{"id":"0:73:721","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9589:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9570:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:257":{"id":"0:51:257","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[448,4],"end":[448,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:2:2571-0:68:1888":{"id":"b:2:2571-0:68:1888","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2544:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1888","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2573:747"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12607:22880":{"id":"2:12607:22880","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12511:23102":{"id":"2:12511:23102","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12510:23101"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2264-0:21:1916":{"id":"b:2:2264-0:21:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2258:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ScopeGuard","id":"0:21:1916","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2266:22673"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2571-0:74:1893":{"id":"b:2:2571-0:74:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2544:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2573:747"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12608:24271":{"id":"2:12608:24271","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39604:23030","Self::is_ascii":"2:12607:22880"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39604:23030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2833:2235-0:71:1891":{"id":"a:2:2833:2235-0:71:1891","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2833:2235","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1891","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12590:23124":{"id":"2:12590:23124","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:11402"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1888":{"id":"0:68:1888","crate_id":0,"name":"Always","span":{"filename":"src/lib.rs","begin":[213,0],"end":[213,18]},"visibility":"public","docs":"Always run on scope exit.\n\n“Always” run: on regular exit from a scope or on unwinding from a panic.\nCan not run on abort, process exit, and other catastrophic events where\ndestructors don’t run.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:2793:255-0:68:1888","a:2:2833:2235-0:68:1888","a:2:2776:245-0:68:1888","a:2:8659:5975-0:68:1888","a:2:8660:6180-0:68:1888","b:2:2571-0:68:1888","b:2:2261-0:68:1888","b:2:2567-0:68:1888","b:2:2264-0:68:1888","b:2:2582-0:68:1888","b:2:2577-0:68:1888","b:2:3412-0:68:1888","0:12","0:69"]}}},"2:12493:30037":{"id":"2:12493:30037","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12491:30036"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12512:5029":{"id":"2:12512:5029","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12009:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43587:5021","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2577-0:74:1893":{"id":"b:2:2577-0:74:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2551:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2547:266","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnSuccess","id":"0:74:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2580:133","2:2581:1594"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:57:600":{"id":"0:57:600","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[460,4],"end":[462,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12519:28184":{"id":"2:12519:28184","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43909:5028","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12520:23121":{"id":"2:12520:23121","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:11402"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3412-0:71:1891":{"id":"b:2:3412-0:71:1891","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3410:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUnwind","id":"0:71:1891","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3414:1607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12526:23123":{"id":"2:12526:23123","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:11402"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:11400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2793:255-0:68:1888":{"id":"a:2:2793:255-0:68:1888","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2793:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1888","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:15:1883":{"id":"0:15:1883","crate_id":0,"name":"should_run","span":{"filename":"src/lib.rs","begin":[239,4],"end":[241,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2577-0:68:1888":{"id":"b:2:2577-0:68:1888","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2551:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2547:266","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Always","id":"0:68:1888","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2580:133","2:2581:1594"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12540:23111":{"id":"2:12540:23111","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:11402"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12005:5008","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:4902:15887":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:22010:6063":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:1579:4702":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:41868:203":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:11062:3307":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:13202:3662":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:6531:4333":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:2216:5363":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:46946:5286":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"5:4849:225":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:41443:6103":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:2499:11475":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:22325:5052":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:10165:18725":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:11147:25557":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:2860:2269":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:6658:12374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:46086:5251":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:47912:5327":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:6334:183":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:687:115":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:32223:2240":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"18:574:2952":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:21463:5041":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:3583:4678":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:727:152":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:955:4689":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:4388:15834":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:6517:5409":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:4789:15873":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:10316:3205":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:13040:3631":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:40433:4973":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:4870:15883":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:44344:11717":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:46792:5283":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:527:12329":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:48049:5337":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:4676:15863":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:11793:2891":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:11267:2885":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:11316:3335":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:42049:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:8309:6168":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:5891:16574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:11237:5017":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:4613:4167":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:5723:5401":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:39356:224":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:5477:5397":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:654:12386":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:6711:17004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:43344:5164":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:10750:3259":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:6569:4134":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:7782:4520":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:1104:31537":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:2919:2283":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:30357:28515":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:4719:4169":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:21449:6248":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:7902:5437":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:641:5350":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:14100:3936":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:46278:5257":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:1507:13221":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:9454:5431":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:6818:4388":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:504:3018":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:44598:5222":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:2051:4787":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:47588:5321":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:6545:4335":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:12123:3444":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:10802:5375":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"11:1010:4690":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:4440:15838":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:7223:4785":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"11:731:4680":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:13083:5986":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"5:7423:4806":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:10738:5015":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"18:636:2976":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:6862:2434":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:10669:5012":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:44590:5220":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:32122:5074":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:12834:212":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:1044:4424":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:14478:4056":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:6361:4314":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:9623:2334":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:7792:18634":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:12074:3437":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:5403:3138":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"0:21:1916":{"crate_id":0,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"2:39431:5082":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:501:1101":{"crate_id":1,"path":["std","thread","panicking"],"kind":"function"},"2:40481:2974":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:40395:5115":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:11367:3340":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:9752:3154":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:6889:17011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:12645:3556":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:7677:218":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:2833:2235":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:4686:15864":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:8279:5485":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:7515:4814":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:8382:5505":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:6071:16586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:589:5966":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:10672:3249":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:40446:5117":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:10714:3256":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:10410:5515":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:12172:3454":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:6403:5124":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:9445:3148":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:11958:5571":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:9084:82":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:39268:218":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:12711:3567":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:5322:4183":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"11:992:4424":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:5622:4964":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:4761:721":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:13816:3860":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:9000:5530":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:9621:2333":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:10139:18724":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:21796:6259":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"5:1120:5778":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:9886:3164":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:47836:5325":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:4004:2783":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:11719:18699":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:1826:186":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:1564:2783":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:12422:3517":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"18:644:2952":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:2904:2279":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:3244:262":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:40852:4983":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:2382:6052":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:6083:17735":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:11086:3309":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:13148:3656":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:8851:5399":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:4932:15891":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:1840:2583":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:13897:3883":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:13010:3626":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:3010:122":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:2968:31029":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:9531:32461":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:1568:2802":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:6243:4295":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:7436:4239":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"5:4365:2791":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:11191:3035":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:7128:5533":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:2888:2275":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:11389:3345":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:9277:3008":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:10903:3293":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:44352:11720":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:6318:4310":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:9711:32463":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:6332:4126":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:12034:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:9951:5135":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"11:829:5985":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:884:4682":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:7496:11615":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:14013:3910":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:22921:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:4798:6123":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"11:1145:4696":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:40456:5118":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"5:1494:4679":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"18:582:2962":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:10420:3085":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:4801:422":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:11639:3035":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:4005:6114":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:10738:3258":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:10637:3243":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:4616:22698":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:7598:16073":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:489:12325":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:6107:16590":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:7343:12284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:7664:2371":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:21006:28892":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:43871:5190":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:2992:2299":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:10782:135":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:10760:5556":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:2810:4121":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:6274:228":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:6128:16593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:5059:5389":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11215:3322":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:6513:4325":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:4350:273":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:13567:3795":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:2841:2239":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:13071:3636":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"0:37:1903":{"crate_id":0,"path":["scopeguard","guard_on_success"],"kind":"function"},"2:40363:4960":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"11:2317:4678":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"16:5963:4228":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:8659:18671":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:14042:3918":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:40424:4972":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:45807:5235":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:10084:3182":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:45677:5230":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:12621:3555":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:4488:15843":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:6927:17014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:2305:17762":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:14296:4005":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:11098:3310":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:10468:3225":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:6934:17015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:8660:6180":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:12543:3541":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:4603:15857":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"9:486:17610":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:12484:3533":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:7378:4805":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:9959:3173":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:41783:11672":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:9048:5892":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:41386:168":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"18:671:2983":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:21542:6063":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:2277:108":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:11281:3330":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:43916:5091":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:9660:32458":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:7513:4508":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:2618:121":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:1923:2517":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:1734:13243":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:42687:4547":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:46202:5254":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"5:2961:2485":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:10772:5433":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:42010:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:2012:3023":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:5068:15905":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:11931:5025":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:2836:2237":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:10440:3215":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:6901:4136":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:949:4688":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:14068:3928":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:4344:4160":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:40381:5112":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"11:841:4686":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:12030:1612":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"18:548:151":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:8186:3009":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:12778:3576":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:13298:3680":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:14083:3932":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:13949:3892":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:505:2361":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:2219:1939":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:6929:4397":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:9589:140":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:22690:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:5885:16573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:6415:4320":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:41426:4993":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:9455:32460":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"11:2085:4692":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"11:1036:4692":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:6047:2860":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:8978:18693":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:14163:3950":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:14346:4018":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:10520:3231":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:6718:6168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"11:703:4679":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:9571:2332":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:9390:134":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"14:31:4669":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:14460:4050":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:13802:3859":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:3185:5368":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:12027:1613":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:12010:1632":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:6248:16623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:4019:6116":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:5696:18623":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:45785:5234":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:5075:15906":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:12260:11408":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"15:306:17717":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:5217:210":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"15:394:17727":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"16:6560:2752":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"6:5910:16576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:9873:11480":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"10:36:32371":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:1558:13227":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:9126:5535":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:3888:4157":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:5945:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:11719:11679":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:7702:17576":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:2925:2284":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:4585:4166":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:46680:5281":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:21575:5041":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:10012:3152":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:8271:5492":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:7713:5355":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:2784:2232":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:9933:3170":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:871:4681":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:4847:15880":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:6467:4324":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:907:2802":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:7360:32454":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"11:0:2099":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:7111:27971":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:43444:5171":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:2696:4116":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:9619:125":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:4283:4953":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:11365:25890":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:11211:159":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"6:5023:15901":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:7621:18633":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:43909:5028":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:548:12332":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:7894:5436":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:13487:3733":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:6666:2763":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"11:1525:17692":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:3185:31546":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"11:1687:154":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:12020:695":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:14173:3955":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:13422:3682":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:9175:26420":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:5408:5396":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:1674:2763":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:7534:4141":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:44640:4709":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:10534:3232":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"18:521:22662":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:12846:3586":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:1664:13236":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:40283:5103":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:12724:3568":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:21190:28594":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"11:122:2753":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:10077:2838":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:11934:3408":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:21443:6246":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:4288:5381":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:6587:2426":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:42912:5150":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:1738:2515":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:10456:3221":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:8883:6216":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:1561:2426":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:1764:660":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:563:12334":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:9570:234":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:43635:5011":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:6944:32451":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:1140:31538":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:4783:15872":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:11358:18820":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:12209:11400":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:10370:3208":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:2864:4123":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:9003:18694":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:582:3019":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:2409:2112":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:13174:3658":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:8281:4591":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"5:5376:11391":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:2830:2234":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:11971:3421":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:12737:3570":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"13:110:32435":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:7365:17386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:46710:5282":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:1444:2426":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:4053:4159":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:40334:5108":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:1549:2789":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:40152:5098":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:10792:124":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:22302:28534":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:3600:4153":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:2935:2286":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:12293:3487":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:4463:2345":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:2325:208":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:1466:4681":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:46010:5243":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:3943:6110":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:44416:5217":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:1842:5359":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:6012:16583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:4375:15833":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:1650:13235":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:4776:15871":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:7342:32457":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:6456:4323":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:32115:4476":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"16:7090:4423":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:3144:26682":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:533:12330":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:7269:32456":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:7252:2783":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:5974:16580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:5727:4200":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:2339:4096":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:2143:4788":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:6171:5407":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:6741:13364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:48011:5335":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:8938:5522":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:11162:3315":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:42937:155":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:6270:2830":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:11742:3370":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:10292:3152":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:40092:4948":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"0:20:1905":{"crate_id":0,"path":["scopeguard","defer_on_unwind"],"kind":"macro"},"1:7834:5431":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:14076:3931":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"11:772:4682":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:13188:3659":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:6159:16594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:6682:12207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:4806:4172":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"11:2351:2426":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:21192:2497":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:2330:130":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:30327:2259":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:22822:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:2872:2271":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:2907:4125":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"11:1882:4704":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:23020:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:10929:3296":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:2604:5365":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:11000:3300":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:6386:4317":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:46453:5262":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:7604:16074":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:12267:3482":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:46254:5256":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:7651:4515":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:6443:2869":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:12196:3458":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:1779:5356":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:3041:137":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:42959:5161":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:13914:3886":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"0:74:1893":{"crate_id":0,"path":["scopeguard","OnSuccess"],"kind":"enum"},"2:32136:5075":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:4033:4950":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:14335:4017":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:12658:3559":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:11493:5377":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:3722:4786":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:3044:138":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:43785:5187":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:261:3012":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:5897:16575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:10558:2371":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:40183:28533":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4814:15876":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:2380:4103":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:10788:18794":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:2548:4110":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:1632:13233":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:40312:5106":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"3:0:478":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"11:1562:4700":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:7272:31544":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:9607:3151":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:2788:113":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:6041:18626":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:4208:5380":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:1697:13240":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:14145:3947":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:5609:2865":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"11:344:32381":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:7616:16076":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:40874:5125":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"9:426:17613":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:7856:5434":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:12496:3535":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:10278:3201":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:10561:3234":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:7284:5140":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:21311:6253":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:14282:3999":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:43515:5176":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:2881:4124":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:12214:11399":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:44611:178":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:12005:5008":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:44628:5225":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:2498:6063":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:22266:5045":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:1710:13241":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:14522:4063":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:6792:4387":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:2596:4112":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"9:177:17679":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:42703:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:2722:4117":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:44001:11414":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:10301:109":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:5028:5389":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:5802:2858":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:574:12336":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:2450:4106":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:6222:16622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:8794:18687":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:40495:4977":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:11617:3360":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:21441:6063":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:11311:2512":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:7371:17387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:4449:15839":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:1596:13231":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:4157:6137":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:5816:4211":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:23500:244":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"11:2074:4690":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:1429:154":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:8970:25322":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:4543:15850":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:40048:5087":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:10724:5014":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"18:531:2956":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:3223:5369":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:9852:18706":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:13868:3875":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:9459:2879":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:10948:25569":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:11272:3329":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:21397:6244":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:12189:11402":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:149:2749":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:9143:5536":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:8265:6139":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:40505:5120":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:1761:2514":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:10397:3210":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:2245:31182":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:9102:3003":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:8154:4579":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:4434:15837":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:3519:2783":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:11332:5418":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:5730:5404":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:11582:28078":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:3326:2302":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:6401:4128":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:5052:15904":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:40353:5111":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:10269:6063":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:119:12006":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"11:2394:2802":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:10227:6200":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:20959:28787":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:12983:3624":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:41932:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:4724:15867":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"9:357:17626":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:7067:4421":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:41634:4996":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:25902:275":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:40859:5124":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:4808:15875":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:8211:5487":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:22342:28524":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:14090:3933":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:30287:1877":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:4473:15841":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:11111:3311":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:7694:4144":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"9:393:17612":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"11:759:4681":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:3915:4158":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:7745:5073":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:7633:16078":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:6827:2814":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:14269:3993":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:43395:5165":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:41740:5140":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:483:12324":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:9078:242":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:3274:28887":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:22415:5064":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:1895:5360":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:536:4082":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:40100:5091":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:2568:2852":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:4446:6140":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:11687:18698":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:11815:3380":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:9614:116":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"5:3173:4678":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:10318:5790":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:48126:5340":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:2541:160":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:7533:163":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:20989:28893":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:46324:5259":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:4955:15893":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:6123:2848":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:12194:4999":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:10279:247":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:4939:1069":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:6376:18627":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:11514:5378":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:8364:6176":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:6837:17009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"11:2467:28219":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:40213:6032":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:12024:800":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:2670:4818":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"6:4480:15842":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:9521:3149":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:5152:15915":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:39378:2293":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:5992:16582":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:3147:25089":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:5117:15910":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:6691:17002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:39417:5081":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:6335:6335":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:7862:4532":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:7692:5972":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:11975:26124":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:1184:3022":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:40404:4967":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:5574:4127":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"18:609:2970":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:12252:3476":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:41592:5379":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:2964:31028":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:2928:234":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:6079:16587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:11023:3301":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:44348:11716":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:7910:4786":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:14316:4011":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:7884:18635":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:4578:15854":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:11473:3106":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:47930:5328":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:41851:4697":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:10596:5010":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:12750:3572":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:12154:3453":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:0:316":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:5138:2797":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:4401:15835":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:41706:171":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:2544:141":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:3240:4704":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:39604:23030":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:4908:15888":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:2284:17736":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:5712:4197":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:40166:104":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:5859:16571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:555:12333":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:22363:28531":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:8050:4569":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:6425:4321":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:123:12007":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:8216:6102":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"5:1505:4680":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:922:4680":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:44336:11712":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:46980:5287":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:7240:4803":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:6687:4361":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:9762:32462":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"18:0:2105":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:7708:4145":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:7504:3019":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:4941:6172":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:12685:3564":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:2948:2289":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:3255:2296":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:43900:5193":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:4136:6135":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"8:0:2096":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:5419:3139":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:501:12327":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:7869:135":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:9564:3150":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:3463:2332":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:8294:133":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:8899:6215":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:22181:5043":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:6813:17007":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:41556:28511":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:10447:3218":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:897:2783":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:3971:6113":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:22855:198":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:11448:18696":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:11453:5376":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"11:2260:4690":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:11359:27981":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:11174:5412":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:7574:2877":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:4557:4165":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:40062:5088":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:4755:15869":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:6742:4374":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:8167:4582":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:12830:3581":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:9574:32466":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:5955:16536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:47939:5329":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"14:165:17697":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:12237:3470":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:1570:13228":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:6100:16589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:7622:16077":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:4710:15866":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:13215:3663":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:13611:3825":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:42920:5152":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:5760:18624":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:3332:2802":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:8915:6217":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"5:3737:4787":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:7054:4418":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:11573:3357":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:6189:4271":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:4352:2822":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:12911:3616":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:8287:5494":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"11:2473:32380":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:3065:3042":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:3712:5377":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:918:4679":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:3424:5374":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:45856:5237":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:14514:4060":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:7692:17575":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:41971:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"11:1846:2426":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"11:389:2757":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:2832:4122":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"11:1842:4678":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:6261:4305":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"14:215:4674":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:13851:3870":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:2209:3030":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:3709:5376":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"11:2487:32372":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:44537:227":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:5363:4184":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:3488:6081":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:2850:2273":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:39312:223":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:11235:3327":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:5123:15911":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:21573:6254":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:7718:5427":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:5798:4206":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:11589:5421":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:2880:2278":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:8205:18636":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:10056:5358":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:21900:28791":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:10698:3254":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:3472:28155":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:5612:4132":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:926:4683":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:2463:5779":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:4556:15852":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:21364:6249":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"5:7453:4809":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:10962:3298":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:8115:4575":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:10515:5369":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:11991:3422":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"18:491:2951":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:8781:206":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:7657:16082":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:4168:4952":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:4196:2789":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:2931:2285":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:43667:5184":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:10059:3180":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:44052:5203":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:1639:13234":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:45755:5233":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:12888:3607":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:42657:69":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:6169:16595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:12531:3539":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:4506:15845":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:8125:5477":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:7643:2374":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"13:226:32436":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:42949:5157":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:21178:6252":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"17:13792:3858":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:7078:11610":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"5:1475:4682":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:6114:16591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:6226:2865":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:13739:3846":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:2884:2276":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:416:182":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:10075:5540":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:0:534":{"crate_id":2,"path":["core"],"kind":"module"},"5:7466:4812":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:40845:4982":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:8829:4678":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:39237:2292":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"18:755:3002":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:13723:3843":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:5757:5405":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:4841:15879":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:43721:5013":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:5423:109":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:2367:209":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:12554:3542":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:1275:4692":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:6573:5786":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:22317:5051":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:48034:5336":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:10588:3236":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"18:481:2950":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:7474:4497":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:853:4697":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:7554:4142":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:8148:6062":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:44038:5200":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:8305:5496":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:44368:11714":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:4745:15868":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:11970:5027":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:42127:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:6047:16584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:39252:221":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:5088:4181":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:5435:4185":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:3289:2301":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:588:12338":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:495:12326":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:9027:25551":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:6753:4375":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:7707:5973":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:3814:5378":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:4901:856":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:2161:637":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:3410:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:30321:2258":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"11:2479:32378":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:5017:4179":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:12033:1219":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:2214:134":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:47874:5326":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:9013:5533":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:534:2366":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:7529:142":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:10265:3200":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"9:330:17666":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:569:12335":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:9086:3139":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:1514:13222":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:7102:18631":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:35:2759":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"11:423:32384":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:9896:18707":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:6485:4129":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:5140:15913":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:5791:259":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:10747:5432":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:10933:5397":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:48064:5338":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:483:2850":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:2133:2361":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:12598:3550":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:12032:1672":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:4680:6140":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"5:1778:2802":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"14:40:3408":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:7597:32452":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:4914:15889":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:4395:2789":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:4949:4177":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:11201:3317":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:4566:15853":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"15:0:2102":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:2504:4108":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:12007:404":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"11:785:2783":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:1591:13230":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"18:681:2984":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:12184:3457":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:4015:6115":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:7829:3086":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"11:817:4698":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:3214:4701":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:4628:15860":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:10186:3192":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:8821:5518":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:1642:2255":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:5392:5395":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:4830:15878":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:629:4779":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:11951:3411":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:14033:3917":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:45723:5232":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:2793:255":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:2855:2270":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:46375:5260":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:2692:31091":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:7523:4509":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:6961:17017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:2909:2280":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:7323:2426":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:11710:3333":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:5130:15912":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:5867:16572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:4428:15836":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:8331:5383":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:10197:3194":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:43433:5170":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:14110:3939":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:10631:5011":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:5085:15907":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:932:5985":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:4860:4957":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:8769:4999":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:4045:106":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:3647:6104":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:6499:4146":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"5:261:2763":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:4854:15881":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:9790:32464":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:30343:69":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:207:2761":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"9:52:17629":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:4527:4164":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:4496:15844":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"11:1855:2802":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:22723:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:8514:5384":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"11:1635:1916":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:4068:11375":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:8524:4678":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:5673:4131":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:8837:5520":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:542:12331":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:1376:97":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:5105:211":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:12208:3459":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:12043:3433":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:880:2771":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:45655:5229":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:46156:5253":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:45701:5231":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:1259:4424":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:7985:5987":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:44340:11715":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:5861:2783":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:14536:4066":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:6279:4308":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:1672:1159":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:1931:706":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"0:0:1979":{"crate_id":0,"path":["scopeguard"],"kind":"module"},"16:3461:4152":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:10214:3197":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:10752:5016":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:21791:6251":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"6:5104:15908":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:62:11952":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:6587:2870":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"5:7479:2798":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"10:44:4710":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:2744:4118":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:9994:2834":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:6700:17003":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:475:12323":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:6968:18630":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:4921:4176":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:7515:5568":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:22987:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:6171:214":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:6081:4968":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:3802:2802":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:7660:4516":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"0:34:1900":{"crate_id":0,"path":["scopeguard","guard"],"kind":"function"},"1:646:5969":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:3073:2290":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:434:3017":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:1590:4704":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:2845:2268":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:4021:4949":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:5049:4180":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:4462:4162":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:3671:2763":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:5146:15914":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:40171:5099":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:2178:3027":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:49950:6261":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"0:71:1891":{"crate_id":0,"path":["scopeguard","OnUnwind"],"kind":"enum"},"17:14324:4012":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:12698:3565":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:7619:2384":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:10737:25778":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"6:1913:13407":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:10410:3211":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:7638:2372":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:863:2426":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"18:652:2952":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:2526:4109":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:11586:3359":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:12014:1478":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:12415:116":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:2173:2498":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:13085:3638":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:7302:4804":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:10453:2880":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:12437:3521":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"18:727:2996":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:4128:6134":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"11:101:32379":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:7613:4514":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"11:298:5775":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:40256:5101":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"11:1869:4702":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:1076:4696":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:8455:5508":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:2359:4102":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:7355:26130":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:22408:28680":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"18:590:2963":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"14:202:11416":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:22379:28508":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:45611:5227":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:6520:6211":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:2943:2288":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:7002:2873":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:11306:3333":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:40020:5084":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:22012:6247":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:2258:101":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:40372:4963":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:44117:5206":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:12810:3580":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"14:7:4669":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:43881:5191":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:4989:15896":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:3225:5370":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:12225:3467":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:22954:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:6139:2864":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:6101:2789":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"18:515:2949":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:10924:4762":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:6788:6242":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:6984:2818":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:12086:3438":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"11:427:32385":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:2472:4107":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:43821:5188":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:5616:5398":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:11661:3362":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:400:3014":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"11:2461:32376":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:10603:3238":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:1521:13223":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:12280:3486":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:7492:11616":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:5548:6197":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:9372:3140":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:11135:5517":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:6915:4137":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:6963:11618":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:2428:4105":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:5285:125":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:47666:5322":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:7668:16083":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:9985:3176":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:5995:4084":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:22888:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:40868:4984":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:10507:3230":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:5921:16577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:46056:5250":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:9629:214":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:14156:3948":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:2914:2281":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:2866:2272":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:6346:4312":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:9650:3152":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:276:2306":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:40413:5116":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"14:0:2101":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:9172:3005":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:12021:801":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:4614:22696":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:44428:11729":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:12015:1510":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:44547:235":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:43525:5177":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:47985:5333":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:14434:4041":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:12671:3266":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:13228:3664":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:43587:5021":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:45908:5239":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:9207:3006":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:10092:2843":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:20946:2962":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:1576:13229":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:3023:1878":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:784:2766":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:30919:2962":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:41773:5142":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:7544:4510":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:3378:2789":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:13162:3657":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:558:2368":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:7741:5430":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:4666:15862":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"7:0:1662":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:7828:4528":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:11735:5019":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:10036:3179":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:9972:3174":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:41723:4697":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:4719:6126":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:43925:4948":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:41792:213":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:10135:5541":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:14024:3914":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:46422:5261":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:6268:32455":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:9328:3009":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:8713:18685":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:12098:3441":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:44555:215":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:7503:4140":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"15:288:17716":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:44249:5032":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:7308:2859":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:12945:3619":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"0:18:1897":{"crate_id":0,"path":["scopeguard","defer"],"kind":"macro"},"17:11295:3331":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:1546:13226":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:4641:4168":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:11284:5413":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:10077:5539":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"1:9088:159":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:9051:18672":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:9070:3138":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:12022:798":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:40133:11466":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:2618:4113":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:2321:4094":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:2972:31027":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:9838:155":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:507:12328":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:4745:4170":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:11155:11728":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:3949:2789":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:4968:15894":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"12:0:2100":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:12149:6191":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:43593:5182":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:3232:4093":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:7286:2426":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"13:0:2094":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:5634:4187":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:3144:98":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:14420:4039":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:11886:3393":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:40126:5094":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:39410:2295":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:7582:4511":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:3034:1952":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:13632:3830":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:4211:1956":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:22290:5050":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"14:160:4669":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:5866:4219":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:13838:3864":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"7:78:17599":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:913:4698":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:43739:5014":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:4878:15884":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:9416:2352":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:8199:5190":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"18:707:2989":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:3038:136":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"5:3596:4697":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:10512:5367":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:43496:5174":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:9627:2336":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:13244:3666":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"11:2303:4707":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:10427:4678":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:13135:3655":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"11:1092:4694":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:8659:5975":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:4436:2241":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"11:693:2426":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:44391:127":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:4584:15855":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:8192:5006":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:7610:16075":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:12859:5037":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:13758:3847":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:2939:2287":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"4:0:2095":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:6817:2812":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:41655:201":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:9823:18705":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:3797:4155":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:4612:22694":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:11430:2887":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:8870:5521":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:41800:234":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:1986:204":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"18:96:22650":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:21004:28890":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:7041:4415":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:3654:2426":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:47478:5320":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:9625:2335":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:22:734":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:41893:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:40465:4975":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:2629:133":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:8594:18673":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:5033:15902":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:47959:5331":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:11596:5421":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"0:10:1880":{"crate_id":0,"path":["scopeguard","Strategy"],"kind":"trait"},"17:13989:3903":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:6086:16588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:13028:150":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:8169:5106":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:13575:3796":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:4546:6158":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:1924:6028":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:6721:18629":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:1674:13237":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:3206:4703":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:32111:5073":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:580:12337":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:6226:4288":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:12765:3575":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:13685:3836":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:3219:31543":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:11991:25565":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:4602:6113":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:897:4678":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:6468:2783":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:3262:5371":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:10646:3244":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:13693:3837":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:4516:15846":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:10742:28115":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:2150:18752":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"11:1862:4701":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:1635:636":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:43767:5186":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:2366:2488":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:44144:5031":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:7624:2304":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"19:0:1100":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:2892:2277":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:11347:5420":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:2582:2838":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:30072:6105":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:840:4678":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:8134:4578":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:4677:6167":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:42166:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"18:80:22649":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:8793:5516":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:11351:3338":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:39334:222":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:2574:4111":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:40119:5093":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:14056:3925":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:43891:5192":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:43575:5181":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:20987:28895":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"11:822:4683":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:5905:4222":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:4236:4678":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:43152:5163":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:1537:13225":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"11:483:152":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:44229:5216":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:6583:4337":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:4800:15874":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:8807:5517":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:11290:5564":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:13906:3884":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:6136:32267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:12959:3621":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:43167:28570":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:40199:5100":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:7725:6017":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"14:221:4676":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:2361:202":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:4144:6136":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:5969:16579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:622:5347":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:4455:15681":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:5545:6196":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:10575:3235":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"11:1127:4695":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:8952:5523":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:11173:18818":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:1573:4701":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:6621:241":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:11121:5516":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:2838:110":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:6265:28677":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:40325:5107":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:5928:16578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:4364:15832":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"9:450:17611":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:39292:220":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:14126:3942":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:8957:111":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:21325:2497":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:8432:5157":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:12029:1615":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:10519:5008":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:47970:5332":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:42285:5001":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"11:666:4678":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:40303:5105":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"18:614:32468":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:8953:18692":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:46300:5258":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"18:538:2959":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:4497:4163":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:22429:5065":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:1691:13239":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:10126:3186":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:41579:5138":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:10628:3242":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:3249:143":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:15:2211":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:4529:15848":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:0:2103":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:1067:4692":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:42088:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:7556:17547":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:7645:16080":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:7248:2998":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:3913:6108":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:44364:11713":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:9998:3129":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"0:19:1902":{"crate_id":0,"path":["scopeguard","defer_on_success"],"kind":"macro"},"17:11137:3313":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:40893:4985":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:3180:4702":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:10097:3183":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:1781:5357":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:7722:4135":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:2551:265":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"18:699:2987":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:13274:3333":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:10916:3294":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:8260:6138":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:3481:6061":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:943:4686":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:45963:5242":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:10661:3248":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:14355:4020":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:2895:2855":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:12934:3617":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:6228:15747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:46634:5280":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:10616:3239":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:40032:28512":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:4279:229":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:41615:4994":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:7027:28191":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"11:796:2802":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:9867:3162":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:6352:4313":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:10476:5006":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:4738:6107":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:44206:5208":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:44356:11718":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:4166:2789":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:11407:18695":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"3:234:234":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:2538:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:7679:16084":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:12012:1120":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:10685:3252":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:30891:203":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:42712:69":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"5:1304:4696":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:14001:3909":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:9830:151":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:6666:13179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:11872:3392":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:4428:2791":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:4:1083":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:12513:3538":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:10023:3153":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:5743:4202":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:14499:4059":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:1528:13224":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:11030:2884":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:12016:1597":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:42928:5153":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:7542:2305":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:12025:796":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:3441:3033":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:12305:3490":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:11192:24926":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:5358:5390":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:43561:5178":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:9631:2337":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:5044:15903":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"11:2494:4805":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:8239:4476":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:4535:15849":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:4862:4174":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:11535:3355":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:2962:31253":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:12028:1614":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:6407:5408":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:6764:13349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:7980:5438":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:40659:4980":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:4775:2856":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:42675:114":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"5:5976:2797":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:7232:2426":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:4360:5382":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"11:2238:4424":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"16:2644:4114":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:13259:3670":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"7:31:17592":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:11761:3373":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:5009:15899":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:3234:2294":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:8686:18684":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:11393:133":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:42752:75":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:46476:5263":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:43934:5090":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:14308:4008":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:7990:6092":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:4106:27974":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"11:2286:4692":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:11124:3312":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:7839:5432":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:6263:16624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:5004:15898":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:6943:17016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:2933:17763":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:7590:2806":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:4883:6165":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:2255:100":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:21566:6063":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:2535:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:5602:228":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:4764:15870":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:4774:4171":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:1413:4678":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:13101:3642":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:5121:4182":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"18:507:2952":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:45945:5241":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:7006:4411":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:40107:11465":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:12019:693":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:10980:3152":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:4027:6118":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:8825:18688":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:6868:17010":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:10060:2837":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:7988:5990":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:3907:6109":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:9780:3155":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:9137:3004":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:41715:4678":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:1682:13238":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:21234:6257":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"5:6915:272":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:3764:4154":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:10558:5009":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:3264:5372":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"18:564:2961":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:32129:2343":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:43483:5173":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:11894:5022":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:12876:3605":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:9633:2338":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:12785:162":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:11490:3353":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:42246:95":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:2225:31549":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:43603:3009":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:7571:126":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:12008:1002":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:4616:15859":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:12007:3426":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:7651:16081":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:10240:3172":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:4698:15865":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"10:0:2098":{"crate_id":10,"path":["adler"],"kind":"module"},"16:4417:4161":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:10451:4697":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:40005:4948":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:4647:15861":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:11013:2882":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:5588:4130":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:1013:2763":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:1501:13220":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:7639:16079":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:44216:5212":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"11:1072:32389":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:13554:3788":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:30521:28503":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:5648:4191":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:4922:15890":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:4892:6166":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:9089:89":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:1516:218":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:2776:245":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:43505:5175":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:1075:3020":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:22756:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:44372:11728":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:4884:15885":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:7262:2775":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:40635:5123":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:5829:16507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:9447:134":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:11317:5417":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:4034:2763":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:10820:25560":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:21888:5039":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:21140:6063":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"16:3049:17765":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"5:7490:251":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:7504:4813":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"5:6514:2763":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:7736:4518":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"9:507:4765":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:5939:4078":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:3565:3034":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:5372:11390":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:44195:11415":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:45926:5240":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:11226:3326":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:8181:4147":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:43839:5189":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:43423:5169":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:678:258":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:40645:4979":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:4721:6127":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:7331:2426":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:6696:4362":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"18:599:32467":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:40072:5089":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:5015:15900":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:11910:3407":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:13778:3855":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:3830:4156":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:1983:205":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:41731:2426":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:4822:29981":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:2798:1875":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"9:0:2097":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:4076:4697":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:8136:5375":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:2786:253":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:5982:16581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:8072:4570":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:13667:3831":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:1557:4678":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:13876:3878":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:12009:453":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:9921:3167":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:5661:4196":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:7015:4414":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:6873:2872":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:42730:133":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"5:4988:2789":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:12465:3528":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"11:860:4688":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:7768:4133":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:9878:5003":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:44360:11719":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:11980:5974":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:8661:1958":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:6059:16585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:10547:3233":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:30415:28516":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:12970:3622":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:43470:5103":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:3350:5125":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:9617:32459":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:13113:3644":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:43171:5004":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:48087:5339":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:1817:5358":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"5:3570:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"11:2058:4424":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:12576:3549":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:39151:2303":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:10949:3297":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:13973:3901":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:44181:5207":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:9165:26417":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:43617:5006":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:4351:15831":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:11381:3343":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:6913:17013":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:4137:4951":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:4610:15858":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"18:660:2977":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"0:40:1906":{"crate_id":0,"path":["scopeguard","guard_on_unwind"],"kind":"function"},"17:13055:3635":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:1752:28683":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:47728:5323":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:42647:28674":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:3261:2298":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:10112:3184":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:6781:13347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:13286:3673":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:9350:3013":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:14221:3992":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:47130:5288":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:5634:2800":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:9073:184":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:9254:2583":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"11:1850:2783":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:13890:3881":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:2547:266":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:4998:15897":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:4416:2344":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:9005:5531":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:13826:3861":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:5948:2865":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:41859:2426":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:47336:5319":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:12203:2989":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:8205:5485":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:596:12339":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:43413:5168":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:4986:4178":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:5384:18622":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:2223:6045":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:4288:4954":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:42421:2335":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:5562:2789":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:11270:5018":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"11:868:4689":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:2171:2497":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:11749:11403":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:41409:4991":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:1484:4698":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:8253:5379":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:14134:3943":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:7388:17388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:46870:5284":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:4947:15892":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:0:1502":{"crate_id":1,"path":["std"],"kind":"module"},"1:12026:1616":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:10430:3213":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:4549:15851":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:5372:5394":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"5:824:2769":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:43685:5185":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:0:880":{"crate_id":6,"path":["libc"],"kind":"module"},"1:10920:5430":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:8963:2365":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:5830:4212":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:40276:5102":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:44069:5204":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:4889:4175":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:10811:25552":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:22250:28669":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:42414:2333":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:3183:5367":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"18:113:22651":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:21547:6245":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:6017:18625":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:2670:4115":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:10366:3207":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:8195:4584":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:8775:5515":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:47790:5324":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:4860:15882":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:11788:3374":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:46916:5285":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:4468:6141":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:6898:17012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:7985:5439":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:13710:3838":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"18:766:22661":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:12452:3526":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:3406:5488":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:44653:5226":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:9271:29048":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:4717:6124":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:3957:6111":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:13966:3900":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:47996:5334":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:11048:3303":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:6960:4400":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:10518:5371":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:6798:17005":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:5474:2789":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:22441:6106":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:7391:18632":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"11:357:2755":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:2766:4119":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:42967:5162":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:9912:3165":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:32075:6198":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:11337:18819":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:6259:4974":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:5964:228":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:6960:25588":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:2930:133":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:8530:5513":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:11954:5026":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:13676:3835":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"18:719:2993":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:8895:18690":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:7568:4143":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:6804:17006":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:12807:29611":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:45825:5236":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:7555:2875":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"9:237:5157":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:46232:5255":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"11:1541:4699":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"18:624:32470":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"11:2334:4697":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"16:6600:18628":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:256:3011":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:4640:11459":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:2897:2282":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:2644:5366":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:21142:6250":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:6879:4393":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:8848:18689":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:8993:5529":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:3965:6112":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:6798:2800":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"14:187:17704":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:40084:5090":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:7680:176":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:22789:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:10966:5518":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:11570:5565":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:4977:15895":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:3315:4151":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:42207:88":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:638:5348":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"18:736:22660":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:21278:6258":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"5:2037:4786":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:22234:5044":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"18:690:2986":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:21381:6063":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:13981:3902":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:14401:4034":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:7492:4505":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:11261:3328":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:0:2104":{"crate_id":17,"path":["object"],"kind":"module"},"2:47950:5330":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"11:2368:2783":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:3171:219":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:10340:3206":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:10478:3226":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:3032:4148":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:3232:3031":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:9701:3153":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:41843:4678":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:12023:799":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:46556:5264":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:8926:18691":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:5997:5783":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:4362:2343":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:2501:5364":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"11:2165:3218":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"5:6959:2815":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:12111:3443":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:45886:5238":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:7846:5433":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:10726:3257":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"0:68:1888":{"crate_id":0,"path":["scopeguard","Always"],"kind":"enum"},"15:327:17721":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:13024:3629":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:9083:243":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:2368:6048":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:11507:18697":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:1525:4784":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:4461:15840":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:40901:4987":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:5328:2763":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:12031:850":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:11327:3336":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:2788:4120":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:1604:13232":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:8116:2998":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:42428:2336":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:9945:3172":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:12990:2848":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:20974:28787":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:12024:3428":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:6156:4266":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:7437:28533":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4824:15877":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:1058:4690":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:11845:3384":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:40343:5109":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:1290:4690":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:5111:15909":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"16:2969:17764":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:7406:105":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:2384:6053":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:13451:3702":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:6204:4273":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:3077:2291":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:4407:2823":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:12013:342":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:46108:5252":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:11074:3308":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:7992:11614":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:358:2382":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:12997:3625":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:7462:4496":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:39190:2300":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:23053:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"11:1051:17691":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:12136:3445":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:12473:3530":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:2783:2231":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:6893:4395":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:9276:29643":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:7390:5984":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:14448:4048":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:12790:3577":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:12373:3492":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:5941:16535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:12772:146":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:5680:4966":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:1718:13242":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:10227:3198":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:9107:5412":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:7294:218":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:8029:29046":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:1703:6131":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:4595:15856":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:10771:3261":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:14469:4054":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:2787:252":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:10383:3209":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:6819:17008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:40011:5083":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:1585:4703":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:12062:3434":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:13922:3888":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:10718:5550":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:11024:2883":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:3655:3047":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:13546:3785":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:2394:6058":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"5:7574:2802":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:12979:111":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:10494:3228":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:9488:32465":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:44023:5195":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:1428:4697":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:8541:5514":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:11151:3314":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:2172:31191":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:7886:124":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:2406:4104":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:22128:5042":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:14118:3940":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:14378:4033":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:4893:15886":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:45631:5228":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:10710:5013":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:43404:5166":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:780:99":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:364:2383":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"11:680:4697":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:1496:13219":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:8845:2426":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:7618:6063":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:3307:6089":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:3150:25100":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:6120:16592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:40883:2832":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:8472:6190":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:11547:3356":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"11:324:32374":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:9242:3007":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"11:1876:4703":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:2876:2274":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:4835:4173":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:11244:3360":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:40246:2824":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:8097:4573":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:6844:4389":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:5982:4235":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:41472:28662":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:4523:15847":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:8179:5123":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:8765:18686":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:7318:4455":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:42407:2334":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}